{
  "cross_references": {
    "https://developer.x-plane.com/sdk/XPLMGraphics/": [],
    "https://developer.x-plane.com/sdk/XPLMUtilities/": []
  },
  "metadata": {
    "processing_timestamp": "2025-06-24T22:00:23.606665+00:00",
    "processor_version": "1.0.0",
    "source_file": "scraped_content.json",
    "statistics": {
      "categories": {
        "XPLM_Graphics": 1,
        "XPLM_Utilities": 1
      },
      "failed_processing": 0,
      "successful_processing": 2,
      "total_pages": 2
    }
  },
  "processed_content": {
    "https://developer.x-plane.com/sdk/XPLMGraphics/": {
      "api_signatures": [
        {
          "description": "XPLMSetGraphicsStatechanges OpenGL’s fixed function pipeline state. You are not responsible for restoring any state that is accessed viaXPLMSetGraphicsState, but you are responsible for not accessing this state directly.",
          "name": "XPLMSetGraphicsState",
          "parameters": [
            {
              "full_declaration": "int                  inEnableFog",
              "name": "inEnableFog",
              "type": "int"
            },
            {
              "full_declaration": "int                  inNumberTexUnits",
              "name": "inNumberTexUnits",
              "type": "int"
            },
            {
              "full_declaration": "int                  inEnableLighting",
              "name": "inEnableLighting",
              "type": "int"
            },
            {
              "full_declaration": "int                  inEnableAlphaTesting",
              "name": "inEnableAlphaTesting",
              "type": "int"
            },
            {
              "full_declaration": "int                  inEnableAlphaBlending",
              "name": "inEnableAlphaBlending",
              "type": "int"
            },
            {
              "full_declaration": "int                  inEnableDepthTesting",
              "name": "inEnableDepthTesting",
              "type": "int"
            },
            {
              "full_declaration": "int                  inEnableDepthWriting",
              "name": "inEnableDepthWriting",
              "type": "int"
            }
          ],
          "signature": "XPLM_API voidXPLMSetGraphicsState(\n                         int                  inEnableFog,\n                         int                  inNumberTexUnits,\n                         int                  inEnableLighting,\n                         int                  inEnableAlphaTesting,\n                         int                  inEnableAlphaBlending,\n                         int                  inEnableDepthTesting,\n                         int                  inEnableDepthWriting);"
        },
        {
          "description": "XPLMBindTexture2dchanges what texture is bound to the 2d texturing target. This routine caches the current 2d texture across all texturing units in the sim and plug-ins, preventing extraneous binding. For example, consider several plug-ins running in series; if they all use the ‘general interface’ bitmap to do UI, calling this function will skip the rebinding of the general interface texture on all but the first plug-in, which can provide better frame rates on some graphics cards.",
          "name": "XPLMBindTexture2d",
          "parameters": [
            {
              "full_declaration": "int                  inTextureNum",
              "name": "inTextureNum",
              "type": "int"
            },
            {
              "full_declaration": "int                  inTextureUnit",
              "name": "inTextureUnit",
              "type": "int"
            }
          ],
          "signature": "XPLM_API voidXPLMBindTexture2d(\n                         int                  inTextureNum,\n                         int                  inTextureUnit);"
        },
        {
          "description": "Use this routine instead of glGenTextures to generate new texture object IDs. This routine historically ensured that plugins don’t use texure IDs that X-Plane is reserving for its own use.",
          "name": "XPLMGenerateTextureNumbers",
          "parameters": [
            {
              "full_declaration": "int *                outTextureIDs",
              "name": "outTextureIDs",
              "type": "int *"
            },
            {
              "full_declaration": "int                  inCount",
              "name": "inCount",
              "type": "int"
            }
          ],
          "signature": "XPLM_API voidXPLMGenerateTextureNumbers(\n                         int *                outTextureIDs,\n                         int                  inCount);"
        },
        {
          "deprecated": true,
          "description": "XPLMGetTexturereturns the OpenGL texture ID of an X-Plane texture based on a generic identifying code. For example, you can get the texture for X-Plane’s UI bitmaps.",
          "name": "XPLMGetTexture",
          "parameters": [],
          "signature": "XPLM_API intXPLMGetTexture(XPLMTextureIDinTexture);"
        },
        {
          "description": "This routine translates coordinates from latitude, longitude, and altitude to local scene coordinates. Latitude and longitude are in decimal degrees, and altitude is in meters MSL (mean sea level). The XYZ coordinates are in meters in the local OpenGL coordinate system.",
          "name": "XPLMWorldToLocal",
          "parameters": [
            {
              "full_declaration": "double               inLatitude",
              "name": "inLatitude",
              "type": "double"
            },
            {
              "full_declaration": "double               inLongitude",
              "name": "inLongitude",
              "type": "double"
            },
            {
              "full_declaration": "double               inAltitude",
              "name": "inAltitude",
              "type": "double"
            },
            {
              "full_declaration": "double *             outX",
              "name": "outX",
              "type": "double *"
            },
            {
              "full_declaration": "double *             outY",
              "name": "outY",
              "type": "double *"
            },
            {
              "full_declaration": "double *             outZ",
              "name": "outZ",
              "type": "double *"
            }
          ],
          "signature": "XPLM_API voidXPLMWorldToLocal(\n                         double               inLatitude,\n                         double               inLongitude,\n                         double               inAltitude,\n                         double *             outX,\n                         double *             outY,\n                         double *             outZ);"
        },
        {
          "description": "This routine translates a local coordinate triplet back into latitude, longitude, and altitude. Latitude and longitude are in decimal degrees, and altitude is in meters MSL (mean sea level). The XYZ coordinates are in meters in the local OpenGL coordinate system.",
          "name": "XPLMLocalToWorld",
          "parameters": [
            {
              "full_declaration": "double               inX",
              "name": "inX",
              "type": "double"
            },
            {
              "full_declaration": "double               inY",
              "name": "inY",
              "type": "double"
            },
            {
              "full_declaration": "double               inZ",
              "name": "inZ",
              "type": "double"
            },
            {
              "full_declaration": "double *             outLatitude",
              "name": "outLatitude",
              "type": "double *"
            },
            {
              "full_declaration": "double *             outLongitude",
              "name": "outLongitude",
              "type": "double *"
            },
            {
              "full_declaration": "double *             outAltitude",
              "name": "outAltitude",
              "type": "double *"
            }
          ],
          "signature": "XPLM_API voidXPLMLocalToWorld(\n                         double               inX,\n                         double               inY,\n                         double               inZ,\n                         double *             outLatitude,\n                         double *             outLongitude,\n                         double *             outAltitude);"
        },
        {
          "description": "This routine draws a translucent dark box, partially obscuring parts of the screen but making text easy to read. This is the same graphics primitive used by X-Plane to show text files.",
          "name": "XPLMDrawTranslucentDarkBox",
          "parameters": [
            {
              "full_declaration": "int                  inLeft",
              "name": "inLeft",
              "type": "int"
            },
            {
              "full_declaration": "int                  inTop",
              "name": "inTop",
              "type": "int"
            },
            {
              "full_declaration": "int                  inRight",
              "name": "inRight",
              "type": "int"
            },
            {
              "full_declaration": "int                  inBottom",
              "name": "inBottom",
              "type": "int"
            }
          ],
          "signature": "XPLM_API voidXPLMDrawTranslucentDarkBox(\n                         int                  inLeft,\n                         int                  inTop,\n                         int                  inRight,\n                         int                  inBottom);"
        },
        {
          "description": "This routine draws a NULL terminated string in a given font. Pass in the lower left pixel that the character is to be drawn onto. Also pass the character and font ID. This function returns the x offset plus the width of all drawn characters. The color to draw in is specified as a pointer to an array of three floating point colors, representing RGB intensities from 0.0 to 1.0.",
          "name": "XPLMDrawString",
          "parameters": [
            {
              "full_declaration": "float *              inColorRGB",
              "name": "inColorRGB",
              "type": "float *"
            },
            {
              "full_declaration": "int                  inXOffset",
              "name": "inXOffset",
              "type": "int"
            },
            {
              "full_declaration": "int                  inYOffset",
              "name": "inYOffset",
              "type": "int"
            },
            {
              "full_declaration": "const char *         inChar",
              "name": "inChar",
              "type": "const char *"
            },
            {
              "full_declaration": "int *                inWordWrapWidth",
              "name": "inWordWrapWidth",
              "type": "int *"
            }
          ],
          "signature": "XPLM_API voidXPLMDrawString(\n                         float *              inColorRGB,\n                         int                  inXOffset,\n                         int                  inYOffset,\n                         const char *         inChar,\n                         int *                inWordWrapWidth,    /* Can be NULL */XPLMFontIDinFontID);"
        },
        {
          "description": "This routine draws a number similar to the digit editing fields in PlaneMaker and data output display in X-Plane. Pass in a color, a position, a floating point value, and formatting info. Specify how many integer and how many decimal digits to show and whether to show a sign, as well as a character set. This routine returns the xOffset plus width of the string drawn.",
          "name": "XPLMDrawNumber",
          "parameters": [
            {
              "full_declaration": "float *              inColorRGB",
              "name": "inColorRGB",
              "type": "float *"
            },
            {
              "full_declaration": "int                  inXOffset",
              "name": "inXOffset",
              "type": "int"
            },
            {
              "full_declaration": "int                  inYOffset",
              "name": "inYOffset",
              "type": "int"
            },
            {
              "full_declaration": "double               inValue",
              "name": "inValue",
              "type": "double"
            },
            {
              "full_declaration": "int                  inDigits",
              "name": "inDigits",
              "type": "int"
            },
            {
              "full_declaration": "int                  inDecimals",
              "name": "inDecimals",
              "type": "int"
            },
            {
              "full_declaration": "int                  inShowSign",
              "name": "inShowSign",
              "type": "int"
            }
          ],
          "signature": "XPLM_API voidXPLMDrawNumber(\n                         float *              inColorRGB,\n                         int                  inXOffset,\n                         int                  inYOffset,\n                         double               inValue,\n                         int                  inDigits,\n                         int                  inDecimals,\n                         int                  inShowSign,XPLMFontIDinFontID);"
        },
        {
          "description": "This routine returns the width and height of a character in a given font. It also tells you if the font only supports numeric digits. Pass NULL if you don’t need a given field. Note that for a proportional font the width will be an arbitrary, hopefully average width.",
          "name": "XPLMGetFontDimensions",
          "parameters": [],
          "signature": "XPLM_API voidXPLMGetFontDimensions(XPLMFontIDinFontID,\n                         int *                outCharWidth,    /* Can be NULL */\n                         int *                outCharHeight,    /* Can be NULL */\n                         int *                outDigitsOnly);    /* Can be NULL */"
        },
        {
          "description": "This routine returns the width in pixels of a string using a given font. The string is passed as a pointer plus length (and does not need to be null terminated); this is used to allow for measuring substrings. The return value is floating point; it is possible that future font drawing may allow for fractional pixels.",
          "name": "XPLMMeasureString",
          "parameters": [
            {
              "full_declaration": "const char *         inChar",
              "name": "inChar",
              "type": "const char *"
            },
            {
              "full_declaration": "int                  inNumChars",
              "name": "inNumChars",
              "type": "int"
            }
          ],
          "signature": "XPLM_API floatXPLMMeasureString(XPLMFontIDinFontID,\n                         const char *         inChar,\n                         int                  inNumChars);"
        },
        {
          "name": "XPLMTextureID",
          "type": "enum",
          "values": [
            {
              "description": "The bitmap that contains window outlines, button outlines, fonts, etc.",
              "name": "xplm_Tex_GeneralInterface",
              "value": "\"0\""
            },
            {
              "description": "The exterior paint for the user's aircraft (daytime).",
              "name": "xplm_Tex_AircraftPaint",
              "value": "\"1\""
            },
            {
              "description": "The exterior light map for the user's aircraft.",
              "name": "xplm_Tex_AircraftLiteMap",
              "value": "\"2\""
            }
          ]
        },
        {
          "name": "XPLMFontID",
          "type": "enum",
          "values": [
            {
              "description": "Mono-spaced font for user interface. Available in all versions of the SDK.",
              "name": "xplmFont_Basic",
              "value": "\"0\""
            },
            {
              "description": "Deprecated, do not use.",
              "name": "xplmFont_Menus",
              "value": "\"1\""
            },
            {
              "description": "Deprecated, do not use.",
              "name": "xplmFont_Metal",
              "value": "\"2\""
            },
            {
              "description": "Deprecated, do not use.",
              "name": "xplmFont_Led",
              "value": "\"3\""
            },
            {
              "description": "Deprecated, do not use.",
              "name": "xplmFont_LedWide",
              "value": "\"4\""
            },
            {
              "description": "Deprecated, do not use.",
              "name": "xplmFont_PanelHUD",
              "value": "\"5\""
            },
            {
              "description": "Deprecated, do not use.",
              "name": "xplmFont_PanelEFIS",
              "value": "\"6\""
            },
            {
              "description": "Deprecated, do not use.",
              "name": "xplmFont_PanelGPS",
              "value": "\"7\""
            },
            {
              "description": "Deprecated, do not use.",
              "name": "xplmFont_RadiosGA",
              "value": "\"8\""
            },
            {
              "description": "Deprecated, do not use.",
              "name": "xplmFont_RadiosBC",
              "value": "\"9\""
            },
            {
              "description": "Deprecated, do not use.",
              "name": "xplmFont_RadiosHM",
              "value": "\"10\""
            },
            {
              "description": "Deprecated, do not use.",
              "name": "xplmFont_RadiosGANarrow",
              "value": "\"11\""
            },
            {
              "description": "Deprecated, do not use.",
              "name": "xplmFont_RadiosBCNarrow",
              "value": "\"12\""
            },
            {
              "description": "Deprecated, do not use.",
              "name": "xplmFont_RadiosHMNarrow",
              "value": "\"13\""
            },
            {
              "description": "Deprecated, do not use.",
              "name": "xplmFont_Timer",
              "value": "\"14\""
            },
            {
              "description": "Deprecated, do not use.",
              "name": "xplmFont_FullRound",
              "value": "\"15\""
            },
            {
              "description": "Deprecated, do not use.",
              "name": "xplmFont_SmallRound",
              "value": "\"16\""
            },
            {
              "description": "Deprecated, do not use.",
              "name": "xplmFont_Menus_Localized",
              "value": "\"17\""
            },
            {
              "description": "Proportional UI font.",
              "name": "xplmFont_Proportional",
              "value": "\"18\""
            }
          ]
        }
      ],
      "category": {
        "category": "XPLM_Graphics",
        "module": "Xplm Graphics",
        "url": "https://developer.x-plane.com/sdk/XPLMGraphics/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"api\"><h1 class=\"sdk-api-title\" id=\"XPLMGraphics\"><a href=\"/sdk/XPLMGraphics/\">XPLMGraphics</a>API</h1><p>A few notes on coordinate systems:</p><p>X-Plane uses three kinds of coordinates. Global coordinates are specified as latitude, longitude and elevation. This coordinate system never changes but is not very precise.</p><p>OpenGL (or ‘local’) coordinates are cartesian and move with the aircraft. They offer more precision and are used for 3-d OpenGL drawing. The X axis is aligned east-west with positive X meaning east. The Y axis is aligned straight up and down at the point 0,0,0 (but since the Earth is round it is not truly straight up and down at other points). The Z axis is aligned north-south at 0, 0, 0 with positive Z pointing south (but since the Earth is round it isn’t exactly north-south as you move east or west of 0, 0, 0). One unit is one meter and the point 0,0,0 is on the surface of the Earth at sea level for some latitude and longitude picked by the sim such that the user’s aircraft is reasonably nearby.</p><p>2-d Panel coordinates are 2d, with the X axis horizontal and the Y axis vertical. The point 0,0 is the bottom left and 1024,768 is the upper right of the screen. This is true no matter what resolution the user’s monitor is in; when running in higher resolution, graphics will be scaled.</p><p>Use X-Plane’s routines to convert between global and local coordinates. Do not attempt to do this conversion yourself; the precise ‘roundness’ of X-Plane’s physics model may not match your own, and (to make things weirder) the user can potentially customize the physics of the current planet.</p><div class=\"component\"><h2 id=\"X-PLANE GRAPHICS\">X-PLANE GRAPHICS</h2><p>These routines allow you to use OpenGL with X-Plane.</p><div class=\"enum\"><h3 class=\"sdk-api-enum\" id=\"XPLMTextureID\"><a href=\"/sdk/XPLMTextureID/\">XPLMTextureID</a></h3><p>XPLM Texture IDs name well-known textures in the sim for you to use. This allows you to recycle textures from X-Plane, saving VRAM.</p><p><em>Warning</em>: do not use these enums. The only remaining use they have is to access the legacy compatibility v10 UI texture; if you need this, get it via the Widgets library.</p><p><div class=\"enumitem\"><table><thead><tr><th>Name</th><th>Value</th><th>Description</th></tr></thead><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_Tex_GeneralInterface\"><a href=\"/sdk/xplm_Tex_GeneralInterface/\">xplm_Tex_GeneralInterface</a></td><td>\"0\"</td><td>The bitmap that contains window outlines, button outlines, fonts, etc.</td></tr><tr class=\"enumitem XPLM_DEPRECATED\"><td class=\"sdk-api-enum-item\" id=\"xplm_Tex_AircraftPaint\"><a href=\"/sdk/xplm_Tex_AircraftPaint/\">xplm_Tex_AircraftPaint</a></td><td>\"1\"</td><td>The exterior paint for the user's aircraft (daytime).</td></tr><tr class=\"enumitem XPLM_DEPRECATED\"><td class=\"sdk-api-enum-item\" id=\"xplm_Tex_AircraftLiteMap\"><a href=\"/sdk/xplm_Tex_AircraftLiteMap/\">xplm_Tex_AircraftLiteMap</a></td><td>\"2\"</td><td>The exterior light map for the user's aircraft.</td></tr></table></div></p></div><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPLMSetGraphicsState\"><a href=\"/sdk/XPLMSetGraphicsState/\">XPLMSetGraphicsState</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API void       <a href=\"/sdk/XPLMSetGraphicsState/\">XPLMSetGraphicsState</a>(\n                         int                  inEnableFog,\n                         int                  inNumberTexUnits,\n                         int                  inEnableLighting,\n                         int                  inEnableAlphaTesting,\n                         int                  inEnableAlphaBlending,\n                         int                  inEnableDepthTesting,\n                         int                  inEnableDepthWriting);\n</code></pre><p><a href=\"/sdk/XPLMSetGraphicsState/\">XPLMSetGraphicsState</a>changes OpenGL’s fixed function pipeline state. You are not responsible for restoring any state that is accessed via<a href=\"/sdk/XPLMSetGraphicsState/\">XPLMSetGraphicsState</a>, but you are responsible for not accessing this state directly.</p><ul><li>inEnableFog - enables or disables fog, equivalent to: glEnable(GL_FOG);</li><li>inNumberTexUnits - enables or disables a number of multitexturing units. If the number is 0, 2d texturing is disabled entirely, as in glDisable(GL_TEXTURE_2D); Otherwise, 2d texturing is enabled, and a number of multitexturing units are enabled sequentially, starting with unit 0, e.g. glActiveTextureARB(GL_TEXTURE0_ARB); glEnable (GL_TEXTURE_2D);</li><li>inEnableLighting - enables or disables OpenGL lighting, e.g. glEnable(GL_LIGHTING); glEnable(GL_LIGHT0);</li><li>inEnableAlphaTesting - enables or disables the alpha test per pixel, e.g. glEnable(GL_ALPHA_TEST);</li><li>inEnableAlphaBlending - enables or disables alpha blending per pixel, e.g. glEnable(GL_BLEND);</li><li>inEnableDepthTesting - enables per pixel depth testing, as in glEnable(GL_DEPTH_TEST);</li><li>inEnableDepthWriting - enables writing back of depth information to the depth buffer, as in glDepthMask(GL_TRUE);</li></ul><p>The purpose of this function is to change OpenGL state while keeping X-Plane aware of the state changes; this keeps X-Plane from getting surprised by OGL state changes, and prevents X-Plane and plug-ins from having to set all state before all draws;<a href=\"/sdk/XPLMSetGraphicsState/\">XPLMSetGraphicsState</a>internally skips calls to change state that is already properly enabled.</p><p>X-Plane does not have a ‘default’ OGL state for plug-ins with respect to the above state vector; plug-ins should totally set OGL state using this API before drawing. Use<a href=\"/sdk/XPLMSetGraphicsState/\">XPLMSetGraphicsState</a>instead of any of the above OpenGL calls.</p><p>WARNING: Any routine that performs drawing (e.g.<a href=\"/sdk/XPLMDrawString/\">XPLMDrawString</a>or widget code) may change X-Plane’s state. Always set state before drawing after unknown code has executed.</p><p><em>Deprecation Warnings</em>: X-Plane’s lighting and fog environment is significantly more complex than the fixed function pipeline can express; do not assume that lighting and fog state is a good approximation for 3-d drawing. Prefer to use XPLMInstancing to draw objects. All calls to<a href=\"/sdk/XPLMSetGraphicsState/\">XPLMSetGraphicsState</a>should have no fog or lighting.</p></div><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPLMBindTexture2d\"><a href=\"/sdk/XPLMBindTexture2d/\">XPLMBindTexture2d</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API void       <a href=\"/sdk/XPLMBindTexture2d/\">XPLMBindTexture2d</a>(\n                         int                  inTextureNum,\n                         int                  inTextureUnit);\n</code></pre><p><a href=\"/sdk/XPLMBindTexture2d/\">XPLMBindTexture2d</a>changes what texture is bound to the 2d texturing target. This routine caches the current 2d texture across all texturing units in the sim and plug-ins, preventing extraneous binding. For example, consider several plug-ins running in series; if they all use the ‘general interface’ bitmap to do UI, calling this function will skip the rebinding of the general interface texture on all but the first plug-in, which can provide better frame rates on some graphics cards.</p><p>inTextureID is the ID of the texture object to bind; inTextureUnit is a zero-based texture unit (e.g. 0 for the first one), up to a maximum of 4 units. (This number may increase in future versions of X-Plane.)</p><p>Use this routine instead of glBindTexture(GL_TEXTURE_2D, ….);</p></div><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPLMGenerateTextureNumbers\"><a href=\"/sdk/XPLMGenerateTextureNumbers/\">XPLMGenerateTextureNumbers</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API void       <a href=\"/sdk/XPLMGenerateTextureNumbers/\">XPLMGenerateTextureNumbers</a>(\n                         int *                outTextureIDs,\n                         int                  inCount);\n</code></pre><p>Use this routine instead of glGenTextures to generate new texture object IDs. This routine historically ensured that plugins don’t use texure IDs that X-Plane is reserving for its own use.</p></div><div class=\"function XPLM_DEPRECATED\"><h3 class=\"sdk-api-function\" id=\"XPLMGetTexture\"><a href=\"/sdk/XPLMGetTexture/\">XPLMGetTexture</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API int        <a href=\"/sdk/XPLMGetTexture/\">XPLMGetTexture</a>(\n                         <a href=\"/sdk/XPLMTextureID/\">XPLMTextureID</a>        inTexture);\n</code></pre><p><a href=\"/sdk/XPLMGetTexture/\">XPLMGetTexture</a>returns the OpenGL texture ID of an X-Plane texture based on a generic identifying code. For example, you can get the texture for X-Plane’s UI bitmaps.</p></div><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPLMWorldToLocal\"><a href=\"/sdk/XPLMWorldToLocal/\">XPLMWorldToLocal</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API void       <a href=\"/sdk/XPLMWorldToLocal/\">XPLMWorldToLocal</a>(\n                         double               inLatitude,\n                         double               inLongitude,\n                         double               inAltitude,\n                         double *             outX,\n                         double *             outY,\n                         double *             outZ);\n</code></pre><p>This routine translates coordinates from latitude, longitude, and altitude to local scene coordinates. Latitude and longitude are in decimal degrees, and altitude is in meters MSL (mean sea level). The XYZ coordinates are in meters in the local OpenGL coordinate system.</p></div><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPLMLocalToWorld\"><a href=\"/sdk/XPLMLocalToWorld/\">XPLMLocalToWorld</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API void       <a href=\"/sdk/XPLMLocalToWorld/\">XPLMLocalToWorld</a>(\n                         double               inX,\n                         double               inY,\n                         double               inZ,\n                         double *             outLatitude,\n                         double *             outLongitude,\n                         double *             outAltitude);\n</code></pre><p>This routine translates a local coordinate triplet back into latitude, longitude, and altitude. Latitude and longitude are in decimal degrees, and altitude is in meters MSL (mean sea level). The XYZ coordinates are in meters in the local OpenGL coordinate system.</p><p>NOTE: world coordinates are less precise than local coordinates; you should try to avoid round tripping from local to world and back.</p></div><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPLMDrawTranslucentDarkBox\"><a href=\"/sdk/XPLMDrawTranslucentDarkBox/\">XPLMDrawTranslucentDarkBox</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API void       <a href=\"/sdk/XPLMDrawTranslucentDarkBox/\">XPLMDrawTranslucentDarkBox</a>(\n                         int                  inLeft,\n                         int                  inTop,\n                         int                  inRight,\n                         int                  inBottom);\n</code></pre><p>This routine draws a translucent dark box, partially obscuring parts of the screen but making text easy to read. This is the same graphics primitive used by X-Plane to show text files.</p></div></div><div class=\"component\"><h2 id=\"X-PLANE TEXT\">X-PLANE TEXT</h2><div class=\"enum\"><h3 class=\"sdk-api-enum\" id=\"XPLMFontID\"><a href=\"/sdk/XPLMFontID/\">XPLMFontID</a></h3><p>X-Plane features some fixed-character fonts. Each font may have its own metrics.</p><p>WARNING: Some of these fonts are no longer supported or may have changed geometries. For maximum copmatibility, see the comments below.</p><p>Note: X-Plane 7 supports proportional-spaced fonts. Since no measuring routine is available yet, the SDK will normally draw using a fixed-width font. You can use a dataref to enable proportional font drawing on XP7 if you want to.</p><p><div class=\"enumitem\"><table><thead><tr><th>Name</th><th>Value</th><th>Description</th></tr></thead><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplmFont_Basic\"><a href=\"/sdk/xplmFont_Basic/\">xplmFont_Basic</a></td><td>\"0\"</td><td>Mono-spaced font for user interface. Available in all versions of the SDK.</td></tr><tr class=\"enumitem XPLM_DEPRECATED\"><td class=\"sdk-api-enum-item\" id=\"xplmFont_Menus\"><a href=\"/sdk/xplmFont_Menus/\">xplmFont_Menus</a></td><td>\"1\"</td><td>Deprecated, do not use.</td></tr><tr class=\"enumitem XPLM_DEPRECATED\"><td class=\"sdk-api-enum-item\" id=\"xplmFont_Metal \"><a href=\"/sdk/xplmFont_Metal /\">xplmFont_Metal</a></td><td>\"2\"</td><td>Deprecated, do not use.</td></tr><tr class=\"enumitem XPLM_DEPRECATED\"><td class=\"sdk-api-enum-item\" id=\"xplmFont_Led\"><a href=\"/sdk/xplmFont_Led/\">xplmFont_Led</a></td><td>\"3\"</td><td>Deprecated, do not use.</td></tr><tr class=\"enumitem XPLM_DEPRECATED\"><td class=\"sdk-api-enum-item\" id=\"xplmFont_LedWide\"><a href=\"/sdk/xplmFont_LedWide/\">xplmFont_LedWide</a></td><td>\"4\"</td><td>Deprecated, do not use.</td></tr><tr class=\"enumitem XPLM_DEPRECATED\"><td class=\"sdk-api-enum-item\" id=\"xplmFont_PanelHUD\"><a href=\"/sdk/xplmFont_PanelHUD/\">xplmFont_PanelHUD</a></td><td>\"5\"</td><td>Deprecated, do not use.</td></tr><tr class=\"enumitem XPLM_DEPRECATED\"><td class=\"sdk-api-enum-item\" id=\"xplmFont_PanelEFIS\"><a href=\"/sdk/xplmFont_PanelEFIS/\">xplmFont_PanelEFIS</a></td><td>\"6\"</td><td>Deprecated, do not use.</td></tr><tr class=\"enumitem XPLM_DEPRECATED\"><td class=\"sdk-api-enum-item\" id=\"xplmFont_PanelGPS\"><a href=\"/sdk/xplmFont_PanelGPS/\">xplmFont_PanelGPS</a></td><td>\"7\"</td><td>Deprecated, do not use.</td></tr><tr class=\"enumitem XPLM_DEPRECATED\"><td class=\"sdk-api-enum-item\" id=\"xplmFont_RadiosGA\"><a href=\"/sdk/xplmFont_RadiosGA/\">xplmFont_RadiosGA</a></td><td>\"8\"</td><td>Deprecated, do not use.</td></tr><tr class=\"enumitem XPLM_DEPRECATED\"><td class=\"sdk-api-enum-item\" id=\"xplmFont_RadiosBC\"><a href=\"/sdk/xplmFont_RadiosBC/\">xplmFont_RadiosBC</a></td><td>\"9\"</td><td>Deprecated, do not use.</td></tr><tr class=\"enumitem XPLM_DEPRECATED\"><td class=\"sdk-api-enum-item\" id=\"xplmFont_RadiosHM\"><a href=\"/sdk/xplmFont_RadiosHM/\">xplmFont_RadiosHM</a></td><td>\"10\"</td><td>Deprecated, do not use.</td></tr><tr class=\"enumitem XPLM_DEPRECATED\"><td class=\"sdk-api-enum-item\" id=\"xplmFont_RadiosGANarrow\"><a href=\"/sdk/xplmFont_RadiosGANarrow/\">xplmFont_RadiosGANarrow</a></td><td>\"11\"</td><td>Deprecated, do not use.</td></tr><tr class=\"enumitem XPLM_DEPRECATED\"><td class=\"sdk-api-enum-item\" id=\"xplmFont_RadiosBCNarrow\"><a href=\"/sdk/xplmFont_RadiosBCNarrow/\">xplmFont_RadiosBCNarrow</a></td><td>\"12\"</td><td>Deprecated, do not use.</td></tr><tr class=\"enumitem XPLM_DEPRECATED\"><td class=\"sdk-api-enum-item\" id=\"xplmFont_RadiosHMNarrow\"><a href=\"/sdk/xplmFont_RadiosHMNarrow/\">xplmFont_RadiosHMNarrow</a></td><td>\"13\"</td><td>Deprecated, do not use.</td></tr><tr class=\"enumitem XPLM_DEPRECATED\"><td class=\"sdk-api-enum-item\" id=\"xplmFont_Timer \"><a href=\"/sdk/xplmFont_Timer /\">xplmFont_Timer</a></td><td>\"14\"</td><td>Deprecated, do not use.</td></tr><tr class=\"enumitem XPLM_DEPRECATED\"><td class=\"sdk-api-enum-item\" id=\"xplmFont_FullRound\"><a href=\"/sdk/xplmFont_FullRound/\">xplmFont_FullRound</a></td><td>\"15\"</td><td>Deprecated, do not use.</td></tr><tr class=\"enumitem XPLM_DEPRECATED\"><td class=\"sdk-api-enum-item\" id=\"xplmFont_SmallRound\"><a href=\"/sdk/xplmFont_SmallRound/\">xplmFont_SmallRound</a></td><td>\"16\"</td><td>Deprecated, do not use.</td></tr><tr class=\"enumitem XPLM_DEPRECATED\"><td class=\"sdk-api-enum-item\" id=\"xplmFont_Menus_Localized \"><a href=\"/sdk/xplmFont_Menus_Localized /\">xplmFont_Menus_Localized</a></td><td>\"17\"</td><td>Deprecated, do not use.</td></tr><tr class=\"enumitem XPLM200\"><td class=\"sdk-api-enum-item\" id=\"xplmFont_Proportional\"><a href=\"/sdk/xplmFont_Proportional/\">xplmFont_Proportional</a></td><td>\"18\"</td><td>Proportional UI font.</td></tr></table></div></p></div><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPLMDrawString\"><a href=\"/sdk/XPLMDrawString/\">XPLMDrawString</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API void       <a href=\"/sdk/XPLMDrawString/\">XPLMDrawString</a>(\n                         float *              inColorRGB,\n                         int                  inXOffset,\n                         int                  inYOffset,\n                         const char *         inChar,\n                         int *                inWordWrapWidth,    /* Can be NULL */\n                         <a href=\"/sdk/XPLMFontID/\">XPLMFontID</a>           inFontID);\n</code></pre><p>This routine draws a NULL terminated string in a given font. Pass in the lower left pixel that the character is to be drawn onto. Also pass the character and font ID. This function returns the x offset plus the width of all drawn characters. The color to draw in is specified as a pointer to an array of three floating point colors, representing RGB intensities from 0.0 to 1.0.</p></div><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPLMDrawNumber\"><a href=\"/sdk/XPLMDrawNumber/\">XPLMDrawNumber</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API void       <a href=\"/sdk/XPLMDrawNumber/\">XPLMDrawNumber</a>(\n                         float *              inColorRGB,\n                         int                  inXOffset,\n                         int                  inYOffset,\n                         double               inValue,\n                         int                  inDigits,\n                         int                  inDecimals,\n                         int                  inShowSign,\n                         <a href=\"/sdk/XPLMFontID/\">XPLMFontID</a>           inFontID);\n</code></pre><p>This routine draws a number similar to the digit editing fields in PlaneMaker and data output display in X-Plane. Pass in a color, a position, a floating point value, and formatting info. Specify how many integer and how many decimal digits to show and whether to show a sign, as well as a character set. This routine returns the xOffset plus width of the string drawn.</p></div><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPLMGetFontDimensions\"><a href=\"/sdk/XPLMGetFontDimensions/\">XPLMGetFontDimensions</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API void       <a href=\"/sdk/XPLMGetFontDimensions/\">XPLMGetFontDimensions</a>(\n                         <a href=\"/sdk/XPLMFontID/\">XPLMFontID</a>           inFontID,\n                         int *                outCharWidth,    /* Can be NULL */\n                         int *                outCharHeight,    /* Can be NULL */\n                         int *                outDigitsOnly);    /* Can be NULL */\n</code></pre><p>This routine returns the width and height of a character in a given font. It also tells you if the font only supports numeric digits. Pass NULL if you don’t need a given field. Note that for a proportional font the width will be an arbitrary, hopefully average width.</p></div><div class=\"function XPLM200\"><h3 class=\"sdk-api-function\" id=\"XPLMMeasureString\"><a href=\"/sdk/XPLMMeasureString/\">XPLMMeasureString</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API float      <a href=\"/sdk/XPLMMeasureString/\">XPLMMeasureString</a>(\n                         <a href=\"/sdk/XPLMFontID/\">XPLMFontID</a>           inFontID,\n                         const char *         inChar,\n                         int                  inNumChars);\n</code></pre><p>This routine returns the width in pixels of a string using a given font. The string is passed as a pointer plus length (and does not need to be null terminated); this is used to allow for measuring substrings. The return value is floating point; it is possible that future font drawing may allow for fractional pixels.</p></div></div></div></div></article>",
      "cross_references": [],
      "markdown": "# [XPLMGraphics](/sdk/XPLMGraphics/)API\n\nA few notes on coordinate systems:\n\nX-Plane uses three kinds of coordinates. Global coordinates are specified as\nlatitude, longitude and elevation. This coordinate system never changes but is\nnot very precise.\n\nOpenGL (or ‘local’) coordinates are cartesian and move with the aircraft. They\noffer more precision and are used for 3-d OpenGL drawing. The X axis is aligned\neast-west with positive X meaning east. The Y axis is aligned straight up and\ndown at the point 0,0,0 (but since the Earth is round it is not truly straight\nup and down at other points). The Z axis is aligned north-south at 0, 0, 0 with\npositive Z pointing south (but since the Earth is round it isn’t exactly\nnorth-south as you move east or west of 0, 0, 0). One unit is one meter and the\npoint 0,0,0 is on the surface of the Earth at sea level for some latitude and\nlongitude picked by the sim such that the user’s aircraft is reasonably nearby.\n\n2-d Panel coordinates are 2d, with the X axis horizontal and the Y axis\nvertical. The point 0,0 is the bottom left and 1024,768 is the upper right of\nthe screen. This is true no matter what resolution the user’s monitor is in;\nwhen running in higher resolution, graphics will be scaled.\n\nUse X-Plane’s routines to convert between global and local coordinates. Do not\nattempt to do this conversion yourself; the precise ‘roundness’ of X-Plane’s\nphysics model may not match your own, and (to make things weirder) the user can\npotentially customize the physics of the current planet.\n\n## X-PLANE GRAPHICS\n\nThese routines allow you to use OpenGL with X-Plane.\n\n### [XPLMTextureID](/sdk/XPLMTextureID/)\n\nXPLM Texture IDs name well-known textures in the sim for you to use. This allows\nyou to recycle textures from X-Plane, saving VRAM.\n\n*Warning*: do not use these enums. The only remaining use they have is to access\nthe legacy compatibility v10 UI texture; if you need this, get it via the\nWidgets library.\n\n| Name | Value | Description |\n| --- | --- | --- |\n| [xplm_Tex_GeneralInterface](/sdk/xplm_Tex_GeneralInterface/) | \"0\" | The\nbitmap that contains window outlines, button outlines, fonts, etc. |\n| [xplm_Tex_AircraftPaint](/sdk/xplm_Tex_AircraftPaint/) | \"1\" | The exterior\npaint for the user's aircraft (daytime). |\n| [xplm_Tex_AircraftLiteMap](/sdk/xplm_Tex_AircraftLiteMap/) | \"2\" | The\nexterior light map for the user's aircraft. |\n\n### [XPLMSetGraphicsState](/sdk/XPLMSetGraphicsState/)\n\n```cpp\nXPLM_API void       XPLMSetGraphicsState(\n                         int                  inEnableFog,\n                         int                  inNumberTexUnits,\n                         int                  inEnableLighting,\n                         int                  inEnableAlphaTesting,\n                         int                  inEnableAlphaBlending,\n                         int                  inEnableDepthTesting,\n                         int                  inEnableDepthWriting);\n\n```\n\n[XPLMSetGraphicsState](/sdk/XPLMSetGraphicsState/)changes OpenGL’s fixed\nfunction pipeline state. You are not responsible for restoring any state that is\naccessed via[XPLMSetGraphicsState](/sdk/XPLMSetGraphicsState/), but you are\nresponsible for not accessing this state directly.\n\n- inEnableFog - enables or disables fog, equivalent to: glEnable(GL_FOG);\n- inNumberTexUnits - enables or disables a number of multitexturing units. If the number is 0, 2d texturing is disabled entirely, as in glDisable(GL_TEXTURE_2D); Otherwise, 2d texturing is enabled, and a number of multitexturing units are enabled sequentially, starting with unit 0, e.g. glActiveTextureARB(GL_TEXTURE0_ARB); glEnable (GL_TEXTURE_2D);\n- inEnableLighting - enables or disables OpenGL lighting, e.g. glEnable(GL_LIGHTING); glEnable(GL_LIGHT0);\n- inEnableAlphaTesting - enables or disables the alpha test per pixel, e.g. glEnable(GL_ALPHA_TEST);\n- inEnableAlphaBlending - enables or disables alpha blending per pixel, e.g. glEnable(GL_BLEND);\n- inEnableDepthTesting - enables per pixel depth testing, as in glEnable(GL_DEPTH_TEST);\n- inEnableDepthWriting - enables writing back of depth information to the depth buffer, as in glDepthMask(GL_TRUE);\n\nThe purpose of this function is to change OpenGL state while keeping X-Plane\naware of the state changes; this keeps X-Plane from getting surprised by OGL\nstate changes, and prevents X-Plane and plug-ins from having to set all state\nbefore all draws;[XPLMSetGraphicsState](/sdk/XPLMSetGraphicsState/)internally\nskips calls to change state that is already properly enabled.\n\nX-Plane does not have a ‘default’ OGL state for plug-ins with respect to the\nabove state vector; plug-ins should totally set OGL state using this API before\ndrawing. Use[XPLMSetGraphicsState](/sdk/XPLMSetGraphicsState/)instead of any of\nthe above OpenGL calls.\n\nWARNING: Any routine that performs drawing\n(e.g.[XPLMDrawString](/sdk/XPLMDrawString/)or widget code) may change X-Plane’s\nstate. Always set state before drawing after unknown code has executed.\n\n*Deprecation Warnings*: X-Plane’s lighting and fog environment is significantly\nmore complex than the fixed function pipeline can express; do not assume that\nlighting and fog state is a good approximation for 3-d drawing. Prefer to use\nXPLMInstancing to draw objects. All calls\nto[XPLMSetGraphicsState](/sdk/XPLMSetGraphicsState/)should have no fog or\nlighting.\n\n### [XPLMBindTexture2d](/sdk/XPLMBindTexture2d/)\n\n```cpp\nXPLM_API void       XPLMBindTexture2d(\n                         int                  inTextureNum,\n                         int                  inTextureUnit);\n\n```\n\n[XPLMBindTexture2d](/sdk/XPLMBindTexture2d/)changes what texture is bound to the\n2d texturing target. This routine caches the current 2d texture across all\ntexturing units in the sim and plug-ins, preventing extraneous binding. For\nexample, consider several plug-ins running in series; if they all use the\n‘general interface’ bitmap to do UI, calling this function will skip the\nrebinding of the general interface texture on all but the first plug-in, which\ncan provide better frame rates on some graphics cards.\n\ninTextureID is the ID of the texture object to bind; inTextureUnit is a\nzero-based texture unit (e.g. 0 for the first one), up to a maximum of 4 units.\n(This number may increase in future versions of X-Plane.)\n\nUse this routine instead of glBindTexture(GL_TEXTURE_2D, ….);\n\n### [XPLMGenerateTextureNumbers](/sdk/XPLMGenerateTextureNumbers/)\n\n```cpp\nXPLM_API void       XPLMGenerateTextureNumbers(\n                         int *                outTextureIDs,\n                         int                  inCount);\n\n```\n\nUse this routine instead of glGenTextures to generate new texture object IDs.\nThis routine historically ensured that plugins don’t use texure IDs that X-Plane\nis reserving for its own use.\n\n### [XPLMGetTexture](/sdk/XPLMGetTexture/)\n\n```cpp\nXPLM_API int        XPLMGetTexture(\n                         XPLMTextureID        inTexture);\n\n```\n\n[XPLMGetTexture](/sdk/XPLMGetTexture/)returns the OpenGL texture ID of an\nX-Plane texture based on a generic identifying code. For example, you can get\nthe texture for X-Plane’s UI bitmaps.\n\n### [XPLMWorldToLocal](/sdk/XPLMWorldToLocal/)\n\n```cpp\nXPLM_API void       XPLMWorldToLocal(\n                         double               inLatitude,\n                         double               inLongitude,\n                         double               inAltitude,\n                         double *             outX,\n                         double *             outY,\n                         double *             outZ);\n\n```\n\nThis routine translates coordinates from latitude, longitude, and altitude to\nlocal scene coordinates. Latitude and longitude are in decimal degrees, and\naltitude is in meters MSL (mean sea level). The XYZ coordinates are in meters in\nthe local OpenGL coordinate system.\n\n### [XPLMLocalToWorld](/sdk/XPLMLocalToWorld/)\n\n```cpp\nXPLM_API void       XPLMLocalToWorld(\n                         double               inX,\n                         double               inY,\n                         double               inZ,\n                         double *             outLatitude,\n                         double *             outLongitude,\n                         double *             outAltitude);\n\n```\n\nThis routine translates a local coordinate triplet back into latitude,\nlongitude, and altitude. Latitude and longitude are in decimal degrees, and\naltitude is in meters MSL (mean sea level). The XYZ coordinates are in meters in\nthe local OpenGL coordinate system.\n\nNOTE: world coordinates are less precise than local coordinates; you should try\nto avoid round tripping from local to world and back.\n\n### [XPLMDrawTranslucentDarkBox](/sdk/XPLMDrawTranslucentDarkBox/)\n\n```cpp\nXPLM_API void       XPLMDrawTranslucentDarkBox(\n                         int                  inLeft,\n                         int                  inTop,\n                         int                  inRight,\n                         int                  inBottom);\n\n```\n\nThis routine draws a translucent dark box, partially obscuring parts of the\nscreen but making text easy to read. This is the same graphics primitive used by\nX-Plane to show text files.\n\n## X-PLANE TEXT\n\n### [XPLMFontID](/sdk/XPLMFontID/)\n\nX-Plane features some fixed-character fonts. Each font may have its own metrics.\n\nWARNING: Some of these fonts are no longer supported or may have changed\ngeometries. For maximum copmatibility, see the comments below.\n\nNote: X-Plane 7 supports proportional-spaced fonts. Since no measuring routine\nis available yet, the SDK will normally draw using a fixed-width font. You can\nuse a dataref to enable proportional font drawing on XP7 if you want to.\n\n| Name | Value | Description |\n| --- | --- | --- |\n| [xplmFont_Basic](/sdk/xplmFont_Basic/) | \"0\" | Mono-spaced font for user\ninterface. Available in all versions of the SDK. |\n| [xplmFont_Menus](/sdk/xplmFont_Menus/) | \"1\" | Deprecated, do not use. |\n| [xplmFont_Metal](/sdk/xplmFont_Metal /) | \"2\" | Deprecated, do not use. |\n| [xplmFont_Led](/sdk/xplmFont_Led/) | \"3\" | Deprecated, do not use. |\n| [xplmFont_LedWide](/sdk/xplmFont_LedWide/) | \"4\" | Deprecated, do not use. |\n| [xplmFont_PanelHUD](/sdk/xplmFont_PanelHUD/) | \"5\" | Deprecated, do not use. |\n| [xplmFont_PanelEFIS](/sdk/xplmFont_PanelEFIS/) | \"6\" | Deprecated, do not use.\n|\n| [xplmFont_PanelGPS](/sdk/xplmFont_PanelGPS/) | \"7\" | Deprecated, do not use. |\n| [xplmFont_RadiosGA](/sdk/xplmFont_RadiosGA/) | \"8\" | Deprecated, do not use. |\n| [xplmFont_RadiosBC](/sdk/xplmFont_RadiosBC/) | \"9\" | Deprecated, do not use. |\n| [xplmFont_RadiosHM](/sdk/xplmFont_RadiosHM/) | \"10\" | Deprecated, do not use.\n|\n| [xplmFont_RadiosGANarrow](/sdk/xplmFont_RadiosGANarrow/) | \"11\" | Deprecated,\ndo not use. |\n| [xplmFont_RadiosBCNarrow](/sdk/xplmFont_RadiosBCNarrow/) | \"12\" | Deprecated,\ndo not use. |\n| [xplmFont_RadiosHMNarrow](/sdk/xplmFont_RadiosHMNarrow/) | \"13\" | Deprecated,\ndo not use. |\n| [xplmFont_Timer](/sdk/xplmFont_Timer /) | \"14\" | Deprecated, do not use. |\n| [xplmFont_FullRound](/sdk/xplmFont_FullRound/) | \"15\" | Deprecated, do not\nuse. |\n| [xplmFont_SmallRound](/sdk/xplmFont_SmallRound/) | \"16\" | Deprecated, do not\nuse. |\n| [xplmFont_Menus_Localized](/sdk/xplmFont_Menus_Localized /) | \"17\" |\nDeprecated, do not use. |\n| [xplmFont_Proportional](/sdk/xplmFont_Proportional/) | \"18\" | Proportional UI\nfont. |\n\n### [XPLMDrawString](/sdk/XPLMDrawString/)\n\n```cpp\nXPLM_API void       XPLMDrawString(\n                         float *              inColorRGB,\n                         int                  inXOffset,\n                         int                  inYOffset,\n                         const char *         inChar,\n                         int *                inWordWrapWidth,    /* Can be NULL */\n                         XPLMFontID           inFontID);\n\n```\n\nThis routine draws a NULL terminated string in a given font. Pass in the lower\nleft pixel that the character is to be drawn onto. Also pass the character and\nfont ID. This function returns the x offset plus the width of all drawn\ncharacters. The color to draw in is specified as a pointer to an array of three\nfloating point colors, representing RGB intensities from 0.0 to 1.0.\n\n### [XPLMDrawNumber](/sdk/XPLMDrawNumber/)\n\n```cpp\nXPLM_API void       XPLMDrawNumber(\n                         float *              inColorRGB,\n                         int                  inXOffset,\n                         int                  inYOffset,\n                         double               inValue,\n                         int                  inDigits,\n                         int                  inDecimals,\n                         int                  inShowSign,\n                         XPLMFontID           inFontID);\n\n```\n\nThis routine draws a number similar to the digit editing fields in PlaneMaker\nand data output display in X-Plane. Pass in a color, a position, a floating\npoint value, and formatting info. Specify how many integer and how many decimal\ndigits to show and whether to show a sign, as well as a character set. This\nroutine returns the xOffset plus width of the string drawn.\n\n### [XPLMGetFontDimensions](/sdk/XPLMGetFontDimensions/)\n\n```cpp\nXPLM_API void       XPLMGetFontDimensions(\n                         XPLMFontID           inFontID,\n                         int *                outCharWidth,    /* Can be NULL */\n                         int *                outCharHeight,    /* Can be NULL */\n                         int *                outDigitsOnly);    /* Can be NULL */\n\n```\n\nThis routine returns the width and height of a character in a given font. It\nalso tells you if the font only supports numeric digits. Pass NULL if you don’t\nneed a given field. Note that for a proportional font the width will be an\narbitrary, hopefully average width.\n\n### [XPLMMeasureString](/sdk/XPLMMeasureString/)\n\n```cpp\nXPLM_API float      XPLMMeasureString(\n                         XPLMFontID           inFontID,\n                         const char *         inChar,\n                         int                  inNumChars);\n\n```\n\nThis routine returns the width in pixels of a string using a given font. The\nstring is passed as a pointer plus length (and does not need to be null\nterminated); this is used to allow for measuring substrings. The return value is\nfloating point; it is possible that future font drawing may allow for fractional\npixels.",
      "own_functions": [
        "XPLMSetGraphicsState",
        "XPLMBindTexture2d",
        "XPLMGenerateTextureNumbers",
        "XPLMGetTexture",
        "XPLMWorldToLocal",
        "XPLMLocalToWorld",
        "XPLMDrawTranslucentDarkBox",
        "XPLMDrawString",
        "XPLMDrawNumber",
        "XPLMGetFontDimensions",
        "XPLMMeasureString",
        "XPLMTextureID",
        "XPLMFontID"
      ],
      "processing_timestamp": "2025-06-24T22:00:23.550267+00:00",
      "title": "XPLMGraphics | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMGraphics/"
    },
    "https://developer.x-plane.com/sdk/XPLMUtilities/": {
      "api_signatures": [
        {
          "description": "This function returns the full path to the X-System folder. Note that this is a directory path, so it ends in a trailing : or / .",
          "name": "XPLMGetSystemPath",
          "parameters": [
            {
              "full_declaration": "char *               outSystemPath",
              "name": "outSystemPath",
              "type": "char *"
            }
          ],
          "signature": "XPLM_API voidXPLMGetSystemPath(\n                         char *               outSystemPath);"
        },
        {
          "description": "This routine returns a full path to a file that is within X-Plane’s preferences directory. (You should remove the file name back to the last directory separator to get the preferences directory usingXPLMExtractFileAndPath).",
          "name": "XPLMGetPrefsPath",
          "parameters": [
            {
              "full_declaration": "char *               outPrefsPath",
              "name": "outPrefsPath",
              "type": "char *"
            }
          ],
          "signature": "XPLM_API voidXPLMGetPrefsPath(\n                         char *               outPrefsPath);"
        },
        {
          "description": "This routine returns a string with one char and a null terminator that is the directory separator for the current platform. This allows you to write code that concatenates directory paths without having to #ifdef for platform. The character returned will reflect the current file path mode.",
          "name": "XPLMGetDirectorySeparator",
          "parameters": [],
          "signature": "XPLM_API const char *XPLMGetDirectorySeparator(void);"
        },
        {
          "description": "Given a full path to a file, this routine separates the path from the file. If the path is a partial directory (e.g. ends in : or / ) the trailing directory separator is removed. This routine works in-place; a pointer to the file part of the buffer is returned; the original buffer still starts with the path and is null terminated with no trailing separator.",
          "name": "XPLMExtractFileAndPath",
          "parameters": [
            {
              "full_declaration": "char *               inFullPath",
              "name": "inFullPath",
              "type": "char *"
            }
          ],
          "signature": "XPLM_API char *XPLMExtractFileAndPath(\n                         char *               inFullPath);"
        },
        {
          "description": "This routine returns a list of files in a directory (specified by a full path, no trailing : or / ). The output is returned as a list of NULL terminated strings. An index array (if specified) is filled with pointers into the strings. The last file is indicated by a zero-length string (and NULL in the indices). This routine will return 1 if you had capacity for all files or 0 if you did not. You can also skip a given number of files.",
          "name": "XPLMGetDirectoryContents",
          "parameters": [],
          "signature": "XPLM_API intXPLMGetDirectoryContents(\n                         const char *         inDirectoryPath,\n                         int                  inFirstReturn,\n                         char *               outFileNames,\n                         int                  inFileNameBufSize,\n                         char **              outIndices,    /* Can be NULL */\n                         int                  inIndexCount,\n                         int *                outTotalFiles,    /* Can be NULL */\n                         int *                outReturnedFiles);    /* Can be NULL */"
        },
        {
          "description": "Loads a data file of a given type. Paths must be relative to the X-System folder. To clear the replay, pass a NULL file name (this is only valid with replay movies, not sit files).",
          "name": "XPLMLoadDataFile",
          "parameters": [],
          "signature": "XPLM_API intXPLMLoadDataFile(XPLMDataFileTypeinFileType,\n                         const char *         inFilePath);    /* Can be NULL */"
        },
        {
          "description": "Saves the current situation or replay; paths are relative to the X-System folder.",
          "name": "XPLMSaveDataFile",
          "parameters": [
            {
              "full_declaration": "const char *         inFilePath",
              "name": "inFilePath",
              "type": "const char *"
            }
          ],
          "signature": "XPLM_API intXPLMSaveDataFile(XPLMDataFileTypeinFileType,\n                         const char *         inFilePath);"
        },
        {
          "deprecated": true,
          "description": "Deprecated: This function returns 1 if X-Plane has properly initialized the plug-in system. If this routine returns 0, many XPLM functions will not work.",
          "name": "XPLMInitialized",
          "parameters": [],
          "signature": "XPLM_API intXPLMInitialized(void);"
        },
        {
          "description": "This routine returns the revision of both X-Plane and the XPLM DLL. All versions are at least three-digit decimal numbers (e.g. 606 for version 6.06 of X-Plane); the current revision of the XPLM is 400 (4.00). This routine also returns the host ID of the app running us.",
          "name": "XPLMGetVersions",
          "parameters": [
            {
              "full_declaration": "int *                outXPlaneVersion",
              "name": "outXPlaneVersion",
              "type": "int *"
            },
            {
              "full_declaration": "int *                outXPLMVersion",
              "name": "outXPLMVersion",
              "type": "int *"
            },
            {
              "full_declaration": "XPLMHostApplicationID* outHostID",
              "name": "outHostID",
              "type": "XPLMHostApplicationID*"
            }
          ],
          "signature": "XPLM_API voidXPLMGetVersions(\n                         int *                outXPlaneVersion,\n                         int *                outXPLMVersion,XPLMHostApplicationID* outHostID);"
        },
        {
          "description": "This routine returns the langauge the sim is running in.",
          "name": "XPLMGetLanguage",
          "parameters": [],
          "signature": "XPLM_APIXPLMLanguageCodeXPLMGetLanguage(void);"
        },
        {
          "description": "This routine will attempt to find the symbol passed in the inString parameter. If the symbol is found a pointer the function is returned, othewise the function will return NULL.",
          "name": "XPLMFindSymbol",
          "parameters": [
            {
              "full_declaration": "const char *         inString",
              "name": "inString",
              "type": "const char *"
            }
          ],
          "signature": "XPLM_API void *XPLMFindSymbol(\n                         const char *         inString);"
        },
        {
          "description": "XPLMSetErrorCallbackinstalls an error-reporting callback for your plugin. Normally the plugin system performs minimum diagnostics to maximize performance. When you install an error callback, you will receive calls due to certain plugin errors, such as passing bad parameters or incorrect data.",
          "name": "XPLMSetErrorCallback",
          "parameters": [],
          "signature": "XPLM_API voidXPLMSetErrorCallback(XPLMError_finCallback);"
        },
        {
          "description": "This routine outputs a C-style string to the Log.txt file. The file is immediately flushed so you will not lose data. (This does cause a performance penalty.)",
          "name": "XPLMDebugString",
          "parameters": [
            {
              "full_declaration": "const char *         inString",
              "name": "inString",
              "type": "const char *"
            }
          ],
          "signature": "XPLM_API voidXPLMDebugString(\n                         const char *         inString);"
        },
        {
          "description": "This function displays the string in a translucent overlay over the current display and also speaks the string if text-to-speech is enabled. The string is spoken asynchronously, this function returns immediately. This function may not speak or print depending on user preferences.",
          "name": "XPLMSpeakString",
          "parameters": [
            {
              "full_declaration": "const char *         inString",
              "name": "inString",
              "type": "const char *"
            }
          ],
          "signature": "XPLM_API voidXPLMSpeakString(\n                         const char *         inString);"
        },
        {
          "description": "Given a virtual key code (as defined inXPLMDefs.h) this routine returns a human-readable string describing the character. This routine is provided for showing users what keyboard mappings they have set up. The string may read ‘unknown’ or be a blank or NULL string if the virtual key is unknown.",
          "name": "XPLMGetVirtualKeyDescription",
          "parameters": [
            {
              "full_declaration": "char                 inVirtualKey",
              "name": "inVirtualKey",
              "type": "char"
            }
          ],
          "signature": "XPLM_API const char *XPLMGetVirtualKeyDescription(\n                         char                 inVirtualKey);"
        },
        {
          "description": "XPLMReloadSceneryreloads the current set of scenery. You can use this function in two typical ways: simply call it to reload the scenery, picking up any new installed scenery, .env files, etc. from disk. Or, change the lat/ref and lon/ref datarefs and then call this function to shift the scenery environment. This routine is equivalent to picking “reload scenery” from the developer menu.",
          "name": "XPLMReloadScenery",
          "parameters": [],
          "signature": "XPLM_API voidXPLMReloadScenery(void);"
        },
        {
          "description": "XPLMFindCommandlooks up a command by name, and returns its command reference or NULL if the command does not exist.",
          "name": "XPLMFindCommand",
          "parameters": [
            {
              "full_declaration": "const char *         inName",
              "name": "inName",
              "type": "const char *"
            }
          ],
          "signature": "XPLM_APIXPLMCommandRefXPLMFindCommand(\n                         const char *         inName);"
        },
        {
          "description": "XPLMCommandBeginstarts the execution of a command, specified by its command reference. The command is “held down” untilXPLMCommandEndis called. You must balance eachXPLMCommandBegincall with anXPLMCommandEndcall.",
          "name": "XPLMCommandBegin",
          "parameters": [],
          "signature": "XPLM_API voidXPLMCommandBegin(XPLMCommandRefinCommand);"
        },
        {
          "description": "XPLMCommandEndends the execution of a given command that was started withXPLMCommandBegin. You must not issueXPLMCommandEndfor a command you did not begin.",
          "name": "XPLMCommandEnd",
          "parameters": [],
          "signature": "XPLM_API voidXPLMCommandEnd(XPLMCommandRefinCommand);"
        },
        {
          "description": "This executes a given command momentarily, that is, the command begins and ends immediately. This is the equivalent of callingXPLMCommandBegin() andXPLMCommandEnd() back to back.",
          "name": "XPLMCommandOnce",
          "parameters": [],
          "signature": "XPLM_API voidXPLMCommandOnce(XPLMCommandRefinCommand);"
        },
        {
          "description": "XPLMCreateCommandcreates a new command for a given string. If the command already exists, the existing command reference is returned. The description may appear in user interface contexts, such as the joystick configuration screen.",
          "name": "XPLMCreateCommand",
          "parameters": [
            {
              "full_declaration": "const char *         inName",
              "name": "inName",
              "type": "const char *"
            },
            {
              "full_declaration": "const char *         inDescription",
              "name": "inDescription",
              "type": "const char *"
            }
          ],
          "signature": "XPLM_APIXPLMCommandRefXPLMCreateCommand(\n                         const char *         inName,\n                         const char *         inDescription);"
        },
        {
          "description": "XPLMRegisterCommandHandlerregisters a callback to be called when a command is executed. You provide a callback with a reference pointer.",
          "name": "XPLMRegisterCommandHandler",
          "parameters": [
            {
              "full_declaration": "int                  inBefore",
              "name": "inBefore",
              "type": "int"
            },
            {
              "full_declaration": "void *               inRefcon",
              "name": "inRefcon",
              "type": "void *"
            }
          ],
          "signature": "XPLM_API voidXPLMRegisterCommandHandler(XPLMCommandRefinComand,XPLMCommandCallback_finHandler,\n                         int                  inBefore,\n                         void *               inRefcon);"
        },
        {
          "description": "XPLMUnregisterCommandHandlerremoves a command callback registered withXPLMRegisterCommandHandler.",
          "name": "XPLMUnregisterCommandHandler",
          "parameters": [
            {
              "full_declaration": "int                  inBefore",
              "name": "inBefore",
              "type": "int"
            },
            {
              "full_declaration": "void *               inRefcon",
              "name": "inRefcon",
              "type": "void *"
            }
          ],
          "signature": "XPLM_API voidXPLMUnregisterCommandHandler(XPLMCommandRefinComand,XPLMCommandCallback_finHandler,\n                         int                  inBefore,\n                         void *               inRefcon);"
        },
        {
          "description": "This function simulates a key being pressed for X-Plane. The keystroke goes directly to X-Plane; it is never sent to any plug-ins. However, since this is a raw key stroke it may be mapped by the keys file or enter text into a field.",
          "name": "XPLMSimulateKeyPress",
          "parameters": [
            {
              "full_declaration": "int                  inKeyType",
              "name": "inKeyType",
              "type": "int"
            },
            {
              "full_declaration": "int                  inKey",
              "name": "inKey",
              "type": "int"
            }
          ],
          "signature": "XPLM_API voidXPLMSimulateKeyPress(\n                         int                  inKeyType,\n                         int                  inKey);"
        },
        {
          "description": "This routine simulates a command-key stroke. However, the keys are done by function, not by actual letter, so this function works even if the user has remapped their keyboard. Examples of things you might do with this include pausing the simulator.",
          "name": "XPLMCommandKeyStroke",
          "parameters": [],
          "signature": "XPLM_API voidXPLMCommandKeyStroke(XPLMCommandKeyIDinKey);"
        },
        {
          "description": "This function simulates any of the actions that might be taken by pressing a joystick button. However, this lets you call the command directly rather than having to know which button is mapped where. Important: you must release each button you press. The APIs are separate so that you can ‘hold down’ a button for a fixed amount of time.",
          "name": "XPLMCommandButtonPress",
          "parameters": [],
          "signature": "XPLM_API voidXPLMCommandButtonPress(XPLMCommandButtonIDinButton);"
        },
        {
          "description": "This function simulates any of the actions that might be taken by pressing a joystick button. SeeXPLMCommandButtonPress.",
          "name": "XPLMCommandButtonRelease",
          "parameters": [],
          "signature": "XPLM_API voidXPLMCommandButtonRelease(XPLMCommandButtonIDinButton);"
        },
        {
          "name": "XPLMDataFileType",
          "type": "enum",
          "values": [
            {
              "description": "A situation (.sit) file, which starts off a flight in a given configuration.",
              "name": "xplm_DataFile_Situation",
              "value": "\"1\""
            },
            {
              "description": "A situation movie (.smo) file, which replays a past flight.",
              "name": "xplm_DataFile_ReplayMovie",
              "value": "\"2\""
            }
          ]
        },
        {
          "name": "XPLMHostApplicationID",
          "type": "enum",
          "values": []
        },
        {
          "name": "XPLMLanguageCode",
          "type": "enum",
          "values": []
        },
        {
          "name": "XPLMCommandPhase",
          "type": "enum",
          "values": [
            {
              "description": "The command is being started.",
              "name": "xplm_CommandBegin",
              "value": "\"0\""
            },
            {
              "description": "The command is continuing to execute.",
              "name": "xplm_CommandContinue",
              "value": "\"1\""
            },
            {
              "description": "The command has ended.",
              "name": "xplm_CommandEnd",
              "value": "\"2\""
            }
          ]
        }
      ],
      "category": {
        "category": "XPLM_Utilities",
        "module": "Xplm Utilities",
        "url": "https://developer.x-plane.com/sdk/XPLMUtilities/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"api\"><h1 class=\"sdk-api-title\" id=\"XPLMUtilities\"><a href=\"/sdk/XPLMUtilities/\">XPLMUtilities</a>API</h1><div class=\"component\"><h2 id=\"FILE UTILITIES\">FILE UTILITIES</h2><p>The<a href=\"/sdk/XPLMUtilities/\">XPLMUtilities</a>file APIs provide some basic file and path functions for use with X-Plane.</p><h2>Directory Separators</h2><p>The XPLM has two modes it can work in:</p><ul><li><p>X-Plane native paths: all paths are UTF8 strings, using the unix forward slash (/) as the directory separating character. In native path mode, you use the same path format for all three operating systems.</p></li><li><p>Legacy OS paths: the directroy separator is \\ for Windows, : for OS X, and / for Linux; OS paths are encoded in MacRoman for OS X using legacy HFS conventions, use the application code page for multi-byte encoding on Unix using DOS path conventions, and use UTF-8 for Linux.</p></li></ul><p>While legacy OS paths are the default, we strongly encourage you to opt in to native paths using the<a href=\"/sdk/XPLMEnableFeature/\">XPLMEnableFeature</a>API.</p><ul><li><p>All OS X plugins should enable native paths all of the time; if you do not do this, you will have to convert all paths back from HFS to Unix (and deal with MacRoman) - code written using native paths and the C file APIs “just works” on OS X.</p></li><li><p>For Linux plugins, there is no difference between the two encodings.</p></li><li><p>Windows plugins will need to convert the UTF8 file paths to UTF16 for use with the “wide” APIs. While it might seem tempting to stick with legacy OS paths (and just use the “ANSI” Windows APIs), X-Plane is fully unicode-capable, and will often be installed in paths where the user’s directories have no ACP encoding.</p></li></ul><h2>Full and Relative Paths</h2><p>Some of these APIs use full paths, but others use paths relative to the user’s X-Plane installation. This is documented on a per-API basis.</p><div class=\"enum XPLM200\"><h3 class=\"sdk-api-enum\" id=\"XPLMDataFileType\"><a href=\"/sdk/XPLMDataFileType/\">XPLMDataFileType</a></h3><p>These enums define types of data files you can load or unload using the SDK.</p><p><div class=\"enumitem XPLM200\"><table><thead><tr><th>Name</th><th>Value</th><th>Description</th></tr></thead><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_DataFile_Situation\"><a href=\"/sdk/xplm_DataFile_Situation/\">xplm_DataFile_Situation</a></td><td>\"1\"</td><td>A situation (.sit) file, which starts off a flight in a given configuration.</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_DataFile_ReplayMovie\"><a href=\"/sdk/xplm_DataFile_ReplayMovie/\">xplm_DataFile_ReplayMovie</a></td><td>\"2\"</td><td>A situation movie (.smo) file, which replays a past flight.</td></tr></table></div></p></div><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPLMGetSystemPath\"><a href=\"/sdk/XPLMGetSystemPath/\">XPLMGetSystemPath</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API void       <a href=\"/sdk/XPLMGetSystemPath/\">XPLMGetSystemPath</a>(\n                         char *               outSystemPath);\n</code></pre><p>This function returns the full path to the X-System folder. Note that this is a directory path, so it ends in a trailing : or / .</p><p>The buffer you pass should be at least 512 characters long. The path is returned using the current native or OS path conventions.</p></div><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPLMGetPrefsPath\"><a href=\"/sdk/XPLMGetPrefsPath/\">XPLMGetPrefsPath</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API void       <a href=\"/sdk/XPLMGetPrefsPath/\">XPLMGetPrefsPath</a>(\n                         char *               outPrefsPath);\n</code></pre><p>This routine returns a full path to a file that is within X-Plane’s preferences directory. (You should remove the file name back to the last directory separator to get the preferences directory using<a href=\"/sdk/XPLMExtractFileAndPath/\">XPLMExtractFileAndPath</a>).</p><p>The buffer you pass should be at least 512 characters long. The path is returned using the current native or OS path conventions.</p></div><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPLMGetDirectorySeparator\"><a href=\"/sdk/XPLMGetDirectorySeparator/\">XPLMGetDirectorySeparator</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API const char * <a href=\"/sdk/XPLMGetDirectorySeparator/\">XPLMGetDirectorySeparator</a>(void);\n</code></pre><p>This routine returns a string with one char and a null terminator that is the directory separator for the current platform. This allows you to write code that concatenates directory paths without having to #ifdef for platform. The character returned will reflect the current file path mode.</p></div><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPLMExtractFileAndPath\"><a href=\"/sdk/XPLMExtractFileAndPath/\">XPLMExtractFileAndPath</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API char *     <a href=\"/sdk/XPLMExtractFileAndPath/\">XPLMExtractFileAndPath</a>(\n                         char *               inFullPath);\n</code></pre><p>Given a full path to a file, this routine separates the path from the file. If the path is a partial directory (e.g. ends in : or / ) the trailing directory separator is removed. This routine works in-place; a pointer to the file part of the buffer is returned; the original buffer still starts with the path and is null terminated with no trailing separator.</p></div><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPLMGetDirectoryContents\"><a href=\"/sdk/XPLMGetDirectoryContents/\">XPLMGetDirectoryContents</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API int        <a href=\"/sdk/XPLMGetDirectoryContents/\">XPLMGetDirectoryContents</a>(\n                         const char *         inDirectoryPath,\n                         int                  inFirstReturn,\n                         char *               outFileNames,\n                         int                  inFileNameBufSize,\n                         char **              outIndices,    /* Can be NULL */\n                         int                  inIndexCount,\n                         int *                outTotalFiles,    /* Can be NULL */\n                         int *                outReturnedFiles);    /* Can be NULL */\n</code></pre><p>This routine returns a list of files in a directory (specified by a full path, no trailing : or / ). The output is returned as a list of NULL terminated strings. An index array (if specified) is filled with pointers into the strings. The last file is indicated by a zero-length string (and NULL in the indices). This routine will return 1 if you had capacity for all files or 0 if you did not. You can also skip a given number of files.</p><ul><li><p>inDirectoryPath - a null terminated C string containing the full path to the directory with no trailing directory char.</p></li><li><p>inFirstReturn - the zero-based index of the first file in the directory to return. (Usually zero to fetch all in one pass.)</p></li><li><p>outFileNames - a buffer to receive a series of sequential null terminated C-string file names. A zero-length C string will be appended to the very end.</p></li><li><p>inFileNameBufSize - the size of the file name buffer in bytes.</p></li><li><p>outIndices - a pointer to an array of character pointers that will become an index into the directory. The last file will be followed by a NULL value. Pass NULL if you do not want indexing information.</p></li><li><p>inIndexCount - the max size of the index in entries.</p></li><li><p>outTotalFiles - if not NULL, this is filled in with the number of files in the directory.</p></li><li><p>outReturnedFiles - if not NULL, the number of files returned by this iteration.</p></li></ul><p>Return value: 1 if all info could be returned, 0 if there was a buffer overrun.</p><p>WARNING: Before X-Plane 7 this routine did not properly iterate through directories. If X-Plane 6 compatibility is needed, use your own code to iterate directories.</p></div><div class=\"function XPLM200\"><h3 class=\"sdk-api-function\" id=\"XPLMLoadDataFile\"><a href=\"/sdk/XPLMLoadDataFile/\">XPLMLoadDataFile</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API int        <a href=\"/sdk/XPLMLoadDataFile/\">XPLMLoadDataFile</a>(\n                         <a href=\"/sdk/XPLMDataFileType/\">XPLMDataFileType</a>     inFileType,\n                         const char *         inFilePath);    /* Can be NULL */\n</code></pre><p>Loads a data file of a given type. Paths must be relative to the X-System folder. To clear the replay, pass a NULL file name (this is only valid with replay movies, not sit files).</p></div><div class=\"function XPLM200\"><h3 class=\"sdk-api-function\" id=\"XPLMSaveDataFile\"><a href=\"/sdk/XPLMSaveDataFile/\">XPLMSaveDataFile</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API int        <a href=\"/sdk/XPLMSaveDataFile/\">XPLMSaveDataFile</a>(\n                         <a href=\"/sdk/XPLMDataFileType/\">XPLMDataFileType</a>     inFileType,\n                         const char *         inFilePath);\n</code></pre><p>Saves the current situation or replay; paths are relative to the X-System folder.</p></div></div><div class=\"component\"><h2 id=\"X-PLANE MISC\">X-PLANE MISC</h2><div class=\"enum\"><h3 class=\"sdk-api-enum\" id=\"XPLMHostApplicationID\"><a href=\"/sdk/XPLMHostApplicationID/\">XPLMHostApplicationID</a></h3><p>While the plug-in SDK is only accessible to plugins running inside X-Plane, the original authors considered extending the API to other applications that shared basic infrastructure with X-Plane. These enumerations are hold-overs from that original roadmap; all values other than X-Plane are deprecated. Your plugin should never need this enumeration.</p><p><div class=\"enumitem\"><table><thead><tr><th>Name</th><th>Value</th><th>Description</th></tr></thead><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_Host_Unknown\"><a href=\"/sdk/xplm_Host_Unknown/\">xplm_Host_Unknown</a></td><td>\"0\"</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_Host_XPlane\"><a href=\"/sdk/xplm_Host_XPlane/\">xplm_Host_XPlane</a></td><td>\"1\"</td></tr><tr class=\"enumitem XPLM_DEPRECATED\"><td class=\"sdk-api-enum-item\" id=\"xplm_Host_PlaneMaker\"><a href=\"/sdk/xplm_Host_PlaneMaker/\">xplm_Host_PlaneMaker</a></td><td>\"2\"</td></tr><tr class=\"enumitem XPLM_DEPRECATED\"><td class=\"sdk-api-enum-item\" id=\"xplm_Host_WorldMaker\"><a href=\"/sdk/xplm_Host_WorldMaker/\">xplm_Host_WorldMaker</a></td><td>\"3\"</td></tr><tr class=\"enumitem XPLM_DEPRECATED\"><td class=\"sdk-api-enum-item\" id=\"xplm_Host_Briefer\"><a href=\"/sdk/xplm_Host_Briefer/\">xplm_Host_Briefer</a></td><td>\"4\"</td></tr><tr class=\"enumitem XPLM_DEPRECATED\"><td class=\"sdk-api-enum-item\" id=\"xplm_Host_PartMaker\"><a href=\"/sdk/xplm_Host_PartMaker/\">xplm_Host_PartMaker</a></td><td>\"5\"</td></tr><tr class=\"enumitem XPLM_DEPRECATED\"><td class=\"sdk-api-enum-item\" id=\"xplm_Host_YoungsMod\"><a href=\"/sdk/xplm_Host_YoungsMod/\">xplm_Host_YoungsMod</a></td><td>\"6\"</td></tr><tr class=\"enumitem XPLM_DEPRECATED\"><td class=\"sdk-api-enum-item\" id=\"xplm_Host_XAuto\"><a href=\"/sdk/xplm_Host_XAuto/\">xplm_Host_XAuto</a></td><td>\"7\"</td></tr><tr class=\"enumitem XPLM_DEPRECATED\"><td class=\"sdk-api-enum-item\" id=\"xplm_Host_Xavion\"><a href=\"/sdk/xplm_Host_Xavion/\">xplm_Host_Xavion</a></td><td>\"8\"</td></tr><tr class=\"enumitem XPLM_DEPRECATED\"><td class=\"sdk-api-enum-item\" id=\"xplm_Host_Control_Pad\"><a href=\"/sdk/xplm_Host_Control_Pad/\">xplm_Host_Control_Pad</a></td><td>\"9\"</td></tr><tr class=\"enumitem XPLM_DEPRECATED\"><td class=\"sdk-api-enum-item\" id=\"xplm_Host_PFD_Map\"><a href=\"/sdk/xplm_Host_PFD_Map/\">xplm_Host_PFD_Map</a></td><td>\"10\"</td></tr><tr class=\"enumitem XPLM_DEPRECATED\"><td class=\"sdk-api-enum-item\" id=\"xplm_Host_RADAR\"><a href=\"/sdk/xplm_Host_RADAR/\">xplm_Host_RADAR</a></td><td>\"11\"</td></tr></table></div></p></div><div class=\"enum\"><h3 class=\"sdk-api-enum\" id=\"XPLMLanguageCode\"><a href=\"/sdk/XPLMLanguageCode/\">XPLMLanguageCode</a></h3><p>These enums define what language the sim is running in. These enumerations do not imply that the sim can or does run in all of these languages; they simply provide a known encoding in the event that a given sim version is localized to a certain language.</p><p><div class=\"enumitem\"><table><thead><tr><th>Name</th><th>Value</th><th>Description</th></tr></thead><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_Language_Unknown\"><a href=\"/sdk/xplm_Language_Unknown/\">xplm_Language_Unknown</a></td><td>\"0\"</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_Language_English\"><a href=\"/sdk/xplm_Language_English/\">xplm_Language_English</a></td><td>\"1\"</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_Language_French\"><a href=\"/sdk/xplm_Language_French/\">xplm_Language_French</a></td><td>\"2\"</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_Language_German\"><a href=\"/sdk/xplm_Language_German/\">xplm_Language_German</a></td><td>\"3\"</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_Language_Italian\"><a href=\"/sdk/xplm_Language_Italian/\">xplm_Language_Italian</a></td><td>\"4\"</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_Language_Spanish\"><a href=\"/sdk/xplm_Language_Spanish/\">xplm_Language_Spanish</a></td><td>\"5\"</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_Language_Korean\"><a href=\"/sdk/xplm_Language_Korean/\">xplm_Language_Korean</a></td><td>\"6\"</td></tr><tr class=\"enumitem XPLM200\"><td class=\"sdk-api-enum-item\" id=\"xplm_Language_Russian\"><a href=\"/sdk/xplm_Language_Russian/\">xplm_Language_Russian</a></td><td>\"7\"</td></tr><tr class=\"enumitem XPLM200\"><td class=\"sdk-api-enum-item\" id=\"xplm_Language_Greek\"><a href=\"/sdk/xplm_Language_Greek/\">xplm_Language_Greek</a></td><td>\"8\"</td></tr><tr class=\"enumitem XPLM200\"><td class=\"sdk-api-enum-item\" id=\"xplm_Language_Japanese\"><a href=\"/sdk/xplm_Language_Japanese/\">xplm_Language_Japanese</a></td><td>\"9\"</td></tr><tr class=\"enumitem XPLM300\"><td class=\"sdk-api-enum-item\" id=\"xplm_Language_Chinese\"><a href=\"/sdk/xplm_Language_Chinese/\">xplm_Language_Chinese</a></td><td>\"10\"</td></tr><tr class=\"enumitem XPLM400\"><td class=\"sdk-api-enum-item\" id=\"xplm_Language_Ukrainian\"><a href=\"/sdk/xplm_Language_Ukrainian/\">xplm_Language_Ukrainian</a></td><td>\"11\"</td></tr></table></div></p></div><div class=\"callback XPLM200\"><h3 class=\"sdk-api-callback\" id=\"XPLMError_f\"><a href=\"/sdk/XPLMError_f/\">XPLMError_f</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>typedef void (* <a href=\"/sdk/XPLMError_f/\">XPLMError_f</a>)(\n                         const char *         inMessage);\n</code></pre><p>An XPLM error callback is a function that you provide to receive debugging information from the plugin SDK. See<a href=\"/sdk/XPLMSetErrorCallback/\">XPLMSetErrorCallback</a>for more information. NOTE: for the sake of debugging, your error callback will be called even if your plugin is not enabled, allowing you to receive debug info in your XPluginStart and XPluginStop callbacks. To avoid causing logic errors in the management code, do not call any other plugin routines from your error callback - it is only meant for catching errors in the debugging.</p></div><div class=\"function XPLM_DEPRECATED\"><h3 class=\"sdk-api-function\" id=\"XPLMInitialized\"><a href=\"/sdk/XPLMInitialized/\">XPLMInitialized</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API int        <a href=\"/sdk/XPLMInitialized/\">XPLMInitialized</a>(void);\n</code></pre><p>Deprecated: This function returns 1 if X-Plane has properly initialized the plug-in system. If this routine returns 0, many XPLM functions will not work.</p><p>NOTE: because plugins are always called from within the XPLM, there is no need to check for initialization; it will always return 1. This routine is deprecated - you do not need to check it before continuing within your plugin.</p></div><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPLMGetVersions\"><a href=\"/sdk/XPLMGetVersions/\">XPLMGetVersions</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API void       <a href=\"/sdk/XPLMGetVersions/\">XPLMGetVersions</a>(\n                         int *                outXPlaneVersion,\n                         int *                outXPLMVersion,\n                         <a href=\"/sdk/XPLMHostApplicationID/\">XPLMHostApplicationID</a> * outHostID);\n</code></pre><p>This routine returns the revision of both X-Plane and the XPLM DLL. All versions are at least three-digit decimal numbers (e.g. 606 for version 6.06 of X-Plane); the current revision of the XPLM is 400 (4.00). This routine also returns the host ID of the app running us.</p><p>The most common use of this routine is to special-case around X-Plane version-specific behavior.</p></div><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPLMGetLanguage\"><a href=\"/sdk/XPLMGetLanguage/\">XPLMGetLanguage</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API <a href=\"/sdk/XPLMLanguageCode/\">XPLMLanguageCode</a> <a href=\"/sdk/XPLMGetLanguage/\">XPLMGetLanguage</a>(void);\n</code></pre><p>This routine returns the langauge the sim is running in.</p></div><div class=\"function XPLM200\"><h3 class=\"sdk-api-function\" id=\"XPLMFindSymbol\"><a href=\"/sdk/XPLMFindSymbol/\">XPLMFindSymbol</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API void *     <a href=\"/sdk/XPLMFindSymbol/\">XPLMFindSymbol</a>(\n                         const char *         inString);\n</code></pre><p>This routine will attempt to find the symbol passed in the inString parameter. If the symbol is found a pointer the function is returned, othewise the function will return NULL.</p><p>You can use<a href=\"/sdk/XPLMFindSymbol/\">XPLMFindSymbol</a>to utilize newer SDK API features without requiring newer versions of the SDK (and X-Plane) as your minimum X-Plane version as follows:</p><ul><li><p>Define the XPLMnnn macro to the minimum required XPLM version you will ship with (e.g. XPLM210 for X-Plane 10 compatibility).</p></li><li><p>Use<a href=\"/sdk/XPLMGetVersions/\">XPLMGetVersions</a>and<a href=\"/sdk/XPLMFindSymbol/\">XPLMFindSymbol</a>to detect that the host sim is new enough to use new functions and resolve function pointers.</p></li><li><p>Conditionally use the new functions if and only if<a href=\"/sdk/XPLMFindSymbol/\">XPLMFindSymbol</a>only returns a non- NULL pointer.</p></li></ul><p>Warning: you should always check the XPLM API version as well as the results of<a href=\"/sdk/XPLMFindSymbol/\">XPLMFindSymbol</a>to determine if funtionality is safe to use.</p><p>To use functionality via<a href=\"/sdk/XPLMFindSymbol/\">XPLMFindSymbol</a>you will need to copy your own definitions of the X-Plane API prototypes and cast the returned pointer to the correct type.</p></div><div class=\"function XPLM200\"><h3 class=\"sdk-api-function\" id=\"XPLMSetErrorCallback\"><a href=\"/sdk/XPLMSetErrorCallback/\">XPLMSetErrorCallback</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API void       <a href=\"/sdk/XPLMSetErrorCallback/\">XPLMSetErrorCallback</a>(\n                         <a href=\"/sdk/XPLMError_f/\">XPLMError_f</a>          inCallback);\n</code></pre><p><a href=\"/sdk/XPLMSetErrorCallback/\">XPLMSetErrorCallback</a>installs an error-reporting callback for your plugin. Normally the plugin system performs minimum diagnostics to maximize performance. When you install an error callback, you will receive calls due to certain plugin errors, such as passing bad parameters or incorrect data.</p><p>Important: the error callback determines<em>programming</em>errors, e.g. bad API parameters. Every error that is returned by the error callback represents a mistake in your plugin that you should fix. Error callbacks are not used to report expected run-time problems (e.g. disk I/O errors).</p><p>The intention is for you to install the error callback during debug sections and put a break-point inside your callback. This will cause you to break into the debugger from within the SDK at the point in your plugin where you made an illegal call.</p><p>Installing an error callback may activate error checking code that would not normally run, and this may adversely affect performance, so do not leave error callbacks installed in shipping plugins. Since the only useful response to an error is to change code, error callbacks are not useful “in the field”.</p></div><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPLMDebugString\"><a href=\"/sdk/XPLMDebugString/\">XPLMDebugString</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API void       <a href=\"/sdk/XPLMDebugString/\">XPLMDebugString</a>(\n                         const char *         inString);\n</code></pre><p>This routine outputs a C-style string to the Log.txt file. The file is immediately flushed so you will not lose data. (This does cause a performance penalty.)</p><p>Please do<em>not</em>leave routine diagnostic logging enabled in your shipping plugin. The X-Plane Log file is shared by X-Plane and every plugin in the system, and plugins that (when functioning normally) print verbose log output make it difficult for developers to find error conditions from other parts of the system.</p></div><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPLMSpeakString\"><a href=\"/sdk/XPLMSpeakString/\">XPLMSpeakString</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API void       <a href=\"/sdk/XPLMSpeakString/\">XPLMSpeakString</a>(\n                         const char *         inString);\n</code></pre><p>This function displays the string in a translucent overlay over the current display and also speaks the string if text-to-speech is enabled. The string is spoken asynchronously, this function returns immediately. This function may not speak or print depending on user preferences.</p></div><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPLMGetVirtualKeyDescription\"><a href=\"/sdk/XPLMGetVirtualKeyDescription/\">XPLMGetVirtualKeyDescription</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API const char * <a href=\"/sdk/XPLMGetVirtualKeyDescription/\">XPLMGetVirtualKeyDescription</a>(\n                         char                 inVirtualKey);\n</code></pre><p>Given a virtual key code (as defined in<a href=\"/sdk/XPLMDefs/\">XPLMDefs</a>.h) this routine returns a human-readable string describing the character. This routine is provided for showing users what keyboard mappings they have set up. The string may read ‘unknown’ or be a blank or NULL string if the virtual key is unknown.</p></div><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPLMReloadScenery\"><a href=\"/sdk/XPLMReloadScenery/\">XPLMReloadScenery</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API void       <a href=\"/sdk/XPLMReloadScenery/\">XPLMReloadScenery</a>(void);\n</code></pre><p><a href=\"/sdk/XPLMReloadScenery/\">XPLMReloadScenery</a>reloads the current set of scenery. You can use this function in two typical ways: simply call it to reload the scenery, picking up any new installed scenery, .env files, etc. from disk. Or, change the lat/ref and lon/ref datarefs and then call this function to shift the scenery environment. This routine is equivalent to picking “reload scenery” from the developer menu.</p></div></div><div class=\"component XPLM200\"><h2 id=\"X-PLANE COMMAND MANAGEMENT\">X-PLANE COMMAND MANAGEMENT</h2><p>The command management APIs let plugins interact with the command-system in X-Plane, the abstraction behind keyboard presses and joystick buttons. This API lets you create new commands and modify the behavior (or get notification) of existing ones.</p><h2>X-Plane Command Phases</h2><p>X-Plane commands are not instantaneous; they operate over a duration. (Think of a joystick button press - you can press, hold down, and then release the joystick button; X-Plane commands model this entire process.)</p><p>An X-Plane command consists of three phases: a beginning, continuous repetition, and an ending. The command may be repeated zero times in its duration, followed by one command ending. Command begin and end messges are balanced, but a command may be bound to more than one event source (e.g. a keyboard key and a joystick button), in which case you may receive a second begin during before any end).</p><p>When you issue commands in the plugin system, you<em>must</em>balance every call to<a href=\"/sdk/XPLMCommandBegin/\">XPLMCommandBegin</a>with a call to<a href=\"/sdk/XPLMCommandEnd/\">XPLMCommandEnd</a>with the same command reference.</p><h2>Command Behavior Modification</h2><p>You can register a callback to handle a command either before or after X-Plane does; if you receive the command before X-Plane you have the option to either let X-Plane handle the command or hide the command from X-Plane. This lets plugins both augment commands and replace them.</p><p>If you register for an existing command, be sure that you are<em>consistent</em>in letting X-Plane handle or not handle the command; you are responsible for passing a<em>balanced</em>number of begin and end messages to X-Plane. (E.g. it is not legal to pass all the begin messages to X-Plane but hide all the end messages).</p><div class=\"enum\"><h3 class=\"sdk-api-enum\" id=\"XPLMCommandPhase\"><a href=\"/sdk/XPLMCommandPhase/\">XPLMCommandPhase</a></h3><p>The phases of a command.</p><p><div class=\"enumitem\"><table><thead><tr><th>Name</th><th>Value</th><th>Description</th></tr></thead><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_CommandBegin\"><a href=\"/sdk/xplm_CommandBegin/\">xplm_CommandBegin</a></td><td>\"0\"</td><td>The command is being started.</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_CommandContinue\"><a href=\"/sdk/xplm_CommandContinue/\">xplm_CommandContinue</a></td><td>\"1\"</td><td>The command is continuing to execute.</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_CommandEnd\"><a href=\"/sdk/xplm_CommandEnd/\">xplm_CommandEnd</a></td><td>\"2\"</td><td>The command has ended.</td></tr></table></div></p></div><div class=\"typedef\"><h3 class=\"sdk-api-type\" id=\"XPLMCommandRef\"><a href=\"/sdk/XPLMCommandRef/\">XPLMCommandRef</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>typedef void * <a href=\"/sdk/XPLMCommandRef/\">XPLMCommandRef</a>;</code></pre><p>A command ref is an opaque identifier for an X-Plane command. Command references stay the same for the life of your plugin but not between executions of X-Plane. Command refs are used to execute commands, create commands, and create callbacks for particular commands.</p><p>Note that a command is not “owned” by a particular plugin. Since many plugins may participate in a command’s execution, the command does not go away if the plugin that created it is unloaded.</p></div><div class=\"callback\"><h3 class=\"sdk-api-callback\" id=\"XPLMCommandCallback_f\"><a href=\"/sdk/XPLMCommandCallback_f/\">XPLMCommandCallback_f</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>typedef int (* <a href=\"/sdk/XPLMCommandCallback_f/\">XPLMCommandCallback_f</a>)(\n                         <a href=\"/sdk/XPLMCommandRef/\">XPLMCommandRef</a>       inCommand,\n                         <a href=\"/sdk/XPLMCommandPhase/\">XPLMCommandPhase</a>     inPhase,\n                         void *               inRefcon);\n</code></pre><p>A command callback is a function in your plugin that is called when a command is pressed. Your callback receives the command reference for the particular command, the phase of the command that is executing, and a reference pointer that you specify when registering the callback.</p><p>Your command handler should return 1 to let processing of the command continue to other plugins and X-Plane, or 0 to halt processing, potentially bypassing X-Plane code.</p></div><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPLMFindCommand\"><a href=\"/sdk/XPLMFindCommand/\">XPLMFindCommand</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API <a href=\"/sdk/XPLMCommandRef/\">XPLMCommandRef</a> <a href=\"/sdk/XPLMFindCommand/\">XPLMFindCommand</a>(\n                         const char *         inName);\n</code></pre><p><a href=\"/sdk/XPLMFindCommand/\">XPLMFindCommand</a>looks up a command by name, and returns its command reference or NULL if the command does not exist.</p></div><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPLMCommandBegin\"><a href=\"/sdk/XPLMCommandBegin/\">XPLMCommandBegin</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API void       <a href=\"/sdk/XPLMCommandBegin/\">XPLMCommandBegin</a>(\n                         <a href=\"/sdk/XPLMCommandRef/\">XPLMCommandRef</a>       inCommand);\n</code></pre><p><a href=\"/sdk/XPLMCommandBegin/\">XPLMCommandBegin</a>starts the execution of a command, specified by its command reference. The command is “held down” until<a href=\"/sdk/XPLMCommandEnd/\">XPLMCommandEnd</a>is called. You must balance each<a href=\"/sdk/XPLMCommandBegin/\">XPLMCommandBegin</a>call with an<a href=\"/sdk/XPLMCommandEnd/\">XPLMCommandEnd</a>call.</p></div><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPLMCommandEnd\"><a href=\"/sdk/XPLMCommandEnd/\">XPLMCommandEnd</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API void       <a href=\"/sdk/XPLMCommandEnd/\">XPLMCommandEnd</a>(\n                         <a href=\"/sdk/XPLMCommandRef/\">XPLMCommandRef</a>       inCommand);\n</code></pre><p><a href=\"/sdk/XPLMCommandEnd/\">XPLMCommandEnd</a>ends the execution of a given command that was started with<a href=\"/sdk/XPLMCommandBegin/\">XPLMCommandBegin</a>. You must not issue<a href=\"/sdk/XPLMCommandEnd/\">XPLMCommandEnd</a>for a command you did not begin.</p></div><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPLMCommandOnce\"><a href=\"/sdk/XPLMCommandOnce/\">XPLMCommandOnce</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API void       <a href=\"/sdk/XPLMCommandOnce/\">XPLMCommandOnce</a>(\n                         <a href=\"/sdk/XPLMCommandRef/\">XPLMCommandRef</a>       inCommand);\n</code></pre><p>This executes a given command momentarily, that is, the command begins and ends immediately. This is the equivalent of calling<a href=\"/sdk/XPLMCommandBegin/\">XPLMCommandBegin</a>() and<a href=\"/sdk/XPLMCommandEnd/\">XPLMCommandEnd</a>() back to back.</p></div><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPLMCreateCommand\"><a href=\"/sdk/XPLMCreateCommand/\">XPLMCreateCommand</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API <a href=\"/sdk/XPLMCommandRef/\">XPLMCommandRef</a> <a href=\"/sdk/XPLMCreateCommand/\">XPLMCreateCommand</a>(\n                         const char *         inName,\n                         const char *         inDescription);\n</code></pre><p><a href=\"/sdk/XPLMCreateCommand/\">XPLMCreateCommand</a>creates a new command for a given string. If the command already exists, the existing command reference is returned. The description may appear in user interface contexts, such as the joystick configuration screen.</p></div><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPLMRegisterCommandHandler\"><a href=\"/sdk/XPLMRegisterCommandHandler/\">XPLMRegisterCommandHandler</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API void       <a href=\"/sdk/XPLMRegisterCommandHandler/\">XPLMRegisterCommandHandler</a>(\n                         <a href=\"/sdk/XPLMCommandRef/\">XPLMCommandRef</a>       inComand,\n                         <a href=\"/sdk/XPLMCommandCallback_f/\">XPLMCommandCallback_f</a> inHandler,\n                         int                  inBefore,\n                         void *               inRefcon);\n</code></pre><p><a href=\"/sdk/XPLMRegisterCommandHandler/\">XPLMRegisterCommandHandler</a>registers a callback to be called when a command is executed. You provide a callback with a reference pointer.</p><p>If inBefore is true, your command handler callback will be executed before X-Plane executes the command, and returning 0 from your callback will disable X-Plane’s processing of the command. If inBefore is false, your callback will run after X-Plane. (You can register a single callback both before and after a command.)</p></div><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPLMUnregisterCommandHandler\"><a href=\"/sdk/XPLMUnregisterCommandHandler/\">XPLMUnregisterCommandHandler</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API void       <a href=\"/sdk/XPLMUnregisterCommandHandler/\">XPLMUnregisterCommandHandler</a>(\n                         <a href=\"/sdk/XPLMCommandRef/\">XPLMCommandRef</a>       inComand,\n                         <a href=\"/sdk/XPLMCommandCallback_f/\">XPLMCommandCallback_f</a> inHandler,\n                         int                  inBefore,\n                         void *               inRefcon);\n</code></pre><p><a href=\"/sdk/XPLMUnregisterCommandHandler/\">XPLMUnregisterCommandHandler</a>removes a command callback registered with<a href=\"/sdk/XPLMRegisterCommandHandler/\">XPLMRegisterCommandHandler</a>.</p></div></div><div class=\"component XPLM_DEPRECATED\"><h2 id=\"X-PLANE USER INTERACTION\">X-PLANE USER INTERACTION</h2><p>WARNING: The legacy user interaction API is deprecated; while it was the only way to run commands in X-Plane 6,7 and 8, it is obsolete, and was replaced by the command system API in X-Plane 9. You should not use this API; replace any of the calls below with XPLMCommand invocations based on persistent command strings. The documentation that follows is for historic reference only.</p><p>The legacy user interaction APIs let you simulate commands the user can do with a joystick, keyboard etc. Note that it is generally safer for future compatibility to use one of these commands than to manipulate the underlying sim data.</p><div class=\"bulkenum\"><h3 class=\"sdk-api-enum bulk\" id=\"XPLMCommandKeyID\"><a href=\"/sdk/XPLMCommandKeyID/\">XPLMCommandKeyID</a></h3><p>These enums represent all the keystrokes available within X-Plane. They can be sent to X-Plane directly. For example, you can reverse thrust using these enumerations.</p><pre class=\"language-cpp\" data-manual=\"true\"><code>enum {\n          xplm_key_pause=0,\n          xplm_key_revthrust,\n          xplm_key_jettison,\n          xplm_key_brakesreg,\n          xplm_key_brakesmax,\n          xplm_key_gear,\n          xplm_key_timedn,\n          xplm_key_timeup,\n          xplm_key_fadec,\n          xplm_key_otto_dis,\n          xplm_key_otto_atr,\n          xplm_key_otto_asi,\n          xplm_key_otto_hdg,\n          xplm_key_otto_gps,\n          xplm_key_otto_lev,\n          xplm_key_otto_hnav,\n          xplm_key_otto_alt,\n          xplm_key_otto_vvi,\n          xplm_key_otto_vnav,\n          xplm_key_otto_nav1,\n          xplm_key_otto_nav2,\n          xplm_key_targ_dn,\n          xplm_key_targ_up,\n          xplm_key_hdgdn,\n          xplm_key_hdgup,\n          xplm_key_barodn,\n          xplm_key_baroup,\n          xplm_key_obs1dn,\n          xplm_key_obs1up,\n          xplm_key_obs2dn,\n          xplm_key_obs2up,\n          xplm_key_com1_1,\n          xplm_key_com1_2,\n          xplm_key_com1_3,\n          xplm_key_com1_4,\n          xplm_key_nav1_1,\n          xplm_key_nav1_2,\n          xplm_key_nav1_3,\n          xplm_key_nav1_4,\n          xplm_key_com2_1,\n          xplm_key_com2_2,\n          xplm_key_com2_3,\n          xplm_key_com2_4,\n          xplm_key_nav2_1,\n          xplm_key_nav2_2,\n          xplm_key_nav2_3,\n          xplm_key_nav2_4,\n          xplm_key_adf_1,\n          xplm_key_adf_2,\n          xplm_key_adf_3,\n          xplm_key_adf_4,\n          xplm_key_adf_5,\n          xplm_key_adf_6,\n          xplm_key_transpon_1,\n          xplm_key_transpon_2,\n          xplm_key_transpon_3,\n          xplm_key_transpon_4,\n          xplm_key_transpon_5,\n          xplm_key_transpon_6,\n          xplm_key_transpon_7,\n          xplm_key_transpon_8,\n          xplm_key_flapsup,\n          xplm_key_flapsdn,\n          xplm_key_cheatoff,\n          xplm_key_cheaton,\n          xplm_key_sbrkoff,\n          xplm_key_sbrkon,\n          xplm_key_ailtrimL,\n          xplm_key_ailtrimR,\n          xplm_key_rudtrimL,\n          xplm_key_rudtrimR,\n          xplm_key_elvtrimD,\n          xplm_key_elvtrimU,\n          xplm_key_forward,\n          xplm_key_down,\n          xplm_key_left,\n          xplm_key_right,\n          xplm_key_back,\n          xplm_key_tower,\n          xplm_key_runway,\n          xplm_key_chase,\n          xplm_key_free1,\n          xplm_key_free2,\n          xplm_key_spot,\n          xplm_key_fullscrn1,\n          xplm_key_fullscrn2,\n          xplm_key_tanspan,\n          xplm_key_smoke,\n          xplm_key_map,\n          xplm_key_zoomin,\n          xplm_key_zoomout,\n          xplm_key_cycledump,\n          xplm_key_replay,\n          xplm_key_tranID,\n          xplm_key_max\n};\ntypedef int <a href=\"/sdk/XPLMCommandKeyID/\">XPLMCommandKeyID</a>;</code></pre></div><div class=\"bulkenum\"><h3 class=\"sdk-api-enum bulk\" id=\"XPLMCommandButtonID\"><a href=\"/sdk/XPLMCommandButtonID/\">XPLMCommandButtonID</a></h3><p>These are enumerations for all of the things you can do with a joystick button in X-Plane. They currently match the buttons menu in the equipment setup dialog, but these enums will be stable even if they change in X-Plane.</p><pre class=\"language-cpp\" data-manual=\"true\"><code>enum {\n          xplm_joy_nothing=0,\n          xplm_joy_start_all,\n          xplm_joy_start_0,\n          xplm_joy_start_1,\n          xplm_joy_start_2,\n          xplm_joy_start_3,\n          xplm_joy_start_4,\n          xplm_joy_start_5,\n          xplm_joy_start_6,\n          xplm_joy_start_7,\n          xplm_joy_throt_up,\n          xplm_joy_throt_dn,\n          xplm_joy_prop_up,\n          xplm_joy_prop_dn,\n          xplm_joy_mixt_up,\n          xplm_joy_mixt_dn,\n          xplm_joy_carb_tog,\n          xplm_joy_carb_on,\n          xplm_joy_carb_off,\n          xplm_joy_trev,\n          xplm_joy_trm_up,\n          xplm_joy_trm_dn,\n          xplm_joy_rot_trm_up,\n          xplm_joy_rot_trm_dn,\n          xplm_joy_rud_lft,\n          xplm_joy_rud_cntr,\n          xplm_joy_rud_rgt,\n          xplm_joy_ail_lft,\n          xplm_joy_ail_cntr,\n          xplm_joy_ail_rgt,\n          xplm_joy_B_rud_lft,\n          xplm_joy_B_rud_rgt,\n          xplm_joy_look_up,\n          xplm_joy_look_dn,\n          xplm_joy_look_lft,\n          xplm_joy_look_rgt,\n          xplm_joy_glance_l,\n          xplm_joy_glance_r,\n          xplm_joy_v_fnh,\n          xplm_joy_v_fwh,\n          xplm_joy_v_tra,\n          xplm_joy_v_twr,\n          xplm_joy_v_run,\n          xplm_joy_v_cha,\n          xplm_joy_v_fr1,\n          xplm_joy_v_fr2,\n          xplm_joy_v_spo,\n          xplm_joy_flapsup,\n          xplm_joy_flapsdn,\n          xplm_joy_vctswpfwd,\n          xplm_joy_vctswpaft,\n          xplm_joy_gear_tog,\n          xplm_joy_gear_up,\n          xplm_joy_gear_down,\n          xplm_joy_lft_brake,\n          xplm_joy_rgt_brake,\n          xplm_joy_brakesREG,\n          xplm_joy_brakesMAX,\n          xplm_joy_speedbrake,\n          xplm_joy_ott_dis,\n          xplm_joy_ott_atr,\n          xplm_joy_ott_asi,\n          xplm_joy_ott_hdg,\n          xplm_joy_ott_alt,\n          xplm_joy_ott_vvi,\n          xplm_joy_tim_start,\n          xplm_joy_tim_reset,\n          xplm_joy_ecam_up,\n          xplm_joy_ecam_dn,\n          xplm_joy_fadec,\n          xplm_joy_yaw_damp,\n          xplm_joy_art_stab,\n          xplm_joy_chute,\n          xplm_joy_JATO,\n          xplm_joy_arrest,\n          xplm_joy_jettison,\n          xplm_joy_fuel_dump,\n          xplm_joy_puffsmoke,\n          xplm_joy_prerotate,\n          xplm_joy_UL_prerot,\n          xplm_joy_UL_collec,\n          xplm_joy_TOGA,\n          xplm_joy_shutdown,\n          xplm_joy_con_atc,\n          xplm_joy_fail_now,\n          xplm_joy_pause,\n          xplm_joy_rock_up,\n          xplm_joy_rock_dn,\n          xplm_joy_rock_lft,\n          xplm_joy_rock_rgt,\n          xplm_joy_rock_for,\n          xplm_joy_rock_aft,\n          xplm_joy_idle_hilo,\n          xplm_joy_lanlights,\n          xplm_joy_max\n};\ntypedef int <a href=\"/sdk/XPLMCommandButtonID/\">XPLMCommandButtonID</a>;</code></pre></div><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPLMSimulateKeyPress\"><a href=\"/sdk/XPLMSimulateKeyPress/\">XPLMSimulateKeyPress</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API void       <a href=\"/sdk/XPLMSimulateKeyPress/\">XPLMSimulateKeyPress</a>(\n                         int                  inKeyType,\n                         int                  inKey);\n</code></pre><p>This function simulates a key being pressed for X-Plane. The keystroke goes directly to X-Plane; it is never sent to any plug-ins. However, since this is a raw key stroke it may be mapped by the keys file or enter text into a field.</p><p>Deprecated: use<a href=\"/sdk/XPLMCommandOnce/\">XPLMCommandOnce</a></p></div><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPLMCommandKeyStroke\"><a href=\"/sdk/XPLMCommandKeyStroke/\">XPLMCommandKeyStroke</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API void       <a href=\"/sdk/XPLMCommandKeyStroke/\">XPLMCommandKeyStroke</a>(\n                         <a href=\"/sdk/XPLMCommandKeyID/\">XPLMCommandKeyID</a>     inKey);\n</code></pre><p>This routine simulates a command-key stroke. However, the keys are done by function, not by actual letter, so this function works even if the user has remapped their keyboard. Examples of things you might do with this include pausing the simulator.</p><p>Deprecated: use<a href=\"/sdk/XPLMCommandOnce/\">XPLMCommandOnce</a></p></div><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPLMCommandButtonPress\"><a href=\"/sdk/XPLMCommandButtonPress/\">XPLMCommandButtonPress</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API void       <a href=\"/sdk/XPLMCommandButtonPress/\">XPLMCommandButtonPress</a>(\n                         <a href=\"/sdk/XPLMCommandButtonID/\">XPLMCommandButtonID</a>  inButton);\n</code></pre><p>This function simulates any of the actions that might be taken by pressing a joystick button. However, this lets you call the command directly rather than having to know which button is mapped where. Important: you must release each button you press. The APIs are separate so that you can ‘hold down’ a button for a fixed amount of time.</p><p>Deprecated: use<a href=\"/sdk/XPLMCommandBegin/\">XPLMCommandBegin</a>.</p></div><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPLMCommandButtonRelease\"><a href=\"/sdk/XPLMCommandButtonRelease/\">XPLMCommandButtonRelease</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API void       <a href=\"/sdk/XPLMCommandButtonRelease/\">XPLMCommandButtonRelease</a>(\n                         <a href=\"/sdk/XPLMCommandButtonID/\">XPLMCommandButtonID</a>  inButton);\n</code></pre><p>This function simulates any of the actions that might be taken by pressing a joystick button. See<a href=\"/sdk/XPLMCommandButtonPress/\">XPLMCommandButtonPress</a>.</p><p>Deprecated: use<a href=\"/sdk/XPLMCommandEnd/\">XPLMCommandEnd</a>.</p></div></div></div></div></article>",
      "cross_references": [],
      "markdown": "# [XPLMUtilities](/sdk/XPLMUtilities/)API\n\n## FILE UTILITIES\n\nThe[XPLMUtilities](/sdk/XPLMUtilities/)file APIs provide some basic file and\npath functions for use with X-Plane.\n\n## Directory Separators\n\nThe XPLM has two modes it can work in:\n\n- X-Plane native paths: all paths are UTF8 strings, using the unix forward slash\n  (/) as the directory separating character. In native path mode, you use the same\n  path format for all three operating systems.\n- Legacy OS paths: the directroy separator is \\ for Windows, : for OS X, and / for\n  Linux; OS paths are encoded in MacRoman for OS X using legacy HFS conventions,\n  use the application code page for multi-byte encoding on Unix using DOS path\n  conventions, and use UTF-8 for Linux.\n\nWhile legacy OS paths are the default, we strongly encourage you to opt in to\nnative paths using the[XPLMEnableFeature](/sdk/XPLMEnableFeature/)API.\n\n- All OS X plugins should enable native paths all of the time; if you do not do\n  this, you will have to convert all paths back from HFS to Unix (and deal with\n  MacRoman) - code written using native paths and the C file APIs “just works” on\n  OS X.\n- For Linux plugins, there is no difference between the two encodings.\n- Windows plugins will need to convert the UTF8 file paths to UTF16 for use with\n  the “wide” APIs. While it might seem tempting to stick with legacy OS paths (and\n  just use the “ANSI” Windows APIs), X-Plane is fully unicode-capable, and will\n  often be installed in paths where the user’s directories have no ACP encoding.\n\n## Full and Relative Paths\n\nSome of these APIs use full paths, but others use paths relative to the user’s\nX-Plane installation. This is documented on a per-API basis.\n\n### [XPLMDataFileType](/sdk/XPLMDataFileType/)\n\nThese enums define types of data files you can load or unload using the SDK.\n\n| Name | Value | Description |\n| --- | --- | --- |\n| [xplm_DataFile_Situation](/sdk/xplm_DataFile_Situation/) | \"1\" | A situation\n(.sit) file, which starts off a flight in a given configuration. |\n| [xplm_DataFile_ReplayMovie](/sdk/xplm_DataFile_ReplayMovie/) | \"2\" | A\nsituation movie (.smo) file, which replays a past flight. |\n\n### [XPLMGetSystemPath](/sdk/XPLMGetSystemPath/)\n\n```cpp\nXPLM_API void       XPLMGetSystemPath(\n                         char *               outSystemPath);\n\n```\n\nThis function returns the full path to the X-System folder. Note that this is a\ndirectory path, so it ends in a trailing : or / .\n\nThe buffer you pass should be at least 512 characters long. The path is returned\nusing the current native or OS path conventions.\n\n### [XPLMGetPrefsPath](/sdk/XPLMGetPrefsPath/)\n\n```cpp\nXPLM_API void       XPLMGetPrefsPath(\n                         char *               outPrefsPath);\n\n```\n\nThis routine returns a full path to a file that is within X-Plane’s preferences\ndirectory. (You should remove the file name back to the last directory separator\nto get the preferences directory\nusing[XPLMExtractFileAndPath](/sdk/XPLMExtractFileAndPath/)).\n\nThe buffer you pass should be at least 512 characters long. The path is returned\nusing the current native or OS path conventions.\n\n### [XPLMGetDirectorySeparator](/sdk/XPLMGetDirectorySeparator/)\n\n```cpp\nXPLM_API const char * XPLMGetDirectorySeparator(void);\n\n```\n\nThis routine returns a string with one char and a null terminator that is the\ndirectory separator for the current platform. This allows you to write code that\nconcatenates directory paths without having to #ifdef for platform. The\ncharacter returned will reflect the current file path mode.\n\n### [XPLMExtractFileAndPath](/sdk/XPLMExtractFileAndPath/)\n\n```cpp\nXPLM_API char *     XPLMExtractFileAndPath(\n                         char *               inFullPath);\n\n```\n\nGiven a full path to a file, this routine separates the path from the file. If\nthe path is a partial directory (e.g. ends in : or / ) the trailing directory\nseparator is removed. This routine works in-place; a pointer to the file part of\nthe buffer is returned; the original buffer still starts with the path and is\nnull terminated with no trailing separator.\n\n### [XPLMGetDirectoryContents](/sdk/XPLMGetDirectoryContents/)\n\n```cpp\nXPLM_API int        XPLMGetDirectoryContents(\n                         const char *         inDirectoryPath,\n                         int                  inFirstReturn,\n                         char *               outFileNames,\n                         int                  inFileNameBufSize,\n                         char **              outIndices,    /* Can be NULL */\n                         int                  inIndexCount,\n                         int *                outTotalFiles,    /* Can be NULL */\n                         int *                outReturnedFiles);    /* Can be NULL */\n\n```\n\nThis routine returns a list of files in a directory (specified by a full path,\nno trailing : or / ). The output is returned as a list of NULL terminated\nstrings. An index array (if specified) is filled with pointers into the strings.\nThe last file is indicated by a zero-length string (and NULL in the indices).\nThis routine will return 1 if you had capacity for all files or 0 if you did\nnot. You can also skip a given number of files.\n\n- inDirectoryPath - a null terminated C string containing the full path to the\n  directory with no trailing directory char.\n- inFirstReturn - the zero-based index of the first file in the directory to\n  return. (Usually zero to fetch all in one pass.)\n- outFileNames - a buffer to receive a series of sequential null terminated\n  C-string file names. A zero-length C string will be appended to the very end.\n- inFileNameBufSize - the size of the file name buffer in bytes.\n- outIndices - a pointer to an array of character pointers that will become an\n  index into the directory. The last file will be followed by a NULL value. Pass\n  NULL if you do not want indexing information.\n- inIndexCount - the max size of the index in entries.\n- outTotalFiles - if not NULL, this is filled in with the number of files in the\n  directory.\n- outReturnedFiles - if not NULL, the number of files returned by this iteration.\n\nReturn value: 1 if all info could be returned, 0 if there was a buffer overrun.\n\nWARNING: Before X-Plane 7 this routine did not properly iterate through\ndirectories. If X-Plane 6 compatibility is needed, use your own code to iterate\ndirectories.\n\n### [XPLMLoadDataFile](/sdk/XPLMLoadDataFile/)\n\n```cpp\nXPLM_API int        XPLMLoadDataFile(\n                         XPLMDataFileType     inFileType,\n                         const char *         inFilePath);    /* Can be NULL */\n\n```\n\nLoads a data file of a given type. Paths must be relative to the X-System\nfolder. To clear the replay, pass a NULL file name (this is only valid with\nreplay movies, not sit files).\n\n### [XPLMSaveDataFile](/sdk/XPLMSaveDataFile/)\n\n```cpp\nXPLM_API int        XPLMSaveDataFile(\n                         XPLMDataFileType     inFileType,\n                         const char *         inFilePath);\n\n```\n\nSaves the current situation or replay; paths are relative to the X-System\nfolder.\n\n## X-PLANE MISC\n\n### [XPLMHostApplicationID](/sdk/XPLMHostApplicationID/)\n\nWhile the plug-in SDK is only accessible to plugins running inside X-Plane, the\noriginal authors considered extending the API to other applications that shared\nbasic infrastructure with X-Plane. These enumerations are hold-overs from that\noriginal roadmap; all values other than X-Plane are deprecated. Your plugin\nshould never need this enumeration.\n\n| Name | Value | Description |\n| --- | --- | --- |\n| [xplm_Host_Unknown](/sdk/xplm_Host_Unknown/) | \"0\" |\n| [xplm_Host_XPlane](/sdk/xplm_Host_XPlane/) | \"1\" |\n| [xplm_Host_PlaneMaker](/sdk/xplm_Host_PlaneMaker/) | \"2\" |\n| [xplm_Host_WorldMaker](/sdk/xplm_Host_WorldMaker/) | \"3\" |\n| [xplm_Host_Briefer](/sdk/xplm_Host_Briefer/) | \"4\" |\n| [xplm_Host_PartMaker](/sdk/xplm_Host_PartMaker/) | \"5\" |\n| [xplm_Host_YoungsMod](/sdk/xplm_Host_YoungsMod/) | \"6\" |\n| [xplm_Host_XAuto](/sdk/xplm_Host_XAuto/) | \"7\" |\n| [xplm_Host_Xavion](/sdk/xplm_Host_Xavion/) | \"8\" |\n| [xplm_Host_Control_Pad](/sdk/xplm_Host_Control_Pad/) | \"9\" |\n| [xplm_Host_PFD_Map](/sdk/xplm_Host_PFD_Map/) | \"10\" |\n| [xplm_Host_RADAR](/sdk/xplm_Host_RADAR/) | \"11\" |\n\n### [XPLMLanguageCode](/sdk/XPLMLanguageCode/)\n\nThese enums define what language the sim is running in. These enumerations do\nnot imply that the sim can or does run in all of these languages; they simply\nprovide a known encoding in the event that a given sim version is localized to a\ncertain language.\n\n| Name | Value | Description |\n| --- | --- | --- |\n| [xplm_Language_Unknown](/sdk/xplm_Language_Unknown/) | \"0\" |\n| [xplm_Language_English](/sdk/xplm_Language_English/) | \"1\" |\n| [xplm_Language_French](/sdk/xplm_Language_French/) | \"2\" |\n| [xplm_Language_German](/sdk/xplm_Language_German/) | \"3\" |\n| [xplm_Language_Italian](/sdk/xplm_Language_Italian/) | \"4\" |\n| [xplm_Language_Spanish](/sdk/xplm_Language_Spanish/) | \"5\" |\n| [xplm_Language_Korean](/sdk/xplm_Language_Korean/) | \"6\" |\n| [xplm_Language_Russian](/sdk/xplm_Language_Russian/) | \"7\" |\n| [xplm_Language_Greek](/sdk/xplm_Language_Greek/) | \"8\" |\n| [xplm_Language_Japanese](/sdk/xplm_Language_Japanese/) | \"9\" |\n| [xplm_Language_Chinese](/sdk/xplm_Language_Chinese/) | \"10\" |\n| [xplm_Language_Ukrainian](/sdk/xplm_Language_Ukrainian/) | \"11\" |\n\n### [XPLMError_f](/sdk/XPLMError_f/)\n\n```cpp\ntypedef void (* XPLMError_f)(\n                         const char *         inMessage);\n\n```\n\nAn XPLM error callback is a function that you provide to receive debugging\ninformation from the plugin SDK.\nSee[XPLMSetErrorCallback](/sdk/XPLMSetErrorCallback/)for more information. NOTE:\nfor the sake of debugging, your error callback will be called even if your\nplugin is not enabled, allowing you to receive debug info in your XPluginStart\nand XPluginStop callbacks. To avoid causing logic errors in the management code,\ndo not call any other plugin routines from your error callback - it is only\nmeant for catching errors in the debugging.\n\n### [XPLMInitialized](/sdk/XPLMInitialized/)\n\n```cpp\nXPLM_API int        XPLMInitialized(void);\n\n```\n\nDeprecated: This function returns 1 if X-Plane has properly initialized the\nplug-in system. If this routine returns 0, many XPLM functions will not work.\n\nNOTE: because plugins are always called from within the XPLM, there is no need\nto check for initialization; it will always return 1. This routine is deprecated\n- you do not need to check it before continuing within your plugin.\n\n### [XPLMGetVersions](/sdk/XPLMGetVersions/)\n\n```cpp\nXPLM_API void       XPLMGetVersions(\n                         int *                outXPlaneVersion,\n                         int *                outXPLMVersion,\n                         XPLMHostApplicationID * outHostID);\n\n```\n\nThis routine returns the revision of both X-Plane and the XPLM DLL. All versions\nare at least three-digit decimal numbers (e.g. 606 for version 6.06 of X-Plane);\nthe current revision of the XPLM is 400 (4.00). This routine also returns the\nhost ID of the app running us.\n\nThe most common use of this routine is to special-case around X-Plane\nversion-specific behavior.\n\n### [XPLMGetLanguage](/sdk/XPLMGetLanguage/)\n\n```cpp\nXPLM_API XPLMLanguageCode XPLMGetLanguage(void);\n\n```\n\nThis routine returns the langauge the sim is running in.\n\n### [XPLMFindSymbol](/sdk/XPLMFindSymbol/)\n\n```cpp\nXPLM_API void *     XPLMFindSymbol(\n                         const char *         inString);\n\n```\n\nThis routine will attempt to find the symbol passed in the inString parameter.\nIf the symbol is found a pointer the function is returned, othewise the function\nwill return NULL.\n\nYou can use[XPLMFindSymbol](/sdk/XPLMFindSymbol/)to utilize newer SDK API\nfeatures without requiring newer versions of the SDK (and X-Plane) as your\nminimum X-Plane version as follows:\n\n- Define the XPLMnnn macro to the minimum required XPLM version you will ship with\n  (e.g. XPLM210 for X-Plane 10 compatibility).\n- Use[XPLMGetVersions](/sdk/XPLMGetVersions/)and[XPLMFindSymbol](/sdk/XPLMFindSymbol/)to\n  detect that the host sim is new enough to use new functions and resolve function\n  pointers.\n- Conditionally use the new functions if and only\n  if[XPLMFindSymbol](/sdk/XPLMFindSymbol/)only returns a non- NULL pointer.\n\nWarning: you should always check the XPLM API version as well as the results\nof[XPLMFindSymbol](/sdk/XPLMFindSymbol/)to determine if funtionality is safe to\nuse.\n\nTo use functionality via[XPLMFindSymbol](/sdk/XPLMFindSymbol/)you will need to\ncopy your own definitions of the X-Plane API prototypes and cast the returned\npointer to the correct type.\n\n### [XPLMSetErrorCallback](/sdk/XPLMSetErrorCallback/)\n\n```cpp\nXPLM_API void       XPLMSetErrorCallback(\n                         XPLMError_f          inCallback);\n\n```\n\n[XPLMSetErrorCallback](/sdk/XPLMSetErrorCallback/)installs an error-reporting\ncallback for your plugin. Normally the plugin system performs minimum\ndiagnostics to maximize performance. When you install an error callback, you\nwill receive calls due to certain plugin errors, such as passing bad parameters\nor incorrect data.\n\nImportant: the error callback determines*programming*errors, e.g. bad API\nparameters. Every error that is returned by the error callback represents a\nmistake in your plugin that you should fix. Error callbacks are not used to\nreport expected run-time problems (e.g. disk I/O errors).\n\nThe intention is for you to install the error callback during debug sections and\nput a break-point inside your callback. This will cause you to break into the\ndebugger from within the SDK at the point in your plugin where you made an\nillegal call.\n\nInstalling an error callback may activate error checking code that would not\nnormally run, and this may adversely affect performance, so do not leave error\ncallbacks installed in shipping plugins. Since the only useful response to an\nerror is to change code, error callbacks are not useful “in the field”.\n\n### [XPLMDebugString](/sdk/XPLMDebugString/)\n\n```cpp\nXPLM_API void       XPLMDebugString(\n                         const char *         inString);\n\n```\n\nThis routine outputs a C-style string to the Log.txt file. The file is\nimmediately flushed so you will not lose data. (This does cause a performance\npenalty.)\n\nPlease do*not*leave routine diagnostic logging enabled in your shipping plugin.\nThe X-Plane Log file is shared by X-Plane and every plugin in the system, and\nplugins that (when functioning normally) print verbose log output make it\ndifficult for developers to find error conditions from other parts of the\nsystem.\n\n### [XPLMSpeakString](/sdk/XPLMSpeakString/)\n\n```cpp\nXPLM_API void       XPLMSpeakString(\n                         const char *         inString);\n\n```\n\nThis function displays the string in a translucent overlay over the current\ndisplay and also speaks the string if text-to-speech is enabled. The string is\nspoken asynchronously, this function returns immediately. This function may not\nspeak or print depending on user preferences.\n\n### [XPLMGetVirtualKeyDescription](/sdk/XPLMGetVirtualKeyDescription/)\n\n```cpp\nXPLM_API const char * XPLMGetVirtualKeyDescription(\n                         char                 inVirtualKey);\n\n```\n\nGiven a virtual key code (as defined in[XPLMDefs](/sdk/XPLMDefs/).h) this\nroutine returns a human-readable string describing the character. This routine\nis provided for showing users what keyboard mappings they have set up. The\nstring may read ‘unknown’ or be a blank or NULL string if the virtual key is\nunknown.\n\n### [XPLMReloadScenery](/sdk/XPLMReloadScenery/)\n\n```cpp\nXPLM_API void       XPLMReloadScenery(void);\n\n```\n\n[XPLMReloadScenery](/sdk/XPLMReloadScenery/)reloads the current set of scenery.\nYou can use this function in two typical ways: simply call it to reload the\nscenery, picking up any new installed scenery, .env files, etc. from disk. Or,\nchange the lat/ref and lon/ref datarefs and then call this function to shift the\nscenery environment. This routine is equivalent to picking “reload scenery” from\nthe developer menu.\n\n## X-PLANE COMMAND MANAGEMENT\n\nThe command management APIs let plugins interact with the command-system in\nX-Plane, the abstraction behind keyboard presses and joystick buttons. This API\nlets you create new commands and modify the behavior (or get notification) of\nexisting ones.\n\n## X-Plane Command Phases\n\nX-Plane commands are not instantaneous; they operate over a duration. (Think of\na joystick button press - you can press, hold down, and then release the\njoystick button; X-Plane commands model this entire process.)\n\nAn X-Plane command consists of three phases: a beginning, continuous repetition,\nand an ending. The command may be repeated zero times in its duration, followed\nby one command ending. Command begin and end messges are balanced, but a command\nmay be bound to more than one event source (e.g. a keyboard key and a joystick\nbutton), in which case you may receive a second begin during before any end).\n\nWhen you issue commands in the plugin system, you*must*balance every call\nto[XPLMCommandBegin](/sdk/XPLMCommandBegin/)with a call\nto[XPLMCommandEnd](/sdk/XPLMCommandEnd/)with the same command reference.\n\n## Command Behavior Modification\n\nYou can register a callback to handle a command either before or after X-Plane\ndoes; if you receive the command before X-Plane you have the option to either\nlet X-Plane handle the command or hide the command from X-Plane. This lets\nplugins both augment commands and replace them.\n\nIf you register for an existing command, be sure that you are*consistent*in\nletting X-Plane handle or not handle the command; you are responsible for\npassing a*balanced*number of begin and end messages to X-Plane. (E.g. it is not\nlegal to pass all the begin messages to X-Plane but hide all the end messages).\n\n### [XPLMCommandPhase](/sdk/XPLMCommandPhase/)\n\nThe phases of a command.\n\n| Name | Value | Description |\n| --- | --- | --- |\n| [xplm_CommandBegin](/sdk/xplm_CommandBegin/) | \"0\" | The command is being\nstarted. |\n| [xplm_CommandContinue](/sdk/xplm_CommandContinue/) | \"1\" | The command is\ncontinuing to execute. |\n| [xplm_CommandEnd](/sdk/xplm_CommandEnd/) | \"2\" | The command has ended. |\n\n### [XPLMCommandRef](/sdk/XPLMCommandRef/)\n\n```cpp\ntypedef void * XPLMCommandRef;\n```\n\nA command ref is an opaque identifier for an X-Plane command. Command references\nstay the same for the life of your plugin but not between executions of X-Plane.\nCommand refs are used to execute commands, create commands, and create callbacks\nfor particular commands.\n\nNote that a command is not “owned” by a particular plugin. Since many plugins\nmay participate in a command’s execution, the command does not go away if the\nplugin that created it is unloaded.\n\n### [XPLMCommandCallback_f](/sdk/XPLMCommandCallback_f/)\n\n```cpp\ntypedef int (* XPLMCommandCallback_f)(\n                         XPLMCommandRef       inCommand,\n                         XPLMCommandPhase     inPhase,\n                         void *               inRefcon);\n\n```\n\nA command callback is a function in your plugin that is called when a command is\npressed. Your callback receives the command reference for the particular\ncommand, the phase of the command that is executing, and a reference pointer\nthat you specify when registering the callback.\n\nYour command handler should return 1 to let processing of the command continue\nto other plugins and X-Plane, or 0 to halt processing, potentially bypassing\nX-Plane code.\n\n### [XPLMFindCommand](/sdk/XPLMFindCommand/)\n\n```cpp\nXPLM_API XPLMCommandRef XPLMFindCommand(\n                         const char *         inName);\n\n```\n\n[XPLMFindCommand](/sdk/XPLMFindCommand/)looks up a command by name, and returns\nits command reference or NULL if the command does not exist.\n\n### [XPLMCommandBegin](/sdk/XPLMCommandBegin/)\n\n```cpp\nXPLM_API void       XPLMCommandBegin(\n                         XPLMCommandRef       inCommand);\n\n```\n\n[XPLMCommandBegin](/sdk/XPLMCommandBegin/)starts the execution of a command,\nspecified by its command reference. The command is “held down”\nuntil[XPLMCommandEnd](/sdk/XPLMCommandEnd/)is called. You must balance\neach[XPLMCommandBegin](/sdk/XPLMCommandBegin/)call with\nan[XPLMCommandEnd](/sdk/XPLMCommandEnd/)call.\n\n### [XPLMCommandEnd](/sdk/XPLMCommandEnd/)\n\n```cpp\nXPLM_API void       XPLMCommandEnd(\n                         XPLMCommandRef       inCommand);\n\n```\n\n[XPLMCommandEnd](/sdk/XPLMCommandEnd/)ends the execution of a given command that\nwas started with[XPLMCommandBegin](/sdk/XPLMCommandBegin/). You must not\nissue[XPLMCommandEnd](/sdk/XPLMCommandEnd/)for a command you did not begin.\n\n### [XPLMCommandOnce](/sdk/XPLMCommandOnce/)\n\n```cpp\nXPLM_API void       XPLMCommandOnce(\n                         XPLMCommandRef       inCommand);\n\n```\n\nThis executes a given command momentarily, that is, the command begins and ends\nimmediately. This is the equivalent of\ncalling[XPLMCommandBegin](/sdk/XPLMCommandBegin/)()\nand[XPLMCommandEnd](/sdk/XPLMCommandEnd/)() back to back.\n\n### [XPLMCreateCommand](/sdk/XPLMCreateCommand/)\n\n```cpp\nXPLM_API XPLMCommandRef XPLMCreateCommand(\n                         const char *         inName,\n                         const char *         inDescription);\n\n```\n\n[XPLMCreateCommand](/sdk/XPLMCreateCommand/)creates a new command for a given\nstring. If the command already exists, the existing command reference is\nreturned. The description may appear in user interface contexts, such as the\njoystick configuration screen.\n\n### [XPLMRegisterCommandHandler](/sdk/XPLMRegisterCommandHandler/)\n\n```cpp\nXPLM_API void       XPLMRegisterCommandHandler(\n                         XPLMCommandRef       inComand,\n                         XPLMCommandCallback_f inHandler,\n                         int                  inBefore,\n                         void *               inRefcon);\n\n```\n\n[XPLMRegisterCommandHandler](/sdk/XPLMRegisterCommandHandler/)registers a\ncallback to be called when a command is executed. You provide a callback with a\nreference pointer.\n\nIf inBefore is true, your command handler callback will be executed before\nX-Plane executes the command, and returning 0 from your callback will disable\nX-Plane’s processing of the command. If inBefore is false, your callback will\nrun after X-Plane. (You can register a single callback both before and after a\ncommand.)\n\n### [XPLMUnregisterCommandHandler](/sdk/XPLMUnregisterCommandHandler/)\n\n```cpp\nXPLM_API void       XPLMUnregisterCommandHandler(\n                         XPLMCommandRef       inComand,\n                         XPLMCommandCallback_f inHandler,\n                         int                  inBefore,\n                         void *               inRefcon);\n\n```\n\n[XPLMUnregisterCommandHandler](/sdk/XPLMUnregisterCommandHandler/)removes a\ncommand callback registered\nwith[XPLMRegisterCommandHandler](/sdk/XPLMRegisterCommandHandler/).\n\n## X-PLANE USER INTERACTION\n\nWARNING: The legacy user interaction API is deprecated; while it was the only\nway to run commands in X-Plane 6,7 and 8, it is obsolete, and was replaced by\nthe command system API in X-Plane 9. You should not use this API; replace any of\nthe calls below with XPLMCommand invocations based on persistent command\nstrings. The documentation that follows is for historic reference only.\n\nThe legacy user interaction APIs let you simulate commands the user can do with\na joystick, keyboard etc. Note that it is generally safer for future\ncompatibility to use one of these commands than to manipulate the underlying sim\ndata.\n\n### [XPLMCommandKeyID](/sdk/XPLMCommandKeyID/)\n\nThese enums represent all the keystrokes available within X-Plane. They can be\nsent to X-Plane directly. For example, you can reverse thrust using these\nenumerations.\n\n```cpp\nenum {\n          xplm_key_pause=0,\n          xplm_key_revthrust,\n          xplm_key_jettison,\n          xplm_key_brakesreg,\n          xplm_key_brakesmax,\n          xplm_key_gear,\n          xplm_key_timedn,\n          xplm_key_timeup,\n          xplm_key_fadec,\n          xplm_key_otto_dis,\n          xplm_key_otto_atr,\n          xplm_key_otto_asi,\n          xplm_key_otto_hdg,\n          xplm_key_otto_gps,\n          xplm_key_otto_lev,\n          xplm_key_otto_hnav,\n          xplm_key_otto_alt,\n          xplm_key_otto_vvi,\n          xplm_key_otto_vnav,\n          xplm_key_otto_nav1,\n          xplm_key_otto_nav2,\n          xplm_key_targ_dn,\n          xplm_key_targ_up,\n          xplm_key_hdgdn,\n          xplm_key_hdgup,\n          xplm_key_barodn,\n          xplm_key_baroup,\n          xplm_key_obs1dn,\n          xplm_key_obs1up,\n          xplm_key_obs2dn,\n          xplm_key_obs2up,\n          xplm_key_com1_1,\n          xplm_key_com1_2,\n          xplm_key_com1_3,\n          xplm_key_com1_4,\n          xplm_key_nav1_1,\n          xplm_key_nav1_2,\n          xplm_key_nav1_3,\n          xplm_key_nav1_4,\n          xplm_key_com2_1,\n          xplm_key_com2_2,\n          xplm_key_com2_3,\n          xplm_key_com2_4,\n          xplm_key_nav2_1,\n          xplm_key_nav2_2,\n          xplm_key_nav2_3,\n          xplm_key_nav2_4,\n          xplm_key_adf_1,\n          xplm_key_adf_2,\n          xplm_key_adf_3,\n          xplm_key_adf_4,\n          xplm_key_adf_5,\n          xplm_key_adf_6,\n          xplm_key_transpon_1,\n          xplm_key_transpon_2,\n          xplm_key_transpon_3,\n          xplm_key_transpon_4,\n          xplm_key_transpon_5,\n          xplm_key_transpon_6,\n          xplm_key_transpon_7,\n          xplm_key_transpon_8,\n          xplm_key_flapsup,\n          xplm_key_flapsdn,\n          xplm_key_cheatoff,\n          xplm_key_cheaton,\n          xplm_key_sbrkoff,\n          xplm_key_sbrkon,\n          xplm_key_ailtrimL,\n          xplm_key_ailtrimR,\n          xplm_key_rudtrimL,\n          xplm_key_rudtrimR,\n          xplm_key_elvtrimD,\n          xplm_key_elvtrimU,\n          xplm_key_forward,\n          xplm_key_down,\n          xplm_key_left,\n          xplm_key_right,\n          xplm_key_back,\n          xplm_key_tower,\n          xplm_key_runway,\n          xplm_key_chase,\n          xplm_key_free1,\n          xplm_key_free2,\n          xplm_key_spot,\n          xplm_key_fullscrn1,\n          xplm_key_fullscrn2,\n          xplm_key_tanspan,\n          xplm_key_smoke,\n          xplm_key_map,\n          xplm_key_zoomin,\n          xplm_key_zoomout,\n          xplm_key_cycledump,\n          xplm_key_replay,\n          xplm_key_tranID,\n          xplm_key_max\n};\ntypedef int XPLMCommandKeyID;\n```\n\n### [XPLMCommandButtonID](/sdk/XPLMCommandButtonID/)\n\nThese are enumerations for all of the things you can do with a joystick button\nin X-Plane. They currently match the buttons menu in the equipment setup dialog,\nbut these enums will be stable even if they change in X-Plane.\n\n```cpp\nenum {\n          xplm_joy_nothing=0,\n          xplm_joy_start_all,\n          xplm_joy_start_0,\n          xplm_joy_start_1,\n          xplm_joy_start_2,\n          xplm_joy_start_3,\n          xplm_joy_start_4,\n          xplm_joy_start_5,\n          xplm_joy_start_6,\n          xplm_joy_start_7,\n          xplm_joy_throt_up,\n          xplm_joy_throt_dn,\n          xplm_joy_prop_up,\n          xplm_joy_prop_dn,\n          xplm_joy_mixt_up,\n          xplm_joy_mixt_dn,\n          xplm_joy_carb_tog,\n          xplm_joy_carb_on,\n          xplm_joy_carb_off,\n          xplm_joy_trev,\n          xplm_joy_trm_up,\n          xplm_joy_trm_dn,\n          xplm_joy_rot_trm_up,\n          xplm_joy_rot_trm_dn,\n          xplm_joy_rud_lft,\n          xplm_joy_rud_cntr,\n          xplm_joy_rud_rgt,\n          xplm_joy_ail_lft,\n          xplm_joy_ail_cntr,\n          xplm_joy_ail_rgt,\n          xplm_joy_B_rud_lft,\n          xplm_joy_B_rud_rgt,\n          xplm_joy_look_up,\n          xplm_joy_look_dn,\n          xplm_joy_look_lft,\n          xplm_joy_look_rgt,\n          xplm_joy_glance_l,\n          xplm_joy_glance_r,\n          xplm_joy_v_fnh,\n          xplm_joy_v_fwh,\n          xplm_joy_v_tra,\n          xplm_joy_v_twr,\n          xplm_joy_v_run,\n          xplm_joy_v_cha,\n          xplm_joy_v_fr1,\n          xplm_joy_v_fr2,\n          xplm_joy_v_spo,\n          xplm_joy_flapsup,\n          xplm_joy_flapsdn,\n          xplm_joy_vctswpfwd,\n          xplm_joy_vctswpaft,\n          xplm_joy_gear_tog,\n          xplm_joy_gear_up,\n          xplm_joy_gear_down,\n          xplm_joy_lft_brake,\n          xplm_joy_rgt_brake,\n          xplm_joy_brakesREG,\n          xplm_joy_brakesMAX,\n          xplm_joy_speedbrake,\n          xplm_joy_ott_dis,\n          xplm_joy_ott_atr,\n          xplm_joy_ott_asi,\n          xplm_joy_ott_hdg,\n          xplm_joy_ott_alt,\n          xplm_joy_ott_vvi,\n          xplm_joy_tim_start,\n          xplm_joy_tim_reset,\n          xplm_joy_ecam_up,\n          xplm_joy_ecam_dn,\n          xplm_joy_fadec,\n          xplm_joy_yaw_damp,\n          xplm_joy_art_stab,\n          xplm_joy_chute,\n          xplm_joy_JATO,\n          xplm_joy_arrest,\n          xplm_joy_jettison,\n          xplm_joy_fuel_dump,\n          xplm_joy_puffsmoke,\n          xplm_joy_prerotate,\n          xplm_joy_UL_prerot,\n          xplm_joy_UL_collec,\n          xplm_joy_TOGA,\n          xplm_joy_shutdown,\n          xplm_joy_con_atc,\n          xplm_joy_fail_now,\n          xplm_joy_pause,\n          xplm_joy_rock_up,\n          xplm_joy_rock_dn,\n          xplm_joy_rock_lft,\n          xplm_joy_rock_rgt,\n          xplm_joy_rock_for,\n          xplm_joy_rock_aft,\n          xplm_joy_idle_hilo,\n          xplm_joy_lanlights,\n          xplm_joy_max\n};\ntypedef int XPLMCommandButtonID;\n```\n\n### [XPLMSimulateKeyPress](/sdk/XPLMSimulateKeyPress/)\n\n```cpp\nXPLM_API void       XPLMSimulateKeyPress(\n                         int                  inKeyType,\n                         int                  inKey);\n\n```\n\nThis function simulates a key being pressed for X-Plane. The keystroke goes\ndirectly to X-Plane; it is never sent to any plug-ins. However, since this is a\nraw key stroke it may be mapped by the keys file or enter text into a field.\n\nDeprecated: use[XPLMCommandOnce](/sdk/XPLMCommandOnce/)\n\n### [XPLMCommandKeyStroke](/sdk/XPLMCommandKeyStroke/)\n\n```cpp\nXPLM_API void       XPLMCommandKeyStroke(\n                         XPLMCommandKeyID     inKey);\n\n```\n\nThis routine simulates a command-key stroke. However, the keys are done by\nfunction, not by actual letter, so this function works even if the user has\nremapped their keyboard. Examples of things you might do with this include\npausing the simulator.\n\nDeprecated: use[XPLMCommandOnce](/sdk/XPLMCommandOnce/)\n\n### [XPLMCommandButtonPress](/sdk/XPLMCommandButtonPress/)\n\n```cpp\nXPLM_API void       XPLMCommandButtonPress(\n                         XPLMCommandButtonID  inButton);\n\n```\n\nThis function simulates any of the actions that might be taken by pressing a\njoystick button. However, this lets you call the command directly rather than\nhaving to know which button is mapped where. Important: you must release each\nbutton you press. The APIs are separate so that you can ‘hold down’ a button for\na fixed amount of time.\n\nDeprecated: use[XPLMCommandBegin](/sdk/XPLMCommandBegin/).\n\n### [XPLMCommandButtonRelease](/sdk/XPLMCommandButtonRelease/)\n\n```cpp\nXPLM_API void       XPLMCommandButtonRelease(\n                         XPLMCommandButtonID  inButton);\n\n```\n\nThis function simulates any of the actions that might be taken by pressing a\njoystick button. See[XPLMCommandButtonPress](/sdk/XPLMCommandButtonPress/).\n\nDeprecated: use[XPLMCommandEnd](/sdk/XPLMCommandEnd/).",
      "own_functions": [
        "XPLMGetSystemPath",
        "XPLMGetPrefsPath",
        "XPLMGetDirectorySeparator",
        "XPLMExtractFileAndPath",
        "XPLMGetDirectoryContents",
        "XPLMLoadDataFile",
        "XPLMSaveDataFile",
        "XPLMInitialized",
        "XPLMGetVersions",
        "XPLMGetLanguage",
        "XPLMFindSymbol",
        "XPLMSetErrorCallback",
        "XPLMDebugString",
        "XPLMSpeakString",
        "XPLMGetVirtualKeyDescription",
        "XPLMReloadScenery",
        "XPLMFindCommand",
        "XPLMCommandBegin",
        "XPLMCommandEnd",
        "XPLMCommandOnce",
        "XPLMCreateCommand",
        "XPLMRegisterCommandHandler",
        "XPLMUnregisterCommandHandler",
        "XPLMSimulateKeyPress",
        "XPLMCommandKeyStroke",
        "XPLMCommandButtonPress",
        "XPLMCommandButtonRelease",
        "XPLMDataFileType",
        "XPLMHostApplicationID",
        "XPLMLanguageCode",
        "XPLMCommandPhase"
      ],
      "processing_timestamp": "2025-06-24T22:00:23.606665+00:00",
      "title": "XPLMUtilities | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMUtilities/"
    }
  }
}