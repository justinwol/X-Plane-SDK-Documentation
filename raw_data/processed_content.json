{
  "cross_references": {
    "https://developer.x-plane.com/sdk/Button Behavior Values/": [],
    "https://developer.x-plane.com/sdk/Button Messages/": [],
    "https://developer.x-plane.com/sdk/Button Properties/": [],
    "https://developer.x-plane.com/sdk/Button Types/": [],
    "https://developer.x-plane.com/sdk/Caption Properties/": [],
    "https://developer.x-plane.com/sdk/General Graphics Properties/": [],
    "https://developer.x-plane.com/sdk/General Graphics Types Values/": [],
    "https://developer.x-plane.com/sdk/Main Window Properties/": [],
    "https://developer.x-plane.com/sdk/Main Window Type Values/": [],
    "https://developer.x-plane.com/sdk/MainWindow Messages/": [],
    "https://developer.x-plane.com/sdk/NO_PARENT/": [],
    "https://developer.x-plane.com/sdk/PARAM_PARENT/": [],
    "https://developer.x-plane.com/sdk/Progress Indicator Properties/": [],
    "https://developer.x-plane.com/sdk/Scroll Bar Messages/": [],
    "https://developer.x-plane.com/sdk/Scroll Bar Properties/": [],
    "https://developer.x-plane.com/sdk/Scroll Bar Type Values/": [],
    "https://developer.x-plane.com/sdk/SubWindow Properties/": [],
    "https://developer.x-plane.com/sdk/SubWindow Type Values/": [],
    "https://developer.x-plane.com/sdk/Text Field Messages/": [],
    "https://developer.x-plane.com/sdk/Text Field Properties/": [
      "XPLMFontID"
    ],
    "https://developer.x-plane.com/sdk/Text Field Type Values/": [],
    "https://developer.x-plane.com/sdk/XPAddWidgetCallback/": [],
    "https://developer.x-plane.com/sdk/XPBringRootWidgetToFront/": [],
    "https://developer.x-plane.com/sdk/XPCountChildWidgets/": [],
    "https://developer.x-plane.com/sdk/XPCreateCustomWidget/": [
      "XPCreateWidget",
      "WIDGET_API"
    ],
    "https://developer.x-plane.com/sdk/XPCreateWidget/": [
      "WIDGET_API"
    ],
    "https://developer.x-plane.com/sdk/XPDestroyWidget/": [],
    "https://developer.x-plane.com/sdk/XPDispatchMode/": [],
    "https://developer.x-plane.com/sdk/XPDrawElement/": [
      "XPElementStyle"
    ],
    "https://developer.x-plane.com/sdk/XPDrawTrack/": [
      "XPTrackStyle"
    ],
    "https://developer.x-plane.com/sdk/XPDrawWindow/": [
      "XPWindowStyle"
    ],
    "https://developer.x-plane.com/sdk/XPElementStyle/": [],
    "https://developer.x-plane.com/sdk/XPFindRootWidget/": [
      "WIDGET_API"
    ],
    "https://developer.x-plane.com/sdk/XPGetElementDefaultDimensions/": [
      "XPElementStyle"
    ],
    "https://developer.x-plane.com/sdk/XPGetNthChildWidget/": [
      "WIDGET_API"
    ],
    "https://developer.x-plane.com/sdk/XPGetParentWidget/": [
      "WIDGET_API"
    ],
    "https://developer.x-plane.com/sdk/XPGetTrackDefaultDimensions/": [
      "XPTrackStyle"
    ],
    "https://developer.x-plane.com/sdk/XPGetTrackMetrics/": [
      "XPTrackStyle"
    ],
    "https://developer.x-plane.com/sdk/XPGetWidgetClassFunc/": [
      "WIDGET_API"
    ],
    "https://developer.x-plane.com/sdk/XPGetWidgetDescriptor/": [],
    "https://developer.x-plane.com/sdk/XPGetWidgetExposedGeometry/": [
      "XPGetWidgetGeometry"
    ],
    "https://developer.x-plane.com/sdk/XPGetWidgetForLocation/": [
      "WIDGET_API"
    ],
    "https://developer.x-plane.com/sdk/XPGetWidgetGeometry/": [],
    "https://developer.x-plane.com/sdk/XPGetWidgetProperty/": [
      "XPWidgetPropertyID"
    ],
    "https://developer.x-plane.com/sdk/XPGetWidgetUnderlyingWindow/": [
      "XPLMDisplay",
      "WIDGET_API",
      "XPLMSetWindowPositioningMode",
      "XPLMEnableFeature"
    ],
    "https://developer.x-plane.com/sdk/XPGetWidgetWithFocus/": [
      "WIDGET_API"
    ],
    "https://developer.x-plane.com/sdk/XPGetWindowDefaultDimensions/": [
      "XPWindowStyle"
    ],
    "https://developer.x-plane.com/sdk/XPHideWidget/": [
      "XPShowWidget"
    ],
    "https://developer.x-plane.com/sdk/XPIsWidgetInFront/": [],
    "https://developer.x-plane.com/sdk/XPIsWidgetVisible/": [],
    "https://developer.x-plane.com/sdk/XPKeyState_t/": [
      "XPLMKeyFlags"
    ],
    "https://developer.x-plane.com/sdk/XPLMAcquirePlanes/": [
      "XPLMPlanes"
    ],
    "https://developer.x-plane.com/sdk/XPLMAppendMenuItem/": [],
    "https://developer.x-plane.com/sdk/XPLMAppendMenuItemWithCommand/": [
      "XPLMAppendMenuItem"
    ],
    "https://developer.x-plane.com/sdk/XPLMAppendMenuSeparator/": [],
    "https://developer.x-plane.com/sdk/XPLMAudioBus/": [],
    "https://developer.x-plane.com/sdk/XPLMAvionicsBezelCallback_f/": [],
    "https://developer.x-plane.com/sdk/XPLMAvionicsBrightness_f/": [],
    "https://developer.x-plane.com/sdk/XPLMAvionicsCallback_f/": [
      "XPLMDeviceID"
    ],
    "https://developer.x-plane.com/sdk/XPLMAvionicsCursor_f/": [
      "XPLMCursorStatus"
    ],
    "https://developer.x-plane.com/sdk/XPLMAvionicsID/": [
      "XPLMRegisterAvionicsCallbacksEx"
    ],
    "https://developer.x-plane.com/sdk/XPLMAvionicsKeyboard_f/": [
      "XPLMKeyFlags"
    ],
    "https://developer.x-plane.com/sdk/XPLMAvionicsMouseWheel_f/": [],
    "https://developer.x-plane.com/sdk/XPLMAvionicsMouse_f/": [
      "XPLMMouseStatus"
    ],
    "https://developer.x-plane.com/sdk/XPLMAvionicsNeedsDrawing/": [],
    "https://developer.x-plane.com/sdk/XPLMAvionicsScreenCallback_f/": [],
    "https://developer.x-plane.com/sdk/XPLMBankID/": [],
    "https://developer.x-plane.com/sdk/XPLMBindTexture2d/": [],
    "https://developer.x-plane.com/sdk/XPLMBringWindowToFront/": [
      "XPLMWindowLayer"
    ],
    "https://developer.x-plane.com/sdk/XPLMCameraControlDuration/": [],
    "https://developer.x-plane.com/sdk/XPLMCameraControl_f/": [],
    "https://developer.x-plane.com/sdk/XPLMCameraPosition_t/": [],
    "https://developer.x-plane.com/sdk/XPLMCanWriteDataRef/": [],
    "https://developer.x-plane.com/sdk/XPLMCheckMenuItem/": [
      "XPLMMenuCheck"
    ],
    "https://developer.x-plane.com/sdk/XPLMCheckMenuItemState/": [
      "XPLMCheckMenuItem",
      "XPLMMenuCheck"
    ],
    "https://developer.x-plane.com/sdk/XPLMClearAllMenuItems/": [],
    "https://developer.x-plane.com/sdk/XPLMClearFMSEntry/": [],
    "https://developer.x-plane.com/sdk/XPLMClearFMSFlightPlanEntry/": [
      "XPLMNavFlightPlan"
    ],
    "https://developer.x-plane.com/sdk/XPLMCommandBegin/": [
      "XPLMCommandEnd"
    ],
    "https://developer.x-plane.com/sdk/XPLMCommandButtonID/": [],
    "https://developer.x-plane.com/sdk/XPLMCommandButtonPress/": [
      "XPLMCommandBegin"
    ],
    "https://developer.x-plane.com/sdk/XPLMCommandButtonRelease/": [
      "XPLMCommandEnd",
      "XPLMCommandButtonPress"
    ],
    "https://developer.x-plane.com/sdk/XPLMCommandCallback_f/": [
      "XPLMCommandPhase"
    ],
    "https://developer.x-plane.com/sdk/XPLMCommandEnd/": [
      "XPLMCommandBegin"
    ],
    "https://developer.x-plane.com/sdk/XPLMCommandKeyID/": [],
    "https://developer.x-plane.com/sdk/XPLMCommandKeyStroke/": [
      "XPLMCommandOnce"
    ],
    "https://developer.x-plane.com/sdk/XPLMCommandOnce/": [
      "XPLMCommandBegin",
      "XPLMCommandEnd"
    ],
    "https://developer.x-plane.com/sdk/XPLMCommandPhase/": [],
    "https://developer.x-plane.com/sdk/XPLMCommandRef/": [],
    "https://developer.x-plane.com/sdk/XPLMControlCamera/": [
      "XPLMCameraControlDuration",
      "XPLMCamera"
    ],
    "https://developer.x-plane.com/sdk/XPLMCountAircraft/": [
      "XPLMPlugin"
    ],
    "https://developer.x-plane.com/sdk/XPLMCountDataRefs/": [],
    "https://developer.x-plane.com/sdk/XPLMCountFMSEntries/": [],
    "https://developer.x-plane.com/sdk/XPLMCountFMSFlightPlanEntries/": [
      "XPLMNavFlightPlan"
    ],
    "https://developer.x-plane.com/sdk/XPLMCountHotKeys/": [],
    "https://developer.x-plane.com/sdk/XPLMCountPlugins/": [],
    "https://developer.x-plane.com/sdk/XPLMCreateAvionicsEx/": [
      "XPLMDestroyAvionics"
    ],
    "https://developer.x-plane.com/sdk/XPLMCreateAvionics_t/": [
      "XPLMAvionicsNeedsDrawing",
      "XPLMCreateAvionicsEx"
    ],
    "https://developer.x-plane.com/sdk/XPLMCreateCommand/": [],
    "https://developer.x-plane.com/sdk/XPLMCreateFlightLoop/": [],
    "https://developer.x-plane.com/sdk/XPLMCreateFlightLoop_t/": [
      "XPLMCreateFlightLoop",
      "XPLMFlightLoopPhaseType"
    ],
    "https://developer.x-plane.com/sdk/XPLMCreateInstance/": [
      "XPLMInstance"
    ],
    "https://developer.x-plane.com/sdk/XPLMCreateMapLayer/": [
      "XPLMMap",
      "XPLMRegisterMapCreationHook",
      "XPLMMapExists"
    ],
    "https://developer.x-plane.com/sdk/XPLMCreateMapLayer_t/": [
      "XPLMCreateMapLayer",
      "XPLMMapLayerType",
      "XPLMMap"
    ],
    "https://developer.x-plane.com/sdk/XPLMCreateMenu/": [],
    "https://developer.x-plane.com/sdk/XPLMCreateProbe/": [
      "XPLMProbeType"
    ],
    "https://developer.x-plane.com/sdk/XPLMCreateWindow/": [
      "XPLMCreateWindowEx"
    ],
    "https://developer.x-plane.com/sdk/XPLMCreateWindowEx/": [
      "XPLMCreateWindow"
    ],
    "https://developer.x-plane.com/sdk/XPLMCreateWindow_t/": [
      "XPLMCreateWindowEx",
      "XPLMGetMouseLocationGlobal",
      "XPLMWindowDecoration",
      "XPLMGetScreenBoundsGlobal",
      "XPLMWindowLayer",
      "XPLMGetMouseLocation",
      "XPLMGetScreenSize",
      "XPLMSetWindowPositioningMode",
      "XPLMCreateWindow"
    ],
    "https://developer.x-plane.com/sdk/XPLMCursorStatus/": [],
    "https://developer.x-plane.com/sdk/XPLMCustomizeAvionics_t/": [
      "XPLMRegisterAvionicsCallbacksEx",
      "XPLMDeviceID"
    ],
    "https://developer.x-plane.com/sdk/XPLMDataChanged_f/": [],
    "https://developer.x-plane.com/sdk/XPLMDataFileType/": [],
    "https://developer.x-plane.com/sdk/XPLMDataRef/": [
      "XPLMFindDataRef"
    ],
    "https://developer.x-plane.com/sdk/XPLMDataRefInfo_t/": [
      "XPLMPlugin",
      "XPLMDataTypeID"
    ],
    "https://developer.x-plane.com/sdk/XPLMDataTypeID/": [],
    "https://developer.x-plane.com/sdk/XPLMDebugString/": [],
    "https://developer.x-plane.com/sdk/XPLMDefs/": [
      "XPLMFindPluginBySignature",
      "XPLMPlugin"
    ],
    "https://developer.x-plane.com/sdk/XPLMDegMagneticToDegTrue/": [],
    "https://developer.x-plane.com/sdk/XPLMDegTrueToDegMagnetic/": [],
    "https://developer.x-plane.com/sdk/XPLMDestroyAvionics/": [
      "XPLMCreateAvionicsEx"
    ],
    "https://developer.x-plane.com/sdk/XPLMDestroyFlightLoop/": [
      "XPLMCreateFlightLoop"
    ],
    "https://developer.x-plane.com/sdk/XPLMDestroyInstance/": [
      "XPLMCreateInstance",
      "XPLMInstance"
    ],
    "https://developer.x-plane.com/sdk/XPLMDestroyMapLayer/": [
      "XPLMMap"
    ],
    "https://developer.x-plane.com/sdk/XPLMDestroyMenu/": [],
    "https://developer.x-plane.com/sdk/XPLMDestroyProbe/": [],
    "https://developer.x-plane.com/sdk/XPLMDestroyWindow/": [],
    "https://developer.x-plane.com/sdk/XPLMDeviceID/": [],
    "https://developer.x-plane.com/sdk/XPLMDisableAIForPlane/": [],
    "https://developer.x-plane.com/sdk/XPLMDisablePlugin/": [
      "XPLMPlugin"
    ],
    "https://developer.x-plane.com/sdk/XPLMDontControlCamera/": [],
    "https://developer.x-plane.com/sdk/XPLMDrawAircraft/": [
      "XPLMInstance"
    ],
    "https://developer.x-plane.com/sdk/XPLMDrawCallback_f/": [
      "XPLMDrawingPhase"
    ],
    "https://developer.x-plane.com/sdk/XPLMDrawInfo_t/": [],
    "https://developer.x-plane.com/sdk/XPLMDrawMapIconFromSheet/": [
      "XPLMMap",
      "XPLMMapOrientation"
    ],
    "https://developer.x-plane.com/sdk/XPLMDrawMapLabel/": [
      "XPLMMap",
      "XPLMMapOrientation"
    ],
    "https://developer.x-plane.com/sdk/XPLMDrawNumber/": [
      "XPLMFontID"
    ],
    "https://developer.x-plane.com/sdk/XPLMDrawObjects/": [],
    "https://developer.x-plane.com/sdk/XPLMDrawString/": [
      "XPLMFontID"
    ],
    "https://developer.x-plane.com/sdk/XPLMDrawTranslucentDarkBox/": [],
    "https://developer.x-plane.com/sdk/XPLMDrawWindow_f/": [],
    "https://developer.x-plane.com/sdk/XPLMDrawingPhase/": [
      "XPLMMap"
    ],
    "https://developer.x-plane.com/sdk/XPLMEnableFeature/": [],
    "https://developer.x-plane.com/sdk/XPLMEnableMenuItem/": [],
    "https://developer.x-plane.com/sdk/XPLMEnablePlugin/": [
      "XPLMPlugin"
    ],
    "https://developer.x-plane.com/sdk/XPLMEnumerateFeatures/": [],
    "https://developer.x-plane.com/sdk/XPLMError_f/": [
      "XPLMSetErrorCallback"
    ],
    "https://developer.x-plane.com/sdk/XPLMExtractFileAndPath/": [],
    "https://developer.x-plane.com/sdk/XPLMFeatureEnumerator_f/": [],
    "https://developer.x-plane.com/sdk/XPLMFindAircraftMenu/": [
      "XPLMAppendMenuItemWithCommand",
      "XPLMAppendMenuItem"
    ],
    "https://developer.x-plane.com/sdk/XPLMFindCommand/": [],
    "https://developer.x-plane.com/sdk/XPLMFindDataRef/": [],
    "https://developer.x-plane.com/sdk/XPLMFindFirstNavAidOfType/": [
      "XPLMNavType"
    ],
    "https://developer.x-plane.com/sdk/XPLMFindLastNavAidOfType/": [
      "XPLMNavType"
    ],
    "https://developer.x-plane.com/sdk/XPLMFindNavAid/": [
      "XPLMNavType"
    ],
    "https://developer.x-plane.com/sdk/XPLMFindPluginByPath/": [
      "XPLMPlugin"
    ],
    "https://developer.x-plane.com/sdk/XPLMFindPluginBySignature/": [
      "XPLMPlugin"
    ],
    "https://developer.x-plane.com/sdk/XPLMFindPluginsMenu/": [],
    "https://developer.x-plane.com/sdk/XPLMFindSymbol/": [
      "XPLMGetVersions"
    ],
    "https://developer.x-plane.com/sdk/XPLMFixedString150_t/": [],
    "https://developer.x-plane.com/sdk/XPLMFlightLoopID/": [],
    "https://developer.x-plane.com/sdk/XPLMFlightLoopPhaseType/": [],
    "https://developer.x-plane.com/sdk/XPLMFlightLoop_f/": [],
    "https://developer.x-plane.com/sdk/XPLMFontID/": [],
    "https://developer.x-plane.com/sdk/XPLMGenerateTextureNumbers/": [],
    "https://developer.x-plane.com/sdk/XPLMGetAllMonitorBoundsGlobal/": [
      "XPLMGetAllMonitorBoundsOS",
      "XPLMGetScreenBoundsGlobal"
    ],
    "https://developer.x-plane.com/sdk/XPLMGetAllMonitorBoundsOS/": [
      "XPLMGetAllMonitorBoundsGlobal"
    ],
    "https://developer.x-plane.com/sdk/XPLMGetAvionicsBrightnessRheo/": [],
    "https://developer.x-plane.com/sdk/XPLMGetAvionicsBusVoltsRatio/": [],
    "https://developer.x-plane.com/sdk/XPLMGetAvionicsGeometry/": [],
    "https://developer.x-plane.com/sdk/XPLMGetAvionicsGeometryOS/": [
      "XPLMGetAvionicsGeometry"
    ],
    "https://developer.x-plane.com/sdk/XPLMGetAvionicsHandle/": [
      "XPLMDeviceID"
    ],
    "https://developer.x-plane.com/sdk/XPLMGetCycleNumber/": [],
    "https://developer.x-plane.com/sdk/XPLMGetDataRefInfo/": [],
    "https://developer.x-plane.com/sdk/XPLMGetDataRefTypes/": [
      "XPLMDataTypeID"
    ],
    "https://developer.x-plane.com/sdk/XPLMGetDataRefsByIndex/": [],
    "https://developer.x-plane.com/sdk/XPLMGetDatab/": [],
    "https://developer.x-plane.com/sdk/XPLMGetDatab_f/": [
      "XPLMGetDatab"
    ],
    "https://developer.x-plane.com/sdk/XPLMGetDatad/": [],
    "https://developer.x-plane.com/sdk/XPLMGetDatad_f/": [
      "XPLMGetDatad"
    ],
    "https://developer.x-plane.com/sdk/XPLMGetDataf/": [],
    "https://developer.x-plane.com/sdk/XPLMGetDataf_f/": [
      "XPLMGetDataf"
    ],
    "https://developer.x-plane.com/sdk/XPLMGetDatai/": [],
    "https://developer.x-plane.com/sdk/XPLMGetDatai_f/": [
      "XPLMGetDatai"
    ],
    "https://developer.x-plane.com/sdk/XPLMGetDatavf/": [],
    "https://developer.x-plane.com/sdk/XPLMGetDatavf_f/": [
      "XPLMGetDatavf"
    ],
    "https://developer.x-plane.com/sdk/XPLMGetDatavi/": [],
    "https://developer.x-plane.com/sdk/XPLMGetDatavi_f/": [
      "XPLMGetDatavi"
    ],
    "https://developer.x-plane.com/sdk/XPLMGetDestinationFMSEntry/": [],
    "https://developer.x-plane.com/sdk/XPLMGetDestinationFMSFlightPlanEntry/": [
      "XPLMNavFlightPlan"
    ],
    "https://developer.x-plane.com/sdk/XPLMGetDirectoryContents/": [],
    "https://developer.x-plane.com/sdk/XPLMGetDirectorySeparator/": [],
    "https://developer.x-plane.com/sdk/XPLMGetDisplayedFMSEntry/": [],
    "https://developer.x-plane.com/sdk/XPLMGetDisplayedFMSFlightPlanEntry/": [
      "XPLMNavFlightPlan"
    ],
    "https://developer.x-plane.com/sdk/XPLMGetElapsedTime/": [],
    "https://developer.x-plane.com/sdk/XPLMGetFMODChannelGroup/": [
      "XPLMAudioBus"
    ],
    "https://developer.x-plane.com/sdk/XPLMGetFMODStudio/": [],
    "https://developer.x-plane.com/sdk/XPLMGetFMSEntryInfo/": [
      "XPLMNavType"
    ],
    "https://developer.x-plane.com/sdk/XPLMGetFMSFlightPlanEntryInfo/": [
      "XPLMNavType",
      "XPLMNavFlightPlan"
    ],
    "https://developer.x-plane.com/sdk/XPLMGetFirstNavAid/": [],
    "https://developer.x-plane.com/sdk/XPLMGetFontDimensions/": [
      "XPLMFontID"
    ],
    "https://developer.x-plane.com/sdk/XPLMGetGPSDestination/": [],
    "https://developer.x-plane.com/sdk/XPLMGetGPSDestinationType/": [
      "XPLMGetGPSDestination",
      "XPLMNavType"
    ],
    "https://developer.x-plane.com/sdk/XPLMGetHotKeyInfo/": [
      "XPLMKeyFlags",
      "XPLMPlugin"
    ],
    "https://developer.x-plane.com/sdk/XPLMGetLanguage/": [
      "XPLMLanguageCode"
    ],
    "https://developer.x-plane.com/sdk/XPLMGetMETARForAirport/": [],
    "https://developer.x-plane.com/sdk/XPLMGetMagneticVariation/": [],
    "https://developer.x-plane.com/sdk/XPLMGetMouseLocation/": [
      "XPLMGetMouseLocationGlobal"
    ],
    "https://developer.x-plane.com/sdk/XPLMGetMouseLocationGlobal/": [
      "XPLMCreateWindowEx",
      "XPLMGetMouseLocation",
      "XPLMCreateWindow"
    ],
    "https://developer.x-plane.com/sdk/XPLMGetMyID/": [
      "XPLMPlugin"
    ],
    "https://developer.x-plane.com/sdk/XPLMGetNavAidInfo/": [
      "XPLMNavType"
    ],
    "https://developer.x-plane.com/sdk/XPLMGetNextNavAid/": [],
    "https://developer.x-plane.com/sdk/XPLMGetNthAircraftModel/": [],
    "https://developer.x-plane.com/sdk/XPLMGetNthHotKey/": [],
    "https://developer.x-plane.com/sdk/XPLMGetNthPlugin/": [
      "XPLMPlugin",
      "XPLMCountPlugins"
    ],
    "https://developer.x-plane.com/sdk/XPLMGetPluginInfo/": [
      "XPLMPlugin"
    ],
    "https://developer.x-plane.com/sdk/XPLMGetPrefsPath/": [
      "XPLMExtractFileAndPath"
    ],
    "https://developer.x-plane.com/sdk/XPLMGetScreenBoundsGlobal/": [
      "XPLMGetScreenSize"
    ],
    "https://developer.x-plane.com/sdk/XPLMGetScreenSize/": [],
    "https://developer.x-plane.com/sdk/XPLMGetSystemPath/": [],
    "https://developer.x-plane.com/sdk/XPLMGetTexture/": [
      "XPLMTextureID"
    ],
    "https://developer.x-plane.com/sdk/XPLMGetVersions/": [
      "XPLMHostApplicationID"
    ],
    "https://developer.x-plane.com/sdk/XPLMGetVirtualKeyDescription/": [],
    "https://developer.x-plane.com/sdk/XPLMGetWeatherAtLocation/": [],
    "https://developer.x-plane.com/sdk/XPLMGetWindowGeometry/": [
      "XPLMCreateWindowEx",
      "XPLMCreateWindow"
    ],
    "https://developer.x-plane.com/sdk/XPLMGetWindowGeometryOS/": [
      "XPLMGetWindowGeometry"
    ],
    "https://developer.x-plane.com/sdk/XPLMGetWindowGeometryVR/": [
      "XPLMWindowIsInVR",
      "XPLMGetWindowGeometry"
    ],
    "https://developer.x-plane.com/sdk/XPLMGetWindowIsVisible/": [],
    "https://developer.x-plane.com/sdk/XPLMGetWindowRefCon/": [],
    "https://developer.x-plane.com/sdk/XPLMHandleCursor_f/": [
      "XPLMCursorStatus",
      "XPLMCreateWindowEx",
      "XPLMCreateWindow"
    ],
    "https://developer.x-plane.com/sdk/XPLMHandleKey_f/": [
      "XPLMKeyFlags",
      "unsigned"
    ],
    "https://developer.x-plane.com/sdk/XPLMHandleMouseClick_f/": [
      "XPLMMouseStatus",
      "XPLMCreateWindowEx",
      "XPLMCreateWindow"
    ],
    "https://developer.x-plane.com/sdk/XPLMHandleMouseWheel_f/": [
      "XPLMCreateWindowEx",
      "XPLMCreateWindow"
    ],
    "https://developer.x-plane.com/sdk/XPLMHasAvionicsKeyboardFocus/": [],
    "https://developer.x-plane.com/sdk/XPLMHasFeature/": [],
    "https://developer.x-plane.com/sdk/XPLMHasKeyboardFocus/": [],
    "https://developer.x-plane.com/sdk/XPLMHostApplicationID/": [],
    "https://developer.x-plane.com/sdk/XPLMHotKeyID/": [],
    "https://developer.x-plane.com/sdk/XPLMHotKey_f/": [],
    "https://developer.x-plane.com/sdk/XPLMInitialized/": [],
    "https://developer.x-plane.com/sdk/XPLMInstance/": [],
    "https://developer.x-plane.com/sdk/XPLMInstanceRef/": [],
    "https://developer.x-plane.com/sdk/XPLMInstanceSetPosition/": [],
    "https://developer.x-plane.com/sdk/XPLMIsAvionicsBound/": [],
    "https://developer.x-plane.com/sdk/XPLMIsAvionicsPoppedOut/": [],
    "https://developer.x-plane.com/sdk/XPLMIsAvionicsPopupVisible/": [],
    "https://developer.x-plane.com/sdk/XPLMIsCameraBeingControlled/": [
      "XPLMCameraControlDuration",
      "XPLMCamera"
    ],
    "https://developer.x-plane.com/sdk/XPLMIsCursorOverAvionics/": [],
    "https://developer.x-plane.com/sdk/XPLMIsDataRefGood/": [
      "XPLMFindDataRef"
    ],
    "https://developer.x-plane.com/sdk/XPLMIsFeatureEnabled/": [],
    "https://developer.x-plane.com/sdk/XPLMIsPluginEnabled/": [
      "XPLMPlugin"
    ],
    "https://developer.x-plane.com/sdk/XPLMIsWindowInFront/": [
      "XPLMWindowLayer"
    ],
    "https://developer.x-plane.com/sdk/XPLMKeyFlags/": [],
    "https://developer.x-plane.com/sdk/XPLMKeySniffer_f/": [
      "XPLMKeyFlags",
      "unsigned",
      "XPLMCreateWindow"
    ],
    "https://developer.x-plane.com/sdk/XPLMLanguageCode/": [],
    "https://developer.x-plane.com/sdk/XPLMLibraryEnumerator_f/": [],
    "https://developer.x-plane.com/sdk/XPLMLoadDataFile/": [
      "XPLMDataFileType"
    ],
    "https://developer.x-plane.com/sdk/XPLMLoadFMSFlightPlan/": [
      "unsigned"
    ],
    "https://developer.x-plane.com/sdk/XPLMLoadObject/": [],
    "https://developer.x-plane.com/sdk/XPLMLoadObjectAsync/": [
      "XPLMLoadObject"
    ],
    "https://developer.x-plane.com/sdk/XPLMLocalToWorld/": [],
    "https://developer.x-plane.com/sdk/XPLMLookupObjects/": [],
    "https://developer.x-plane.com/sdk/XPLMMap/": [],
    "https://developer.x-plane.com/sdk/XPLMMapCreatedCallback_f/": [
      "XPLMCreateMapLayer"
    ],
    "https://developer.x-plane.com/sdk/XPLMMapDrawingCallback_f/": [
      "XPLMMapStyle",
      "XPLMMapProject"
    ],
    "https://developer.x-plane.com/sdk/XPLMMapExists/": [
      "XPLMCreateMapLayer"
    ],
    "https://developer.x-plane.com/sdk/XPLMMapGetNorthHeading/": [
      "XPLMMapProject"
    ],
    "https://developer.x-plane.com/sdk/XPLMMapIconDrawingCallback_f/": [
      "XPLMDrawMapIconFromSheet",
      "XPLMCreateMapLayer",
      "XPLMMapStyle",
      "XPLMMapProject",
      "XPLMMapLayerType"
    ],
    "https://developer.x-plane.com/sdk/XPLMMapLabelDrawingCallback_f/": [
      "XPLMCreateMapLayer",
      "XPLMMapStyle",
      "XPLMMapProject",
      "XPLMMapLayerType",
      "XPLMDrawMapLabel"
    ],
    "https://developer.x-plane.com/sdk/XPLMMapLayerID/": [],
    "https://developer.x-plane.com/sdk/XPLMMapLayerType/": [],
    "https://developer.x-plane.com/sdk/XPLMMapOrientation/": [],
    "https://developer.x-plane.com/sdk/XPLMMapPrepareCacheCallback_f/": [
      "XPLMMapProject"
    ],
    "https://developer.x-plane.com/sdk/XPLMMapProject/": [
      "XPLMMapUnproject"
    ],
    "https://developer.x-plane.com/sdk/XPLMMapProjectionID/": [
      "XPLMMapProject"
    ],
    "https://developer.x-plane.com/sdk/XPLMMapScaleMeter/": [
      "XPLMMapProject"
    ],
    "https://developer.x-plane.com/sdk/XPLMMapStyle/": [],
    "https://developer.x-plane.com/sdk/XPLMMapUnproject/": [
      "XPLMMapProject"
    ],
    "https://developer.x-plane.com/sdk/XPLMMapWillBeDeletedCallback_f/": [],
    "https://developer.x-plane.com/sdk/XPLMMeasureString/": [
      "XPLMFontID"
    ],
    "https://developer.x-plane.com/sdk/XPLMMenuCheck/": [],
    "https://developer.x-plane.com/sdk/XPLMMenuHandler_f/": [],
    "https://developer.x-plane.com/sdk/XPLMMenuID/": [],
    "https://developer.x-plane.com/sdk/XPLMMenus/": [],
    "https://developer.x-plane.com/sdk/XPLMMouseStatus/": [],
    "https://developer.x-plane.com/sdk/XPLMNavFlightPlan/": [],
    "https://developer.x-plane.com/sdk/XPLMNavRef/": [],
    "https://developer.x-plane.com/sdk/XPLMNavType/": [
      "XPLMSetFMSEntryLatLon"
    ],
    "https://developer.x-plane.com/sdk/XPLMNavigation/": [],
    "https://developer.x-plane.com/sdk/XPLMObjectLoaded_f/": [],
    "https://developer.x-plane.com/sdk/XPLMObjectRef/": [],
    "https://developer.x-plane.com/sdk/XPLMPCMComplete_f/": [
      "XPLMPlayPCMOnBus"
    ],
    "https://developer.x-plane.com/sdk/XPLMPlaceUserAtAirport/": [],
    "https://developer.x-plane.com/sdk/XPLMPlaceUserAtLocation/": [],
    "https://developer.x-plane.com/sdk/XPLMPlaneDrawState_t/": [],
    "https://developer.x-plane.com/sdk/XPLMPlanes/": [
      "XPLMInstance",
      "XPLMPlugin",
      "XPLMGetSystemPath"
    ],
    "https://developer.x-plane.com/sdk/XPLMPlanesAvailable_f/": [],
    "https://developer.x-plane.com/sdk/XPLMPlayPCMOnBus/": [
      "XPLMAudioBus"
    ],
    "https://developer.x-plane.com/sdk/XPLMPlugin/": [
      "XPLMInstance",
      "unsigned",
      "XPLMBankID",
      "XPLMDisplay",
      "XPLMSound"
    ],
    "https://developer.x-plane.com/sdk/XPLMPluginID/": [
      "XPLMFindPluginBySignature"
    ],
    "https://developer.x-plane.com/sdk/XPLMPopOutAvionics/": [],
    "https://developer.x-plane.com/sdk/XPLMProbeInfo_t/": [],
    "https://developer.x-plane.com/sdk/XPLMProbeRef/": [],
    "https://developer.x-plane.com/sdk/XPLMProbeResult/": [],
    "https://developer.x-plane.com/sdk/XPLMProbeTerrainXYZ/": [
      "XPLMProbeResult"
    ],
    "https://developer.x-plane.com/sdk/XPLMProbeType/": [],
    "https://developer.x-plane.com/sdk/XPLMProcessing/": [
      "XPLMInstance",
      "XPLMDisplay"
    ],
    "https://developer.x-plane.com/sdk/XPLMReadCameraPosition/": [
      "XPLMCamera"
    ],
    "https://developer.x-plane.com/sdk/XPLMReceiveMonitorBoundsGlobal_f/": [],
    "https://developer.x-plane.com/sdk/XPLMReceiveMonitorBoundsOS_f/": [],
    "https://developer.x-plane.com/sdk/XPLMRegisterAvionicsCallbacksEx/": [
      "XPLMUnregisterAvionicsCallbacks"
    ],
    "https://developer.x-plane.com/sdk/XPLMRegisterCommandHandler/": [],
    "https://developer.x-plane.com/sdk/XPLMRegisterDataAccessor/": [
      "XPLMGetDatad",
      "XPLMGetDatavf",
      "XPLMSetDatai",
      "XPLMSetDataf",
      "XPLMGetDataf",
      "XPLMSetDatavi",
      "XPLMGetDatavi",
      "XPLMGetDatab",
      "XPLMSetDatavf",
      "XPLMDataTypeID",
      "XPLMSetDatad",
      "XPLMGetDatai",
      "XPLMSetDatab"
    ],
    "https://developer.x-plane.com/sdk/XPLMRegisterDrawCallback/": [
      "XPLMInstance",
      "XPLMDrawingPhase"
    ],
    "https://developer.x-plane.com/sdk/XPLMRegisterFlightLoopCallback/": [
      "XPLMCreateFlightLoop"
    ],
    "https://developer.x-plane.com/sdk/XPLMRegisterHotKey/": [
      "XPLMKeyFlags"
    ],
    "https://developer.x-plane.com/sdk/XPLMRegisterKeySniffer/": [],
    "https://developer.x-plane.com/sdk/XPLMRegisterMapCreationHook/": [
      "XPLMCreateMapLayer",
      "XPLMMapExists",
      "XPLMMap"
    ],
    "https://developer.x-plane.com/sdk/XPLMReinitUsersPlane/": [
      "XPLMPlaceUserAtLocation",
      "XPLMPlaceUserAtAirport",
      "XPLMSetUsersAircraft"
    ],
    "https://developer.x-plane.com/sdk/XPLMReleasePlanes/": [],
    "https://developer.x-plane.com/sdk/XPLMReloadPlugins/": [],
    "https://developer.x-plane.com/sdk/XPLMReloadScenery/": [],
    "https://developer.x-plane.com/sdk/XPLMRemoveMenuItem/": [],
    "https://developer.x-plane.com/sdk/XPLMSaveDataFile/": [
      "XPLMDataFileType"
    ],
    "https://developer.x-plane.com/sdk/XPLMSaveFMSFlightPlan/": [],
    "https://developer.x-plane.com/sdk/XPLMScenery/": [],
    "https://developer.x-plane.com/sdk/XPLMScheduleFlightLoop/": [],
    "https://developer.x-plane.com/sdk/XPLMSendMessageToPlugin/": [
      "XPLMPlugin"
    ],
    "https://developer.x-plane.com/sdk/XPLMSetActiveAircraftCount/": [],
    "https://developer.x-plane.com/sdk/XPLMSetAircraftModel/": [
      "XPLMSetUsersAircraft"
    ],
    "https://developer.x-plane.com/sdk/XPLMSetAudioCone/": [],
    "https://developer.x-plane.com/sdk/XPLMSetAudioFadeDistance/": [],
    "https://developer.x-plane.com/sdk/XPLMSetAudioPitch/": [],
    "https://developer.x-plane.com/sdk/XPLMSetAudioPosition/": [],
    "https://developer.x-plane.com/sdk/XPLMSetAudioVolume/": [],
    "https://developer.x-plane.com/sdk/XPLMSetAvionicsBrightnessRheo/": [],
    "https://developer.x-plane.com/sdk/XPLMSetAvionicsGeometry/": [],
    "https://developer.x-plane.com/sdk/XPLMSetAvionicsGeometryOS/": [
      "XPLMSetAvionicsGeometry"
    ],
    "https://developer.x-plane.com/sdk/XPLMSetAvionicsPopupVisible/": [],
    "https://developer.x-plane.com/sdk/XPLMSetDatab/": [],
    "https://developer.x-plane.com/sdk/XPLMSetDatab_f/": [
      "XPLMSetDatab"
    ],
    "https://developer.x-plane.com/sdk/XPLMSetDatad/": [],
    "https://developer.x-plane.com/sdk/XPLMSetDatad_f/": [
      "XPLMSetDatad"
    ],
    "https://developer.x-plane.com/sdk/XPLMSetDataf/": [],
    "https://developer.x-plane.com/sdk/XPLMSetDataf_f/": [
      "XPLMSetDataf"
    ],
    "https://developer.x-plane.com/sdk/XPLMSetDatai/": [],
    "https://developer.x-plane.com/sdk/XPLMSetDatai_f/": [
      "XPLMSetDatai"
    ],
    "https://developer.x-plane.com/sdk/XPLMSetDatavf/": [],
    "https://developer.x-plane.com/sdk/XPLMSetDatavf_f/": [
      "XPLMSetDatavf"
    ],
    "https://developer.x-plane.com/sdk/XPLMSetDatavi/": [],
    "https://developer.x-plane.com/sdk/XPLMSetDatavi_f/": [
      "XPLMSetDatavi"
    ],
    "https://developer.x-plane.com/sdk/XPLMSetDestinationFMSEntry/": [],
    "https://developer.x-plane.com/sdk/XPLMSetDestinationFMSFlightPlanEntry/": [
      "XPLMNavFlightPlan"
    ],
    "https://developer.x-plane.com/sdk/XPLMSetDirectToFMSFlightPlanEntry/": [
      "XPLMNavFlightPlan"
    ],
    "https://developer.x-plane.com/sdk/XPLMSetDisplayedFMSEntry/": [],
    "https://developer.x-plane.com/sdk/XPLMSetDisplayedFMSFlightPlanEntry/": [
      "XPLMNavFlightPlan"
    ],
    "https://developer.x-plane.com/sdk/XPLMSetErrorCallback/": [],
    "https://developer.x-plane.com/sdk/XPLMSetFMSEntryInfo/": [],
    "https://developer.x-plane.com/sdk/XPLMSetFMSEntryLatLon/": [],
    "https://developer.x-plane.com/sdk/XPLMSetFMSFlightPlanEntryInfo/": [
      "XPLMNavFlightPlan"
    ],
    "https://developer.x-plane.com/sdk/XPLMSetFMSFlightPlanEntryLatLon/": [
      "XPLMNavFlightPlan"
    ],
    "https://developer.x-plane.com/sdk/XPLMSetFMSFlightPlanEntryLatLonWithId/": [
      "XPLMNavFlightPlan",
      "unsigned",
      "XPLMSetFMSFlightPlanEntryLatLon"
    ],
    "https://developer.x-plane.com/sdk/XPLMSetFlightLoopCallbackInterval/": [
      "XPLMRegisterFlightLoopCallback"
    ],
    "https://developer.x-plane.com/sdk/XPLMSetGraphicsState/": [
      "XPLMDrawString"
    ],
    "https://developer.x-plane.com/sdk/XPLMSetHotKeyCombination/": [
      "XPLMKeyFlags"
    ],
    "https://developer.x-plane.com/sdk/XPLMSetMenuItemName/": [],
    "https://developer.x-plane.com/sdk/XPLMSetUsersAircraft/": [],
    "https://developer.x-plane.com/sdk/XPLMSetWindowGeometry/": [
      "XPLMSetWindowGeometryOS",
      "XPLMGetWindowGeometry"
    ],
    "https://developer.x-plane.com/sdk/XPLMSetWindowGeometryOS/": [
      "XPLMGetAllMonitorBoundsOS",
      "XPLMWindowIsPoppedOut",
      "XPLMSetWindowGeometry"
    ],
    "https://developer.x-plane.com/sdk/XPLMSetWindowGeometryVR/": [
      "XPLMWindowIsInVR",
      "XPLMSetWindowGeometry"
    ],
    "https://developer.x-plane.com/sdk/XPLMSetWindowGravity/": [
      "XPLMCreateWindow"
    ],
    "https://developer.x-plane.com/sdk/XPLMSetWindowIsVisible/": [],
    "https://developer.x-plane.com/sdk/XPLMSetWindowPositioningMode/": [
      "XPLMGetAllMonitorBoundsOS",
      "XPLMCreateWindow",
      "XPLMWindowPositioningMode"
    ],
    "https://developer.x-plane.com/sdk/XPLMSetWindowRefCon/": [],
    "https://developer.x-plane.com/sdk/XPLMSetWindowResizingLimits/": [
      "XPLMCreateWindow"
    ],
    "https://developer.x-plane.com/sdk/XPLMSetWindowTitle/": [
      "XPLMCreateWindowEx",
      "XPLMCreateWindow"
    ],
    "https://developer.x-plane.com/sdk/XPLMShareData/": [
      "XPLMDataTypeID"
    ],
    "https://developer.x-plane.com/sdk/XPLMSimulateKeyPress/": [
      "XPLMCommandOnce"
    ],
    "https://developer.x-plane.com/sdk/XPLMSound/": [],
    "https://developer.x-plane.com/sdk/XPLMSpeakString/": [],
    "https://developer.x-plane.com/sdk/XPLMStopAudio/": [],
    "https://developer.x-plane.com/sdk/XPLMTakeAvionicsKeyboardFocus/": [],
    "https://developer.x-plane.com/sdk/XPLMTakeKeyboardFocus/": [],
    "https://developer.x-plane.com/sdk/XPLMTextureID/": [],
    "https://developer.x-plane.com/sdk/XPLMUnloadObject/": [
      "XPLMLoadObject"
    ],
    "https://developer.x-plane.com/sdk/XPLMUnregisterAvionicsCallbacks/": [
      "XPLMRegisterAvionicsCallbacksEx"
    ],
    "https://developer.x-plane.com/sdk/XPLMUnregisterCommandHandler/": [
      "XPLMRegisterCommandHandler"
    ],
    "https://developer.x-plane.com/sdk/XPLMUnregisterDataAccessor/": [],
    "https://developer.x-plane.com/sdk/XPLMUnregisterDrawCallback/": [
      "XPLMInstance",
      "XPLMDrawingPhase"
    ],
    "https://developer.x-plane.com/sdk/XPLMUnregisterFlightLoopCallback/": [
      "XPLMRegisterFlightLoopCallback"
    ],
    "https://developer.x-plane.com/sdk/XPLMUnregisterHotKey/": [],
    "https://developer.x-plane.com/sdk/XPLMUnregisterKeySniffer/": [],
    "https://developer.x-plane.com/sdk/XPLMUnshareData/": [
      "XPLMDataTypeID",
      "XPLMShareData"
    ],
    "https://developer.x-plane.com/sdk/XPLMWeather/": [],
    "https://developer.x-plane.com/sdk/XPLMWeatherInfoClouds_t/": [],
    "https://developer.x-plane.com/sdk/XPLMWeatherInfoWinds_t/": [],
    "https://developer.x-plane.com/sdk/XPLMWeatherInfo_t/": [],
    "https://developer.x-plane.com/sdk/XPLMWindowDecoration/": [
      "XPLMCreateWindowEx",
      "XPLMCreateWindow"
    ],
    "https://developer.x-plane.com/sdk/XPLMWindowID/": [
      "XPLMCreateWindowEx",
      "XPLMCreateWindow"
    ],
    "https://developer.x-plane.com/sdk/XPLMWindowIsInVR/": [
      "XPLMCreateWindow"
    ],
    "https://developer.x-plane.com/sdk/XPLMWindowIsPoppedOut/": [
      "XPLMCreateWindow"
    ],
    "https://developer.x-plane.com/sdk/XPLMWindowLayer/": [
      "XPLMCreateWindowEx",
      "XPLMCreateWindow"
    ],
    "https://developer.x-plane.com/sdk/XPLMWindowPositioningMode/": [
      "XPLMCreateWindowEx",
      "XPLMCreateWindow"
    ],
    "https://developer.x-plane.com/sdk/XPLMWorldToLocal/": [],
    "https://developer.x-plane.com/sdk/XPLM_KEY_0/": [],
    "https://developer.x-plane.com/sdk/XPLM_KEY_1/": [],
    "https://developer.x-plane.com/sdk/XPLM_KEY_2/": [],
    "https://developer.x-plane.com/sdk/XPLM_KEY_3/": [],
    "https://developer.x-plane.com/sdk/XPLM_KEY_4/": [],
    "https://developer.x-plane.com/sdk/XPLM_KEY_5/": [],
    "https://developer.x-plane.com/sdk/XPLM_KEY_6/": [],
    "https://developer.x-plane.com/sdk/XPLM_KEY_7/": [],
    "https://developer.x-plane.com/sdk/XPLM_KEY_8/": [],
    "https://developer.x-plane.com/sdk/XPLM_KEY_9/": [],
    "https://developer.x-plane.com/sdk/XPLM_KEY_DECIMAL/": [],
    "https://developer.x-plane.com/sdk/XPLM_KEY_DELETE/": [],
    "https://developer.x-plane.com/sdk/XPLM_KEY_DOWN/": [],
    "https://developer.x-plane.com/sdk/XPLM_KEY_ESCAPE/": [],
    "https://developer.x-plane.com/sdk/XPLM_KEY_LEFT/": [],
    "https://developer.x-plane.com/sdk/XPLM_KEY_RETURN/": [],
    "https://developer.x-plane.com/sdk/XPLM_KEY_RIGHT/": [],
    "https://developer.x-plane.com/sdk/XPLM_KEY_TAB/": [],
    "https://developer.x-plane.com/sdk/XPLM_KEY_UP/": [],
    "https://developer.x-plane.com/sdk/XPLM_MAP_IOS/": [
      "XPLMCreateMapLayer"
    ],
    "https://developer.x-plane.com/sdk/XPLM_MAP_USER_INTERFACE/": [
      "XPLMCreateMapLayer"
    ],
    "https://developer.x-plane.com/sdk/XPLM_MSG_AIRPLANE_COUNT_CHANGED/": [],
    "https://developer.x-plane.com/sdk/XPLM_MSG_AIRPORT_LOADED/": [],
    "https://developer.x-plane.com/sdk/XPLM_MSG_DATAREFS_ADDED/": [],
    "https://developer.x-plane.com/sdk/XPLM_MSG_ENTERED_VR/": [],
    "https://developer.x-plane.com/sdk/XPLM_MSG_EXITING_VR/": [],
    "https://developer.x-plane.com/sdk/XPLM_MSG_FMOD_BANK_LOADED/": [
      "XPLMBankID",
      "XPLMSound"
    ],
    "https://developer.x-plane.com/sdk/XPLM_MSG_FMOD_BANK_UNLOADING/": [
      "XPLMBankID",
      "XPLMSound"
    ],
    "https://developer.x-plane.com/sdk/XPLM_MSG_LIVERY_LOADED/": [],
    "https://developer.x-plane.com/sdk/XPLM_MSG_PLANE_CRASHED/": [],
    "https://developer.x-plane.com/sdk/XPLM_MSG_PLANE_LOADED/": [],
    "https://developer.x-plane.com/sdk/XPLM_MSG_PLANE_UNLOADED/": [],
    "https://developer.x-plane.com/sdk/XPLM_MSG_RELEASE_PLANES/": [],
    "https://developer.x-plane.com/sdk/XPLM_MSG_SCENERY_LOADED/": [],
    "https://developer.x-plane.com/sdk/XPLM_MSG_WILL_WRITE_PREFS/": [],
    "https://developer.x-plane.com/sdk/XPLM_NAV_NOT_FOUND/": [],
    "https://developer.x-plane.com/sdk/XPLM_NO_PLUGIN_ID/": [],
    "https://developer.x-plane.com/sdk/XPLM_PLUGIN_XPLANE/": [],
    "https://developer.x-plane.com/sdk/XPLM_USER_AIRCRAFT/": [],
    "https://developer.x-plane.com/sdk/XPLM_VK_0/": [],
    "https://developer.x-plane.com/sdk/XPLM_VK_1/": [],
    "https://developer.x-plane.com/sdk/XPLM_VK_2/": [],
    "https://developer.x-plane.com/sdk/XPLM_VK_3/": [],
    "https://developer.x-plane.com/sdk/XPLM_VK_4/": [],
    "https://developer.x-plane.com/sdk/XPLM_VK_5/": [],
    "https://developer.x-plane.com/sdk/XPLM_VK_6/": [],
    "https://developer.x-plane.com/sdk/XPLM_VK_7/": [],
    "https://developer.x-plane.com/sdk/XPLM_VK_8/": [],
    "https://developer.x-plane.com/sdk/XPLM_VK_9/": [],
    "https://developer.x-plane.com/sdk/XPLM_VK_A/": [],
    "https://developer.x-plane.com/sdk/XPLM_VK_ADD/": [],
    "https://developer.x-plane.com/sdk/XPLM_VK_B/": [],
    "https://developer.x-plane.com/sdk/XPLM_VK_BACK/": [],
    "https://developer.x-plane.com/sdk/XPLM_VK_BACKQUOTE/": [],
    "https://developer.x-plane.com/sdk/XPLM_VK_BACKSLASH/": [],
    "https://developer.x-plane.com/sdk/XPLM_VK_C/": [],
    "https://developer.x-plane.com/sdk/XPLM_VK_CLEAR/": [],
    "https://developer.x-plane.com/sdk/XPLM_VK_COMMA/": [],
    "https://developer.x-plane.com/sdk/XPLM_VK_D/": [],
    "https://developer.x-plane.com/sdk/XPLM_VK_DECIMAL/": [],
    "https://developer.x-plane.com/sdk/XPLM_VK_DELETE/": [],
    "https://developer.x-plane.com/sdk/XPLM_VK_DIVIDE/": [],
    "https://developer.x-plane.com/sdk/XPLM_VK_DOWN/": [],
    "https://developer.x-plane.com/sdk/XPLM_VK_E/": [],
    "https://developer.x-plane.com/sdk/XPLM_VK_END/": [],
    "https://developer.x-plane.com/sdk/XPLM_VK_ENTER/": [],
    "https://developer.x-plane.com/sdk/XPLM_VK_EQUAL/": [],
    "https://developer.x-plane.com/sdk/XPLM_VK_ESCAPE/": [],
    "https://developer.x-plane.com/sdk/XPLM_VK_EXECUTE/": [],
    "https://developer.x-plane.com/sdk/XPLM_VK_F/": [],
    "https://developer.x-plane.com/sdk/XPLM_VK_F1/": [],
    "https://developer.x-plane.com/sdk/XPLM_VK_F10/": [],
    "https://developer.x-plane.com/sdk/XPLM_VK_F11/": [],
    "https://developer.x-plane.com/sdk/XPLM_VK_F12/": [],
    "https://developer.x-plane.com/sdk/XPLM_VK_F13/": [],
    "https://developer.x-plane.com/sdk/XPLM_VK_F14/": [],
    "https://developer.x-plane.com/sdk/XPLM_VK_F15/": [],
    "https://developer.x-plane.com/sdk/XPLM_VK_F16/": [],
    "https://developer.x-plane.com/sdk/XPLM_VK_F17/": [],
    "https://developer.x-plane.com/sdk/XPLM_VK_F18/": [],
    "https://developer.x-plane.com/sdk/XPLM_VK_F19/": [],
    "https://developer.x-plane.com/sdk/XPLM_VK_F2/": [],
    "https://developer.x-plane.com/sdk/XPLM_VK_F20/": [],
    "https://developer.x-plane.com/sdk/XPLM_VK_F21/": [],
    "https://developer.x-plane.com/sdk/XPLM_VK_F22/": [],
    "https://developer.x-plane.com/sdk/XPLM_VK_F23/": [],
    "https://developer.x-plane.com/sdk/XPLM_VK_F24/": [],
    "https://developer.x-plane.com/sdk/XPLM_VK_F3/": [],
    "https://developer.x-plane.com/sdk/XPLM_VK_F4/": [],
    "https://developer.x-plane.com/sdk/XPLM_VK_F5/": [],
    "https://developer.x-plane.com/sdk/XPLM_VK_F6/": [],
    "https://developer.x-plane.com/sdk/XPLM_VK_F7/": [],
    "https://developer.x-plane.com/sdk/XPLM_VK_F8/": [],
    "https://developer.x-plane.com/sdk/XPLM_VK_F9/": [],
    "https://developer.x-plane.com/sdk/XPLM_VK_G/": [],
    "https://developer.x-plane.com/sdk/XPLM_VK_H/": [],
    "https://developer.x-plane.com/sdk/XPLM_VK_HELP/": [],
    "https://developer.x-plane.com/sdk/XPLM_VK_HOME/": [],
    "https://developer.x-plane.com/sdk/XPLM_VK_I/": [],
    "https://developer.x-plane.com/sdk/XPLM_VK_INSERT/": [],
    "https://developer.x-plane.com/sdk/XPLM_VK_J/": [],
    "https://developer.x-plane.com/sdk/XPLM_VK_K/": [],
    "https://developer.x-plane.com/sdk/XPLM_VK_L/": [],
    "https://developer.x-plane.com/sdk/XPLM_VK_LBRACE/": [],
    "https://developer.x-plane.com/sdk/XPLM_VK_LEFT/": [],
    "https://developer.x-plane.com/sdk/XPLM_VK_M/": [],
    "https://developer.x-plane.com/sdk/XPLM_VK_MINUS/": [],
    "https://developer.x-plane.com/sdk/XPLM_VK_MULTIPLY/": [],
    "https://developer.x-plane.com/sdk/XPLM_VK_N/": [],
    "https://developer.x-plane.com/sdk/XPLM_VK_NEXT/": [],
    "https://developer.x-plane.com/sdk/XPLM_VK_NUMPAD0/": [],
    "https://developer.x-plane.com/sdk/XPLM_VK_NUMPAD1/": [],
    "https://developer.x-plane.com/sdk/XPLM_VK_NUMPAD2/": [],
    "https://developer.x-plane.com/sdk/XPLM_VK_NUMPAD3/": [],
    "https://developer.x-plane.com/sdk/XPLM_VK_NUMPAD4/": [],
    "https://developer.x-plane.com/sdk/XPLM_VK_NUMPAD5/": [],
    "https://developer.x-plane.com/sdk/XPLM_VK_NUMPAD6/": [],
    "https://developer.x-plane.com/sdk/XPLM_VK_NUMPAD7/": [],
    "https://developer.x-plane.com/sdk/XPLM_VK_NUMPAD8/": [],
    "https://developer.x-plane.com/sdk/XPLM_VK_NUMPAD9/": [],
    "https://developer.x-plane.com/sdk/XPLM_VK_NUMPAD_ENT/": [],
    "https://developer.x-plane.com/sdk/XPLM_VK_NUMPAD_EQ/": [],
    "https://developer.x-plane.com/sdk/XPLM_VK_O/": [],
    "https://developer.x-plane.com/sdk/XPLM_VK_P/": [],
    "https://developer.x-plane.com/sdk/XPLM_VK_PERIOD/": [],
    "https://developer.x-plane.com/sdk/XPLM_VK_PRINT/": [],
    "https://developer.x-plane.com/sdk/XPLM_VK_PRIOR/": [],
    "https://developer.x-plane.com/sdk/XPLM_VK_Q/": [],
    "https://developer.x-plane.com/sdk/XPLM_VK_QUOTE/": [],
    "https://developer.x-plane.com/sdk/XPLM_VK_R/": [],
    "https://developer.x-plane.com/sdk/XPLM_VK_RBRACE/": [],
    "https://developer.x-plane.com/sdk/XPLM_VK_RETURN/": [],
    "https://developer.x-plane.com/sdk/XPLM_VK_RIGHT/": [],
    "https://developer.x-plane.com/sdk/XPLM_VK_S/": [],
    "https://developer.x-plane.com/sdk/XPLM_VK_SELECT/": [],
    "https://developer.x-plane.com/sdk/XPLM_VK_SEMICOLON/": [],
    "https://developer.x-plane.com/sdk/XPLM_VK_SEPARATOR/": [],
    "https://developer.x-plane.com/sdk/XPLM_VK_SLASH/": [],
    "https://developer.x-plane.com/sdk/XPLM_VK_SNAPSHOT/": [],
    "https://developer.x-plane.com/sdk/XPLM_VK_SPACE/": [],
    "https://developer.x-plane.com/sdk/XPLM_VK_SUBTRACT/": [],
    "https://developer.x-plane.com/sdk/XPLM_VK_T/": [],
    "https://developer.x-plane.com/sdk/XPLM_VK_TAB/": [],
    "https://developer.x-plane.com/sdk/XPLM_VK_U/": [],
    "https://developer.x-plane.com/sdk/XPLM_VK_UP/": [],
    "https://developer.x-plane.com/sdk/XPLM_VK_V/": [],
    "https://developer.x-plane.com/sdk/XPLM_VK_W/": [],
    "https://developer.x-plane.com/sdk/XPLM_VK_X/": [],
    "https://developer.x-plane.com/sdk/XPLM_VK_Y/": [],
    "https://developer.x-plane.com/sdk/XPLM_VK_Z/": [],
    "https://developer.x-plane.com/sdk/XPLoseKeyboardFocus/": [],
    "https://developer.x-plane.com/sdk/XPMouseState_t/": [],
    "https://developer.x-plane.com/sdk/XPPlaceWidgetWithin/": [],
    "https://developer.x-plane.com/sdk/XPSendMessageToWidget/": [
      "XPDispatchMode",
      "XPWidgetMessage"
    ],
    "https://developer.x-plane.com/sdk/XPSetKeyboardFocus/": [
      "WIDGET_API"
    ],
    "https://developer.x-plane.com/sdk/XPSetWidgetDescriptor/": [],
    "https://developer.x-plane.com/sdk/XPSetWidgetGeometry/": [],
    "https://developer.x-plane.com/sdk/XPSetWidgetProperty/": [
      "XPWidgetPropertyID"
    ],
    "https://developer.x-plane.com/sdk/XPShowWidget/": [],
    "https://developer.x-plane.com/sdk/XPStandardWidgets/": [
      "XPCreateWidget",
      "XPLMFontID"
    ],
    "https://developer.x-plane.com/sdk/XPTrackStyle/": [],
    "https://developer.x-plane.com/sdk/XPUCreateWidgets/": [
      "XPCreateWidget"
    ],
    "https://developer.x-plane.com/sdk/XPUDefocusKeyboard/": [
      "XPWidgetMessage"
    ],
    "https://developer.x-plane.com/sdk/XPUDragWidget/": [
      "XPWidgetMessage"
    ],
    "https://developer.x-plane.com/sdk/XPUFixedLayout/": [
      "XPWidgetMessage"
    ],
    "https://developer.x-plane.com/sdk/XPUIGraphics/": [],
    "https://developer.x-plane.com/sdk/XPUMoveWidgetBy/": [],
    "https://developer.x-plane.com/sdk/XPUSelectIfNeeded/": [
      "XPWidgetMessage"
    ],
    "https://developer.x-plane.com/sdk/XPWidgetClass/": [],
    "https://developer.x-plane.com/sdk/XPWidgetCreate_t/": [
      "XPUCreateWidgets",
      "XPCreateWidget"
    ],
    "https://developer.x-plane.com/sdk/XPWidgetDefs/": [
      "XPLMKeyFlags",
      "XPLMCursorStatus",
      "XPLMDisplay"
    ],
    "https://developer.x-plane.com/sdk/XPWidgetFunc_t/": [
      "XPWidgetMessage"
    ],
    "https://developer.x-plane.com/sdk/XPWidgetGeometryChange_t/": [],
    "https://developer.x-plane.com/sdk/XPWidgetID/": [],
    "https://developer.x-plane.com/sdk/XPWidgetMessage/": [
      "XPLMCursorStatus",
      "XPLMDisplay"
    ],
    "https://developer.x-plane.com/sdk/XPWidgetPropertyID/": [],
    "https://developer.x-plane.com/sdk/XPWidgetUtils/": [
      "XPCreateWidget",
      "XPWidgetMessage",
      "XPAddWidgetCallback"
    ],
    "https://developer.x-plane.com/sdk/XPWidgets/": [
      "XPDispatchMode",
      "XPLMDisplay",
      "XPWidgetMessage",
      "XPWidgetPropertyID",
      "XPLMEnableFeature",
      "XPLMSetWindowPositioningMode"
    ],
    "https://developer.x-plane.com/sdk/XPWindowStyle/": [],
    "https://developer.x-plane.com/sdk/kXPLM_Version/": [],
    "https://developer.x-plane.com/sdk/plugin-sdk-documents/": [
      "XPLMGraphics",
      "XPLMPlugin",
      "XPLMUtilities",
      "XPLMNavigation",
      "XPLMCamera",
      "XPLMInstance",
      "XPLMProcessing",
      "XPLMPlanes",
      "XPLMMenus",
      "XPLMDataAccess",
      "XPLMMap",
      "XPLMScenery",
      "XPLMDisplay",
      "XPLMSound"
    ],
    "https://developer.x-plane.com/sdk/xpAircraftCarrier/": [],
    "https://developer.x-plane.com/sdk/xpBuilding/": [],
    "https://developer.x-plane.com/sdk/xpButtonBehaviorCheckBox/": [],
    "https://developer.x-plane.com/sdk/xpButtonBehaviorPushButton/": [],
    "https://developer.x-plane.com/sdk/xpButtonBehaviorRadioButton/": [],
    "https://developer.x-plane.com/sdk/xpCoolingTower/": [],
    "https://developer.x-plane.com/sdk/xpCustomObject/": [],
    "https://developer.x-plane.com/sdk/xpElement_AircraftCarrier/": [],
    "https://developer.x-plane.com/sdk/xpElement_Airport/": [],
    "https://developer.x-plane.com/sdk/xpElement_Building/": [],
    "https://developer.x-plane.com/sdk/xpElement_CheckBox/": [],
    "https://developer.x-plane.com/sdk/xpElement_CheckBoxLit/": [],
    "https://developer.x-plane.com/sdk/xpElement_CoolingTower/": [],
    "https://developer.x-plane.com/sdk/xpElement_CopyButtons/": [],
    "https://developer.x-plane.com/sdk/xpElement_CopyButtonsWithEditingGrid/": [],
    "https://developer.x-plane.com/sdk/xpElement_CustomObject/": [],
    "https://developer.x-plane.com/sdk/xpElement_EditingGrid/": [],
    "https://developer.x-plane.com/sdk/xpElement_Fire/": [],
    "https://developer.x-plane.com/sdk/xpElement_ILSGlideScope/": [],
    "https://developer.x-plane.com/sdk/xpElement_LittleDownArrow/": [],
    "https://developer.x-plane.com/sdk/xpElement_LittleUpArrow/": [],
    "https://developer.x-plane.com/sdk/xpElement_MarkerLeft/": [],
    "https://developer.x-plane.com/sdk/xpElement_MarkerRight/": [],
    "https://developer.x-plane.com/sdk/xpElement_NDB/": [],
    "https://developer.x-plane.com/sdk/xpElement_OilPlatform/": [],
    "https://developer.x-plane.com/sdk/xpElement_OilPlatformSmall/": [],
    "https://developer.x-plane.com/sdk/xpElement_PowerLine/": [],
    "https://developer.x-plane.com/sdk/xpElement_PushButton/": [],
    "https://developer.x-plane.com/sdk/xpElement_PushButtonLit/": [],
    "https://developer.x-plane.com/sdk/xpElement_RadioTower/": [],
    "https://developer.x-plane.com/sdk/xpElement_ScrollBar/": [],
    "https://developer.x-plane.com/sdk/xpElement_Ship/": [],
    "https://developer.x-plane.com/sdk/xpElement_SmokeStack/": [],
    "https://developer.x-plane.com/sdk/xpElement_TextField/": [],
    "https://developer.x-plane.com/sdk/xpElement_TextFieldMiddle/": [],
    "https://developer.x-plane.com/sdk/xpElement_VOR/": [],
    "https://developer.x-plane.com/sdk/xpElement_VORWithCompassRose/": [],
    "https://developer.x-plane.com/sdk/xpElement_Waypoint/": [],
    "https://developer.x-plane.com/sdk/xpElement_WindowCloseBox/": [],
    "https://developer.x-plane.com/sdk/xpElement_WindowCloseBoxPressed/": [],
    "https://developer.x-plane.com/sdk/xpElement_WindowDragBar/": [],
    "https://developer.x-plane.com/sdk/xpElement_WindowDragBarSmooth/": [],
    "https://developer.x-plane.com/sdk/xpElement_Zoomer/": [],
    "https://developer.x-plane.com/sdk/xpFire/": [],
    "https://developer.x-plane.com/sdk/xpILSGlideScope/": [],
    "https://developer.x-plane.com/sdk/xpLittleDownArrow/": [],
    "https://developer.x-plane.com/sdk/xpLittleUpArrow/": [],
    "https://developer.x-plane.com/sdk/xpMainWindowStyle_MainWindow/": [],
    "https://developer.x-plane.com/sdk/xpMainWindowStyle_Translucent/": [],
    "https://developer.x-plane.com/sdk/xpMarkerLeft/": [],
    "https://developer.x-plane.com/sdk/xpMarkerRight/": [],
    "https://developer.x-plane.com/sdk/xpMessage_CloseButtonPushed/": [],
    "https://developer.x-plane.com/sdk/xpMode_Direct/": [],
    "https://developer.x-plane.com/sdk/xpMode_DirectAllCallbacks/": [],
    "https://developer.x-plane.com/sdk/xpMode_Once/": [],
    "https://developer.x-plane.com/sdk/xpMode_Recursive/": [],
    "https://developer.x-plane.com/sdk/xpMode_UpChain/": [],
    "https://developer.x-plane.com/sdk/xpMsg_AcceptChild/": [],
    "https://developer.x-plane.com/sdk/xpMsg_AcceptParent/": [],
    "https://developer.x-plane.com/sdk/xpMsg_ButtonStateChanged/": [],
    "https://developer.x-plane.com/sdk/xpMsg_Create/": [],
    "https://developer.x-plane.com/sdk/xpMsg_CursorAdjust/": [
      "XPLMCursorStatus",
      "XPLMDisplay"
    ],
    "https://developer.x-plane.com/sdk/xpMsg_DescriptorChanged/": [],
    "https://developer.x-plane.com/sdk/xpMsg_Destroy/": [],
    "https://developer.x-plane.com/sdk/xpMsg_Draw/": [],
    "https://developer.x-plane.com/sdk/xpMsg_ExposedChanged/": [],
    "https://developer.x-plane.com/sdk/xpMsg_Hidden/": [],
    "https://developer.x-plane.com/sdk/xpMsg_KeyLoseFocus/": [],
    "https://developer.x-plane.com/sdk/xpMsg_KeyPress/": [],
    "https://developer.x-plane.com/sdk/xpMsg_KeyTakeFocus/": [],
    "https://developer.x-plane.com/sdk/xpMsg_LoseChild/": [],
    "https://developer.x-plane.com/sdk/xpMsg_MouseDown/": [],
    "https://developer.x-plane.com/sdk/xpMsg_MouseDrag/": [],
    "https://developer.x-plane.com/sdk/xpMsg_MouseUp/": [],
    "https://developer.x-plane.com/sdk/xpMsg_MouseWheel/": [],
    "https://developer.x-plane.com/sdk/xpMsg_None/": [],
    "https://developer.x-plane.com/sdk/xpMsg_Paint/": [],
    "https://developer.x-plane.com/sdk/xpMsg_PropertyChanged/": [],
    "https://developer.x-plane.com/sdk/xpMsg_PushButtonPressed/": [],
    "https://developer.x-plane.com/sdk/xpMsg_Reshape/": [],
    "https://developer.x-plane.com/sdk/xpMsg_ScrollBarSliderPositionChanged/": [],
    "https://developer.x-plane.com/sdk/xpMsg_Shown/": [],
    "https://developer.x-plane.com/sdk/xpMsg_TextFieldChanged/": [],
    "https://developer.x-plane.com/sdk/xpMsg_UserStart/": [],
    "https://developer.x-plane.com/sdk/xpNDB/": [],
    "https://developer.x-plane.com/sdk/xpOilPlatform/": [],
    "https://developer.x-plane.com/sdk/xpOilPlatformSmall/": [],
    "https://developer.x-plane.com/sdk/xpPowerLine/": [],
    "https://developer.x-plane.com/sdk/xpProperty_ActiveEditSide/": [],
    "https://developer.x-plane.com/sdk/xpProperty_ButtonBehavior/": [],
    "https://developer.x-plane.com/sdk/xpProperty_ButtonState/": [],
    "https://developer.x-plane.com/sdk/xpProperty_ButtonType/": [],
    "https://developer.x-plane.com/sdk/xpProperty_CaptionLit/": [],
    "https://developer.x-plane.com/sdk/xpProperty_Clip/": [],
    "https://developer.x-plane.com/sdk/xpProperty_DragXOff/": [],
    "https://developer.x-plane.com/sdk/xpProperty_DragYOff/": [],
    "https://developer.x-plane.com/sdk/xpProperty_Dragging/": [],
    "https://developer.x-plane.com/sdk/xpProperty_EditFieldSelDragStart/": [],
    "https://developer.x-plane.com/sdk/xpProperty_EditFieldSelEnd/": [],
    "https://developer.x-plane.com/sdk/xpProperty_EditFieldSelStart/": [],
    "https://developer.x-plane.com/sdk/xpProperty_Enabled/": [],
    "https://developer.x-plane.com/sdk/xpProperty_Font/": [
      "XPLMFontID"
    ],
    "https://developer.x-plane.com/sdk/xpProperty_GeneralGraphicsType/": [],
    "https://developer.x-plane.com/sdk/xpProperty_Hilited/": [],
    "https://developer.x-plane.com/sdk/xpProperty_MainWindowHasCloseBoxes/": [],
    "https://developer.x-plane.com/sdk/xpProperty_MainWindowType/": [],
    "https://developer.x-plane.com/sdk/xpProperty_MaxCharacters/": [],
    "https://developer.x-plane.com/sdk/xpProperty_Object/": [],
    "https://developer.x-plane.com/sdk/xpProperty_PasswordMode/": [],
    "https://developer.x-plane.com/sdk/xpProperty_ProgressMax/": [],
    "https://developer.x-plane.com/sdk/xpProperty_ProgressMin/": [],
    "https://developer.x-plane.com/sdk/xpProperty_ProgressPosition/": [],
    "https://developer.x-plane.com/sdk/xpProperty_Refcon/": [],
    "https://developer.x-plane.com/sdk/xpProperty_ScrollBarMax/": [],
    "https://developer.x-plane.com/sdk/xpProperty_ScrollBarMin/": [],
    "https://developer.x-plane.com/sdk/xpProperty_ScrollBarPageAmount/": [],
    "https://developer.x-plane.com/sdk/xpProperty_ScrollBarSliderPosition/": [],
    "https://developer.x-plane.com/sdk/xpProperty_ScrollBarSlop/": [],
    "https://developer.x-plane.com/sdk/xpProperty_ScrollBarType/": [],
    "https://developer.x-plane.com/sdk/xpProperty_ScrollPosition/": [],
    "https://developer.x-plane.com/sdk/xpProperty_SubWindowType/": [],
    "https://developer.x-plane.com/sdk/xpProperty_TextFieldType/": [],
    "https://developer.x-plane.com/sdk/xpProperty_UserStart/": [],
    "https://developer.x-plane.com/sdk/xpPushButton/": [],
    "https://developer.x-plane.com/sdk/xpRadioButton/": [],
    "https://developer.x-plane.com/sdk/xpRadioTower/": [],
    "https://developer.x-plane.com/sdk/xpScrollBarTypeScrollBar/": [],
    "https://developer.x-plane.com/sdk/xpScrollBarTypeSlider/": [],
    "https://developer.x-plane.com/sdk/xpShip/": [],
    "https://developer.x-plane.com/sdk/xpSmokeStack/": [],
    "https://developer.x-plane.com/sdk/xpSubWindowStyle_ListView/": [],
    "https://developer.x-plane.com/sdk/xpSubWindowStyle_Screen/": [],
    "https://developer.x-plane.com/sdk/xpSubWindowStyle_SubWindow/": [],
    "https://developer.x-plane.com/sdk/xpTextEntryField/": [],
    "https://developer.x-plane.com/sdk/xpTextTranslucent/": [],
    "https://developer.x-plane.com/sdk/xpTextTransparent/": [],
    "https://developer.x-plane.com/sdk/xpTrack_Progress/": [],
    "https://developer.x-plane.com/sdk/xpTrack_ScrollBar/": [],
    "https://developer.x-plane.com/sdk/xpTrack_Slider/": [],
    "https://developer.x-plane.com/sdk/xpVOR/": [],
    "https://developer.x-plane.com/sdk/xpVORWithCompassRose/": [],
    "https://developer.x-plane.com/sdk/xpWayPoint/": [],
    "https://developer.x-plane.com/sdk/xpWidgetClass_Button/": [],
    "https://developer.x-plane.com/sdk/xpWidgetClass_Caption/": [],
    "https://developer.x-plane.com/sdk/xpWidgetClass_GeneralGraphics/": [],
    "https://developer.x-plane.com/sdk/xpWidgetClass_MainWindow/": [],
    "https://developer.x-plane.com/sdk/xpWidgetClass_None/": [],
    "https://developer.x-plane.com/sdk/xpWidgetClass_Progress/": [],
    "https://developer.x-plane.com/sdk/xpWidgetClass_ScrollBar/": [],
    "https://developer.x-plane.com/sdk/xpWidgetClass_SubWindow/": [],
    "https://developer.x-plane.com/sdk/xpWidgetClass_TextField/": [],
    "https://developer.x-plane.com/sdk/xpWindowCloseBox/": [],
    "https://developer.x-plane.com/sdk/xpWindow_Help/": [],
    "https://developer.x-plane.com/sdk/xpWindow_ListView/": [],
    "https://developer.x-plane.com/sdk/xpWindow_MainWindow/": [],
    "https://developer.x-plane.com/sdk/xpWindow_Screen/": [],
    "https://developer.x-plane.com/sdk/xpWindow_SubWindow/": [],
    "https://developer.x-plane.com/sdk/xp_Airport/": [],
    "https://developer.x-plane.com/sdk/xplmFont_Basic/": [],
    "https://developer.x-plane.com/sdk/xplmFont_FullRound/": [],
    "https://developer.x-plane.com/sdk/xplmFont_Led/": [],
    "https://developer.x-plane.com/sdk/xplmFont_LedWide/": [],
    "https://developer.x-plane.com/sdk/xplmFont_Menus/": [],
    "https://developer.x-plane.com/sdk/xplmFont_Menus_Localized /": [],
    "https://developer.x-plane.com/sdk/xplmFont_Metal /": [],
    "https://developer.x-plane.com/sdk/xplmFont_PanelEFIS/": [],
    "https://developer.x-plane.com/sdk/xplmFont_PanelGPS/": [],
    "https://developer.x-plane.com/sdk/xplmFont_PanelHUD/": [],
    "https://developer.x-plane.com/sdk/xplmFont_Proportional/": [],
    "https://developer.x-plane.com/sdk/xplmFont_RadiosBC/": [],
    "https://developer.x-plane.com/sdk/xplmFont_RadiosBCNarrow/": [],
    "https://developer.x-plane.com/sdk/xplmFont_RadiosGA/": [],
    "https://developer.x-plane.com/sdk/xplmFont_RadiosGANarrow/": [],
    "https://developer.x-plane.com/sdk/xplmFont_RadiosHM/": [],
    "https://developer.x-plane.com/sdk/xplmFont_RadiosHMNarrow/": [],
    "https://developer.x-plane.com/sdk/xplmFont_SmallRound/": [],
    "https://developer.x-plane.com/sdk/xplmFont_Timer /": [],
    "https://developer.x-plane.com/sdk/xplmType_Data/": [],
    "https://developer.x-plane.com/sdk/xplmType_Double/": [],
    "https://developer.x-plane.com/sdk/xplmType_Float/": [],
    "https://developer.x-plane.com/sdk/xplmType_FloatArray/": [],
    "https://developer.x-plane.com/sdk/xplmType_Int/": [],
    "https://developer.x-plane.com/sdk/xplmType_IntArray/": [],
    "https://developer.x-plane.com/sdk/xplmType_Unknown/": [],
    "https://developer.x-plane.com/sdk/xplm_AudioExteriorAircraft/": [],
    "https://developer.x-plane.com/sdk/xplm_AudioExteriorEnvironment/": [],
    "https://developer.x-plane.com/sdk/xplm_AudioExteriorUnprocessed/": [],
    "https://developer.x-plane.com/sdk/xplm_AudioGround/": [],
    "https://developer.x-plane.com/sdk/xplm_AudioInterior/": [],
    "https://developer.x-plane.com/sdk/xplm_AudioRadioCom1/": [],
    "https://developer.x-plane.com/sdk/xplm_AudioRadioCom2/": [],
    "https://developer.x-plane.com/sdk/xplm_AudioRadioCopilot/": [],
    "https://developer.x-plane.com/sdk/xplm_AudioRadioPilot/": [],
    "https://developer.x-plane.com/sdk/xplm_AudioUI/": [],
    "https://developer.x-plane.com/sdk/xplm_CommandBegin/": [],
    "https://developer.x-plane.com/sdk/xplm_CommandContinue/": [],
    "https://developer.x-plane.com/sdk/xplm_CommandEnd/": [],
    "https://developer.x-plane.com/sdk/xplm_ControlCameraForever/": [],
    "https://developer.x-plane.com/sdk/xplm_ControlCameraUntilViewChanges/": [],
    "https://developer.x-plane.com/sdk/xplm_ControlFlag /": [],
    "https://developer.x-plane.com/sdk/xplm_CursorArrow/": [],
    "https://developer.x-plane.com/sdk/xplm_CursorCustom/": [],
    "https://developer.x-plane.com/sdk/xplm_CursorDefault/": [],
    "https://developer.x-plane.com/sdk/xplm_CursorHidden/": [],
    "https://developer.x-plane.com/sdk/xplm_DataFile_ReplayMovie/": [],
    "https://developer.x-plane.com/sdk/xplm_DataFile_Situation/": [],
    "https://developer.x-plane.com/sdk/xplm_DownFlag/": [],
    "https://developer.x-plane.com/sdk/xplm_FlightLoop_Phase_AfterFlightModel/": [],
    "https://developer.x-plane.com/sdk/xplm_FlightLoop_Phase_BeforeFlightModel/": [],
    "https://developer.x-plane.com/sdk/xplm_Fpl_CoPilot_Approach/": [],
    "https://developer.x-plane.com/sdk/xplm_Fpl_CoPilot_Primary/": [],
    "https://developer.x-plane.com/sdk/xplm_Fpl_CoPilot_Temporary/": [],
    "https://developer.x-plane.com/sdk/xplm_Fpl_Pilot_Approach/": [],
    "https://developer.x-plane.com/sdk/xplm_Fpl_Pilot_Primary/": [],
    "https://developer.x-plane.com/sdk/xplm_Fpl_Pilot_Temporary/": [],
    "https://developer.x-plane.com/sdk/xplm_Host_Briefer/": [],
    "https://developer.x-plane.com/sdk/xplm_Host_Control_Pad/": [],
    "https://developer.x-plane.com/sdk/xplm_Host_PFD_Map/": [],
    "https://developer.x-plane.com/sdk/xplm_Host_PartMaker/": [],
    "https://developer.x-plane.com/sdk/xplm_Host_PlaneMaker/": [],
    "https://developer.x-plane.com/sdk/xplm_Host_RADAR/": [],
    "https://developer.x-plane.com/sdk/xplm_Host_Unknown/": [],
    "https://developer.x-plane.com/sdk/xplm_Host_WorldMaker/": [],
    "https://developer.x-plane.com/sdk/xplm_Host_XAuto/": [],
    "https://developer.x-plane.com/sdk/xplm_Host_XPlane/": [],
    "https://developer.x-plane.com/sdk/xplm_Host_Xavion/": [],
    "https://developer.x-plane.com/sdk/xplm_Host_YoungsMod/": [],
    "https://developer.x-plane.com/sdk/xplm_Language_Chinese/": [],
    "https://developer.x-plane.com/sdk/xplm_Language_English/": [],
    "https://developer.x-plane.com/sdk/xplm_Language_French/": [],
    "https://developer.x-plane.com/sdk/xplm_Language_German/": [],
    "https://developer.x-plane.com/sdk/xplm_Language_Greek/": [],
    "https://developer.x-plane.com/sdk/xplm_Language_Italian/": [],
    "https://developer.x-plane.com/sdk/xplm_Language_Japanese/": [],
    "https://developer.x-plane.com/sdk/xplm_Language_Korean/": [],
    "https://developer.x-plane.com/sdk/xplm_Language_Russian/": [],
    "https://developer.x-plane.com/sdk/xplm_Language_Spanish/": [],
    "https://developer.x-plane.com/sdk/xplm_Language_Ukrainian/": [],
    "https://developer.x-plane.com/sdk/xplm_Language_Unknown/": [],
    "https://developer.x-plane.com/sdk/xplm_MapLayer_Fill/": [],
    "https://developer.x-plane.com/sdk/xplm_MapLayer_Markings/": [],
    "https://developer.x-plane.com/sdk/xplm_MapOrientation_Map/": [],
    "https://developer.x-plane.com/sdk/xplm_MapOrientation_UI/": [],
    "https://developer.x-plane.com/sdk/xplm_MapStyle_IFR_HighEnroute/": [],
    "https://developer.x-plane.com/sdk/xplm_MapStyle_IFR_LowEnroute/": [],
    "https://developer.x-plane.com/sdk/xplm_MapStyle_VFR_Sectional/": [],
    "https://developer.x-plane.com/sdk/xplm_Master/": [],
    "https://developer.x-plane.com/sdk/xplm_MasterBank/": [],
    "https://developer.x-plane.com/sdk/xplm_Menu_Checked/": [],
    "https://developer.x-plane.com/sdk/xplm_Menu_NoCheck/": [],
    "https://developer.x-plane.com/sdk/xplm_Menu_Unchecked/": [],
    "https://developer.x-plane.com/sdk/xplm_MouseDown/": [],
    "https://developer.x-plane.com/sdk/xplm_MouseDrag/": [],
    "https://developer.x-plane.com/sdk/xplm_MouseUp/": [],
    "https://developer.x-plane.com/sdk/xplm_Nav_Airport/": [],
    "https://developer.x-plane.com/sdk/xplm_Nav_DME/": [],
    "https://developer.x-plane.com/sdk/xplm_Nav_Fix/": [],
    "https://developer.x-plane.com/sdk/xplm_Nav_GlideSlope/": [],
    "https://developer.x-plane.com/sdk/xplm_Nav_ILS/": [],
    "https://developer.x-plane.com/sdk/xplm_Nav_InnerMarker/": [],
    "https://developer.x-plane.com/sdk/xplm_Nav_LatLon/": [],
    "https://developer.x-plane.com/sdk/xplm_Nav_Localizer/": [],
    "https://developer.x-plane.com/sdk/xplm_Nav_MiddleMarker/": [],
    "https://developer.x-plane.com/sdk/xplm_Nav_NDB/": [],
    "https://developer.x-plane.com/sdk/xplm_Nav_OuterMarker/": [],
    "https://developer.x-plane.com/sdk/xplm_Nav_TACAN/": [],
    "https://developer.x-plane.com/sdk/xplm_Nav_Unknown/": [],
    "https://developer.x-plane.com/sdk/xplm_Nav_VOR/": [],
    "https://developer.x-plane.com/sdk/xplm_OptionAltFlag/": [],
    "https://developer.x-plane.com/sdk/xplm_Phase_Airplanes/": [],
    "https://developer.x-plane.com/sdk/xplm_Phase_Airports/": [],
    "https://developer.x-plane.com/sdk/xplm_Phase_FirstCockpit/": [],
    "https://developer.x-plane.com/sdk/xplm_Phase_FirstScene/": [],
    "https://developer.x-plane.com/sdk/xplm_Phase_Gauges/": [],
    "https://developer.x-plane.com/sdk/xplm_Phase_LastCockpit/": [],
    "https://developer.x-plane.com/sdk/xplm_Phase_LastScene/": [],
    "https://developer.x-plane.com/sdk/xplm_Phase_LocalMap2D/": [
      "XPLMMap"
    ],
    "https://developer.x-plane.com/sdk/xplm_Phase_LocalMap3D/": [
      "XPLMMap"
    ],
    "https://developer.x-plane.com/sdk/xplm_Phase_LocalMapProfile/": [
      "XPLMMap"
    ],
    "https://developer.x-plane.com/sdk/xplm_Phase_Modern3D/": [],
    "https://developer.x-plane.com/sdk/xplm_Phase_Objects/": [],
    "https://developer.x-plane.com/sdk/xplm_Phase_Panel/": [],
    "https://developer.x-plane.com/sdk/xplm_Phase_Terrain/": [],
    "https://developer.x-plane.com/sdk/xplm_Phase_Vectors/": [],
    "https://developer.x-plane.com/sdk/xplm_Phase_Window/": [],
    "https://developer.x-plane.com/sdk/xplm_ProbeError/": [],
    "https://developer.x-plane.com/sdk/xplm_ProbeHitTerrain/": [],
    "https://developer.x-plane.com/sdk/xplm_ProbeMissed/": [],
    "https://developer.x-plane.com/sdk/xplm_ProbeY/": [],
    "https://developer.x-plane.com/sdk/xplm_RadioBank/": [],
    "https://developer.x-plane.com/sdk/xplm_ShiftFlag/": [],
    "https://developer.x-plane.com/sdk/xplm_Tex_AircraftLiteMap/": [],
    "https://developer.x-plane.com/sdk/xplm_Tex_AircraftPaint/": [],
    "https://developer.x-plane.com/sdk/xplm_Tex_GeneralInterface/": [],
    "https://developer.x-plane.com/sdk/xplm_UpFlag/": [],
    "https://developer.x-plane.com/sdk/xplm_WindowCenterOnMonitor/": [],
    "https://developer.x-plane.com/sdk/xplm_WindowDecorationNone/": [],
    "https://developer.x-plane.com/sdk/xplm_WindowDecorationRoundRectangle/": [],
    "https://developer.x-plane.com/sdk/xplm_WindowDecorationSelfDecorated/": [],
    "https://developer.x-plane.com/sdk/xplm_WindowDecorationSelfDecoratedResizable/": [],
    "https://developer.x-plane.com/sdk/xplm_WindowFullScreenOnAllMonitors/": [],
    "https://developer.x-plane.com/sdk/xplm_WindowFullScreenOnMonitor/": [],
    "https://developer.x-plane.com/sdk/xplm_WindowLayerFlightOverlay/": [],
    "https://developer.x-plane.com/sdk/xplm_WindowLayerFloatingWindows/": [],
    "https://developer.x-plane.com/sdk/xplm_WindowLayerGrowlNotifications/": [],
    "https://developer.x-plane.com/sdk/xplm_WindowLayerModal/": [],
    "https://developer.x-plane.com/sdk/xplm_WindowPopOut/": [],
    "https://developer.x-plane.com/sdk/xplm_WindowPositionFree/": [],
    "https://developer.x-plane.com/sdk/xplm_WindowVR/": [],
    "https://developer.x-plane.com/sdk/xplm_device_CDU739_1/": [],
    "https://developer.x-plane.com/sdk/xplm_device_CDU739_2/": [],
    "https://developer.x-plane.com/sdk/xplm_device_CDU815_1/": [],
    "https://developer.x-plane.com/sdk/xplm_device_CDU815_2/": [],
    "https://developer.x-plane.com/sdk/xplm_device_G1000_MFD/": [],
    "https://developer.x-plane.com/sdk/xplm_device_G1000_PFD_1/": [],
    "https://developer.x-plane.com/sdk/xplm_device_G1000_PFD_2/": [],
    "https://developer.x-plane.com/sdk/xplm_device_GNS430_1/": [],
    "https://developer.x-plane.com/sdk/xplm_device_GNS430_2/": [],
    "https://developer.x-plane.com/sdk/xplm_device_GNS530_1/": [],
    "https://developer.x-plane.com/sdk/xplm_device_GNS530_2/": [],
    "https://developer.x-plane.com/sdk/xplm_device_MCDU_1/": [],
    "https://developer.x-plane.com/sdk/xplm_device_MCDU_2/": [],
    "https://developer.x-plane.com/sdk/xplm_device_Primus_MFD_1/": [],
    "https://developer.x-plane.com/sdk/xplm_device_Primus_MFD_2/": [],
    "https://developer.x-plane.com/sdk/xplm_device_Primus_MFD_3/": [],
    "https://developer.x-plane.com/sdk/xplm_device_Primus_PFD_1/": [],
    "https://developer.x-plane.com/sdk/xplm_device_Primus_PFD_2/": [],
    "https://developer.x-plane.com/sdk/xplm_device_Primus_RMU_1/": [],
    "https://developer.x-plane.com/sdk/xplm_device_Primus_RMU_2/": []
  },
  "metadata": {
    "processing_timestamp": "2025-06-25T20:39:24.662085+00:00",
    "processor_version": "1.0.0",
    "source_file": "scraped_content.json",
    "statistics": {
      "categories": {
        "Other_APIs": 390,
        "Widget_System": 88,
        "XPLM_Camera": 11,
        "XPLM_DataAccess": 37,
        "XPLM_Display": 96,
        "XPLM_Graphics": 13,
        "XPLM_Instance": 19,
        "XPLM_Map": 35,
        "XPLM_Menus": 23,
        "XPLM_Navigation": 65,
        "XPLM_Planes": 22,
        "XPLM_Plugin": 23,
        "XPLM_Processing": 20,
        "XPLM_Scenery": 15,
        "XPLM_Sound": 22,
        "XPLM_Utilities": 35
      },
      "failed_processing": 0,
      "successful_processing": 914,
      "total_pages": 914
    }
  },
  "processed_content": {
    "https://developer.x-plane.com/sdk/Button Behavior Values/": {
      "api_signatures": [
        {
          "name": "Button Behavior Values",
          "type": "enum",
          "values": [
            {
              "description": "Standard push button behavior. The button highlights while the mouse is clickedover it and unhighlights when the mouse is moved outside of it or released.If the mouse is released over the button, thexpMsg_PushButtonPressedmessageis sent.",
              "name": "xpButtonBehaviorPushButton",
              "value": "\"0\""
            },
            {
              "description": "Check box behavior. The button immediately toggles its value when the mouse is clicked and sends out axpMsg_ButtonStateChangedmessage.",
              "name": "xpButtonBehaviorCheckBox",
              "value": "\"1\""
            },
            {
              "description": "Radio button behavior. The button immediately sets its state to oneand sends out axpMsg_ButtonStateChangedmessage if it was not already setto one. You must turn off other radio buttons in a group in your code.",
              "name": "xpButtonBehaviorRadioButton",
              "value": "\"2\""
            }
          ]
        }
      ],
      "category": {
        "category": "Widget_System",
        "module": "Widget System",
        "url": "https://developer.x-plane.com/sdk/Button Behavior Values/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enum\"><h3 class=\"sdk-api-enum\" id=\"Button Behavior Values\"><a href=\"/sdk/Button Behavior Values/\">Button Behavior Values</a></h3><p>These define how the button responds to mouse clicks.</p><p><div class=\"enumitem\"><table><thead><tr><th>Name</th><th>Value</th><th>Description</th></tr></thead><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpButtonBehaviorPushButton\"><a href=\"/sdk/xpButtonBehaviorPushButton/\">xpButtonBehaviorPushButton</a></td><td>\"0\"</td><td>Standard push button behavior. The button highlights while the mouse is clickedover it and unhighlights when the mouse is moved outside of it or released.If the mouse is released over the button, the<a href=\"/sdk/xpMsg_PushButtonPressed/\">xpMsg_PushButtonPressed</a>messageis sent.</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpButtonBehaviorCheckBox\"><a href=\"/sdk/xpButtonBehaviorCheckBox/\">xpButtonBehaviorCheckBox</a></td><td>\"1\"</td><td>Check box behavior. The button immediately toggles its value when the mouse is clicked and sends out a<a href=\"/sdk/xpMsg_ButtonStateChanged/\">xpMsg_ButtonStateChanged</a>message.</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpButtonBehaviorRadioButton\"><a href=\"/sdk/xpButtonBehaviorRadioButton/\">xpButtonBehaviorRadioButton</a></td><td>\"2\"</td><td>Radio button behavior. The button immediately sets its state to oneand sends out a<a href=\"/sdk/xpMsg_ButtonStateChanged/\">xpMsg_ButtonStateChanged</a>message if it was not already setto one. You must turn off other radio buttons in a group in your code.</td></tr></table></div></p></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "### [Button Behavior Values](/sdk/Button Behavior Values/)\n\nThese define how the button responds to mouse clicks.\n\n| Name | Value | Description |\n| --- | --- | --- |\n| [xpButtonBehaviorPushButton](/sdk/xpButtonBehaviorPushButton/) | \"0\" |\nStandard push button behavior. The button highlights while the mouse is\nclickedover it and unhighlights when the mouse is moved outside of it or\nreleased.If the mouse is released over the button,\nthe[xpMsg_PushButtonPressed](/sdk/xpMsg_PushButtonPressed/)messageis sent. |\n| [xpButtonBehaviorCheckBox](/sdk/xpButtonBehaviorCheckBox/) | \"1\" | Check box\nbehavior. The button immediately toggles its value when the mouse is clicked and\nsends out a[xpMsg_ButtonStateChanged](/sdk/xpMsg_ButtonStateChanged/)message. |\n| [xpButtonBehaviorRadioButton](/sdk/xpButtonBehaviorRadioButton/) | \"2\" | Radio\nbutton behavior. The button immediately sets its state to oneand sends out\na[xpMsg_ButtonStateChanged](/sdk/xpMsg_ButtonStateChanged/)message if it was not\nalready setto one. You must turn off other radio buttons in a group in your\ncode. |",
      "own_functions": [
        "Button Behavior Values"
      ],
      "processing_timestamp": "2025-06-25T20:39:22.956917+00:00",
      "title": "Button Behavior Values | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/Button Behavior Values/"
    },
    "https://developer.x-plane.com/sdk/Button Messages/": {
      "api_signatures": [
        {
          "name": "Button Messages",
          "type": "enum",
          "values": [
            {
              "description": "This message is sent when the user completes a click and release in a button withpush button behavior. Parameterone of the message is the widget ID of the button. This message is dispatched up thewidget hierarchy.",
              "name": "xpMsg_PushButtonPressed",
              "value": "\"1300\""
            },
            {
              "description": "This message is sent when a button is clicked that has radio button or check box behaviorand its value changes. (Note that if the value changes by setting a property you do not receivethis message!) Parameter one is the widget ID of the button, parameter 2 is the new state value,either zero or one. This message is dispatched up the widget hierarchy.",
              "name": "xpMsg_ButtonStateChanged",
              "value": "\"1301\""
            }
          ]
        }
      ],
      "category": {
        "category": "XPLM_Plugin",
        "module": "Xplm Plugin",
        "url": "https://developer.x-plane.com/sdk/Button Messages/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enum\"><h3 class=\"sdk-api-enum\" id=\"Button Messages\"><a href=\"/sdk/Button Messages/\">Button Messages</a></h3><p>These messages are sent by the button to itself and then up the widget chain when the button is clicked. (You may intercept them by providing a widget handler for the button itself or by providing a handler in a parent widget.)</p><p><div class=\"enumitem\"><table><thead><tr><th>Name</th><th>Value</th><th>Description</th></tr></thead><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpMsg_PushButtonPressed\"><a href=\"/sdk/xpMsg_PushButtonPressed/\">xpMsg_PushButtonPressed</a></td><td>\"1300\"</td><td>This message is sent when the user completes a click and release in a button withpush button behavior. Parameterone of the message is the widget ID of the button. This message is dispatched up thewidget hierarchy.</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpMsg_ButtonStateChanged\"><a href=\"/sdk/xpMsg_ButtonStateChanged/\">xpMsg_ButtonStateChanged</a></td><td>\"1301\"</td><td>This message is sent when a button is clicked that has radio button or check box behaviorand its value changes. (Note that if the value changes by setting a property you do not receivethis message!) Parameter one is the widget ID of the button, parameter 2 is the new state value,either zero or one. This message is dispatched up the widget hierarchy.</td></tr></table></div></p></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "### [Button Messages](/sdk/Button Messages/)\n\nThese messages are sent by the button to itself and then up the widget chain\nwhen the button is clicked. (You may intercept them by providing a widget\nhandler for the button itself or by providing a handler in a parent widget.)\n\n| Name | Value | Description |\n| --- | --- | --- |\n| [xpMsg_PushButtonPressed](/sdk/xpMsg_PushButtonPressed/) | \"1300\" | This\nmessage is sent when the user completes a click and release in a button withpush\nbutton behavior. Parameterone of the message is the widget ID of the button.\nThis message is dispatched up thewidget hierarchy. |\n| [xpMsg_ButtonStateChanged](/sdk/xpMsg_ButtonStateChanged/) | \"1301\" | This\nmessage is sent when a button is clicked that has radio button or check box\nbehaviorand its value changes. (Note that if the value changes by setting a\nproperty you do not receivethis message!) Parameter one is the widget ID of the\nbutton, parameter 2 is the new state value,either zero or one. This message is\ndispatched up the widget hierarchy. |",
      "own_functions": [
        "Button Messages"
      ],
      "processing_timestamp": "2025-06-25T20:39:24.185490+00:00",
      "title": "Button Messages | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/Button Messages/"
    },
    "https://developer.x-plane.com/sdk/Button Properties/": {
      "api_signatures": [
        {
          "name": "Button Properties",
          "type": "enum",
          "values": [
            {
              "description": "This property sets the visual type of button. Use one of the button types above.",
              "name": "xpProperty_ButtonType",
              "value": "\"1300\""
            },
            {
              "description": "This property sets the button's behavior. Use one of the button behaviors above.",
              "name": "xpProperty_ButtonBehavior",
              "value": "\"1301\""
            },
            {
              "description": "This property tells whether a check box or radio button is \"checked\" or not. Not used for push buttons.",
              "name": "xpProperty_ButtonState",
              "value": "\"1302\""
            }
          ]
        }
      ],
      "category": {
        "category": "Widget_System",
        "module": "Widget System",
        "url": "https://developer.x-plane.com/sdk/Button Properties/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enum\"><h3 class=\"sdk-api-enum\" id=\"Button Properties\"><a href=\"/sdk/Button Properties/\">Button Properties</a></h3><p><div class=\"enumitem\"><table><thead><tr><th>Name</th><th>Value</th><th>Description</th></tr></thead><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpProperty_ButtonType\"><a href=\"/sdk/xpProperty_ButtonType/\">xpProperty_ButtonType</a></td><td>\"1300\"</td><td>This property sets the visual type of button. Use one of the button types above.</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpProperty_ButtonBehavior\"><a href=\"/sdk/xpProperty_ButtonBehavior/\">xpProperty_ButtonBehavior</a></td><td>\"1301\"</td><td>This property sets the button's behavior. Use one of the button behaviors above.</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpProperty_ButtonState\"><a href=\"/sdk/xpProperty_ButtonState/\">xpProperty_ButtonState</a></td><td>\"1302\"</td><td>This property tells whether a check box or radio button is \"checked\" or not. Not used for push buttons.</td></tr></table></div></p></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "### [Button Properties](/sdk/Button Properties/)\n\n| Name | Value | Description |\n| --- | --- | --- |\n| [xpProperty_ButtonType](/sdk/xpProperty_ButtonType/) | \"1300\" | This property\nsets the visual type of button. Use one of the button types above. |\n| [xpProperty_ButtonBehavior](/sdk/xpProperty_ButtonBehavior/) | \"1301\" | This\nproperty sets the button's behavior. Use one of the button behaviors above. |\n| [xpProperty_ButtonState](/sdk/xpProperty_ButtonState/) | \"1302\" | This\nproperty tells whether a check box or radio button is \"checked\" or not. Not used\nfor push buttons. |",
      "own_functions": [
        "Button Properties"
      ],
      "processing_timestamp": "2025-06-25T20:39:22.952675+00:00",
      "title": "Button Properties | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/Button Properties/"
    },
    "https://developer.x-plane.com/sdk/Button Types/": {
      "api_signatures": [
        {
          "name": "Button Types",
          "type": "enum",
          "values": [
            {
              "description": "This is a standard push button, like an 'OK' or 'Cancel' button in a dialog box.",
              "name": "xpPushButton",
              "value": "\"0\""
            },
            {
              "description": "A check box or radio button. Use this and the button behaviors below to get the desired behavior.",
              "name": "xpRadioButton",
              "value": "\"1\""
            },
            {
              "description": "A window close box.",
              "name": "xpWindowCloseBox",
              "value": "\"3\""
            },
            {
              "description": "A small down arrow.",
              "name": "xpLittleDownArrow",
              "value": "\"5\""
            },
            {
              "description": "A small up arrow.",
              "name": "xpLittleUpArrow",
              "value": "\"6\""
            }
          ]
        }
      ],
      "category": {
        "category": "Widget_System",
        "module": "Widget System",
        "url": "https://developer.x-plane.com/sdk/Button Types/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enum\"><h3 class=\"sdk-api-enum\" id=\"Button Types\"><a href=\"/sdk/Button Types/\">Button Types</a></h3><p>These define the visual appearance of buttons but not how they respond to the mouse.</p><p><div class=\"enumitem\"><table><thead><tr><th>Name</th><th>Value</th><th>Description</th></tr></thead><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpPushButton\"><a href=\"/sdk/xpPushButton/\">xpPushButton</a></td><td>\"0\"</td><td>This is a standard push button, like an 'OK' or 'Cancel' button in a dialog box.</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpRadioButton\"><a href=\"/sdk/xpRadioButton/\">xpRadioButton</a></td><td>\"1\"</td><td>A check box or radio button. Use this and the button behaviors below to get the desired behavior.</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpWindowCloseBox\"><a href=\"/sdk/xpWindowCloseBox/\">xpWindowCloseBox</a></td><td>\"3\"</td><td>A window close box.</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpLittleDownArrow\"><a href=\"/sdk/xpLittleDownArrow/\">xpLittleDownArrow</a></td><td>\"5\"</td><td>A small down arrow.</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpLittleUpArrow\"><a href=\"/sdk/xpLittleUpArrow/\">xpLittleUpArrow</a></td><td>\"6\"</td><td>A small up arrow.</td></tr></table></div></p></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "### [Button Types](/sdk/Button Types/)\n\nThese define the visual appearance of buttons but not how they respond to the\nmouse.\n\n| Name | Value | Description |\n| --- | --- | --- |\n| [xpPushButton](/sdk/xpPushButton/) | \"0\" | This is a standard push button,\nlike an 'OK' or 'Cancel' button in a dialog box. |\n| [xpRadioButton](/sdk/xpRadioButton/) | \"1\" | A check box or radio button. Use\nthis and the button behaviors below to get the desired behavior. |\n| [xpWindowCloseBox](/sdk/xpWindowCloseBox/) | \"3\" | A window close box. |\n| [xpLittleDownArrow](/sdk/xpLittleDownArrow/) | \"5\" | A small down arrow. |\n| [xpLittleUpArrow](/sdk/xpLittleUpArrow/) | \"6\" | A small up arrow. |",
      "own_functions": [
        "Button Types"
      ],
      "processing_timestamp": "2025-06-25T20:39:22.961916+00:00",
      "title": "Button Types | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/Button Types/"
    },
    "https://developer.x-plane.com/sdk/Caption Properties/": {
      "api_signatures": [
        {
          "name": "Caption Properties",
          "type": "enum",
          "values": [
            {
              "description": "This property specifies whether the caption is lit; use lit captions against screens.",
              "name": "xpProperty_CaptionLit",
              "value": "\"1600\""
            }
          ]
        }
      ],
      "category": {
        "category": "Widget_System",
        "module": "Widget System",
        "url": "https://developer.x-plane.com/sdk/Caption Properties/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enum\"><h3 class=\"sdk-api-enum\" id=\"Caption Properties\"><a href=\"/sdk/Caption Properties/\">Caption Properties</a></h3><p><div class=\"enumitem\"><table><thead><tr><th>Name</th><th>Value</th><th>Description</th></tr></thead><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpProperty_CaptionLit\"><a href=\"/sdk/xpProperty_CaptionLit/\">xpProperty_CaptionLit</a></td><td>\"1600\"</td><td>This property specifies whether the caption is lit; use lit captions against screens.</td></tr></table></div></p></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "### [Caption Properties](/sdk/Caption Properties/)\n\n| Name | Value | Description |\n| --- | --- | --- |\n| [xpProperty_CaptionLit](/sdk/xpProperty_CaptionLit/) | \"1600\" | This property\nspecifies whether the caption is lit; use lit captions against screens. |",
      "own_functions": [
        "Caption Properties"
      ],
      "processing_timestamp": "2025-06-25T20:39:22.963915+00:00",
      "title": "Caption Properties | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/Caption Properties/"
    },
    "https://developer.x-plane.com/sdk/General Graphics Properties/": {
      "api_signatures": [
        {
          "name": "General Graphics Properties",
          "type": "enum",
          "values": [
            {
              "description": "This property controls the type of icon that is drawn.",
              "name": "xpProperty_GeneralGraphicsType",
              "value": "\"1700\""
            }
          ]
        }
      ],
      "category": {
        "category": "XPLM_Graphics",
        "module": "Xplm Graphics",
        "url": "https://developer.x-plane.com/sdk/General Graphics Properties/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enum\"><h3 class=\"sdk-api-enum\" id=\"General Graphics Properties\"><a href=\"/sdk/General Graphics Properties/\">General Graphics Properties</a></h3><p><div class=\"enumitem\"><table><thead><tr><th>Name</th><th>Value</th><th>Description</th></tr></thead><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpProperty_GeneralGraphicsType\"><a href=\"/sdk/xpProperty_GeneralGraphicsType/\">xpProperty_GeneralGraphicsType</a></td><td>\"1700\"</td><td>This property controls the type of icon that is drawn.</td></tr></table></div></p></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "### [General Graphics Properties](/sdk/General Graphics Properties/)\n\n| Name | Value | Description |\n| --- | --- | --- |\n| [xpProperty_GeneralGraphicsType](/sdk/xpProperty_GeneralGraphicsType/) |\n\"1700\" | This property controls the type of icon that is drawn. |",
      "own_functions": [
        "General Graphics Properties"
      ],
      "processing_timestamp": "2025-06-25T20:39:23.641551+00:00",
      "title": "General Graphics Properties | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/General Graphics Properties/"
    },
    "https://developer.x-plane.com/sdk/General Graphics Types Values/": {
      "api_signatures": [
        {
          "name": "General Graphics Types Values",
          "type": "enum",
          "values": []
        }
      ],
      "category": {
        "category": "XPLM_Graphics",
        "module": "Xplm Graphics",
        "url": "https://developer.x-plane.com/sdk/General Graphics Types Values/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enum\"><h3 class=\"sdk-api-enum\" id=\"General Graphics Types Values\"><a href=\"/sdk/General Graphics Types Values/\">General Graphics Types Values</a></h3><p>These define the icon for the general graphics.</p><p><div class=\"enumitem\"><table><thead><tr><th>Name</th><th>Value</th><th>Description</th></tr></thead><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpShip\"><a href=\"/sdk/xpShip/\">xpShip</a></td><td>\"4\"</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpILSGlideScope\"><a href=\"/sdk/xpILSGlideScope/\">xpILSGlideScope</a></td><td>\"5\"</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpMarkerLeft\"><a href=\"/sdk/xpMarkerLeft/\">xpMarkerLeft</a></td><td>\"6\"</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xp_Airport\"><a href=\"/sdk/xp_Airport/\">xp_Airport</a></td><td>\"7\"</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpNDB\"><a href=\"/sdk/xpNDB/\">xpNDB</a></td><td>\"8\"</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpVOR\"><a href=\"/sdk/xpVOR/\">xpVOR</a></td><td>\"9\"</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpRadioTower\"><a href=\"/sdk/xpRadioTower/\">xpRadioTower</a></td><td>\"10\"</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpAircraftCarrier\"><a href=\"/sdk/xpAircraftCarrier/\">xpAircraftCarrier</a></td><td>\"11\"</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpFire\"><a href=\"/sdk/xpFire/\">xpFire</a></td><td>\"12\"</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpMarkerRight\"><a href=\"/sdk/xpMarkerRight/\">xpMarkerRight</a></td><td>\"13\"</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpCustomObject\"><a href=\"/sdk/xpCustomObject/\">xpCustomObject</a></td><td>\"14\"</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpCoolingTower\"><a href=\"/sdk/xpCoolingTower/\">xpCoolingTower</a></td><td>\"15\"</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpSmokeStack\"><a href=\"/sdk/xpSmokeStack/\">xpSmokeStack</a></td><td>\"16\"</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpBuilding\"><a href=\"/sdk/xpBuilding/\">xpBuilding</a></td><td>\"17\"</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpPowerLine\"><a href=\"/sdk/xpPowerLine/\">xpPowerLine</a></td><td>\"18\"</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpVORWithCompassRose\"><a href=\"/sdk/xpVORWithCompassRose/\">xpVORWithCompassRose</a></td><td>\"19\"</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpOilPlatform\"><a href=\"/sdk/xpOilPlatform/\">xpOilPlatform</a></td><td>\"21\"</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpOilPlatformSmall\"><a href=\"/sdk/xpOilPlatformSmall/\">xpOilPlatformSmall</a></td><td>\"22\"</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpWayPoint\"><a href=\"/sdk/xpWayPoint/\">xpWayPoint</a></td><td>\"23\"</td></tr></table></div></p></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "### [General Graphics Types Values](/sdk/General Graphics Types Values/)\n\nThese define the icon for the general graphics.\n\n| Name | Value | Description |\n| --- | --- | --- |\n| [xpShip](/sdk/xpShip/) | \"4\" |\n| [xpILSGlideScope](/sdk/xpILSGlideScope/) | \"5\" |\n| [xpMarkerLeft](/sdk/xpMarkerLeft/) | \"6\" |\n| [xp_Airport](/sdk/xp_Airport/) | \"7\" |\n| [xpNDB](/sdk/xpNDB/) | \"8\" |\n| [xpVOR](/sdk/xpVOR/) | \"9\" |\n| [xpRadioTower](/sdk/xpRadioTower/) | \"10\" |\n| [xpAircraftCarrier](/sdk/xpAircraftCarrier/) | \"11\" |\n| [xpFire](/sdk/xpFire/) | \"12\" |\n| [xpMarkerRight](/sdk/xpMarkerRight/) | \"13\" |\n| [xpCustomObject](/sdk/xpCustomObject/) | \"14\" |\n| [xpCoolingTower](/sdk/xpCoolingTower/) | \"15\" |\n| [xpSmokeStack](/sdk/xpSmokeStack/) | \"16\" |\n| [xpBuilding](/sdk/xpBuilding/) | \"17\" |\n| [xpPowerLine](/sdk/xpPowerLine/) | \"18\" |\n| [xpVORWithCompassRose](/sdk/xpVORWithCompassRose/) | \"19\" |\n| [xpOilPlatform](/sdk/xpOilPlatform/) | \"21\" |\n| [xpOilPlatformSmall](/sdk/xpOilPlatformSmall/) | \"22\" |\n| [xpWayPoint](/sdk/xpWayPoint/) | \"23\" |",
      "own_functions": [
        "General Graphics Types Values"
      ],
      "processing_timestamp": "2025-06-25T20:39:23.660110+00:00",
      "title": "General Graphics Types Values | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/General Graphics Types Values/"
    },
    "https://developer.x-plane.com/sdk/Main Window Properties/": {
      "api_signatures": [
        {
          "name": "Main Window Properties",
          "type": "enum",
          "values": [
            {
              "description": "This property specifies the type of window. Set to one of the main window types above.",
              "name": "xpProperty_MainWindowType",
              "value": "\"1100\""
            },
            {
              "description": "This property specifies whether the main window has close boxes in its corners.",
              "name": "xpProperty_MainWindowHasCloseBoxes",
              "value": "\"1200\""
            }
          ]
        }
      ],
      "category": {
        "category": "XPLM_Display",
        "module": "Xplm Display",
        "url": "https://developer.x-plane.com/sdk/Main Window Properties/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enum\"><h3 class=\"sdk-api-enum\" id=\"Main Window Properties\"><a href=\"/sdk/Main Window Properties/\">Main Window Properties</a></h3><p><div class=\"enumitem\"><table><thead><tr><th>Name</th><th>Value</th><th>Description</th></tr></thead><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpProperty_MainWindowType\"><a href=\"/sdk/xpProperty_MainWindowType/\">xpProperty_MainWindowType</a></td><td>\"1100\"</td><td>This property specifies the type of window. Set to one of the main window types above.</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpProperty_MainWindowHasCloseBoxes\"><a href=\"/sdk/xpProperty_MainWindowHasCloseBoxes/\">xpProperty_MainWindowHasCloseBoxes</a></td><td>\"1200\"</td><td>This property specifies whether the main window has close boxes in its corners.</td></tr></table></div></p></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "### [Main Window Properties](/sdk/Main Window Properties/)\n\n| Name | Value | Description |\n| --- | --- | --- |\n| [xpProperty_MainWindowType](/sdk/xpProperty_MainWindowType/) | \"1100\" | This\nproperty specifies the type of window. Set to one of the main window types\nabove. |\n| [xpProperty_MainWindowHasCloseBoxes](/sdk/xpProperty_MainWindowHasCloseBoxes/)\n| \"1200\" | This property specifies whether the main window has close boxes in\nits corners. |",
      "own_functions": [
        "Main Window Properties"
      ],
      "processing_timestamp": "2025-06-25T20:39:23.416737+00:00",
      "title": "Main Window Properties | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/Main Window Properties/"
    },
    "https://developer.x-plane.com/sdk/Main Window Type Values/": {
      "api_signatures": [
        {
          "name": "Main Window Type Values",
          "type": "enum",
          "values": [
            {
              "description": "The standard main window; pin stripes on XP7, metal frame on XP 6.",
              "name": "xpMainWindowStyle_MainWindow",
              "value": "\"0\""
            },
            {
              "description": "A translucent dark gray window.",
              "name": "xpMainWindowStyle_Translucent",
              "value": "\"1\""
            }
          ]
        }
      ],
      "category": {
        "category": "XPLM_Display",
        "module": "Xplm Display",
        "url": "https://developer.x-plane.com/sdk/Main Window Type Values/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enum\"><h3 class=\"sdk-api-enum\" id=\"Main Window Type Values\"><a href=\"/sdk/Main Window Type Values/\">Main Window Type Values</a></h3><p>These type values are used to control the appearance of a main window.</p><p><div class=\"enumitem\"><table><thead><tr><th>Name</th><th>Value</th><th>Description</th></tr></thead><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpMainWindowStyle_MainWindow\"><a href=\"/sdk/xpMainWindowStyle_MainWindow/\">xpMainWindowStyle_MainWindow</a></td><td>\"0\"</td><td>The standard main window; pin stripes on XP7, metal frame on XP 6.</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpMainWindowStyle_Translucent\"><a href=\"/sdk/xpMainWindowStyle_Translucent/\">xpMainWindowStyle_Translucent</a></td><td>\"1\"</td><td>A translucent dark gray window.</td></tr></table></div></p></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "### [Main Window Type Values](/sdk/Main Window Type Values/)\n\nThese type values are used to control the appearance of a main window.\n\n| Name | Value | Description |\n| --- | --- | --- |\n| [xpMainWindowStyle_MainWindow](/sdk/xpMainWindowStyle_MainWindow/) | \"0\" | The\nstandard main window; pin stripes on XP7, metal frame on XP 6. |\n| [xpMainWindowStyle_Translucent](/sdk/xpMainWindowStyle_Translucent/) | \"1\" | A\ntranslucent dark gray window. |",
      "own_functions": [
        "Main Window Type Values"
      ],
      "processing_timestamp": "2025-06-25T20:39:23.419787+00:00",
      "title": "Main Window Type Values | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/Main Window Type Values/"
    },
    "https://developer.x-plane.com/sdk/MainWindow Messages/": {
      "api_signatures": [
        {
          "name": "MainWindow Messages",
          "type": "enum",
          "values": [
            {
              "description": "This message is sent when the close buttons for your window are pressed.",
              "name": "xpMessage_CloseButtonPushed",
              "value": "\"1200\""
            }
          ]
        }
      ],
      "category": {
        "category": "XPLM_Display",
        "module": "Xplm Display",
        "url": "https://developer.x-plane.com/sdk/MainWindow Messages/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enum\"><h3 class=\"sdk-api-enum\" id=\"MainWindow Messages\"><a href=\"/sdk/MainWindow Messages/\">MainWindow Messages</a></h3><p><div class=\"enumitem\"><table><thead><tr><th>Name</th><th>Value</th><th>Description</th></tr></thead><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpMessage_CloseButtonPushed\"><a href=\"/sdk/xpMessage_CloseButtonPushed/\">xpMessage_CloseButtonPushed</a></td><td>\"1200\"</td><td>This message is sent when the close buttons for your window are pressed.</td></tr></table></div></p></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "### [MainWindow Messages](/sdk/MainWindow Messages/)\n\n| Name | Value | Description |\n| --- | --- | --- |\n| [xpMessage_CloseButtonPushed](/sdk/xpMessage_CloseButtonPushed/) | \"1200\" |\nThis message is sent when the close buttons for your window are pressed. |",
      "own_functions": [
        "MainWindow Messages"
      ],
      "processing_timestamp": "2025-06-25T20:39:23.423788+00:00",
      "title": "MainWindow Messages | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/MainWindow Messages/"
    },
    "https://developer.x-plane.com/sdk/NO_PARENT/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/NO_PARENT/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"NO_PARENT\"><a href=\"/sdk/NO_PARENT/\">NO_PARENT</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/NO_PARENT/\">NO_PARENT</a>            -1</code></pre></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "### [NO_PARENT](/sdk/NO_PARENT/)\n\n```cpp\n#define NO_PARENT            -1\n```",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.092521+00:00",
      "title": "NO_PARENT | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/NO_PARENT/"
    },
    "https://developer.x-plane.com/sdk/PARAM_PARENT/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/PARAM_PARENT/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"PARAM_PARENT\"><a href=\"/sdk/PARAM_PARENT/\">PARAM_PARENT</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/PARAM_PARENT/\">PARAM_PARENT</a>         -2</code></pre></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "### [PARAM_PARENT](/sdk/PARAM_PARENT/)\n\n```cpp\n#define PARAM_PARENT         -2\n```",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.065518+00:00",
      "title": "PARAM_PARENT | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/PARAM_PARENT/"
    },
    "https://developer.x-plane.com/sdk/Progress Indicator Properties/": {
      "api_signatures": [
        {
          "name": "Progress Indicator Properties",
          "type": "enum",
          "values": [
            {
              "description": "This is the current value of the progress indicator.",
              "name": "xpProperty_ProgressPosition",
              "value": "\"1800\""
            },
            {
              "description": "This is the minimum value, equivalent to 0% filled.",
              "name": "xpProperty_ProgressMin",
              "value": "\"1801\""
            },
            {
              "description": "This is the maximum value, equivalent to 100% filled.",
              "name": "xpProperty_ProgressMax",
              "value": "\"1802\""
            }
          ]
        }
      ],
      "category": {
        "category": "Widget_System",
        "module": "Widget System",
        "url": "https://developer.x-plane.com/sdk/Progress Indicator Properties/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enum\"><h3 class=\"sdk-api-enum\" id=\"Progress Indicator Properties\"><a href=\"/sdk/Progress Indicator Properties/\">Progress Indicator Properties</a></h3><p><div class=\"enumitem\"><table><thead><tr><th>Name</th><th>Value</th><th>Description</th></tr></thead><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpProperty_ProgressPosition\"><a href=\"/sdk/xpProperty_ProgressPosition/\">xpProperty_ProgressPosition</a></td><td>\"1800\"</td><td>This is the current value of the progress indicator.</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpProperty_ProgressMin\"><a href=\"/sdk/xpProperty_ProgressMin/\">xpProperty_ProgressMin</a></td><td>\"1801\"</td><td>This is the minimum value, equivalent to 0% filled.</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpProperty_ProgressMax\"><a href=\"/sdk/xpProperty_ProgressMax/\">xpProperty_ProgressMax</a></td><td>\"1802\"</td><td>This is the maximum value, equivalent to 100% filled.</td></tr></table></div></p></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "### [Progress Indicator Properties](/sdk/Progress Indicator Properties/)\n\n| Name | Value | Description |\n| --- | --- | --- |\n| [xpProperty_ProgressPosition](/sdk/xpProperty_ProgressPosition/) | \"1800\" |\nThis is the current value of the progress indicator. |\n| [xpProperty_ProgressMin](/sdk/xpProperty_ProgressMin/) | \"1801\" | This is the\nminimum value, equivalent to 0% filled. |\n| [xpProperty_ProgressMax](/sdk/xpProperty_ProgressMax/) | \"1802\" | This is the\nmaximum value, equivalent to 100% filled. |",
      "own_functions": [
        "Progress Indicator Properties"
      ],
      "processing_timestamp": "2025-06-25T20:39:22.967916+00:00",
      "title": "Progress Indicator Properties | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/Progress Indicator Properties/"
    },
    "https://developer.x-plane.com/sdk/Scroll Bar Messages/": {
      "api_signatures": [
        {
          "name": "Scroll Bar Messages",
          "type": "enum",
          "values": [
            {
              "description": "The scroll bar sends this message when the slider position changes. It sends the message up the call chain; param1 is the scroll bar widget ID.",
              "name": "xpMsg_ScrollBarSliderPositionChanged",
              "value": "\"1500\""
            }
          ]
        }
      ],
      "category": {
        "category": "XPLM_Plugin",
        "module": "Xplm Plugin",
        "url": "https://developer.x-plane.com/sdk/Scroll Bar Messages/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enum\"><h3 class=\"sdk-api-enum\" id=\"Scroll Bar Messages\"><a href=\"/sdk/Scroll Bar Messages/\">Scroll Bar Messages</a></h3><p><div class=\"enumitem\"><table><thead><tr><th>Name</th><th>Value</th><th>Description</th></tr></thead><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpMsg_ScrollBarSliderPositionChanged\"><a href=\"/sdk/xpMsg_ScrollBarSliderPositionChanged/\">xpMsg_ScrollBarSliderPositionChanged</a></td><td>\"1500\"</td><td>The scroll bar sends this message when the slider position changes. It sends the message up the call chain; param1 is the scroll bar widget ID.</td></tr></table></div></p></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "### [Scroll Bar Messages](/sdk/Scroll Bar Messages/)\n\n| Name | Value | Description |\n| --- | --- | --- |\n|\n[xpMsg_ScrollBarSliderPositionChanged](/sdk/xpMsg_ScrollBarSliderPositionChanged/)\n| \"1500\" | The scroll bar sends this message when the slider position changes.\nIt sends the message up the call chain; param1 is the scroll bar widget ID. |",
      "own_functions": [
        "Scroll Bar Messages"
      ],
      "processing_timestamp": "2025-06-25T20:39:24.193257+00:00",
      "title": "Scroll Bar Messages | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/Scroll Bar Messages/"
    },
    "https://developer.x-plane.com/sdk/Scroll Bar Properties/": {
      "api_signatures": [
        {
          "name": "Scroll Bar Properties",
          "type": "enum",
          "values": [
            {
              "description": "The current position of the thumb (in between the min and max, inclusive)",
              "name": "xpProperty_ScrollBarSliderPosition",
              "value": "\"1500\""
            },
            {
              "description": "The value the scroll bar has when the thumb is in the lowest position.",
              "name": "xpProperty_ScrollBarMin",
              "value": "\"1501\""
            },
            {
              "description": "The value the scroll bar has when the thumb is in the highest position.",
              "name": "xpProperty_ScrollBarMax",
              "value": "\"1502\""
            },
            {
              "description": "How many units to move the scroll bar when clicking next to the thumb. The scroll bar always moves one unit when the arrows are clicked.",
              "name": "xpProperty_ScrollBarPageAmount",
              "value": "\"1503\""
            },
            {
              "description": "The type of scrollbar from the enums above.",
              "name": "xpProperty_ScrollBarType",
              "value": "\"1504\""
            },
            {
              "description": "Used internally.",
              "name": "xpProperty_ScrollBarSlop",
              "value": "\"1505\""
            }
          ]
        }
      ],
      "category": {
        "category": "Widget_System",
        "module": "Widget System",
        "url": "https://developer.x-plane.com/sdk/Scroll Bar Properties/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enum\"><h3 class=\"sdk-api-enum\" id=\"Scroll Bar Properties\"><a href=\"/sdk/Scroll Bar Properties/\">Scroll Bar Properties</a></h3><p><div class=\"enumitem\"><table><thead><tr><th>Name</th><th>Value</th><th>Description</th></tr></thead><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpProperty_ScrollBarSliderPosition\"><a href=\"/sdk/xpProperty_ScrollBarSliderPosition/\">xpProperty_ScrollBarSliderPosition</a></td><td>\"1500\"</td><td>The current position of the thumb (in between the min and max, inclusive)</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpProperty_ScrollBarMin\"><a href=\"/sdk/xpProperty_ScrollBarMin/\">xpProperty_ScrollBarMin</a></td><td>\"1501\"</td><td>The value the scroll bar has when the thumb is in the lowest position.</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpProperty_ScrollBarMax\"><a href=\"/sdk/xpProperty_ScrollBarMax/\">xpProperty_ScrollBarMax</a></td><td>\"1502\"</td><td>The value the scroll bar has when the thumb is in the highest position.</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpProperty_ScrollBarPageAmount\"><a href=\"/sdk/xpProperty_ScrollBarPageAmount/\">xpProperty_ScrollBarPageAmount</a></td><td>\"1503\"</td><td>How many units to move the scroll bar when clicking next to the thumb. The scroll bar always moves one unit when the arrows are clicked.</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpProperty_ScrollBarType\"><a href=\"/sdk/xpProperty_ScrollBarType/\">xpProperty_ScrollBarType</a></td><td>\"1504\"</td><td>The type of scrollbar from the enums above.</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpProperty_ScrollBarSlop\"><a href=\"/sdk/xpProperty_ScrollBarSlop/\">xpProperty_ScrollBarSlop</a></td><td>\"1505\"</td><td>Used internally.</td></tr></table></div></p></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "### [Scroll Bar Properties](/sdk/Scroll Bar Properties/)\n\n| Name | Value | Description |\n| --- | --- | --- |\n| [xpProperty_ScrollBarSliderPosition](/sdk/xpProperty_ScrollBarSliderPosition/)\n| \"1500\" | The current position of the thumb (in between the min and max,\ninclusive) |\n| [xpProperty_ScrollBarMin](/sdk/xpProperty_ScrollBarMin/) | \"1501\" | The value\nthe scroll bar has when the thumb is in the lowest position. |\n| [xpProperty_ScrollBarMax](/sdk/xpProperty_ScrollBarMax/) | \"1502\" | The value\nthe scroll bar has when the thumb is in the highest position. |\n| [xpProperty_ScrollBarPageAmount](/sdk/xpProperty_ScrollBarPageAmount/) |\n\"1503\" | How many units to move the scroll bar when clicking next to the thumb.\nThe scroll bar always moves one unit when the arrows are clicked. |\n| [xpProperty_ScrollBarType](/sdk/xpProperty_ScrollBarType/) | \"1504\" | The type\nof scrollbar from the enums above. |\n| [xpProperty_ScrollBarSlop](/sdk/xpProperty_ScrollBarSlop/) | \"1505\" | Used\ninternally. |",
      "own_functions": [
        "Scroll Bar Properties"
      ],
      "processing_timestamp": "2025-06-25T20:39:22.975918+00:00",
      "title": "Scroll Bar Properties | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/Scroll Bar Properties/"
    },
    "https://developer.x-plane.com/sdk/Scroll Bar Type Values/": {
      "api_signatures": [
        {
          "name": "Scroll Bar Type Values",
          "type": "enum",
          "values": [
            {
              "description": "A standard X-Plane scroll bar (with arrows on the ends).",
              "name": "xpScrollBarTypeScrollBar",
              "value": "\"0\""
            },
            {
              "description": "A slider, no arrows.",
              "name": "xpScrollBarTypeSlider",
              "value": "\"1\""
            }
          ]
        }
      ],
      "category": {
        "category": "Widget_System",
        "module": "Widget System",
        "url": "https://developer.x-plane.com/sdk/Scroll Bar Type Values/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enum\"><h3 class=\"sdk-api-enum\" id=\"Scroll Bar Type Values\"><a href=\"/sdk/Scroll Bar Type Values/\">Scroll Bar Type Values</a></h3><p>This defines how the scroll bar looks.</p><p><div class=\"enumitem\"><table><thead><tr><th>Name</th><th>Value</th><th>Description</th></tr></thead><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpScrollBarTypeScrollBar\"><a href=\"/sdk/xpScrollBarTypeScrollBar/\">xpScrollBarTypeScrollBar</a></td><td>\"0\"</td><td>A standard X-Plane scroll bar (with arrows on the ends).</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpScrollBarTypeSlider\"><a href=\"/sdk/xpScrollBarTypeSlider/\">xpScrollBarTypeSlider</a></td><td>\"1\"</td><td>A slider, no arrows.</td></tr></table></div></p></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "### [Scroll Bar Type Values](/sdk/Scroll Bar Type Values/)\n\nThis defines how the scroll bar looks.\n\n| Name | Value | Description |\n| --- | --- | --- |\n| [xpScrollBarTypeScrollBar](/sdk/xpScrollBarTypeScrollBar/) | \"0\" | A standard\nX-Plane scroll bar (with arrows on the ends). |\n| [xpScrollBarTypeSlider](/sdk/xpScrollBarTypeSlider/) | \"1\" | A slider, no\narrows. |",
      "own_functions": [
        "Scroll Bar Type Values"
      ],
      "processing_timestamp": "2025-06-25T20:39:22.970915+00:00",
      "title": "Scroll Bar Type Values | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/Scroll Bar Type Values/"
    },
    "https://developer.x-plane.com/sdk/SubWindow Properties/": {
      "api_signatures": [
        {
          "name": "SubWindow Properties",
          "type": "enum",
          "values": [
            {
              "description": "This property specifies the type of window. Set to one of the subwindow types above.",
              "name": "xpProperty_SubWindowType",
              "value": "\"1200\""
            }
          ]
        }
      ],
      "category": {
        "category": "XPLM_Display",
        "module": "Xplm Display",
        "url": "https://developer.x-plane.com/sdk/SubWindow Properties/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enum\"><h3 class=\"sdk-api-enum\" id=\"SubWindow Properties\"><a href=\"/sdk/SubWindow Properties/\">SubWindow Properties</a></h3><p><div class=\"enumitem\"><table><thead><tr><th>Name</th><th>Value</th><th>Description</th></tr></thead><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpProperty_SubWindowType\"><a href=\"/sdk/xpProperty_SubWindowType/\">xpProperty_SubWindowType</a></td><td>\"1200\"</td><td>This property specifies the type of window. Set to one of the subwindow types above.</td></tr></table></div></p></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "### [SubWindow Properties](/sdk/SubWindow Properties/)\n\n| Name | Value | Description |\n| --- | --- | --- |\n| [xpProperty_SubWindowType](/sdk/xpProperty_SubWindowType/) | \"1200\" | This\nproperty specifies the type of window. Set to one of the subwindow types above.\n|",
      "own_functions": [
        "SubWindow Properties"
      ],
      "processing_timestamp": "2025-06-25T20:39:23.430844+00:00",
      "title": "SubWindow Properties | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/SubWindow Properties/"
    },
    "https://developer.x-plane.com/sdk/SubWindow Type Values/": {
      "api_signatures": [
        {
          "name": "SubWindow Type Values",
          "type": "enum",
          "values": [
            {
              "description": "A panel that sits inside a main window.",
              "name": "xpSubWindowStyle_SubWindow",
              "value": "\"0\""
            },
            {
              "description": "A screen that sits inside a panel for showing text information.",
              "name": "xpSubWindowStyle_Screen",
              "value": "\"2\""
            },
            {
              "description": "A list view for scrolling lists.",
              "name": "xpSubWindowStyle_ListView",
              "value": "\"3\""
            }
          ]
        }
      ],
      "category": {
        "category": "XPLM_Display",
        "module": "Xplm Display",
        "url": "https://developer.x-plane.com/sdk/SubWindow Type Values/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enum\"><h3 class=\"sdk-api-enum\" id=\"SubWindow Type Values\"><a href=\"/sdk/SubWindow Type Values/\">SubWindow Type Values</a></h3><p>These values control the appearance of the subwindow.</p><p><div class=\"enumitem\"><table><thead><tr><th>Name</th><th>Value</th><th>Description</th></tr></thead><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpSubWindowStyle_SubWindow\"><a href=\"/sdk/xpSubWindowStyle_SubWindow/\">xpSubWindowStyle_SubWindow</a></td><td>\"0\"</td><td>A panel that sits inside a main window.</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpSubWindowStyle_Screen\"><a href=\"/sdk/xpSubWindowStyle_Screen/\">xpSubWindowStyle_Screen</a></td><td>\"2\"</td><td>A screen that sits inside a panel for showing text information.</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpSubWindowStyle_ListView\"><a href=\"/sdk/xpSubWindowStyle_ListView/\">xpSubWindowStyle_ListView</a></td><td>\"3\"</td><td>A list view for scrolling lists.</td></tr></table></div></p></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "### [SubWindow Type Values](/sdk/SubWindow Type Values/)\n\nThese values control the appearance of the subwindow.\n\n| Name | Value | Description |\n| --- | --- | --- |\n| [xpSubWindowStyle_SubWindow](/sdk/xpSubWindowStyle_SubWindow/) | \"0\" | A panel\nthat sits inside a main window. |\n| [xpSubWindowStyle_Screen](/sdk/xpSubWindowStyle_Screen/) | \"2\" | A screen that\nsits inside a panel for showing text information. |\n| [xpSubWindowStyle_ListView](/sdk/xpSubWindowStyle_ListView/) | \"3\" | A list\nview for scrolling lists. |",
      "own_functions": [
        "SubWindow Type Values"
      ],
      "processing_timestamp": "2025-06-25T20:39:23.427846+00:00",
      "title": "SubWindow Type Values | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/SubWindow Type Values/"
    },
    "https://developer.x-plane.com/sdk/Text Field Messages/": {
      "api_signatures": [
        {
          "name": "Text Field Messages",
          "type": "enum",
          "values": [
            {
              "description": "The text field sends this message to itself when its text changes. It sends the message up the call chain; param1 is the text field's widget ID.",
              "name": "xpMsg_TextFieldChanged",
              "value": "\"1400\""
            }
          ]
        }
      ],
      "category": {
        "category": "XPLM_Plugin",
        "module": "Xplm Plugin",
        "url": "https://developer.x-plane.com/sdk/Text Field Messages/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enum\"><h3 class=\"sdk-api-enum\" id=\"Text Field Messages\"><a href=\"/sdk/Text Field Messages/\">Text Field Messages</a></h3><p><div class=\"enumitem\"><table><thead><tr><th>Name</th><th>Value</th><th>Description</th></tr></thead><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpMsg_TextFieldChanged\"><a href=\"/sdk/xpMsg_TextFieldChanged/\">xpMsg_TextFieldChanged</a></td><td>\"1400\"</td><td>The text field sends this message to itself when its text changes. It sends the message up the call chain; param1 is the text field's widget ID.</td></tr></table></div></p></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "### [Text Field Messages](/sdk/Text Field Messages/)\n\n| Name | Value | Description |\n| --- | --- | --- |\n| [xpMsg_TextFieldChanged](/sdk/xpMsg_TextFieldChanged/) | \"1400\" | The text\nfield sends this message to itself when its text changes. It sends the message\nup the call chain; param1 is the text field's widget ID. |",
      "own_functions": [
        "Text Field Messages"
      ],
      "processing_timestamp": "2025-06-25T20:39:24.188540+00:00",
      "title": "Text Field Messages | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/Text Field Messages/"
    },
    "https://developer.x-plane.com/sdk/Text Field Properties/": {
      "api_signatures": [
        {
          "name": "Text Field Properties",
          "type": "enum",
          "values": [
            {
              "description": "This is the character position the selection starts at, zero based.If it is the same as the end insertion point, the insertion pointis not a selection.",
              "name": "xpProperty_EditFieldSelStart",
              "value": "\"1400\""
            },
            {
              "description": "This is the character position of the end of the selection.",
              "name": "xpProperty_EditFieldSelEnd",
              "value": "\"1401\""
            },
            {
              "description": "This is the character position a drag was started at if the user is dragging to select text, or -1 if a drag is not in progress.",
              "name": "xpProperty_EditFieldSelDragStart",
              "value": "\"1402\""
            },
            {
              "description": "This is the type of text field to display, from the above list.",
              "name": "xpProperty_TextFieldType",
              "value": "\"1403\""
            },
            {
              "description": "Set this property to 1 to password protect the field. Characters will be drawn as *s even though the descriptor will contain plain-text.",
              "name": "xpProperty_PasswordMode",
              "value": "\"1404\""
            },
            {
              "description": "The max number of characters you can enter, if limited. Zero means unlimited.",
              "name": "xpProperty_MaxCharacters",
              "value": "\"1405\""
            },
            {
              "description": "The first visible character on the left. This effectively scrolls the text field.",
              "name": "xpProperty_ScrollPosition",
              "value": "\"1406\""
            },
            {
              "description": "The font to draw the field's text with. (AnXPLMFontID.)",
              "name": "xpProperty_Font",
              "value": "\"1407\""
            },
            {
              "description": "This is the active side of the insert selection. (Internal)",
              "name": "xpProperty_ActiveEditSide",
              "value": "\"1408\""
            }
          ]
        }
      ],
      "category": {
        "category": "Widget_System",
        "module": "Widget System",
        "url": "https://developer.x-plane.com/sdk/Text Field Properties/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enum\"><h3 class=\"sdk-api-enum\" id=\"Text Field Properties\"><a href=\"/sdk/Text Field Properties/\">Text Field Properties</a></h3><p><div class=\"enumitem\"><table><thead><tr><th>Name</th><th>Value</th><th>Description</th></tr></thead><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpProperty_EditFieldSelStart\"><a href=\"/sdk/xpProperty_EditFieldSelStart/\">xpProperty_EditFieldSelStart</a></td><td>\"1400\"</td><td>This is the character position the selection starts at, zero based.If it is the same as the end insertion point, the insertion pointis not a selection.</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpProperty_EditFieldSelEnd\"><a href=\"/sdk/xpProperty_EditFieldSelEnd/\">xpProperty_EditFieldSelEnd</a></td><td>\"1401\"</td><td>This is the character position of the end of the selection.</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpProperty_EditFieldSelDragStart\"><a href=\"/sdk/xpProperty_EditFieldSelDragStart/\">xpProperty_EditFieldSelDragStart</a></td><td>\"1402\"</td><td>This is the character position a drag was started at if the user is dragging to select text, or -1 if a drag is not in progress.</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpProperty_TextFieldType\"><a href=\"/sdk/xpProperty_TextFieldType/\">xpProperty_TextFieldType</a></td><td>\"1403\"</td><td>This is the type of text field to display, from the above list.</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpProperty_PasswordMode\"><a href=\"/sdk/xpProperty_PasswordMode/\">xpProperty_PasswordMode</a></td><td>\"1404\"</td><td>Set this property to 1 to password protect the field. Characters will be drawn as *s even though the descriptor will contain plain-text.</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpProperty_MaxCharacters\"><a href=\"/sdk/xpProperty_MaxCharacters/\">xpProperty_MaxCharacters</a></td><td>\"1405\"</td><td>The max number of characters you can enter, if limited. Zero means unlimited.</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpProperty_ScrollPosition\"><a href=\"/sdk/xpProperty_ScrollPosition/\">xpProperty_ScrollPosition</a></td><td>\"1406\"</td><td>The first visible character on the left. This effectively scrolls the text field.</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpProperty_Font\"><a href=\"/sdk/xpProperty_Font/\">xpProperty_Font</a></td><td>\"1407\"</td><td>The font to draw the field's text with. (An<a href=\"/sdk/XPLMFontID/\">XPLMFontID</a>.)</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpProperty_ActiveEditSide\"><a href=\"/sdk/xpProperty_ActiveEditSide/\">xpProperty_ActiveEditSide</a></td><td>\"1408\"</td><td>This is the active side of the insert selection. (Internal)</td></tr></table></div></p></div></div></article>",
      "code_examples": [],
      "cross_references": [
        "XPLMFontID"
      ],
      "markdown": "### [Text Field Properties](/sdk/Text Field Properties/)\n\n| Name | Value | Description |\n| --- | --- | --- |\n| [xpProperty_EditFieldSelStart](/sdk/xpProperty_EditFieldSelStart/) | \"1400\" |\nThis is the character position the selection starts at, zero based.If it is the\nsame as the end insertion point, the insertion pointis not a selection. |\n| [xpProperty_EditFieldSelEnd](/sdk/xpProperty_EditFieldSelEnd/) | \"1401\" | This\nis the character position of the end of the selection. |\n| [xpProperty_EditFieldSelDragStart](/sdk/xpProperty_EditFieldSelDragStart/) |\n\"1402\" | This is the character position a drag was started at if the user is\ndragging to select text, or -1 if a drag is not in progress. |\n| [xpProperty_TextFieldType](/sdk/xpProperty_TextFieldType/) | \"1403\" | This is\nthe type of text field to display, from the above list. |\n| [xpProperty_PasswordMode](/sdk/xpProperty_PasswordMode/) | \"1404\" | Set this\nproperty to 1 to password protect the field. Characters will be drawn as *s even\nthough the descriptor will contain plain-text. |\n| [xpProperty_MaxCharacters](/sdk/xpProperty_MaxCharacters/) | \"1405\" | The max\nnumber of characters you can enter, if limited. Zero means unlimited. |\n| [xpProperty_ScrollPosition](/sdk/xpProperty_ScrollPosition/) | \"1406\" | The\nfirst visible character on the left. This effectively scrolls the text field. |\n| [xpProperty_Font](/sdk/xpProperty_Font/) | \"1407\" | The font to draw the\nfield's text with. (An[XPLMFontID](/sdk/XPLMFontID/).) |\n| [xpProperty_ActiveEditSide](/sdk/xpProperty_ActiveEditSide/) | \"1408\" | This\nis the active side of the insert selection. (Internal) |",
      "own_functions": [
        "Text Field Properties"
      ],
      "processing_timestamp": "2025-06-25T20:39:22.982919+00:00",
      "title": "Text Field Properties | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/Text Field Properties/"
    },
    "https://developer.x-plane.com/sdk/Text Field Type Values/": {
      "api_signatures": [
        {
          "name": "Text Field Type Values",
          "type": "enum",
          "values": [
            {
              "description": "A field for text entry.",
              "name": "xpTextEntryField",
              "value": "\"0\""
            },
            {
              "description": "A transparent text field. The user can type and the text is drawn, but no background is drawn.You can draw your own background by adding a widget handler and prehandling the draw message.",
              "name": "xpTextTransparent",
              "value": "\"3\""
            },
            {
              "description": "A translucent edit field, dark gray.",
              "name": "xpTextTranslucent",
              "value": "\"4\""
            }
          ]
        }
      ],
      "category": {
        "category": "Widget_System",
        "module": "Widget System",
        "url": "https://developer.x-plane.com/sdk/Text Field Type Values/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enum\"><h3 class=\"sdk-api-enum\" id=\"Text Field Type Values\"><a href=\"/sdk/Text Field Type Values/\">Text Field Type Values</a></h3><p>These control the look of the text field.</p><p><div class=\"enumitem\"><table><thead><tr><th>Name</th><th>Value</th><th>Description</th></tr></thead><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpTextEntryField\"><a href=\"/sdk/xpTextEntryField/\">xpTextEntryField</a></td><td>\"0\"</td><td>A field for text entry.</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpTextTransparent\"><a href=\"/sdk/xpTextTransparent/\">xpTextTransparent</a></td><td>\"3\"</td><td>A transparent text field. The user can type and the text is drawn, but no background is drawn.You can draw your own background by adding a widget handler and prehandling the draw message.</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpTextTranslucent\"><a href=\"/sdk/xpTextTranslucent/\">xpTextTranslucent</a></td><td>\"4\"</td><td>A translucent edit field, dark gray.</td></tr></table></div></p></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "### [Text Field Type Values](/sdk/Text Field Type Values/)\n\nThese control the look of the text field.\n\n| Name | Value | Description |\n| --- | --- | --- |\n| [xpTextEntryField](/sdk/xpTextEntryField/) | \"0\" | A field for text entry. |\n| [xpTextTransparent](/sdk/xpTextTransparent/) | \"3\" | A transparent text field.\nThe user can type and the text is drawn, but no background is drawn.You can draw\nyour own background by adding a widget handler and prehandling the draw message.\n|\n| [xpTextTranslucent](/sdk/xpTextTranslucent/) | \"4\" | A translucent edit field,\ndark gray. |",
      "own_functions": [
        "Text Field Type Values"
      ],
      "processing_timestamp": "2025-06-25T20:39:22.988921+00:00",
      "title": "Text Field Type Values | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/Text Field Type Values/"
    },
    "https://developer.x-plane.com/sdk/XPAddWidgetCallback/": {
      "api_signatures": [
        {
          "description": "This function adds a new widget callback to a widget. This widget callback supercedes any existing ones and will receive messages first; if it does not handle messages they will go on to be handled by pre-existing widgets.",
          "name": "XPAddWidgetCallback",
          "parameters": [],
          "signature": "WIDGET_API voidXPAddWidgetCallback(XPWidgetIDinWidget,XPWidgetFunc_tinNewCallback);"
        },
        {
          "name": "WIDGET_API",
          "signature": "WIDGET_API voidXPAddWidgetCallback(XPWidgetIDinWidget,XPWidgetFunc_tinNewCallback);",
          "source": "code_block_extraction",
          "type": "function"
        }
      ],
      "category": {
        "category": "XPLM_Processing",
        "module": "Xplm Processing",
        "url": "https://developer.x-plane.com/sdk/XPAddWidgetCallback/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPAddWidgetCallback\"><a href=\"/sdk/XPAddWidgetCallback/\">XPAddWidgetCallback</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>WIDGET_API void       <a href=\"/sdk/XPAddWidgetCallback/\">XPAddWidgetCallback</a>(\n                         <a href=\"/sdk/XPWidgetID/\">XPWidgetID</a>           inWidget,\n                         <a href=\"/sdk/XPWidgetFunc_t/\">XPWidgetFunc_t</a>       inNewCallback);\n</code></pre><p>This function adds a new widget callback to a widget. This widget callback supercedes any existing ones and will receive messages first; if it does not handle messages they will go on to be handled by pre-existing widgets.</p><p>The widget function will remain on the widget for the life of the widget. The creation message will be sent to the new callback immediately with the widget ID, and the destruction message will be sent before the other widget function receives a destruction message.</p><p>This provides a way to ‘subclass’ an existing widget. By providing a second hook that only handles certain widget messages, you can customize or extend widget behavior.</p></div></div></article>",
      "code_examples": [
        {
          "char_count": 83,
          "code": "WIDGET_API voidXPAddWidgetCallback(XPWidgetIDinWidget,XPWidgetFunc_tinNewCallback);",
          "context": "XPAddWidgetCallback",
          "id": "example_0",
          "language": "c",
          "line_count": 1,
          "type": "snippet"
        }
      ],
      "cross_references": [],
      "markdown": "### [XPAddWidgetCallback](/sdk/XPAddWidgetCallback/)\n\n```cpp\nWIDGET_API void       XPAddWidgetCallback(\n                         XPWidgetID           inWidget,\n                         XPWidgetFunc_t       inNewCallback);\n\n```\n\nThis function adds a new widget callback to a widget. This widget callback\nsupercedes any existing ones and will receive messages first; if it does not\nhandle messages they will go on to be handled by pre-existing widgets.\n\nThe widget function will remain on the widget for the life of the widget. The\ncreation message will be sent to the new callback immediately with the widget\nID, and the destruction message will be sent before the other widget function\nreceives a destruction message.\n\nThis provides a way to ‘subclass’ an existing widget. By providing a second hook\nthat only handles certain widget messages, you can customize or extend widget\nbehavior.",
      "own_functions": [
        "XPAddWidgetCallback",
        "WIDGET_API"
      ],
      "processing_timestamp": "2025-06-25T20:39:24.310103+00:00",
      "title": "XPAddWidgetCallback | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPAddWidgetCallback/"
    },
    "https://developer.x-plane.com/sdk/XPBringRootWidgetToFront/": {
      "api_signatures": [
        {
          "description": "This routine makes the specified widget be in the frontmost widget hierarchy. If this widget is a root widget, its widget hierarchy comes to front, otherwise the widget’s root is brought to the front. If this widget is not in an active widget hiearchy (e.g. there is no root widget at the top of the tree), this routine does nothing.",
          "name": "XPBringRootWidgetToFront",
          "parameters": [],
          "signature": "WIDGET_API voidXPBringRootWidgetToFront(XPWidgetIDinWidget);"
        },
        {
          "name": "WIDGET_API",
          "signature": "WIDGET_API voidXPBringRootWidgetToFront(XPWidgetIDinWidget);",
          "source": "code_block_extraction",
          "type": "function"
        }
      ],
      "category": {
        "category": "Widget_System",
        "module": "Widget System",
        "url": "https://developer.x-plane.com/sdk/XPBringRootWidgetToFront/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPBringRootWidgetToFront\"><a href=\"/sdk/XPBringRootWidgetToFront/\">XPBringRootWidgetToFront</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>WIDGET_API void       <a href=\"/sdk/XPBringRootWidgetToFront/\">XPBringRootWidgetToFront</a>(\n                         <a href=\"/sdk/XPWidgetID/\">XPWidgetID</a>           inWidget);\n</code></pre><p>This routine makes the specified widget be in the frontmost widget hierarchy. If this widget is a root widget, its widget hierarchy comes to front, otherwise the widget’s root is brought to the front. If this widget is not in an active widget hiearchy (e.g. there is no root widget at the top of the tree), this routine does nothing.</p></div></div></article>",
      "code_examples": [
        {
          "char_count": 60,
          "code": "WIDGET_API voidXPBringRootWidgetToFront(XPWidgetIDinWidget);",
          "context": "XPBringRootWidgetToFront",
          "id": "example_0",
          "language": "c",
          "line_count": 1,
          "type": "snippet"
        }
      ],
      "cross_references": [],
      "markdown": "### [XPBringRootWidgetToFront](/sdk/XPBringRootWidgetToFront/)\n\n```cpp\nWIDGET_API void       XPBringRootWidgetToFront(\n                         XPWidgetID           inWidget);\n\n```\n\nThis routine makes the specified widget be in the frontmost widget hierarchy. If\nthis widget is a root widget, its widget hierarchy comes to front, otherwise the\nwidget’s root is brought to the front. If this widget is not in an active widget\nhiearchy (e.g. there is no root widget at the top of the tree), this routine\ndoes nothing.",
      "own_functions": [
        "XPBringRootWidgetToFront",
        "WIDGET_API"
      ],
      "processing_timestamp": "2025-06-25T20:39:22.984921+00:00",
      "title": "XPBringRootWidgetToFront | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPBringRootWidgetToFront/"
    },
    "https://developer.x-plane.com/sdk/XPCountChildWidgets/": {
      "api_signatures": [
        {
          "description": "This routine returns the number of widgets another widget contains.",
          "name": "XPCountChildWidgets",
          "parameters": [],
          "signature": "WIDGET_API intXPCountChildWidgets(XPWidgetIDinWidget);"
        },
        {
          "name": "WIDGET_API",
          "signature": "WIDGET_API intXPCountChildWidgets(XPWidgetIDinWidget);",
          "source": "code_block_extraction",
          "type": "function"
        }
      ],
      "category": {
        "category": "Widget_System",
        "module": "Widget System",
        "url": "https://developer.x-plane.com/sdk/XPCountChildWidgets/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPCountChildWidgets\"><a href=\"/sdk/XPCountChildWidgets/\">XPCountChildWidgets</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>WIDGET_API int        <a href=\"/sdk/XPCountChildWidgets/\">XPCountChildWidgets</a>(\n                         <a href=\"/sdk/XPWidgetID/\">XPWidgetID</a>           inWidget);\n</code></pre><p>This routine returns the number of widgets another widget contains.</p></div></div></article>",
      "code_examples": [
        {
          "char_count": 54,
          "code": "WIDGET_API intXPCountChildWidgets(XPWidgetIDinWidget);",
          "context": "XPCountChildWidgets",
          "id": "example_0",
          "language": "c",
          "line_count": 1,
          "type": "snippet"
        }
      ],
      "cross_references": [],
      "markdown": "### [XPCountChildWidgets](/sdk/XPCountChildWidgets/)\n\n```cpp\nWIDGET_API int        XPCountChildWidgets(\n                         XPWidgetID           inWidget);\n\n```\n\nThis routine returns the number of widgets another widget contains.",
      "own_functions": [
        "XPCountChildWidgets",
        "WIDGET_API"
      ],
      "processing_timestamp": "2025-06-25T20:39:22.993429+00:00",
      "title": "XPCountChildWidgets | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPCountChildWidgets/"
    },
    "https://developer.x-plane.com/sdk/XPCreateCustomWidget/": {
      "api_signatures": [
        {
          "description": "This function is the same asXPCreateWidgetexcept that instead of passing a class ID, you pass your widget callback function pointer defining the widget. Use this function to define a custom widget. All parameters are the same asXPCreateWidget, except that the widget class has been replaced with the widget function.",
          "name": "XPCreateCustomWidget",
          "parameters": [
            {
              "full_declaration": "int                  inLeft",
              "name": "inLeft",
              "type": "int"
            },
            {
              "full_declaration": "int                  inTop",
              "name": "inTop",
              "type": "int"
            },
            {
              "full_declaration": "int                  inRight",
              "name": "inRight",
              "type": "int"
            },
            {
              "full_declaration": "int                  inBottom",
              "name": "inBottom",
              "type": "int"
            },
            {
              "full_declaration": "int                  inVisible",
              "name": "inVisible",
              "type": "int"
            },
            {
              "full_declaration": "const char *         inDescriptor",
              "name": "inDescriptor",
              "type": "const char *"
            },
            {
              "full_declaration": "int                  inIsRoot",
              "name": "inIsRoot",
              "type": "int"
            }
          ],
          "signature": "WIDGET_APIXPWidgetIDXPCreateCustomWidget(\n                         int                  inLeft,\n                         int                  inTop,\n                         int                  inRight,\n                         int                  inBottom,\n                         int                  inVisible,\n                         const char *         inDescriptor,\n                         int                  inIsRoot,XPWidgetIDinContainer,XPWidgetFunc_tinCallback);"
        }
      ],
      "category": {
        "category": "Widget_System",
        "module": "Widget System",
        "url": "https://developer.x-plane.com/sdk/XPCreateCustomWidget/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPCreateCustomWidget\"><a href=\"/sdk/XPCreateCustomWidget/\">XPCreateCustomWidget</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>WIDGET_API <a href=\"/sdk/XPWidgetID/\">XPWidgetID</a> <a href=\"/sdk/XPCreateCustomWidget/\">XPCreateCustomWidget</a>(\n                         int                  inLeft,\n                         int                  inTop,\n                         int                  inRight,\n                         int                  inBottom,\n                         int                  inVisible,\n                         const char *         inDescriptor,\n                         int                  inIsRoot,\n                         <a href=\"/sdk/XPWidgetID/\">XPWidgetID</a>           inContainer,\n                         <a href=\"/sdk/XPWidgetFunc_t/\">XPWidgetFunc_t</a>       inCallback);\n</code></pre><p>This function is the same as<a href=\"/sdk/XPCreateWidget/\">XPCreateWidget</a>except that instead of passing a class ID, you pass your widget callback function pointer defining the widget. Use this function to define a custom widget. All parameters are the same as<a href=\"/sdk/XPCreateWidget/\">XPCreateWidget</a>, except that the widget class has been replaced with the widget function.</p></div></div></article>",
      "code_examples": [
        {
          "char_count": 480,
          "code": "WIDGET_APIXPWidgetIDXPCreateCustomWidget(\n                         int                  inLeft,\n                         int                  inTop,\n                         int                  inRight,\n                         int                  inBottom,\n                         int                  inVisible,\n                         const char *         inDescriptor,\n                         int                  inIsRoot,XPWidgetIDinContainer,XPWidgetFunc_tinCallback);",
          "context": "XPCreateCustomWidget",
          "id": "example_0",
          "language": "c",
          "line_count": 8,
          "type": "snippet"
        }
      ],
      "cross_references": [
        "XPCreateWidget",
        "WIDGET_API"
      ],
      "markdown": "### [XPCreateCustomWidget](/sdk/XPCreateCustomWidget/)\n\n```cpp\nWIDGET_API XPWidgetID XPCreateCustomWidget(\n                         int                  inLeft,\n                         int                  inTop,\n                         int                  inRight,\n                         int                  inBottom,\n                         int                  inVisible,\n                         const char *         inDescriptor,\n                         int                  inIsRoot,\n                         XPWidgetID           inContainer,\n                         XPWidgetFunc_t       inCallback);\n\n```\n\nThis function is the same as[XPCreateWidget](/sdk/XPCreateWidget/)except that\ninstead of passing a class ID, you pass your widget callback function pointer\ndefining the widget. Use this function to define a custom widget. All parameters\nare the same as[XPCreateWidget](/sdk/XPCreateWidget/), except that the widget\nclass has been replaced with the widget function.",
      "own_functions": [
        "XPCreateCustomWidget"
      ],
      "processing_timestamp": "2025-06-25T20:39:22.991432+00:00",
      "title": "XPCreateCustomWidget | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPCreateCustomWidget/"
    },
    "https://developer.x-plane.com/sdk/XPCreateWidget/": {
      "api_signatures": [
        {
          "description": "This function creates a new widget and returns the new widget’s ID to you. If the widget creation fails for some reason, it returns NULL. Widget creation will fail either if you pass a bad class ID or if there is not adequate memory.",
          "name": "XPCreateWidget",
          "parameters": [
            {
              "full_declaration": "int                  inLeft",
              "name": "inLeft",
              "type": "int"
            },
            {
              "full_declaration": "int                  inTop",
              "name": "inTop",
              "type": "int"
            },
            {
              "full_declaration": "int                  inRight",
              "name": "inRight",
              "type": "int"
            },
            {
              "full_declaration": "int                  inBottom",
              "name": "inBottom",
              "type": "int"
            },
            {
              "full_declaration": "int                  inVisible",
              "name": "inVisible",
              "type": "int"
            },
            {
              "full_declaration": "const char *         inDescriptor",
              "name": "inDescriptor",
              "type": "const char *"
            },
            {
              "full_declaration": "int                  inIsRoot",
              "name": "inIsRoot",
              "type": "int"
            }
          ],
          "signature": "WIDGET_APIXPWidgetIDXPCreateWidget(\n                         int                  inLeft,\n                         int                  inTop,\n                         int                  inRight,\n                         int                  inBottom,\n                         int                  inVisible,\n                         const char *         inDescriptor,\n                         int                  inIsRoot,XPWidgetIDinContainer,XPWidgetClassinClass);"
        }
      ],
      "category": {
        "category": "Widget_System",
        "module": "Widget System",
        "url": "https://developer.x-plane.com/sdk/XPCreateWidget/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPCreateWidget\"><a href=\"/sdk/XPCreateWidget/\">XPCreateWidget</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>WIDGET_API <a href=\"/sdk/XPWidgetID/\">XPWidgetID</a> <a href=\"/sdk/XPCreateWidget/\">XPCreateWidget</a>(\n                         int                  inLeft,\n                         int                  inTop,\n                         int                  inRight,\n                         int                  inBottom,\n                         int                  inVisible,\n                         const char *         inDescriptor,\n                         int                  inIsRoot,\n                         <a href=\"/sdk/XPWidgetID/\">XPWidgetID</a>           inContainer,\n                         <a href=\"/sdk/XPWidgetClass/\">XPWidgetClass</a>        inClass);\n</code></pre><p>This function creates a new widget and returns the new widget’s ID to you. If the widget creation fails for some reason, it returns NULL. Widget creation will fail either if you pass a bad class ID or if there is not adequate memory.</p><p>Input Parameters:</p><ul><li>Top, left, bottom, and right in global screen coordinates defining the widget’s location on the screen.</li><li>inVisible is 1 if the widget should be drawn, 0 to start the widget as hidden.</li><li>inDescriptor is a null terminated string that will become the widget’s descriptor.</li><li>inIsRoot is 1 if this is going to be a root widget, 0 if it will not be.</li><li>inContainer is the ID of this widget’s container. It must be 0 for a root widget. For a non-root widget, pass the widget ID of the widget to place this widget within. If this widget is not going to start inside another widget, pass 0; this new widget will be created but will not be drawn until it is placed inside another widget.</li><li>inClass is the class of the widget to draw. Use one of the predefined class-IDs to create a standard widget.</li></ul><p>A note on widget embedding: a widget is only called (and will be drawn, etc.) if it is placed within a widget that will be called. Root widgets are always called. So it is possible to have whole chains of widgets that are simply not called. You can preconstruct widget trees and then place them into root widgets later to activate them if you wish.</p></div></div></article>",
      "code_examples": [
        {
          "char_count": 470,
          "code": "WIDGET_APIXPWidgetIDXPCreateWidget(\n                         int                  inLeft,\n                         int                  inTop,\n                         int                  inRight,\n                         int                  inBottom,\n                         int                  inVisible,\n                         const char *         inDescriptor,\n                         int                  inIsRoot,XPWidgetIDinContainer,XPWidgetClassinClass);",
          "context": "XPCreateWidget",
          "id": "example_0",
          "language": "c",
          "line_count": 8,
          "type": "snippet"
        }
      ],
      "cross_references": [
        "WIDGET_API"
      ],
      "markdown": "### [XPCreateWidget](/sdk/XPCreateWidget/)\n\n```cpp\nWIDGET_API XPWidgetID XPCreateWidget(\n                         int                  inLeft,\n                         int                  inTop,\n                         int                  inRight,\n                         int                  inBottom,\n                         int                  inVisible,\n                         const char *         inDescriptor,\n                         int                  inIsRoot,\n                         XPWidgetID           inContainer,\n                         XPWidgetClass        inClass);\n\n```\n\nThis function creates a new widget and returns the new widget’s ID to you. If\nthe widget creation fails for some reason, it returns NULL. Widget creation will\nfail either if you pass a bad class ID or if there is not adequate memory.\n\nInput Parameters:\n\n- Top, left, bottom, and right in global screen coordinates defining the widget’s location on the screen.\n- inVisible is 1 if the widget should be drawn, 0 to start the widget as hidden.\n- inDescriptor is a null terminated string that will become the widget’s descriptor.\n- inIsRoot is 1 if this is going to be a root widget, 0 if it will not be.\n- inContainer is the ID of this widget’s container. It must be 0 for a root widget. For a non-root widget, pass the widget ID of the widget to place this widget within. If this widget is not going to start inside another widget, pass 0; this new widget will be created but will not be drawn until it is placed inside another widget.\n- inClass is the class of the widget to draw. Use one of the predefined class-IDs to create a standard widget.\n\nA note on widget embedding: a widget is only called (and will be drawn, etc.) if\nit is placed within a widget that will be called. Root widgets are always\ncalled. So it is possible to have whole chains of widgets that are simply not\ncalled. You can preconstruct widget trees and then place them into root widgets\nlater to activate them if you wish.",
      "own_functions": [
        "XPCreateWidget"
      ],
      "processing_timestamp": "2025-06-25T20:39:22.996428+00:00",
      "title": "XPCreateWidget | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPCreateWidget/"
    },
    "https://developer.x-plane.com/sdk/XPDestroyWidget/": {
      "api_signatures": [
        {
          "description": "This class destroys a widget. Pass in the ID of the widget to kill. If you pass 1 for inDestroyChilren, the widget’s children will be destroyed first, then this widget will be destroyed. (Furthermore, the widget’s children will be destroyed with the inDestroyChildren flag set to 1, so the destruction will recurse down the widget tree.) If you pass 0 for this flag, direct child widgets will simply end up with their parent set to 0.",
          "name": "XPDestroyWidget",
          "parameters": [
            {
              "full_declaration": "int                  inDestroyChildren",
              "name": "inDestroyChildren",
              "type": "int"
            }
          ],
          "signature": "WIDGET_API voidXPDestroyWidget(XPWidgetIDinWidget,\n                         int                  inDestroyChildren);"
        },
        {
          "name": "WIDGET_API",
          "signature": "WIDGET_API voidXPDestroyWidget(XPWidgetIDinWidget,\n                         int                  inDestroyChildren);",
          "source": "code_block_extraction",
          "type": "function"
        }
      ],
      "category": {
        "category": "Widget_System",
        "module": "Widget System",
        "url": "https://developer.x-plane.com/sdk/XPDestroyWidget/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPDestroyWidget\"><a href=\"/sdk/XPDestroyWidget/\">XPDestroyWidget</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>WIDGET_API void       <a href=\"/sdk/XPDestroyWidget/\">XPDestroyWidget</a>(\n                         <a href=\"/sdk/XPWidgetID/\">XPWidgetID</a>           inWidget,\n                         int                  inDestroyChildren);\n</code></pre><p>This class destroys a widget. Pass in the ID of the widget to kill. If you pass 1 for inDestroyChilren, the widget’s children will be destroyed first, then this widget will be destroyed. (Furthermore, the widget’s children will be destroyed with the inDestroyChildren flag set to 1, so the destruction will recurse down the widget tree.) If you pass 0 for this flag, direct child widgets will simply end up with their parent set to 0.</p></div></div></article>",
      "code_examples": [
        {
          "char_count": 116,
          "code": "WIDGET_API voidXPDestroyWidget(XPWidgetIDinWidget,\n                         int                  inDestroyChildren);",
          "context": "XPDestroyWidget",
          "id": "example_0",
          "language": "c",
          "line_count": 2,
          "type": "snippet"
        }
      ],
      "cross_references": [],
      "markdown": "### [XPDestroyWidget](/sdk/XPDestroyWidget/)\n\n```cpp\nWIDGET_API void       XPDestroyWidget(\n                         XPWidgetID           inWidget,\n                         int                  inDestroyChildren);\n\n```\n\nThis class destroys a widget. Pass in the ID of the widget to kill. If you pass\n1 for inDestroyChilren, the widget’s children will be destroyed first, then this\nwidget will be destroyed. (Furthermore, the widget’s children will be destroyed\nwith the inDestroyChildren flag set to 1, so the destruction will recurse down\nthe widget tree.) If you pass 0 for this flag, direct child widgets will simply\nend up with their parent set to 0.",
      "own_functions": [
        "XPDestroyWidget",
        "WIDGET_API"
      ],
      "processing_timestamp": "2025-06-25T20:39:23.001430+00:00",
      "title": "XPDestroyWidget | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPDestroyWidget/"
    },
    "https://developer.x-plane.com/sdk/XPDispatchMode/": {
      "api_signatures": [
        {
          "name": "XPDispatchMode",
          "type": "enum",
          "values": [
            {
              "description": "The message will only be sent to the target widget.",
              "name": "xpMode_Direct",
              "value": "\"0\""
            },
            {
              "description": "The message is sent to the target widget, then up the chain of parents until the message ishandled or a parentless widget is reached.",
              "name": "xpMode_UpChain",
              "value": "\"1\""
            },
            {
              "description": "The message is sent to the target widget and then all of its children recursively depth-first.",
              "name": "xpMode_Recursive",
              "value": "\"2\""
            },
            {
              "description": "The message is sent just to the target, but goes to every callback, even if it is handled.",
              "name": "xpMode_DirectAllCallbacks",
              "value": "\"3\""
            },
            {
              "description": "The message is only sent to the very first handler even if it is not accepted. (This is really only useful for some internal widget library functions.)",
              "name": "xpMode_Once",
              "value": "\"4\""
            }
          ]
        }
      ],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/XPDispatchMode/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enum\"><h3 class=\"sdk-api-enum\" id=\"XPDispatchMode\"><a href=\"/sdk/XPDispatchMode/\">XPDispatchMode</a></h3><p>The dispatching modes describe how the widgets library sends out messages. Currently there are three modes:</p><p><div class=\"enumitem\"><table><thead><tr><th>Name</th><th>Value</th><th>Description</th></tr></thead><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpMode_Direct\"><a href=\"/sdk/xpMode_Direct/\">xpMode_Direct</a></td><td>\"0\"</td><td>The message will only be sent to the target widget.</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpMode_UpChain\"><a href=\"/sdk/xpMode_UpChain/\">xpMode_UpChain</a></td><td>\"1\"</td><td>The message is sent to the target widget, then up the chain of parents until the message ishandled or a parentless widget is reached.</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpMode_Recursive\"><a href=\"/sdk/xpMode_Recursive/\">xpMode_Recursive</a></td><td>\"2\"</td><td>The message is sent to the target widget and then all of its children recursively depth-first.</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpMode_DirectAllCallbacks\"><a href=\"/sdk/xpMode_DirectAllCallbacks/\">xpMode_DirectAllCallbacks</a></td><td>\"3\"</td><td>The message is sent just to the target, but goes to every callback, even if it is handled.</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpMode_Once\"><a href=\"/sdk/xpMode_Once/\">xpMode_Once</a></td><td>\"4\"</td><td>The message is only sent to the very first handler even if it is not accepted. (This is really only useful for some internal widget library functions.)</td></tr></table></div></p></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "### [XPDispatchMode](/sdk/XPDispatchMode/)\n\nThe dispatching modes describe how the widgets library sends out messages.\nCurrently there are three modes:\n\n| Name | Value | Description |\n| --- | --- | --- |\n| [xpMode_Direct](/sdk/xpMode_Direct/) | \"0\" | The message will only be sent to\nthe target widget. |\n| [xpMode_UpChain](/sdk/xpMode_UpChain/) | \"1\" | The message is sent to the\ntarget widget, then up the chain of parents until the message ishandled or a\nparentless widget is reached. |\n| [xpMode_Recursive](/sdk/xpMode_Recursive/) | \"2\" | The message is sent to the\ntarget widget and then all of its children recursively depth-first. |\n| [xpMode_DirectAllCallbacks](/sdk/xpMode_DirectAllCallbacks/) | \"3\" | The\nmessage is sent just to the target, but goes to every callback, even if it is\nhandled. |\n| [xpMode_Once](/sdk/xpMode_Once/) | \"4\" | The message is only sent to the very\nfirst handler even if it is not accepted. (This is really only useful for some\ninternal widget library functions.) |",
      "own_functions": [
        "XPDispatchMode"
      ],
      "processing_timestamp": "2025-06-25T20:39:22.062520+00:00",
      "title": "XPDispatchMode | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPDispatchMode/"
    },
    "https://developer.x-plane.com/sdk/XPDrawElement/": {
      "api_signatures": [
        {
          "description": "XPDrawElementdraws a given element at an offset on the virtual screen in set dimensions. Even if the element is not scalable, it will be scaled if the width and height do not match the preferred dimensions; it’ll just look ugly. Pass inLit to see the lit version of the element; if the element cannot be lit this is ignored.",
          "name": "XPDrawElement",
          "parameters": [
            {
              "full_declaration": "int                  inX1",
              "name": "inX1",
              "type": "int"
            },
            {
              "full_declaration": "int                  inY1",
              "name": "inY1",
              "type": "int"
            },
            {
              "full_declaration": "int                  inX2",
              "name": "inX2",
              "type": "int"
            },
            {
              "full_declaration": "int                  inY2",
              "name": "inY2",
              "type": "int"
            },
            {
              "full_declaration": "int                  inLit",
              "name": "inLit",
              "type": "int"
            }
          ],
          "signature": "WIDGET_API voidXPDrawElement(\n                         int                  inX1,\n                         int                  inY1,\n                         int                  inX2,\n                         int                  inY2,XPElementStyleinStyle,\n                         int                  inLit);"
        },
        {
          "name": "WIDGET_API",
          "signature": "WIDGET_API voidXPDrawElement(\n                         int                  inX1,\n                         int                  inY1,\n                         int                  inX2,\n                         int                  inY2,XPElementStyleinStyle,\n                         int                  inLit);",
          "source": "code_block_extraction",
          "type": "function"
        }
      ],
      "category": {
        "category": "XPLM_Display",
        "module": "Xplm Display",
        "url": "https://developer.x-plane.com/sdk/XPDrawElement/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPDrawElement\"><a href=\"/sdk/XPDrawElement/\">XPDrawElement</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>WIDGET_API void       <a href=\"/sdk/XPDrawElement/\">XPDrawElement</a>(\n                         int                  inX1,\n                         int                  inY1,\n                         int                  inX2,\n                         int                  inY2,\n                         <a href=\"/sdk/XPElementStyle/\">XPElementStyle</a>       inStyle,\n                         int                  inLit);\n</code></pre><p><a href=\"/sdk/XPDrawElement/\">XPDrawElement</a>draws a given element at an offset on the virtual screen in set dimensions. Even if the element is not scalable, it will be scaled if the width and height do not match the preferred dimensions; it’ll just look ugly. Pass inLit to see the lit version of the element; if the element cannot be lit this is ignored.</p></div></div></article>",
      "code_examples": [
        {
          "char_count": 313,
          "code": "WIDGET_API voidXPDrawElement(\n                         int                  inX1,\n                         int                  inY1,\n                         int                  inX2,\n                         int                  inY2,XPElementStyleinStyle,\n                         int                  inLit);",
          "context": "XPDrawElement",
          "id": "example_0",
          "language": "c",
          "line_count": 6,
          "type": "snippet"
        }
      ],
      "cross_references": [
        "XPElementStyle"
      ],
      "markdown": "### [XPDrawElement](/sdk/XPDrawElement/)\n\n```cpp\nWIDGET_API void       XPDrawElement(\n                         int                  inX1,\n                         int                  inY1,\n                         int                  inX2,\n                         int                  inY2,\n                         XPElementStyle       inStyle,\n                         int                  inLit);\n\n```\n\n[XPDrawElement](/sdk/XPDrawElement/)draws a given element at an offset on the\nvirtual screen in set dimensions. Even if the element is not scalable, it will\nbe scaled if the width and height do not match the preferred dimensions; it’ll\njust look ugly. Pass inLit to see the lit version of the element; if the element\ncannot be lit this is ignored.",
      "own_functions": [
        "XPDrawElement",
        "WIDGET_API"
      ],
      "processing_timestamp": "2025-06-25T20:39:23.432844+00:00",
      "title": "XPDrawElement | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPDrawElement/"
    },
    "https://developer.x-plane.com/sdk/XPDrawTrack/": {
      "api_signatures": [
        {
          "description": "This routine draws a track. You pass in the track dimensions and size; the track picks the optimal orientation for these dimensions. Pass in the track’s minimum current and maximum values; the indicator will be positioned appropriately. You can also specify whether the track is lit or not.",
          "name": "XPDrawTrack",
          "parameters": [
            {
              "full_declaration": "int                  inX1",
              "name": "inX1",
              "type": "int"
            },
            {
              "full_declaration": "int                  inY1",
              "name": "inY1",
              "type": "int"
            },
            {
              "full_declaration": "int                  inX2",
              "name": "inX2",
              "type": "int"
            },
            {
              "full_declaration": "int                  inY2",
              "name": "inY2",
              "type": "int"
            },
            {
              "full_declaration": "int                  inMin",
              "name": "inMin",
              "type": "int"
            },
            {
              "full_declaration": "int                  inMax",
              "name": "inMax",
              "type": "int"
            },
            {
              "full_declaration": "int                  inValue",
              "name": "inValue",
              "type": "int"
            },
            {
              "full_declaration": "int                  inLit",
              "name": "inLit",
              "type": "int"
            }
          ],
          "signature": "WIDGET_API voidXPDrawTrack(\n                         int                  inX1,\n                         int                  inY1,\n                         int                  inX2,\n                         int                  inY2,\n                         int                  inMin,\n                         int                  inMax,\n                         int                  inValue,XPTrackStyleinTrackStyle,\n                         int                  inLit);"
        },
        {
          "name": "WIDGET_API",
          "signature": "WIDGET_API voidXPDrawTrack(\n                         int                  inX1,\n                         int                  inY1,\n                         int                  inX2,\n                         int                  inY2,\n                         int                  inMin,\n                         int                  inMax,\n                         int                  inValue,XPTrackStyleinTrackStyle,\n                         int                  inLit);",
          "source": "code_block_extraction",
          "type": "function"
        }
      ],
      "category": {
        "category": "XPLM_Display",
        "module": "Xplm Display",
        "url": "https://developer.x-plane.com/sdk/XPDrawTrack/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPDrawTrack\"><a href=\"/sdk/XPDrawTrack/\">XPDrawTrack</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>WIDGET_API void       <a href=\"/sdk/XPDrawTrack/\">XPDrawTrack</a>(\n                         int                  inX1,\n                         int                  inY1,\n                         int                  inX2,\n                         int                  inY2,\n                         int                  inMin,\n                         int                  inMax,\n                         int                  inValue,\n                         <a href=\"/sdk/XPTrackStyle/\">XPTrackStyle</a>         inTrackStyle,\n                         int                  inLit);\n</code></pre><p>This routine draws a track. You pass in the track dimensions and size; the track picks the optimal orientation for these dimensions. Pass in the track’s minimum current and maximum values; the indicator will be positioned appropriately. You can also specify whether the track is lit or not.</p></div></div></article>",
      "code_examples": [
        {
          "char_count": 475,
          "code": "WIDGET_API voidXPDrawTrack(\n                         int                  inX1,\n                         int                  inY1,\n                         int                  inX2,\n                         int                  inY2,\n                         int                  inMin,\n                         int                  inMax,\n                         int                  inValue,XPTrackStyleinTrackStyle,\n                         int                  inLit);",
          "context": "XPDrawTrack",
          "id": "example_0",
          "language": "c",
          "line_count": 9,
          "type": "snippet"
        }
      ],
      "cross_references": [
        "XPTrackStyle"
      ],
      "markdown": "### [XPDrawTrack](/sdk/XPDrawTrack/)\n\n```cpp\nWIDGET_API void       XPDrawTrack(\n                         int                  inX1,\n                         int                  inY1,\n                         int                  inX2,\n                         int                  inY2,\n                         int                  inMin,\n                         int                  inMax,\n                         int                  inValue,\n                         XPTrackStyle         inTrackStyle,\n                         int                  inLit);\n\n```\n\nThis routine draws a track. You pass in the track dimensions and size; the track\npicks the optimal orientation for these dimensions. Pass in the track’s minimum\ncurrent and maximum values; the indicator will be positioned appropriately. You\ncan also specify whether the track is lit or not.",
      "own_functions": [
        "XPDrawTrack",
        "WIDGET_API"
      ],
      "processing_timestamp": "2025-06-25T20:39:23.434844+00:00",
      "title": "XPDrawTrack | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPDrawTrack/"
    },
    "https://developer.x-plane.com/sdk/XPDrawWindow/": {
      "api_signatures": [
        {
          "description": "This routine draws a window of the given dimensions at the given offset on the virtual screen in a given style. The window is automatically scaled as appropriate using a bitmap scaling technique (scaling or repeating) as appropriate to the style.",
          "name": "XPDrawWindow",
          "parameters": [
            {
              "full_declaration": "int                  inX1",
              "name": "inX1",
              "type": "int"
            },
            {
              "full_declaration": "int                  inY1",
              "name": "inY1",
              "type": "int"
            },
            {
              "full_declaration": "int                  inX2",
              "name": "inX2",
              "type": "int"
            },
            {
              "full_declaration": "int                  inY2",
              "name": "inY2",
              "type": "int"
            }
          ],
          "signature": "WIDGET_API voidXPDrawWindow(\n                         int                  inX1,\n                         int                  inY1,\n                         int                  inX2,\n                         int                  inY2,XPWindowStyleinStyle);"
        },
        {
          "name": "WIDGET_API",
          "signature": "WIDGET_API voidXPDrawWindow(\n                         int                  inX1,\n                         int                  inY1,\n                         int                  inX2,\n                         int                  inY2,XPWindowStyleinStyle);",
          "source": "code_block_extraction",
          "type": "function"
        }
      ],
      "category": {
        "category": "XPLM_Display",
        "module": "Xplm Display",
        "url": "https://developer.x-plane.com/sdk/XPDrawWindow/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPDrawWindow\"><a href=\"/sdk/XPDrawWindow/\">XPDrawWindow</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>WIDGET_API void       <a href=\"/sdk/XPDrawWindow/\">XPDrawWindow</a>(\n                         int                  inX1,\n                         int                  inY1,\n                         int                  inX2,\n                         int                  inY2,\n                         <a href=\"/sdk/XPWindowStyle/\">XPWindowStyle</a>        inStyle);\n</code></pre><p>This routine draws a window of the given dimensions at the given offset on the virtual screen in a given style. The window is automatically scaled as appropriate using a bitmap scaling technique (scaling or repeating) as appropriate to the style.</p></div></div></article>",
      "code_examples": [
        {
          "char_count": 258,
          "code": "WIDGET_API voidXPDrawWindow(\n                         int                  inX1,\n                         int                  inY1,\n                         int                  inX2,\n                         int                  inY2,XPWindowStyleinStyle);",
          "context": "XPDrawWindow",
          "id": "example_0",
          "language": "c",
          "line_count": 5,
          "type": "snippet"
        }
      ],
      "cross_references": [
        "XPWindowStyle"
      ],
      "markdown": "### [XPDrawWindow](/sdk/XPDrawWindow/)\n\n```cpp\nWIDGET_API void       XPDrawWindow(\n                         int                  inX1,\n                         int                  inY1,\n                         int                  inX2,\n                         int                  inY2,\n                         XPWindowStyle        inStyle);\n\n```\n\nThis routine draws a window of the given dimensions at the given offset on the\nvirtual screen in a given style. The window is automatically scaled as\nappropriate using a bitmap scaling technique (scaling or repeating) as\nappropriate to the style.",
      "own_functions": [
        "XPDrawWindow",
        "WIDGET_API"
      ],
      "processing_timestamp": "2025-06-25T20:39:23.435846+00:00",
      "title": "XPDrawWindow | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPDrawWindow/"
    },
    "https://developer.x-plane.com/sdk/XPElementStyle/": {
      "api_signatures": [
        {
          "name": "XPElementStyle",
          "type": "enum",
          "values": [
            {
              "description": "x metal",
              "name": "xpElement_TextField",
              "value": "\"6\""
            },
            {
              "description": "none metal",
              "name": "xpElement_CheckBox",
              "value": "\"9\""
            },
            {
              "description": "none metal",
              "name": "xpElement_CheckBoxLit",
              "value": "\"10\""
            },
            {
              "description": "none window header",
              "name": "xpElement_WindowCloseBox",
              "value": "\"14\""
            },
            {
              "description": "none window header",
              "name": "xpElement_WindowCloseBoxPressed",
              "value": "\"15\""
            },
            {
              "description": "x metal",
              "name": "xpElement_PushButton",
              "value": "\"16\""
            },
            {
              "description": "x metal",
              "name": "xpElement_PushButtonLit",
              "value": "\"17\""
            },
            {
              "description": "none any",
              "name": "xpElement_OilPlatform",
              "value": "\"24\""
            },
            {
              "description": "none any",
              "name": "xpElement_OilPlatformSmall",
              "value": "\"25\""
            },
            {
              "description": "none any",
              "name": "xpElement_Ship",
              "value": "\"26\""
            },
            {
              "description": "none any",
              "name": "xpElement_ILSGlideScope",
              "value": "\"27\""
            },
            {
              "description": "none any",
              "name": "xpElement_MarkerLeft",
              "value": "\"28\""
            },
            {
              "description": "none any",
              "name": "xpElement_Airport",
              "value": "\"29\""
            },
            {
              "description": "none any",
              "name": "xpElement_Waypoint",
              "value": "\"30\""
            },
            {
              "description": "none any",
              "name": "xpElement_NDB",
              "value": "\"31\""
            },
            {
              "description": "none any",
              "name": "xpElement_VOR",
              "value": "\"32\""
            },
            {
              "description": "none any",
              "name": "xpElement_RadioTower",
              "value": "\"33\""
            },
            {
              "description": "none any",
              "name": "xpElement_AircraftCarrier",
              "value": "\"34\""
            },
            {
              "description": "none any",
              "name": "xpElement_Fire",
              "value": "\"35\""
            },
            {
              "description": "none any",
              "name": "xpElement_MarkerRight",
              "value": "\"36\""
            },
            {
              "description": "none any",
              "name": "xpElement_CustomObject",
              "value": "\"37\""
            },
            {
              "description": "none any",
              "name": "xpElement_CoolingTower",
              "value": "\"38\""
            },
            {
              "description": "none any",
              "name": "xpElement_SmokeStack",
              "value": "\"39\""
            },
            {
              "description": "none any",
              "name": "xpElement_Building",
              "value": "\"40\""
            },
            {
              "description": "none any",
              "name": "xpElement_PowerLine",
              "value": "\"41\""
            },
            {
              "description": "none metal",
              "name": "xpElement_CopyButtons",
              "value": "\"45\""
            },
            {
              "description": "none metal",
              "name": "xpElement_CopyButtonsWithEditingGrid",
              "value": "\"46\""
            },
            {
              "description": "x, y metal",
              "name": "xpElement_EditingGrid",
              "value": "\"47\""
            },
            {
              "description": "THIS CAN PROBABLY BE REMOVED",
              "name": "xpElement_ScrollBar",
              "value": "\"48\""
            },
            {
              "description": "none any",
              "name": "xpElement_VORWithCompassRose",
              "value": "\"49\""
            },
            {
              "description": "none metal",
              "name": "xpElement_Zoomer",
              "value": "\"51\""
            },
            {
              "description": "x, y metal",
              "name": "xpElement_TextFieldMiddle",
              "value": "\"52\""
            },
            {
              "description": "none metal",
              "name": "xpElement_LittleDownArrow",
              "value": "\"53\""
            },
            {
              "description": "none metal",
              "name": "xpElement_LittleUpArrow",
              "value": "\"54\""
            },
            {
              "description": "none metal",
              "name": "xpElement_WindowDragBar",
              "value": "\"61\""
            },
            {
              "description": "none metal",
              "name": "xpElement_WindowDragBarSmooth",
              "value": "\"62\""
            }
          ]
        }
      ],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/XPElementStyle/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enum\"><h3 class=\"sdk-api-enum\" id=\"XPElementStyle\"><a href=\"/sdk/XPElementStyle/\">XPElementStyle</a></h3><p>Elements are individually drawable UI things like push buttons, etc. The style defines what kind of element you are drawing. Elements can be stretched in one or two dimensions (depending on the element). Some elements can be lit.</p><p>In X-Plane 6 some elements must be drawn over metal. Some are scalable and some are not. Any element can be drawn anywhere in X-Plane 7.</p><p>Scalable Axis Required Background</p><p><div class=\"enumitem\"><table><thead><tr><th>Name</th><th>Value</th><th>Description</th></tr></thead><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpElement_TextField\"><a href=\"/sdk/xpElement_TextField/\">xpElement_TextField</a></td><td>\"6\"</td><td>x metal</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpElement_CheckBox\"><a href=\"/sdk/xpElement_CheckBox/\">xpElement_CheckBox</a></td><td>\"9\"</td><td>none metal</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpElement_CheckBoxLit\"><a href=\"/sdk/xpElement_CheckBoxLit/\">xpElement_CheckBoxLit</a></td><td>\"10\"</td><td>none metal</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpElement_WindowCloseBox\"><a href=\"/sdk/xpElement_WindowCloseBox/\">xpElement_WindowCloseBox</a></td><td>\"14\"</td><td>none window header</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpElement_WindowCloseBoxPressed\"><a href=\"/sdk/xpElement_WindowCloseBoxPressed/\">xpElement_WindowCloseBoxPressed</a></td><td>\"15\"</td><td>none window header</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpElement_PushButton\"><a href=\"/sdk/xpElement_PushButton/\">xpElement_PushButton</a></td><td>\"16\"</td><td>x metal</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpElement_PushButtonLit\"><a href=\"/sdk/xpElement_PushButtonLit/\">xpElement_PushButtonLit</a></td><td>\"17\"</td><td>x metal</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpElement_OilPlatform\"><a href=\"/sdk/xpElement_OilPlatform/\">xpElement_OilPlatform</a></td><td>\"24\"</td><td>none any</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpElement_OilPlatformSmall\"><a href=\"/sdk/xpElement_OilPlatformSmall/\">xpElement_OilPlatformSmall</a></td><td>\"25\"</td><td>none any</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpElement_Ship\"><a href=\"/sdk/xpElement_Ship/\">xpElement_Ship</a></td><td>\"26\"</td><td>none any</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpElement_ILSGlideScope\"><a href=\"/sdk/xpElement_ILSGlideScope/\">xpElement_ILSGlideScope</a></td><td>\"27\"</td><td>none any</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpElement_MarkerLeft\"><a href=\"/sdk/xpElement_MarkerLeft/\">xpElement_MarkerLeft</a></td><td>\"28\"</td><td>none any</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpElement_Airport\"><a href=\"/sdk/xpElement_Airport/\">xpElement_Airport</a></td><td>\"29\"</td><td>none any</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpElement_Waypoint\"><a href=\"/sdk/xpElement_Waypoint/\">xpElement_Waypoint</a></td><td>\"30\"</td><td>none any</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpElement_NDB\"><a href=\"/sdk/xpElement_NDB/\">xpElement_NDB</a></td><td>\"31\"</td><td>none any</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpElement_VOR\"><a href=\"/sdk/xpElement_VOR/\">xpElement_VOR</a></td><td>\"32\"</td><td>none any</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpElement_RadioTower\"><a href=\"/sdk/xpElement_RadioTower/\">xpElement_RadioTower</a></td><td>\"33\"</td><td>none any</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpElement_AircraftCarrier\"><a href=\"/sdk/xpElement_AircraftCarrier/\">xpElement_AircraftCarrier</a></td><td>\"34\"</td><td>none any</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpElement_Fire\"><a href=\"/sdk/xpElement_Fire/\">xpElement_Fire</a></td><td>\"35\"</td><td>none any</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpElement_MarkerRight\"><a href=\"/sdk/xpElement_MarkerRight/\">xpElement_MarkerRight</a></td><td>\"36\"</td><td>none any</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpElement_CustomObject\"><a href=\"/sdk/xpElement_CustomObject/\">xpElement_CustomObject</a></td><td>\"37\"</td><td>none any</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpElement_CoolingTower\"><a href=\"/sdk/xpElement_CoolingTower/\">xpElement_CoolingTower</a></td><td>\"38\"</td><td>none any</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpElement_SmokeStack\"><a href=\"/sdk/xpElement_SmokeStack/\">xpElement_SmokeStack</a></td><td>\"39\"</td><td>none any</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpElement_Building\"><a href=\"/sdk/xpElement_Building/\">xpElement_Building</a></td><td>\"40\"</td><td>none any</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpElement_PowerLine\"><a href=\"/sdk/xpElement_PowerLine/\">xpElement_PowerLine</a></td><td>\"41\"</td><td>none any</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpElement_CopyButtons\"><a href=\"/sdk/xpElement_CopyButtons/\">xpElement_CopyButtons</a></td><td>\"45\"</td><td>none metal</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpElement_CopyButtonsWithEditingGrid\"><a href=\"/sdk/xpElement_CopyButtonsWithEditingGrid/\">xpElement_CopyButtonsWithEditingGrid</a></td><td>\"46\"</td><td>none metal</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpElement_EditingGrid\"><a href=\"/sdk/xpElement_EditingGrid/\">xpElement_EditingGrid</a></td><td>\"47\"</td><td>x, y metal</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpElement_ScrollBar\"><a href=\"/sdk/xpElement_ScrollBar/\">xpElement_ScrollBar</a></td><td>\"48\"</td><td>THIS CAN PROBABLY BE REMOVED</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpElement_VORWithCompassRose\"><a href=\"/sdk/xpElement_VORWithCompassRose/\">xpElement_VORWithCompassRose</a></td><td>\"49\"</td><td>none any</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpElement_Zoomer\"><a href=\"/sdk/xpElement_Zoomer/\">xpElement_Zoomer</a></td><td>\"51\"</td><td>none metal</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpElement_TextFieldMiddle\"><a href=\"/sdk/xpElement_TextFieldMiddle/\">xpElement_TextFieldMiddle</a></td><td>\"52\"</td><td>x, y metal</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpElement_LittleDownArrow\"><a href=\"/sdk/xpElement_LittleDownArrow/\">xpElement_LittleDownArrow</a></td><td>\"53\"</td><td>none metal</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpElement_LittleUpArrow\"><a href=\"/sdk/xpElement_LittleUpArrow/\">xpElement_LittleUpArrow</a></td><td>\"54\"</td><td>none metal</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpElement_WindowDragBar\"><a href=\"/sdk/xpElement_WindowDragBar/\">xpElement_WindowDragBar</a></td><td>\"61\"</td><td>none metal</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpElement_WindowDragBarSmooth\"><a href=\"/sdk/xpElement_WindowDragBarSmooth/\">xpElement_WindowDragBarSmooth</a></td><td>\"62\"</td><td>none metal</td></tr></table></div></p></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "### [XPElementStyle](/sdk/XPElementStyle/)\n\nElements are individually drawable UI things like push buttons, etc. The style\ndefines what kind of element you are drawing. Elements can be stretched in one\nor two dimensions (depending on the element). Some elements can be lit.\n\nIn X-Plane 6 some elements must be drawn over metal. Some are scalable and some\nare not. Any element can be drawn anywhere in X-Plane 7.\n\nScalable Axis Required Background\n\n| Name | Value | Description |\n| --- | --- | --- |\n| [xpElement_TextField](/sdk/xpElement_TextField/) | \"6\" | x metal |\n| [xpElement_CheckBox](/sdk/xpElement_CheckBox/) | \"9\" | none metal |\n| [xpElement_CheckBoxLit](/sdk/xpElement_CheckBoxLit/) | \"10\" | none metal |\n| [xpElement_WindowCloseBox](/sdk/xpElement_WindowCloseBox/) | \"14\" | none\nwindow header |\n| [xpElement_WindowCloseBoxPressed](/sdk/xpElement_WindowCloseBoxPressed/) |\n\"15\" | none window header |\n| [xpElement_PushButton](/sdk/xpElement_PushButton/) | \"16\" | x metal |\n| [xpElement_PushButtonLit](/sdk/xpElement_PushButtonLit/) | \"17\" | x metal |\n| [xpElement_OilPlatform](/sdk/xpElement_OilPlatform/) | \"24\" | none any |\n| [xpElement_OilPlatformSmall](/sdk/xpElement_OilPlatformSmall/) | \"25\" | none\nany |\n| [xpElement_Ship](/sdk/xpElement_Ship/) | \"26\" | none any |\n| [xpElement_ILSGlideScope](/sdk/xpElement_ILSGlideScope/) | \"27\" | none any |\n| [xpElement_MarkerLeft](/sdk/xpElement_MarkerLeft/) | \"28\" | none any |\n| [xpElement_Airport](/sdk/xpElement_Airport/) | \"29\" | none any |\n| [xpElement_Waypoint](/sdk/xpElement_Waypoint/) | \"30\" | none any |\n| [xpElement_NDB](/sdk/xpElement_NDB/) | \"31\" | none any |\n| [xpElement_VOR](/sdk/xpElement_VOR/) | \"32\" | none any |\n| [xpElement_RadioTower](/sdk/xpElement_RadioTower/) | \"33\" | none any |\n| [xpElement_AircraftCarrier](/sdk/xpElement_AircraftCarrier/) | \"34\" | none any\n|\n| [xpElement_Fire](/sdk/xpElement_Fire/) | \"35\" | none any |\n| [xpElement_MarkerRight](/sdk/xpElement_MarkerRight/) | \"36\" | none any |\n| [xpElement_CustomObject](/sdk/xpElement_CustomObject/) | \"37\" | none any |\n| [xpElement_CoolingTower](/sdk/xpElement_CoolingTower/) | \"38\" | none any |\n| [xpElement_SmokeStack](/sdk/xpElement_SmokeStack/) | \"39\" | none any |\n| [xpElement_Building](/sdk/xpElement_Building/) | \"40\" | none any |\n| [xpElement_PowerLine](/sdk/xpElement_PowerLine/) | \"41\" | none any |\n| [xpElement_CopyButtons](/sdk/xpElement_CopyButtons/) | \"45\" | none metal |\n|\n[xpElement_CopyButtonsWithEditingGrid](/sdk/xpElement_CopyButtonsWithEditingGrid/)\n| \"46\" | none metal |\n| [xpElement_EditingGrid](/sdk/xpElement_EditingGrid/) | \"47\" | x, y metal |\n| [xpElement_ScrollBar](/sdk/xpElement_ScrollBar/) | \"48\" | THIS CAN PROBABLY BE\nREMOVED |\n| [xpElement_VORWithCompassRose](/sdk/xpElement_VORWithCompassRose/) | \"49\" |\nnone any |\n| [xpElement_Zoomer](/sdk/xpElement_Zoomer/) | \"51\" | none metal |\n| [xpElement_TextFieldMiddle](/sdk/xpElement_TextFieldMiddle/) | \"52\" | x, y\nmetal |\n| [xpElement_LittleDownArrow](/sdk/xpElement_LittleDownArrow/) | \"53\" | none\nmetal |\n| [xpElement_LittleUpArrow](/sdk/xpElement_LittleUpArrow/) | \"54\" | none metal |\n| [xpElement_WindowDragBar](/sdk/xpElement_WindowDragBar/) | \"61\" | none metal |\n| [xpElement_WindowDragBarSmooth](/sdk/xpElement_WindowDragBarSmooth/) | \"62\" |\nnone metal |",
      "own_functions": [
        "XPElementStyle"
      ],
      "processing_timestamp": "2025-06-25T20:39:22.089518+00:00",
      "title": "XPElementStyle | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPElementStyle/"
    },
    "https://developer.x-plane.com/sdk/XPFindRootWidget/": {
      "api_signatures": [
        {
          "description": "Returns the Widget ID of the root widget that contains the passed in widget or NULL if the passed in widget is not in a rooted hierarchy.",
          "name": "XPFindRootWidget",
          "parameters": [],
          "signature": "WIDGET_APIXPWidgetIDXPFindRootWidget(XPWidgetIDinWidget);"
        }
      ],
      "category": {
        "category": "Widget_System",
        "module": "Widget System",
        "url": "https://developer.x-plane.com/sdk/XPFindRootWidget/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPFindRootWidget\"><a href=\"/sdk/XPFindRootWidget/\">XPFindRootWidget</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>WIDGET_API <a href=\"/sdk/XPWidgetID/\">XPWidgetID</a> <a href=\"/sdk/XPFindRootWidget/\">XPFindRootWidget</a>(\n                         <a href=\"/sdk/XPWidgetID/\">XPWidgetID</a>           inWidget);\n</code></pre><p>Returns the Widget ID of the root widget that contains the passed in widget or NULL if the passed in widget is not in a rooted hierarchy.</p></div></div></article>",
      "code_examples": [
        {
          "char_count": 57,
          "code": "WIDGET_APIXPWidgetIDXPFindRootWidget(XPWidgetIDinWidget);",
          "context": "XPFindRootWidget",
          "id": "example_0",
          "language": "c",
          "line_count": 1,
          "type": "snippet"
        }
      ],
      "cross_references": [
        "WIDGET_API"
      ],
      "markdown": "### [XPFindRootWidget](/sdk/XPFindRootWidget/)\n\n```cpp\nWIDGET_API XPWidgetID XPFindRootWidget(\n                         XPWidgetID           inWidget);\n\n```\n\nReturns the Widget ID of the root widget that contains the passed in widget or\nNULL if the passed in widget is not in a rooted hierarchy.",
      "own_functions": [
        "XPFindRootWidget"
      ],
      "processing_timestamp": "2025-06-25T20:39:22.998430+00:00",
      "title": "XPFindRootWidget | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPFindRootWidget/"
    },
    "https://developer.x-plane.com/sdk/XPGetElementDefaultDimensions/": {
      "api_signatures": [
        {
          "description": "This routine returns the recommended or minimum dimensions of a given UI element. outCanBeLit tells whether the element has both a lit and unlit state. Pass NULL to not receive any of these parameters.",
          "name": "XPGetElementDefaultDimensions",
          "parameters": [],
          "signature": "WIDGET_API voidXPGetElementDefaultDimensions(XPElementStyleinStyle,\n                         int *                outWidth,    /* Can be NULL */\n                         int *                outHeight,    /* Can be NULL */\n                         int *                outCanBeLit);    /* Can be NULL */"
        },
        {
          "name": "WIDGET_API",
          "signature": "WIDGET_API voidXPGetElementDefaultDimensions(XPElementStyleinStyle,\n                         int *                outWidth,    /* Can be NULL */\n                         int *                outHeight,    /* Can be NULL */\n                         int *                outCanBeLit);",
          "source": "code_block_extraction",
          "type": "function"
        }
      ],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/XPGetElementDefaultDimensions/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPGetElementDefaultDimensions\"><a href=\"/sdk/XPGetElementDefaultDimensions/\">XPGetElementDefaultDimensions</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>WIDGET_API void       <a href=\"/sdk/XPGetElementDefaultDimensions/\">XPGetElementDefaultDimensions</a>(\n                         <a href=\"/sdk/XPElementStyle/\">XPElementStyle</a>       inStyle,\n                         int *                outWidth,    /* Can be NULL */\n                         int *                outHeight,    /* Can be NULL */\n                         int *                outCanBeLit);    /* Can be NULL */\n</code></pre><p>This routine returns the recommended or minimum dimensions of a given UI element. outCanBeLit tells whether the element has both a lit and unlit state. Pass NULL to not receive any of these parameters.</p></div></div></article>",
      "code_examples": [
        {
          "char_count": 303,
          "code": "WIDGET_API voidXPGetElementDefaultDimensions(XPElementStyleinStyle,\n                         int *                outWidth,    /* Can be NULL */\n                         int *                outHeight,    /* Can be NULL */\n                         int *                outCanBeLit);    /* Can be NULL */",
          "context": "XPGetElementDefaultDimensions",
          "id": "example_0",
          "language": "c",
          "line_count": 4,
          "type": "snippet"
        }
      ],
      "cross_references": [
        "XPElementStyle"
      ],
      "markdown": "### [XPGetElementDefaultDimensions](/sdk/XPGetElementDefaultDimensions/)\n\n```cpp\nWIDGET_API void       XPGetElementDefaultDimensions(\n                         XPElementStyle       inStyle,\n                         int *                outWidth,    /* Can be NULL */\n                         int *                outHeight,    /* Can be NULL */\n                         int *                outCanBeLit);    /* Can be NULL */\n\n```\n\nThis routine returns the recommended or minimum dimensions of a given UI\nelement. outCanBeLit tells whether the element has both a lit and unlit state.\nPass NULL to not receive any of these parameters.",
      "own_functions": [
        "XPGetElementDefaultDimensions",
        "WIDGET_API"
      ],
      "processing_timestamp": "2025-06-25T20:39:22.055413+00:00",
      "title": "XPGetElementDefaultDimensions | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPGetElementDefaultDimensions/"
    },
    "https://developer.x-plane.com/sdk/XPGetNthChildWidget/": {
      "api_signatures": [
        {
          "description": "This routine returns the widget ID of a child widget by index. Indexes are 0 based, from 0 to the number of widgets in the parentone minus one, inclusive. If the index is invalid, 0 is returned.",
          "name": "XPGetNthChildWidget",
          "parameters": [
            {
              "full_declaration": "int                  inIndex",
              "name": "inIndex",
              "type": "int"
            }
          ],
          "signature": "WIDGET_APIXPWidgetIDXPGetNthChildWidget(XPWidgetIDinWidget,\n                         int                  inIndex);"
        }
      ],
      "category": {
        "category": "Widget_System",
        "module": "Widget System",
        "url": "https://developer.x-plane.com/sdk/XPGetNthChildWidget/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPGetNthChildWidget\"><a href=\"/sdk/XPGetNthChildWidget/\">XPGetNthChildWidget</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>WIDGET_API <a href=\"/sdk/XPWidgetID/\">XPWidgetID</a> <a href=\"/sdk/XPGetNthChildWidget/\">XPGetNthChildWidget</a>(\n                         <a href=\"/sdk/XPWidgetID/\">XPWidgetID</a>           inWidget,\n                         int                  inIndex);\n</code></pre><p>This routine returns the widget ID of a child widget by index. Indexes are 0 based, from 0 to the number of widgets in the parentone minus one, inclusive. If the index is invalid, 0 is returned.</p></div></div></article>",
      "code_examples": [
        {
          "char_count": 115,
          "code": "WIDGET_APIXPWidgetIDXPGetNthChildWidget(XPWidgetIDinWidget,\n                         int                  inIndex);",
          "context": "XPGetNthChildWidget",
          "id": "example_0",
          "language": "c",
          "line_count": 2,
          "type": "snippet"
        }
      ],
      "cross_references": [
        "WIDGET_API"
      ],
      "markdown": "### [XPGetNthChildWidget](/sdk/XPGetNthChildWidget/)\n\n```cpp\nWIDGET_API XPWidgetID XPGetNthChildWidget(\n                         XPWidgetID           inWidget,\n                         int                  inIndex);\n\n```\n\nThis routine returns the widget ID of a child widget by index. Indexes are 0\nbased, from 0 to the number of widgets in the parentone minus one, inclusive. If\nthe index is invalid, 0 is returned.",
      "own_functions": [
        "XPGetNthChildWidget"
      ],
      "processing_timestamp": "2025-06-25T20:39:23.003429+00:00",
      "title": "XPGetNthChildWidget | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPGetNthChildWidget/"
    },
    "https://developer.x-plane.com/sdk/XPGetParentWidget/": {
      "api_signatures": [
        {
          "description": "Returns the parent of a widget, or 0 if the widget has no parent. Root widgets never have parents and therefore always return 0.",
          "name": "XPGetParentWidget",
          "parameters": [],
          "signature": "WIDGET_APIXPWidgetIDXPGetParentWidget(XPWidgetIDinWidget);"
        }
      ],
      "category": {
        "category": "Widget_System",
        "module": "Widget System",
        "url": "https://developer.x-plane.com/sdk/XPGetParentWidget/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPGetParentWidget\"><a href=\"/sdk/XPGetParentWidget/\">XPGetParentWidget</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>WIDGET_API <a href=\"/sdk/XPWidgetID/\">XPWidgetID</a> <a href=\"/sdk/XPGetParentWidget/\">XPGetParentWidget</a>(\n                         <a href=\"/sdk/XPWidgetID/\">XPWidgetID</a>           inWidget);\n</code></pre><p>Returns the parent of a widget, or 0 if the widget has no parent. Root widgets never have parents and therefore always return 0.</p></div></div></article>",
      "code_examples": [
        {
          "char_count": 58,
          "code": "WIDGET_APIXPWidgetIDXPGetParentWidget(XPWidgetIDinWidget);",
          "context": "XPGetParentWidget",
          "id": "example_0",
          "language": "cpp",
          "line_count": 1,
          "type": "snippet"
        }
      ],
      "cross_references": [
        "WIDGET_API"
      ],
      "markdown": "### [XPGetParentWidget](/sdk/XPGetParentWidget/)\n\n```cpp\nWIDGET_API XPWidgetID XPGetParentWidget(\n                         XPWidgetID           inWidget);\n\n```\n\nReturns the parent of a widget, or 0 if the widget has no parent. Root widgets\nnever have parents and therefore always return 0.",
      "own_functions": [
        "XPGetParentWidget"
      ],
      "processing_timestamp": "2025-06-25T20:39:23.004965+00:00",
      "title": "XPGetParentWidget | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPGetParentWidget/"
    },
    "https://developer.x-plane.com/sdk/XPGetTrackDefaultDimensions/": {
      "api_signatures": [
        {
          "description": "This routine returns a track’s default smaller dimension; all tracks are scalable in the larger dimension. It also returns whether a track can be lit.",
          "name": "XPGetTrackDefaultDimensions",
          "parameters": [
            {
              "full_declaration": "int *                outWidth",
              "name": "outWidth",
              "type": "int *"
            },
            {
              "full_declaration": "int *                outCanBeLit",
              "name": "outCanBeLit",
              "type": "int *"
            }
          ],
          "signature": "WIDGET_API voidXPGetTrackDefaultDimensions(XPTrackStyleinStyle,\n                         int *                outWidth,\n                         int *                outCanBeLit);"
        },
        {
          "name": "WIDGET_API",
          "signature": "WIDGET_API voidXPGetTrackDefaultDimensions(XPTrackStyleinStyle,\n                         int *                outWidth,\n                         int *                outCanBeLit);",
          "source": "code_block_extraction",
          "type": "function"
        }
      ],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/XPGetTrackDefaultDimensions/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPGetTrackDefaultDimensions\"><a href=\"/sdk/XPGetTrackDefaultDimensions/\">XPGetTrackDefaultDimensions</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>WIDGET_API void       <a href=\"/sdk/XPGetTrackDefaultDimensions/\">XPGetTrackDefaultDimensions</a>(\n                         <a href=\"/sdk/XPTrackStyle/\">XPTrackStyle</a>         inStyle,\n                         int *                outWidth,\n                         int *                outCanBeLit);\n</code></pre><p>This routine returns a track’s default smaller dimension; all tracks are scalable in the larger dimension. It also returns whether a track can be lit.</p></div></div></article>",
      "code_examples": [
        {
          "char_count": 179,
          "code": "WIDGET_API voidXPGetTrackDefaultDimensions(XPTrackStyleinStyle,\n                         int *                outWidth,\n                         int *                outCanBeLit);",
          "context": "XPGetTrackDefaultDimensions",
          "id": "example_0",
          "language": "c",
          "line_count": 3,
          "type": "snippet"
        }
      ],
      "cross_references": [
        "XPTrackStyle"
      ],
      "markdown": "### [XPGetTrackDefaultDimensions](/sdk/XPGetTrackDefaultDimensions/)\n\n```cpp\nWIDGET_API void       XPGetTrackDefaultDimensions(\n                         XPTrackStyle         inStyle,\n                         int *                outWidth,\n                         int *                outCanBeLit);\n\n```\n\nThis routine returns a track’s default smaller dimension; all tracks are\nscalable in the larger dimension. It also returns whether a track can be lit.",
      "own_functions": [
        "XPGetTrackDefaultDimensions",
        "WIDGET_API"
      ],
      "processing_timestamp": "2025-06-25T20:39:22.096579+00:00",
      "title": "XPGetTrackDefaultDimensions | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPGetTrackDefaultDimensions/"
    },
    "https://developer.x-plane.com/sdk/XPGetTrackMetrics/": {
      "api_signatures": [
        {
          "description": "This routine returns the metrics of a track. If you want to write UI code to manipulate a track, this routine helps you know where the mouse locations are. For most other elements, the rectangle the element is drawn in is enough information. However, the scrollbar drawing routine does some automatic placement; this routine lets you know where things ended up. You pass almost everything you would pass to the draw routine. You get out the orientation, and other useful stuff.",
          "name": "XPGetTrackMetrics",
          "parameters": [
            {
              "full_declaration": "int                  inX1",
              "name": "inX1",
              "type": "int"
            },
            {
              "full_declaration": "int                  inY1",
              "name": "inY1",
              "type": "int"
            },
            {
              "full_declaration": "int                  inX2",
              "name": "inX2",
              "type": "int"
            },
            {
              "full_declaration": "int                  inY2",
              "name": "inY2",
              "type": "int"
            },
            {
              "full_declaration": "int                  inMin",
              "name": "inMin",
              "type": "int"
            },
            {
              "full_declaration": "int                  inMax",
              "name": "inMax",
              "type": "int"
            },
            {
              "full_declaration": "int                  inValue",
              "name": "inValue",
              "type": "int"
            },
            {
              "full_declaration": "int *                outIsVertical",
              "name": "outIsVertical",
              "type": "int *"
            },
            {
              "full_declaration": "int *                outDownBtnSize",
              "name": "outDownBtnSize",
              "type": "int *"
            },
            {
              "full_declaration": "int *                outDownPageSize",
              "name": "outDownPageSize",
              "type": "int *"
            },
            {
              "full_declaration": "int *                outThumbSize",
              "name": "outThumbSize",
              "type": "int *"
            },
            {
              "full_declaration": "int *                outUpPageSize",
              "name": "outUpPageSize",
              "type": "int *"
            },
            {
              "full_declaration": "int *                outUpBtnSize",
              "name": "outUpBtnSize",
              "type": "int *"
            }
          ],
          "signature": "WIDGET_API voidXPGetTrackMetrics(\n                         int                  inX1,\n                         int                  inY1,\n                         int                  inX2,\n                         int                  inY2,\n                         int                  inMin,\n                         int                  inMax,\n                         int                  inValue,XPTrackStyleinTrackStyle,\n                         int *                outIsVertical,\n                         int *                outDownBtnSize,\n                         int *                outDownPageSize,\n                         int *                outThumbSize,\n                         int *                outUpPageSize,\n                         int *                outUpBtnSize);"
        },
        {
          "name": "WIDGET_API",
          "signature": "WIDGET_API voidXPGetTrackMetrics(\n                         int                  inX1,\n                         int                  inY1,\n                         int                  inX2,\n                         int                  inY2,\n                         int                  inMin,\n                         int                  inMax,\n                         int                  inValue,XPTrackStyleinTrackStyle,\n                         int *                outIsVertical,\n                         int *                outDownBtnSize,\n                         int *                outDownPageSize,\n                         int *                outThumbSize,\n                         int *                outUpPageSize,\n                         int *                outUpBtnSize);",
          "source": "code_block_extraction",
          "type": "function"
        }
      ],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/XPGetTrackMetrics/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPGetTrackMetrics\"><a href=\"/sdk/XPGetTrackMetrics/\">XPGetTrackMetrics</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>WIDGET_API void       <a href=\"/sdk/XPGetTrackMetrics/\">XPGetTrackMetrics</a>(\n                         int                  inX1,\n                         int                  inY1,\n                         int                  inX2,\n                         int                  inY2,\n                         int                  inMin,\n                         int                  inMax,\n                         int                  inValue,\n                         <a href=\"/sdk/XPTrackStyle/\">XPTrackStyle</a>         inTrackStyle,\n                         int *                outIsVertical,\n                         int *                outDownBtnSize,\n                         int *                outDownPageSize,\n                         int *                outThumbSize,\n                         int *                outUpPageSize,\n                         int *                outUpBtnSize);\n</code></pre><p>This routine returns the metrics of a track. If you want to write UI code to manipulate a track, this routine helps you know where the mouse locations are. For most other elements, the rectangle the element is drawn in is enough information. However, the scrollbar drawing routine does some automatic placement; this routine lets you know where things ended up. You pass almost everything you would pass to the draw routine. You get out the orientation, and other useful stuff.</p><p>Besides orientation, you get five dimensions for the five parts of a scrollbar, which are the down button, down area (area before the thumb), the thumb, and the up area and button. For horizontal scrollers, the left button decreases; for vertical scrollers, the top button decreases.</p></div></div></article>",
      "code_examples": [
        {
          "char_count": 795,
          "code": "WIDGET_API voidXPGetTrackMetrics(\n                         int                  inX1,\n                         int                  inY1,\n                         int                  inX2,\n                         int                  inY2,\n                         int                  inMin,\n                         int                  inMax,\n                         int                  inValue,XPTrackStyleinTrackStyle,\n                         int *                outIsVertical,\n                         int *                outDownBtnSize,\n                         int *                outDownPageSize,\n                         int *                outThumbSize,\n                         int *                outUpPageSize,\n                         int *                outUpBtnSize);",
          "context": "XPGetTrackMetrics",
          "id": "example_0",
          "language": "c",
          "line_count": 14,
          "type": "example"
        }
      ],
      "cross_references": [
        "XPTrackStyle"
      ],
      "markdown": "### [XPGetTrackMetrics](/sdk/XPGetTrackMetrics/)\n\n```cpp\nWIDGET_API void       XPGetTrackMetrics(\n                         int                  inX1,\n                         int                  inY1,\n                         int                  inX2,\n                         int                  inY2,\n                         int                  inMin,\n                         int                  inMax,\n                         int                  inValue,\n                         XPTrackStyle         inTrackStyle,\n                         int *                outIsVertical,\n                         int *                outDownBtnSize,\n                         int *                outDownPageSize,\n                         int *                outThumbSize,\n                         int *                outUpPageSize,\n                         int *                outUpBtnSize);\n\n```\n\nThis routine returns the metrics of a track. If you want to write UI code to\nmanipulate a track, this routine helps you know where the mouse locations are.\nFor most other elements, the rectangle the element is drawn in is enough\ninformation. However, the scrollbar drawing routine does some automatic\nplacement; this routine lets you know where things ended up. You pass almost\neverything you would pass to the draw routine. You get out the orientation, and\nother useful stuff.\n\nBesides orientation, you get five dimensions for the five parts of a scrollbar,\nwhich are the down button, down area (area before the thumb), the thumb, and the\nup area and button. For horizontal scrollers, the left button decreases; for\nvertical scrollers, the top button decreases.",
      "own_functions": [
        "XPGetTrackMetrics",
        "WIDGET_API"
      ],
      "processing_timestamp": "2025-06-25T20:39:22.104583+00:00",
      "title": "XPGetTrackMetrics | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPGetTrackMetrics/"
    },
    "https://developer.x-plane.com/sdk/XPGetWidgetClassFunc/": {
      "api_signatures": [
        {
          "description": "Given a widget class, this function returns the callbacks that power that widget class.",
          "name": "XPGetWidgetClassFunc",
          "parameters": [],
          "signature": "WIDGET_APIXPWidgetFunc_tXPGetWidgetClassFunc(XPWidgetClassinWidgetClass);"
        }
      ],
      "category": {
        "category": "Widget_System",
        "module": "Widget System",
        "url": "https://developer.x-plane.com/sdk/XPGetWidgetClassFunc/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPGetWidgetClassFunc\"><a href=\"/sdk/XPGetWidgetClassFunc/\">XPGetWidgetClassFunc</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>WIDGET_API <a href=\"/sdk/XPWidgetFunc_t/\">XPWidgetFunc_t</a> <a href=\"/sdk/XPGetWidgetClassFunc/\">XPGetWidgetClassFunc</a>(\n                         <a href=\"/sdk/XPWidgetClass/\">XPWidgetClass</a>        inWidgetClass);\n</code></pre><p>Given a widget class, this function returns the callbacks that power that widget class.</p></div></div></article>",
      "code_examples": [
        {
          "char_count": 73,
          "code": "WIDGET_APIXPWidgetFunc_tXPGetWidgetClassFunc(XPWidgetClassinWidgetClass);",
          "context": "XPGetWidgetClassFunc",
          "id": "example_0",
          "language": "c",
          "line_count": 1,
          "type": "snippet"
        }
      ],
      "cross_references": [
        "WIDGET_API"
      ],
      "markdown": "### [XPGetWidgetClassFunc](/sdk/XPGetWidgetClassFunc/)\n\n```cpp\nWIDGET_API XPWidgetFunc_t XPGetWidgetClassFunc(\n                         XPWidgetClass        inWidgetClass);\n\n```\n\nGiven a widget class, this function returns the callbacks that power that widget\nclass.",
      "own_functions": [
        "XPGetWidgetClassFunc"
      ],
      "processing_timestamp": "2025-06-25T20:39:23.006963+00:00",
      "title": "XPGetWidgetClassFunc | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPGetWidgetClassFunc/"
    },
    "https://developer.x-plane.com/sdk/XPGetWidgetDescriptor/": {
      "api_signatures": [
        {
          "description": "This routine returns the widget’s descriptor. Pass in the length of the buffer you are going to receive the descriptor in. The descriptor will be null terminated for you. This routine returns the length of the actual descriptor; if you pass NULL for outDescriptor, you can get the descriptor’s length without getting its text. If the length of the descriptor exceeds your buffer length, the buffer will not be null terminated (this routine has ‘strncpy’ semantics).",
          "name": "XPGetWidgetDescriptor",
          "parameters": [
            {
              "full_declaration": "char *               outDescriptor",
              "name": "outDescriptor",
              "type": "char *"
            },
            {
              "full_declaration": "int                  inMaxDescLength",
              "name": "inMaxDescLength",
              "type": "int"
            }
          ],
          "signature": "WIDGET_API intXPGetWidgetDescriptor(XPWidgetIDinWidget,\n                         char *               outDescriptor,\n                         int                  inMaxDescLength);"
        },
        {
          "name": "WIDGET_API",
          "signature": "WIDGET_API intXPGetWidgetDescriptor(XPWidgetIDinWidget,\n                         char *               outDescriptor,\n                         int                  inMaxDescLength);",
          "source": "code_block_extraction",
          "type": "function"
        }
      ],
      "category": {
        "category": "Widget_System",
        "module": "Widget System",
        "url": "https://developer.x-plane.com/sdk/XPGetWidgetDescriptor/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPGetWidgetDescriptor\"><a href=\"/sdk/XPGetWidgetDescriptor/\">XPGetWidgetDescriptor</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>WIDGET_API int        <a href=\"/sdk/XPGetWidgetDescriptor/\">XPGetWidgetDescriptor</a>(\n                         <a href=\"/sdk/XPWidgetID/\">XPWidgetID</a>           inWidget,\n                         char *               outDescriptor,\n                         int                  inMaxDescLength);\n</code></pre><p>This routine returns the widget’s descriptor. Pass in the length of the buffer you are going to receive the descriptor in. The descriptor will be null terminated for you. This routine returns the length of the actual descriptor; if you pass NULL for outDescriptor, you can get the descriptor’s length without getting its text. If the length of the descriptor exceeds your buffer length, the buffer will not be null terminated (this routine has ‘strncpy’ semantics).</p></div></div></article>",
      "code_examples": [
        {
          "char_count": 180,
          "code": "WIDGET_API intXPGetWidgetDescriptor(XPWidgetIDinWidget,\n                         char *               outDescriptor,\n                         int                  inMaxDescLength);",
          "context": "XPGetWidgetDescriptor",
          "id": "example_0",
          "language": "c",
          "line_count": 3,
          "type": "snippet"
        }
      ],
      "cross_references": [],
      "markdown": "### [XPGetWidgetDescriptor](/sdk/XPGetWidgetDescriptor/)\n\n```cpp\nWIDGET_API int        XPGetWidgetDescriptor(\n                         XPWidgetID           inWidget,\n                         char *               outDescriptor,\n                         int                  inMaxDescLength);\n\n```\n\nThis routine returns the widget’s descriptor. Pass in the length of the buffer\nyou are going to receive the descriptor in. The descriptor will be null\nterminated for you. This routine returns the length of the actual descriptor; if\nyou pass NULL for outDescriptor, you can get the descriptor’s length without\ngetting its text. If the length of the descriptor exceeds your buffer length,\nthe buffer will not be null terminated (this routine has ‘strncpy’ semantics).",
      "own_functions": [
        "XPGetWidgetDescriptor",
        "WIDGET_API"
      ],
      "processing_timestamp": "2025-06-25T20:39:23.008963+00:00",
      "title": "XPGetWidgetDescriptor | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPGetWidgetDescriptor/"
    },
    "https://developer.x-plane.com/sdk/XPGetWidgetExposedGeometry/": {
      "api_signatures": [
        {
          "description": "This routine returns the bounds of the area of a widget that is completely within its parent widgets. Since a widget’s bounding box can be outside its parent, part of its area will not be eligible for mouse clicks and should not draw. UseXPGetWidgetGeometryto find out what area defines your widget’s shape, but use this routine to find out what area to actually draw into. Note that the widget library does not use OpenGL clipping to keep frame rates up, although you could use it internally.",
          "name": "XPGetWidgetExposedGeometry",
          "parameters": [],
          "signature": "WIDGET_API voidXPGetWidgetExposedGeometry(XPWidgetIDinWidgetID,\n                         int *                outLeft,    /* Can be NULL */\n                         int *                outTop,    /* Can be NULL */\n                         int *                outRight,    /* Can be NULL */\n                         int *                outBottom);    /* Can be NULL */"
        },
        {
          "name": "WIDGET_API",
          "signature": "WIDGET_API voidXPGetWidgetExposedGeometry(XPWidgetIDinWidgetID,\n                         int *                outLeft,    /* Can be NULL */\n                         int *                outTop,    /* Can be NULL */\n                         int *                outRight,    /* Can be NULL */\n                         int *                outBottom);",
          "source": "code_block_extraction",
          "type": "function"
        }
      ],
      "category": {
        "category": "Widget_System",
        "module": "Widget System",
        "url": "https://developer.x-plane.com/sdk/XPGetWidgetExposedGeometry/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPGetWidgetExposedGeometry\"><a href=\"/sdk/XPGetWidgetExposedGeometry/\">XPGetWidgetExposedGeometry</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>WIDGET_API void       <a href=\"/sdk/XPGetWidgetExposedGeometry/\">XPGetWidgetExposedGeometry</a>(\n                         <a href=\"/sdk/XPWidgetID/\">XPWidgetID</a>           inWidgetID,\n                         int *                outLeft,    /* Can be NULL */\n                         int *                outTop,    /* Can be NULL */\n                         int *                outRight,    /* Can be NULL */\n                         int *                outBottom);    /* Can be NULL */\n</code></pre><p>This routine returns the bounds of the area of a widget that is completely within its parent widgets. Since a widget’s bounding box can be outside its parent, part of its area will not be eligible for mouse clicks and should not draw. Use<a href=\"/sdk/XPGetWidgetGeometry/\">XPGetWidgetGeometry</a>to find out what area defines your widget’s shape, but use this routine to find out what area to actually draw into. Note that the widget library does not use OpenGL clipping to keep frame rates up, although you could use it internally.</p></div></div></article>",
      "code_examples": [
        {
          "char_count": 370,
          "code": "WIDGET_API voidXPGetWidgetExposedGeometry(XPWidgetIDinWidgetID,\n                         int *                outLeft,    /* Can be NULL */\n                         int *                outTop,    /* Can be NULL */\n                         int *                outRight,    /* Can be NULL */\n                         int *                outBottom);    /* Can be NULL */",
          "context": "XPGetWidgetExposedGeometry",
          "id": "example_0",
          "language": "c",
          "line_count": 5,
          "type": "snippet"
        }
      ],
      "cross_references": [
        "XPGetWidgetGeometry"
      ],
      "markdown": "### [XPGetWidgetExposedGeometry](/sdk/XPGetWidgetExposedGeometry/)\n\n```cpp\nWIDGET_API void       XPGetWidgetExposedGeometry(\n                         XPWidgetID           inWidgetID,\n                         int *                outLeft,    /* Can be NULL */\n                         int *                outTop,    /* Can be NULL */\n                         int *                outRight,    /* Can be NULL */\n                         int *                outBottom);    /* Can be NULL */\n\n```\n\nThis routine returns the bounds of the area of a widget that is completely\nwithin its parent widgets. Since a widget’s bounding box can be outside its\nparent, part of its area will not be eligible for mouse clicks and should not\ndraw. Use[XPGetWidgetGeometry](/sdk/XPGetWidgetGeometry/)to find out what area\ndefines your widget’s shape, but use this routine to find out what area to\nactually draw into. Note that the widget library does not use OpenGL clipping to\nkeep frame rates up, although you could use it internally.",
      "own_functions": [
        "XPGetWidgetExposedGeometry",
        "WIDGET_API"
      ],
      "processing_timestamp": "2025-06-25T20:39:23.011963+00:00",
      "title": "XPGetWidgetExposedGeometry | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPGetWidgetExposedGeometry/"
    },
    "https://developer.x-plane.com/sdk/XPGetWidgetForLocation/": {
      "api_signatures": [
        {
          "description": "Given a widget and a location, this routine returns the widget ID of the child of that widget that owns that location. If inRecursive is true then this will return a child of a child of a widget as it tries to find the deepest widget at that location. If inVisibleOnly is true, then only visible widgets are considered, otherwise all widgets are considered. The widget ID passed for inContainer will be returned if the location is in that widget but not in a child widget. 0 is returned if the location is not in the container.",
          "name": "XPGetWidgetForLocation",
          "parameters": [
            {
              "full_declaration": "int                  inXOffset",
              "name": "inXOffset",
              "type": "int"
            },
            {
              "full_declaration": "int                  inYOffset",
              "name": "inYOffset",
              "type": "int"
            },
            {
              "full_declaration": "int                  inRecursive",
              "name": "inRecursive",
              "type": "int"
            },
            {
              "full_declaration": "int                  inVisibleOnly",
              "name": "inVisibleOnly",
              "type": "int"
            }
          ],
          "signature": "WIDGET_APIXPWidgetIDXPGetWidgetForLocation(XPWidgetIDinContainer,\n                         int                  inXOffset,\n                         int                  inYOffset,\n                         int                  inRecursive,\n                         int                  inVisibleOnly);"
        }
      ],
      "category": {
        "category": "Widget_System",
        "module": "Widget System",
        "url": "https://developer.x-plane.com/sdk/XPGetWidgetForLocation/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPGetWidgetForLocation\"><a href=\"/sdk/XPGetWidgetForLocation/\">XPGetWidgetForLocation</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>WIDGET_API <a href=\"/sdk/XPWidgetID/\">XPWidgetID</a> <a href=\"/sdk/XPGetWidgetForLocation/\">XPGetWidgetForLocation</a>(\n                         <a href=\"/sdk/XPWidgetID/\">XPWidgetID</a>           inContainer,\n                         int                  inXOffset,\n                         int                  inYOffset,\n                         int                  inRecursive,\n                         int                  inVisibleOnly);\n</code></pre><p>Given a widget and a location, this routine returns the widget ID of the child of that widget that owns that location. If inRecursive is true then this will return a child of a child of a widget as it tries to find the deepest widget at that location. If inVisibleOnly is true, then only visible widgets are considered, otherwise all widgets are considered. The widget ID passed for inContainer will be returned if the location is in that widget but not in a child widget. 0 is returned if the location is not in the container.</p><p>NOTE: if a widget’s geometry extends outside its parents geometry, it will not be returned by this call for mouse locations outside the parent geometry. The parent geometry limits the child’s eligibility for mouse location.</p></div></div></article>",
      "code_examples": [
        {
          "char_count": 300,
          "code": "WIDGET_APIXPWidgetIDXPGetWidgetForLocation(XPWidgetIDinContainer,\n                         int                  inXOffset,\n                         int                  inYOffset,\n                         int                  inRecursive,\n                         int                  inVisibleOnly);",
          "context": "XPGetWidgetForLocation",
          "id": "example_0",
          "language": "c",
          "line_count": 5,
          "type": "snippet"
        }
      ],
      "cross_references": [
        "WIDGET_API"
      ],
      "markdown": "### [XPGetWidgetForLocation](/sdk/XPGetWidgetForLocation/)\n\n```cpp\nWIDGET_API XPWidgetID XPGetWidgetForLocation(\n                         XPWidgetID           inContainer,\n                         int                  inXOffset,\n                         int                  inYOffset,\n                         int                  inRecursive,\n                         int                  inVisibleOnly);\n\n```\n\nGiven a widget and a location, this routine returns the widget ID of the child\nof that widget that owns that location. If inRecursive is true then this will\nreturn a child of a child of a widget as it tries to find the deepest widget at\nthat location. If inVisibleOnly is true, then only visible widgets are\nconsidered, otherwise all widgets are considered. The widget ID passed for\ninContainer will be returned if the location is in that widget but not in a\nchild widget. 0 is returned if the location is not in the container.\n\nNOTE: if a widget’s geometry extends outside its parents geometry, it will not\nbe returned by this call for mouse locations outside the parent geometry. The\nparent geometry limits the child’s eligibility for mouse location.",
      "own_functions": [
        "XPGetWidgetForLocation"
      ],
      "processing_timestamp": "2025-06-25T20:39:23.013964+00:00",
      "title": "XPGetWidgetForLocation | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPGetWidgetForLocation/"
    },
    "https://developer.x-plane.com/sdk/XPGetWidgetGeometry/": {
      "api_signatures": [
        {
          "description": "This routine returns the bounding box of a widget in global coordinates. Pass NULL for any parameter you are not interested in.",
          "name": "XPGetWidgetGeometry",
          "parameters": [],
          "signature": "WIDGET_API voidXPGetWidgetGeometry(XPWidgetIDinWidget,\n                         int *                outLeft,    /* Can be NULL */\n                         int *                outTop,    /* Can be NULL */\n                         int *                outRight,    /* Can be NULL */\n                         int *                outBottom);    /* Can be NULL */"
        },
        {
          "name": "WIDGET_API",
          "signature": "WIDGET_API voidXPGetWidgetGeometry(XPWidgetIDinWidget,\n                         int *                outLeft,    /* Can be NULL */\n                         int *                outTop,    /* Can be NULL */\n                         int *                outRight,    /* Can be NULL */\n                         int *                outBottom);",
          "source": "code_block_extraction",
          "type": "function"
        }
      ],
      "category": {
        "category": "Widget_System",
        "module": "Widget System",
        "url": "https://developer.x-plane.com/sdk/XPGetWidgetGeometry/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPGetWidgetGeometry\"><a href=\"/sdk/XPGetWidgetGeometry/\">XPGetWidgetGeometry</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>WIDGET_API void       <a href=\"/sdk/XPGetWidgetGeometry/\">XPGetWidgetGeometry</a>(\n                         <a href=\"/sdk/XPWidgetID/\">XPWidgetID</a>           inWidget,\n                         int *                outLeft,    /* Can be NULL */\n                         int *                outTop,    /* Can be NULL */\n                         int *                outRight,    /* Can be NULL */\n                         int *                outBottom);    /* Can be NULL */\n</code></pre><p>This routine returns the bounding box of a widget in global coordinates. Pass NULL for any parameter you are not interested in.</p></div></div></article>",
      "code_examples": [
        {
          "char_count": 361,
          "code": "WIDGET_API voidXPGetWidgetGeometry(XPWidgetIDinWidget,\n                         int *                outLeft,    /* Can be NULL */\n                         int *                outTop,    /* Can be NULL */\n                         int *                outRight,    /* Can be NULL */\n                         int *                outBottom);    /* Can be NULL */",
          "context": "XPGetWidgetGeometry",
          "id": "example_0",
          "language": "c",
          "line_count": 5,
          "type": "snippet"
        }
      ],
      "cross_references": [],
      "markdown": "### [XPGetWidgetGeometry](/sdk/XPGetWidgetGeometry/)\n\n```cpp\nWIDGET_API void       XPGetWidgetGeometry(\n                         XPWidgetID           inWidget,\n                         int *                outLeft,    /* Can be NULL */\n                         int *                outTop,    /* Can be NULL */\n                         int *                outRight,    /* Can be NULL */\n                         int *                outBottom);    /* Can be NULL */\n\n```\n\nThis routine returns the bounding box of a widget in global coordinates. Pass\nNULL for any parameter you are not interested in.",
      "own_functions": [
        "XPGetWidgetGeometry",
        "WIDGET_API"
      ],
      "processing_timestamp": "2025-06-25T20:39:23.016038+00:00",
      "title": "XPGetWidgetGeometry | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPGetWidgetGeometry/"
    },
    "https://developer.x-plane.com/sdk/XPGetWidgetProperty/": {
      "api_signatures": [
        {
          "description": "This routine returns the value of a widget’s property, or 0 if the property is not defined. If you need to know whether the property is defined, pass a pointer to an int for inExists; the existence of that property will be returned in the int. Pass NULL for inExists if you do not need this information.",
          "name": "XPGetWidgetProperty",
          "parameters": [],
          "signature": "WIDGET_API intptr_tXPGetWidgetProperty(XPWidgetIDinWidget,XPWidgetPropertyIDinProperty,\n                         int *                inExists);    /* Can be NULL */"
        },
        {
          "name": "WIDGET_API",
          "signature": "WIDGET_API intptr_tXPGetWidgetProperty(XPWidgetIDinWidget,XPWidgetPropertyIDinProperty,\n                         int *                inExists);",
          "source": "code_block_extraction",
          "type": "function"
        }
      ],
      "category": {
        "category": "Widget_System",
        "module": "Widget System",
        "url": "https://developer.x-plane.com/sdk/XPGetWidgetProperty/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPGetWidgetProperty\"><a href=\"/sdk/XPGetWidgetProperty/\">XPGetWidgetProperty</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>WIDGET_API intptr_t   <a href=\"/sdk/XPGetWidgetProperty/\">XPGetWidgetProperty</a>(\n                         <a href=\"/sdk/XPWidgetID/\">XPWidgetID</a>           inWidget,\n                         <a href=\"/sdk/XPWidgetPropertyID/\">XPWidgetPropertyID</a>   inProperty,\n                         int *                inExists);    /* Can be NULL */\n</code></pre><p>This routine returns the value of a widget’s property, or 0 if the property is not defined. If you need to know whether the property is defined, pass a pointer to an int for inExists; the existence of that property will be returned in the int. Pass NULL for inExists if you do not need this information.</p></div></div></article>",
      "code_examples": [
        {
          "char_count": 165,
          "code": "WIDGET_API intptr_tXPGetWidgetProperty(XPWidgetIDinWidget,XPWidgetPropertyIDinProperty,\n                         int *                inExists);    /* Can be NULL */",
          "context": "XPGetWidgetProperty",
          "id": "example_0",
          "language": "c",
          "line_count": 2,
          "type": "snippet"
        }
      ],
      "cross_references": [
        "XPWidgetPropertyID"
      ],
      "markdown": "### [XPGetWidgetProperty](/sdk/XPGetWidgetProperty/)\n\n```cpp\nWIDGET_API intptr_t   XPGetWidgetProperty(\n                         XPWidgetID           inWidget,\n                         XPWidgetPropertyID   inProperty,\n                         int *                inExists);    /* Can be NULL */\n\n```\n\nThis routine returns the value of a widget’s property, or 0 if the property is\nnot defined. If you need to know whether the property is defined, pass a pointer\nto an int for inExists; the existence of that property will be returned in the\nint. Pass NULL for inExists if you do not need this information.",
      "own_functions": [
        "XPGetWidgetProperty",
        "WIDGET_API"
      ],
      "processing_timestamp": "2025-06-25T20:39:23.018039+00:00",
      "title": "XPGetWidgetProperty | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPGetWidgetProperty/"
    },
    "https://developer.x-plane.com/sdk/XPGetWidgetUnderlyingWindow/": {
      "api_signatures": [
        {
          "description": "Returns the window (from theXPLMDisplayAPI) that backs your widget window. If you have opted in to modern windows, via a call toXPLMEnableFeature(“XPLM_USE_NATIVE_WIDGET_WINDOWS”, 1), you can use the returned window ID for display APIs likeXPLMSetWindowPositioningMode(), allowing you to pop the widget window out into a real OS window, or move it into VR.",
          "name": "XPGetWidgetUnderlyingWindow",
          "parameters": [],
          "signature": "WIDGET_APIXPLMWindowIDXPGetWidgetUnderlyingWindow(XPWidgetIDinWidget);"
        }
      ],
      "category": {
        "category": "XPLM_Display",
        "module": "Xplm Display",
        "url": "https://developer.x-plane.com/sdk/XPGetWidgetUnderlyingWindow/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPGetWidgetUnderlyingWindow\"><a href=\"/sdk/XPGetWidgetUnderlyingWindow/\">XPGetWidgetUnderlyingWindow</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>WIDGET_API <a href=\"/sdk/XPLMWindowID/\">XPLMWindowID</a> <a href=\"/sdk/XPGetWidgetUnderlyingWindow/\">XPGetWidgetUnderlyingWindow</a>(\n                         <a href=\"/sdk/XPWidgetID/\">XPWidgetID</a>           inWidget);\n</code></pre><p>Returns the window (from the<a href=\"/sdk/XPLMDisplay/\">XPLMDisplay</a>API) that backs your widget window. If you have opted in to modern windows, via a call to<a href=\"/sdk/XPLMEnableFeature/\">XPLMEnableFeature</a>(“XPLM_USE_NATIVE_WIDGET_WINDOWS”, 1), you can use the returned window ID for display APIs like<a href=\"/sdk/XPLMSetWindowPositioningMode/\">XPLMSetWindowPositioningMode</a>(), allowing you to pop the widget window out into a real OS window, or move it into VR.</p></div></div></article>",
      "code_examples": [
        {
          "char_count": 70,
          "code": "WIDGET_APIXPLMWindowIDXPGetWidgetUnderlyingWindow(XPWidgetIDinWidget);",
          "context": "XPGetWidgetUnderlyingWindow",
          "id": "example_0",
          "language": "c",
          "line_count": 1,
          "type": "snippet"
        }
      ],
      "cross_references": [
        "XPLMDisplay",
        "WIDGET_API",
        "XPLMSetWindowPositioningMode",
        "XPLMEnableFeature"
      ],
      "markdown": "### [XPGetWidgetUnderlyingWindow](/sdk/XPGetWidgetUnderlyingWindow/)\n\n```cpp\nWIDGET_API XPLMWindowID XPGetWidgetUnderlyingWindow(\n                         XPWidgetID           inWidget);\n\n```\n\nReturns the window (from the[XPLMDisplay](/sdk/XPLMDisplay/)API) that backs your\nwidget window. If you have opted in to modern windows, via a call\nto[XPLMEnableFeature](/sdk/XPLMEnableFeature/)(“XPLM_USE_NATIVE_WIDGET_WINDOWS”,\n1), you can use the returned window ID for display APIs\nlike[XPLMSetWindowPositioningMode](/sdk/XPLMSetWindowPositioningMode/)(),\nallowing you to pop the widget window out into a real OS window, or move it into\nVR.",
      "own_functions": [
        "XPGetWidgetUnderlyingWindow"
      ],
      "processing_timestamp": "2025-06-25T20:39:23.442909+00:00",
      "title": "XPGetWidgetUnderlyingWindow | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPGetWidgetUnderlyingWindow/"
    },
    "https://developer.x-plane.com/sdk/XPGetWidgetWithFocus/": {
      "api_signatures": [
        {
          "description": "This routine returns the widget that has keyboard focus, or 0 if X-Plane has keyboard focus or some other plugin window that does not have widgets has focus.",
          "name": "XPGetWidgetWithFocus",
          "parameters": [],
          "signature": "WIDGET_APIXPWidgetIDXPGetWidgetWithFocus(void);"
        }
      ],
      "category": {
        "category": "Widget_System",
        "module": "Widget System",
        "url": "https://developer.x-plane.com/sdk/XPGetWidgetWithFocus/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPGetWidgetWithFocus\"><a href=\"/sdk/XPGetWidgetWithFocus/\">XPGetWidgetWithFocus</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>WIDGET_API <a href=\"/sdk/XPWidgetID/\">XPWidgetID</a> <a href=\"/sdk/XPGetWidgetWithFocus/\">XPGetWidgetWithFocus</a>(void);\n</code></pre><p>This routine returns the widget that has keyboard focus, or 0 if X-Plane has keyboard focus or some other plugin window that does not have widgets has focus.</p></div></div></article>",
      "code_examples": [],
      "cross_references": [
        "WIDGET_API"
      ],
      "markdown": "### [XPGetWidgetWithFocus](/sdk/XPGetWidgetWithFocus/)\n\n```cpp\nWIDGET_API XPWidgetID XPGetWidgetWithFocus(void);\n\n```\n\nThis routine returns the widget that has keyboard focus, or 0 if X-Plane has\nkeyboard focus or some other plugin window that does not have widgets has focus.",
      "own_functions": [
        "XPGetWidgetWithFocus"
      ],
      "processing_timestamp": "2025-06-25T20:39:23.022037+00:00",
      "title": "XPGetWidgetWithFocus | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPGetWidgetWithFocus/"
    },
    "https://developer.x-plane.com/sdk/XPGetWindowDefaultDimensions/": {
      "api_signatures": [
        {
          "description": "This routine returns the default dimensions for a window. Output is either a minimum or fixed value depending on whether the window is scalable.",
          "name": "XPGetWindowDefaultDimensions",
          "parameters": [],
          "signature": "WIDGET_API voidXPGetWindowDefaultDimensions(XPWindowStyleinStyle,\n                         int *                outWidth,    /* Can be NULL */\n                         int *                outHeight);    /* Can be NULL */"
        },
        {
          "name": "WIDGET_API",
          "signature": "WIDGET_API voidXPGetWindowDefaultDimensions(XPWindowStyleinStyle,\n                         int *                outWidth,    /* Can be NULL */\n                         int *                outHeight);",
          "source": "code_block_extraction",
          "type": "function"
        }
      ],
      "category": {
        "category": "XPLM_Display",
        "module": "Xplm Display",
        "url": "https://developer.x-plane.com/sdk/XPGetWindowDefaultDimensions/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPGetWindowDefaultDimensions\"><a href=\"/sdk/XPGetWindowDefaultDimensions/\">XPGetWindowDefaultDimensions</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>WIDGET_API void       <a href=\"/sdk/XPGetWindowDefaultDimensions/\">XPGetWindowDefaultDimensions</a>(\n                         <a href=\"/sdk/XPWindowStyle/\">XPWindowStyle</a>        inStyle,\n                         int *                outWidth,    /* Can be NULL */\n                         int *                outHeight);    /* Can be NULL */\n</code></pre><p>This routine returns the default dimensions for a window. Output is either a minimum or fixed value depending on whether the window is scalable.</p></div></div></article>",
      "code_examples": [
        {
          "char_count": 221,
          "code": "WIDGET_API voidXPGetWindowDefaultDimensions(XPWindowStyleinStyle,\n                         int *                outWidth,    /* Can be NULL */\n                         int *                outHeight);    /* Can be NULL */",
          "context": "XPGetWindowDefaultDimensions",
          "id": "example_0",
          "language": "c",
          "line_count": 3,
          "type": "snippet"
        }
      ],
      "cross_references": [
        "XPWindowStyle"
      ],
      "markdown": "### [XPGetWindowDefaultDimensions](/sdk/XPGetWindowDefaultDimensions/)\n\n```cpp\nWIDGET_API void       XPGetWindowDefaultDimensions(\n                         XPWindowStyle        inStyle,\n                         int *                outWidth,    /* Can be NULL */\n                         int *                outHeight);    /* Can be NULL */\n\n```\n\nThis routine returns the default dimensions for a window. Output is either a\nminimum or fixed value depending on whether the window is scalable.",
      "own_functions": [
        "XPGetWindowDefaultDimensions",
        "WIDGET_API"
      ],
      "processing_timestamp": "2025-06-25T20:39:23.437904+00:00",
      "title": "XPGetWindowDefaultDimensions | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPGetWindowDefaultDimensions/"
    },
    "https://developer.x-plane.com/sdk/XPHideWidget/": {
      "api_signatures": [
        {
          "description": "Makes a widget invisible. SeeXPShowWidgetfor considerations of when a widget might not be visible despite its own visibility state.",
          "name": "XPHideWidget",
          "parameters": [],
          "signature": "WIDGET_API voidXPHideWidget(XPWidgetIDinWidget);"
        },
        {
          "name": "WIDGET_API",
          "signature": "WIDGET_API voidXPHideWidget(XPWidgetIDinWidget);",
          "source": "code_block_extraction",
          "type": "function"
        }
      ],
      "category": {
        "category": "Widget_System",
        "module": "Widget System",
        "url": "https://developer.x-plane.com/sdk/XPHideWidget/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPHideWidget\"><a href=\"/sdk/XPHideWidget/\">XPHideWidget</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>WIDGET_API void       <a href=\"/sdk/XPHideWidget/\">XPHideWidget</a>(\n                         <a href=\"/sdk/XPWidgetID/\">XPWidgetID</a>           inWidget);\n</code></pre><p>Makes a widget invisible. See<a href=\"/sdk/XPShowWidget/\">XPShowWidget</a>for considerations of when a widget might not be visible despite its own visibility state.</p></div></div></article>",
      "code_examples": [],
      "cross_references": [
        "XPShowWidget"
      ],
      "markdown": "### [XPHideWidget](/sdk/XPHideWidget/)\n\n```cpp\nWIDGET_API void       XPHideWidget(\n                         XPWidgetID           inWidget);\n\n```\n\nMakes a widget invisible. See[XPShowWidget](/sdk/XPShowWidget/)for\nconsiderations of when a widget might not be visible despite its own visibility\nstate.",
      "own_functions": [
        "XPHideWidget",
        "WIDGET_API"
      ],
      "processing_timestamp": "2025-06-25T20:39:23.020038+00:00",
      "title": "XPHideWidget | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPHideWidget/"
    },
    "https://developer.x-plane.com/sdk/XPIsWidgetInFront/": {
      "api_signatures": [
        {
          "description": "This routine returns true if this widget’s hierarchy is the frontmost hierarchy. It returns false if the widget’s hierarchy is not in front, or if the widget is not in a rooted hierarchy.",
          "name": "XPIsWidgetInFront",
          "parameters": [],
          "signature": "WIDGET_API intXPIsWidgetInFront(XPWidgetIDinWidget);"
        },
        {
          "name": "WIDGET_API",
          "signature": "WIDGET_API intXPIsWidgetInFront(XPWidgetIDinWidget);",
          "source": "code_block_extraction",
          "type": "function"
        }
      ],
      "category": {
        "category": "Widget_System",
        "module": "Widget System",
        "url": "https://developer.x-plane.com/sdk/XPIsWidgetInFront/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPIsWidgetInFront\"><a href=\"/sdk/XPIsWidgetInFront/\">XPIsWidgetInFront</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>WIDGET_API int        <a href=\"/sdk/XPIsWidgetInFront/\">XPIsWidgetInFront</a>(\n                         <a href=\"/sdk/XPWidgetID/\">XPWidgetID</a>           inWidget);\n</code></pre><p>This routine returns true if this widget’s hierarchy is the frontmost hierarchy. It returns false if the widget’s hierarchy is not in front, or if the widget is not in a rooted hierarchy.</p></div></div></article>",
      "code_examples": [
        {
          "char_count": 52,
          "code": "WIDGET_API intXPIsWidgetInFront(XPWidgetIDinWidget);",
          "context": "XPIsWidgetInFront",
          "id": "example_0",
          "language": "c",
          "line_count": 1,
          "type": "snippet"
        }
      ],
      "cross_references": [],
      "markdown": "### [XPIsWidgetInFront](/sdk/XPIsWidgetInFront/)\n\n```cpp\nWIDGET_API int        XPIsWidgetInFront(\n                         XPWidgetID           inWidget);\n\n```\n\nThis routine returns true if this widget’s hierarchy is the frontmost hierarchy.\nIt returns false if the widget’s hierarchy is not in front, or if the widget is\nnot in a rooted hierarchy.",
      "own_functions": [
        "XPIsWidgetInFront",
        "WIDGET_API"
      ],
      "processing_timestamp": "2025-06-25T20:39:23.024037+00:00",
      "title": "XPIsWidgetInFront | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPIsWidgetInFront/"
    },
    "https://developer.x-plane.com/sdk/XPIsWidgetVisible/": {
      "api_signatures": [
        {
          "description": "This returns 1 if a widget is visible, 0 if it is not. Note that this routine takes into consideration whether a parent is invisible. Use this routine to tell if the user can see the widget.",
          "name": "XPIsWidgetVisible",
          "parameters": [],
          "signature": "WIDGET_API intXPIsWidgetVisible(XPWidgetIDinWidget);"
        },
        {
          "name": "WIDGET_API",
          "signature": "WIDGET_API intXPIsWidgetVisible(XPWidgetIDinWidget);",
          "source": "code_block_extraction",
          "type": "function"
        }
      ],
      "category": {
        "category": "Widget_System",
        "module": "Widget System",
        "url": "https://developer.x-plane.com/sdk/XPIsWidgetVisible/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPIsWidgetVisible\"><a href=\"/sdk/XPIsWidgetVisible/\">XPIsWidgetVisible</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>WIDGET_API int        <a href=\"/sdk/XPIsWidgetVisible/\">XPIsWidgetVisible</a>(\n                         <a href=\"/sdk/XPWidgetID/\">XPWidgetID</a>           inWidget);\n</code></pre><p>This returns 1 if a widget is visible, 0 if it is not. Note that this routine takes into consideration whether a parent is invisible. Use this routine to tell if the user can see the widget.</p></div></div></article>",
      "code_examples": [
        {
          "char_count": 52,
          "code": "WIDGET_API intXPIsWidgetVisible(XPWidgetIDinWidget);",
          "context": "XPIsWidgetVisible",
          "id": "example_0",
          "language": "c",
          "line_count": 1,
          "type": "snippet"
        }
      ],
      "cross_references": [],
      "markdown": "### [XPIsWidgetVisible](/sdk/XPIsWidgetVisible/)\n\n```cpp\nWIDGET_API int        XPIsWidgetVisible(\n                         XPWidgetID           inWidget);\n\n```\n\nThis returns 1 if a widget is visible, 0 if it is not. Note that this routine\ntakes into consideration whether a parent is invisible. Use this routine to tell\nif the user can see the widget.",
      "own_functions": [
        "XPIsWidgetVisible",
        "WIDGET_API"
      ],
      "processing_timestamp": "2025-06-25T20:39:23.028101+00:00",
      "title": "XPIsWidgetVisible | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPIsWidgetVisible/"
    },
    "https://developer.x-plane.com/sdk/XPKeyState_t/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/XPKeyState_t/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"struct\"><h3 class=\"sdk-api-struct\" id=\"XPKeyState_t\"><a href=\"/sdk/XPKeyState_t/\">XPKeyState_t</a></h3><p>When a key is pressed, a pointer to this struct is passed to your widget function.</p><pre class=\"language-cpp\" data-manual=\"true\"><code>typedef struct {\n     // The ASCII key that was pressed.  WARNING: this may be 0 for some non-ASCII key sequences.\n     char                      key;\n     // The flags.  Make sure to check this if you only want key-downs!\n     <a href=\"/sdk/XPLMKeyFlags/\">XPLMKeyFlags</a>              flags;\n     // The virtual key code for the key\n     char                      vkey;\n} <a href=\"/sdk/XPKeyState_t/\">XPKeyState_t</a>;</code></pre></div></div></article>",
      "code_examples": [
        {
          "char_count": 333,
          "code": "typedef struct {\n     // The ASCII key that was pressed.  WARNING: this may be 0 for some non-ASCII key sequences.\n     char                      key;\n     // The flags.  Make sure to check this if you only want key-downs!XPLMKeyFlagsflags;\n     // The virtual key code for the key\n     char                      vkey;\n}XPKeyState_t;",
          "context": "When a key is pressed, a pointer to this struct is passed to your widget function.",
          "id": "example_0",
          "language": "c",
          "line_count": 7,
          "type": "snippet"
        }
      ],
      "cross_references": [
        "XPLMKeyFlags"
      ],
      "markdown": "### [XPKeyState_t](/sdk/XPKeyState_t/)\n\nWhen a key is pressed, a pointer to this struct is passed to your widget\nfunction.\n\n```cpp\ntypedef struct {\n     // The ASCII key that was pressed.  WARNING: this may be 0 for some non-ASCII key sequences.\n     char                      key;\n     // The flags.  Make sure to check this if you only want key-downs!\n     XPLMKeyFlags              flags;\n     // The virtual key code for the key\n     char                      vkey;\n} XPKeyState_t;\n```",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.098583+00:00",
      "title": "XPKeyState_t | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPKeyState_t/"
    },
    "https://developer.x-plane.com/sdk/XPLMAcquirePlanes/": {
      "api_signatures": [
        {
          "description": "XPLMAcquirePlanesgrants your plugin exclusive access to the aircraft. It returns 1 if you gain access, 0 if you do not.",
          "name": "XPLMAcquirePlanes",
          "parameters": [
            {
              "full_declaration": "char **              inAircraft",
              "name": "inAircraft",
              "type": "char **"
            },
            {
              "full_declaration": "void *               inRefcon",
              "name": "inRefcon",
              "type": "void *"
            }
          ],
          "signature": "XPLM_API intXPLMAcquirePlanes(\n                         char **              inAircraft,    /* Can be NULL */XPLMPlanesAvailable_finCallback,\n                         void *               inRefcon);"
        },
        {
          "name": "intXPLMAcquirePlanes",
          "signature": "XPLM_API intXPLMAcquirePlanes(\n                         char **              inAircraft,    /* Can be NULL */XPLMPlanesAvailable_finCallback,\n                         void *               inRefcon);",
          "source": "code_block_extraction",
          "type": "function"
        }
      ],
      "category": {
        "category": "XPLM_Planes",
        "module": "Xplm Planes",
        "url": "https://developer.x-plane.com/sdk/XPLMAcquirePlanes/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPLMAcquirePlanes\"><a href=\"/sdk/XPLMAcquirePlanes/\">XPLMAcquirePlanes</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API int        <a href=\"/sdk/XPLMAcquirePlanes/\">XPLMAcquirePlanes</a>(\n                         char **              inAircraft,    /* Can be NULL */\n                         <a href=\"/sdk/XPLMPlanesAvailable_f/\">XPLMPlanesAvailable_f</a> inCallback,\n                         void *               inRefcon);\n</code></pre><p><a href=\"/sdk/XPLMAcquirePlanes/\">XPLMAcquirePlanes</a>grants your plugin exclusive access to the aircraft. It returns 1 if you gain access, 0 if you do not.</p><p>inAircraft - pass in an array of pointers to strings specifying the planes you want loaded. For any plane index you do not want loaded, pass a 0-length string. Other strings should be full paths with the .acf extension. NULL terminates this array, or pass NULL if there are no planes you want loaded.</p><p>If you pass in a callback and do not receive access to the planes your callback will be called when the airplanes are available. If you do receive airplane access, your callback will not be called.</p></div></div></article>",
      "code_examples": [
        {
          "char_count": 198,
          "code": "XPLM_API intXPLMAcquirePlanes(\n                         char **              inAircraft,    /* Can be NULL */XPLMPlanesAvailable_finCallback,\n                         void *               inRefcon);",
          "context": "XPLMAcquirePlanes",
          "id": "example_0",
          "language": "c",
          "line_count": 3,
          "type": "snippet"
        }
      ],
      "cross_references": [
        "XPLMPlanes"
      ],
      "markdown": "### [XPLMAcquirePlanes](/sdk/XPLMAcquirePlanes/)\n\n```cpp\nXPLM_API int        XPLMAcquirePlanes(\n                         char **              inAircraft,    /* Can be NULL */\n                         XPLMPlanesAvailable_f inCallback,\n                         void *               inRefcon);\n\n```\n\n[XPLMAcquirePlanes](/sdk/XPLMAcquirePlanes/)grants your plugin exclusive access\nto the aircraft. It returns 1 if you gain access, 0 if you do not.\n\ninAircraft - pass in an array of pointers to strings specifying the planes you\nwant loaded. For any plane index you do not want loaded, pass a 0-length string.\nOther strings should be full paths with the .acf extension. NULL terminates this\narray, or pass NULL if there are no planes you want loaded.\n\nIf you pass in a callback and do not receive access to the planes your callback\nwill be called when the airplanes are available. If you do receive airplane\naccess, your callback will not be called.",
      "own_functions": [
        "XPLMAcquirePlanes",
        "intXPLMAcquirePlanes"
      ],
      "processing_timestamp": "2025-06-25T20:39:24.126139+00:00",
      "title": "XPLMAcquirePlanes | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMAcquirePlanes/"
    },
    "https://developer.x-plane.com/sdk/XPLMAppendMenuItem/": {
      "api_signatures": [
        {
          "description": "This routine appends a new menu item to the bottom of a menu and returns its index. Pass in the menu to add the item to, the items name, and a void * ref for this item.",
          "name": "XPLMAppendMenuItem",
          "parameters": [
            {
              "full_declaration": "const char *         inItemName",
              "name": "inItemName",
              "type": "const char *"
            },
            {
              "full_declaration": "void *               inItemRef",
              "name": "inItemRef",
              "type": "void *"
            },
            {
              "full_declaration": "int                  inDeprecatedAndIgnored",
              "name": "inDeprecatedAndIgnored",
              "type": "int"
            }
          ],
          "signature": "XPLM_API intXPLMAppendMenuItem(XPLMMenuIDinMenu,\n                         const char *         inItemName,\n                         void *               inItemRef,\n                         int                  inDeprecatedAndIgnored);"
        },
        {
          "name": "intXPLMAppendMenuItem",
          "signature": "XPLM_API intXPLMAppendMenuItem(XPLMMenuIDinMenu,\n                         const char *         inItemName,\n                         void *               inItemRef,\n                         int                  inDeprecatedAndIgnored);",
          "source": "code_block_extraction",
          "type": "function"
        }
      ],
      "category": {
        "category": "XPLM_Map",
        "module": "Xplm Map",
        "url": "https://developer.x-plane.com/sdk/XPLMAppendMenuItem/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPLMAppendMenuItem\"><a href=\"/sdk/XPLMAppendMenuItem/\">XPLMAppendMenuItem</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API int        <a href=\"/sdk/XPLMAppendMenuItem/\">XPLMAppendMenuItem</a>(\n                         <a href=\"/sdk/XPLMMenuID/\">XPLMMenuID</a>           inMenu,\n                         const char *         inItemName,\n                         void *               inItemRef,\n                         int                  inDeprecatedAndIgnored);\n</code></pre><p>This routine appends a new menu item to the bottom of a menu and returns its index. Pass in the menu to add the item to, the items name, and a void * ref for this item.</p><p>Returns a negative index if the append failed (due to an invalid parent menu argument).</p><p>Note that all menu indices returned are relative to your plugin’s menus only; if your plugin creates two sub-menus in the Plugins menu at different times, it doesn’t matter how many other plugins also create sub-menus of Plugins in the intervening time: your sub-menus will be given menu indices 0 and 1. (The SDK does some work in the back-end to filter out menus that are irrelevant to your plugin in order to deliver this consistency for each plugin.)</p></div></div></article>",
      "code_examples": [
        {
          "char_count": 234,
          "code": "XPLM_API intXPLMAppendMenuItem(XPLMMenuIDinMenu,\n                         const char *         inItemName,\n                         void *               inItemRef,\n                         int                  inDeprecatedAndIgnored);",
          "context": "XPLMAppendMenuItem",
          "id": "example_0",
          "language": "c",
          "line_count": 4,
          "type": "snippet"
        }
      ],
      "cross_references": [],
      "markdown": "### [XPLMAppendMenuItem](/sdk/XPLMAppendMenuItem/)\n\n```cpp\nXPLM_API int        XPLMAppendMenuItem(\n                         XPLMMenuID           inMenu,\n                         const char *         inItemName,\n                         void *               inItemRef,\n                         int                  inDeprecatedAndIgnored);\n\n```\n\nThis routine appends a new menu item to the bottom of a menu and returns its\nindex. Pass in the menu to add the item to, the items name, and a void * ref for\nthis item.\n\nReturns a negative index if the append failed (due to an invalid parent menu\nargument).\n\nNote that all menu indices returned are relative to your plugin’s menus only; if\nyour plugin creates two sub-menus in the Plugins menu at different times, it\ndoesn’t matter how many other plugins also create sub-menus of Plugins in the\nintervening time: your sub-menus will be given menu indices 0 and 1. (The SDK\ndoes some work in the back-end to filter out menus that are irrelevant to your\nplugin in order to deliver this consistency for each plugin.)",
      "own_functions": [
        "XPLMAppendMenuItem",
        "intXPLMAppendMenuItem"
      ],
      "processing_timestamp": "2025-06-25T20:39:23.765752+00:00",
      "title": "XPLMAppendMenuItem | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMAppendMenuItem/"
    },
    "https://developer.x-plane.com/sdk/XPLMAppendMenuItemWithCommand/": {
      "api_signatures": [
        {
          "description": "LikeXPLMAppendMenuItem(), but instead of the new menu item triggering theXPLMMenuHandler_fof the containiner menu, it will simply execute the command you pass in. Using a command for your menu item allows the user to bind a keyboard shortcut to the command and see that shortcut represented in the menu.",
          "name": "XPLMAppendMenuItemWithCommand",
          "parameters": [
            {
              "full_declaration": "const char *         inItemName",
              "name": "inItemName",
              "type": "const char *"
            }
          ],
          "signature": "XPLM_API intXPLMAppendMenuItemWithCommand(XPLMMenuIDinMenu,\n                         const char *         inItemName,XPLMCommandRefinCommandToExecute);"
        },
        {
          "name": "intXPLMAppendMenuItemWithCommand",
          "signature": "XPLM_API intXPLMAppendMenuItemWithCommand(XPLMMenuIDinMenu,\n                         const char *         inItemName,XPLMCommandRefinCommandToExecute);",
          "source": "code_block_extraction",
          "type": "function"
        }
      ],
      "category": {
        "category": "XPLM_Map",
        "module": "Xplm Map",
        "url": "https://developer.x-plane.com/sdk/XPLMAppendMenuItemWithCommand/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"function XPLM300\"><h3 class=\"sdk-api-function\" id=\"XPLMAppendMenuItemWithCommand\"><a href=\"/sdk/XPLMAppendMenuItemWithCommand/\">XPLMAppendMenuItemWithCommand</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API int        <a href=\"/sdk/XPLMAppendMenuItemWithCommand/\">XPLMAppendMenuItemWithCommand</a>(\n                         <a href=\"/sdk/XPLMMenuID/\">XPLMMenuID</a>           inMenu,\n                         const char *         inItemName,\n                         <a href=\"/sdk/XPLMCommandRef/\">XPLMCommandRef</a>       inCommandToExecute);\n</code></pre><p>Like<a href=\"/sdk/XPLMAppendMenuItem/\">XPLMAppendMenuItem</a>(), but instead of the new menu item triggering the<a href=\"/sdk/XPLMMenuHandler_f/\">XPLMMenuHandler_f</a>of the containiner menu, it will simply execute the command you pass in. Using a command for your menu item allows the user to bind a keyboard shortcut to the command and see that shortcut represented in the menu.</p><p>Returns a negative index if the append failed (due to an invalid parent menu argument).</p><p>Like<a href=\"/sdk/XPLMAppendMenuItem/\">XPLMAppendMenuItem</a>(), all menu indices are relative to your plugin’s menus only.</p></div></div></article>",
      "code_examples": [
        {
          "char_count": 151,
          "code": "XPLM_API intXPLMAppendMenuItemWithCommand(XPLMMenuIDinMenu,\n                         const char *         inItemName,XPLMCommandRefinCommandToExecute);",
          "context": "XPLMAppendMenuItemWithCommand",
          "id": "example_0",
          "language": "c",
          "line_count": 2,
          "type": "snippet"
        }
      ],
      "cross_references": [
        "XPLMAppendMenuItem"
      ],
      "markdown": "### [XPLMAppendMenuItemWithCommand](/sdk/XPLMAppendMenuItemWithCommand/)\n\n```cpp\nXPLM_API int        XPLMAppendMenuItemWithCommand(\n                         XPLMMenuID           inMenu,\n                         const char *         inItemName,\n                         XPLMCommandRef       inCommandToExecute);\n\n```\n\nLike[XPLMAppendMenuItem](/sdk/XPLMAppendMenuItem/)(), but instead of the new\nmenu item triggering the[XPLMMenuHandler_f](/sdk/XPLMMenuHandler_f/)of the\ncontaininer menu, it will simply execute the command you pass in. Using a\ncommand for your menu item allows the user to bind a keyboard shortcut to the\ncommand and see that shortcut represented in the menu.\n\nReturns a negative index if the append failed (due to an invalid parent menu\nargument).\n\nLike[XPLMAppendMenuItem](/sdk/XPLMAppendMenuItem/)(), all menu indices are\nrelative to your plugin’s menus only.",
      "own_functions": [
        "XPLMAppendMenuItemWithCommand",
        "intXPLMAppendMenuItemWithCommand"
      ],
      "processing_timestamp": "2025-06-25T20:39:23.772753+00:00",
      "title": "XPLMAppendMenuItemWithCommand | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMAppendMenuItemWithCommand/"
    },
    "https://developer.x-plane.com/sdk/XPLMAppendMenuSeparator/": {
      "api_signatures": [
        {
          "description": "This routine adds a separator to the end of a menu.",
          "name": "XPLMAppendMenuSeparator",
          "parameters": [],
          "signature": "XPLM_API voidXPLMAppendMenuSeparator(XPLMMenuIDinMenu);"
        },
        {
          "name": "voidXPLMAppendMenuSeparator",
          "signature": "XPLM_API voidXPLMAppendMenuSeparator(XPLMMenuIDinMenu);",
          "source": "code_block_extraction",
          "type": "function"
        }
      ],
      "category": {
        "category": "XPLM_Map",
        "module": "Xplm Map",
        "url": "https://developer.x-plane.com/sdk/XPLMAppendMenuSeparator/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPLMAppendMenuSeparator\"><a href=\"/sdk/XPLMAppendMenuSeparator/\">XPLMAppendMenuSeparator</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API void       <a href=\"/sdk/XPLMAppendMenuSeparator/\">XPLMAppendMenuSeparator</a>(\n                         <a href=\"/sdk/XPLMMenuID/\">XPLMMenuID</a>           inMenu);\n</code></pre><p>This routine adds a separator to the end of a menu.</p><p>Returns a negative index if the append failed (due to an invalid parent menu argument).</p></div></div></article>",
      "code_examples": [
        {
          "char_count": 55,
          "code": "XPLM_API voidXPLMAppendMenuSeparator(XPLMMenuIDinMenu);",
          "context": "XPLMAppendMenuSeparator",
          "id": "example_0",
          "language": "cpp",
          "line_count": 1,
          "type": "snippet"
        }
      ],
      "cross_references": [],
      "markdown": "### [XPLMAppendMenuSeparator](/sdk/XPLMAppendMenuSeparator/)\n\n```cpp\nXPLM_API void       XPLMAppendMenuSeparator(\n                         XPLMMenuID           inMenu);\n\n```\n\nThis routine adds a separator to the end of a menu.\n\nReturns a negative index if the append failed (due to an invalid parent menu\nargument).",
      "own_functions": [
        "XPLMAppendMenuSeparator",
        "voidXPLMAppendMenuSeparator"
      ],
      "processing_timestamp": "2025-06-25T20:39:23.774752+00:00",
      "title": "XPLMAppendMenuSeparator | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMAppendMenuSeparator/"
    },
    "https://developer.x-plane.com/sdk/XPLMAudioBus/": {
      "api_signatures": [
        {
          "name": "XPLMAudioBus",
          "type": "enum",
          "values": [
            {
              "description": "Incoming speech on COM1",
              "name": "xplm_AudioRadioCom1",
              "value": "\"0\""
            },
            {
              "description": "Incoming speech on COM2",
              "name": "xplm_AudioRadioCom2",
              "value": "\"1\""
            },
            {
              "description": "Pilot's own speech",
              "name": "xplm_AudioRadioPilot",
              "value": "\"2\""
            },
            {
              "description": "Copilot's own speech",
              "name": "xplm_AudioRadioCopilot",
              "value": "\"3\""
            },
            {
              "description": "Dedicated ground vehicle cable",
              "name": "xplm_AudioGround",
              "value": "\"9\""
            },
            {
              "description": "Master bus. Not normally to be used directly.",
              "name": "xplm_Master",
              "value": "\"10\""
            }
          ]
        }
      ],
      "category": {
        "category": "XPLM_Sound",
        "module": "Xplm Sound",
        "url": "https://developer.x-plane.com/sdk/XPLMAudioBus/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enum\"><h3 class=\"sdk-api-enum\" id=\"XPLMAudioBus\"><a href=\"/sdk/XPLMAudioBus/\">XPLMAudioBus</a></h3><p>This enumeration states the type of audio you wish to play - that is, the part of the simulated environment that the audio belongs in. If you use FMOD directly, note that COM1, COM2, Pilot and GND exist in a different FMOD bank so you may see these channels being unloaded/reloaded independently of the others. They may also be using a different FMOD::System if the user has selected a dedicated headset output device.</p><p><div class=\"enumitem\"><table><thead><tr><th>Name</th><th>Value</th><th>Description</th></tr></thead><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_AudioRadioCom1\"><a href=\"/sdk/xplm_AudioRadioCom1/\">xplm_AudioRadioCom1</a></td><td>\"0\"</td><td>Incoming speech on COM1</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_AudioRadioCom2\"><a href=\"/sdk/xplm_AudioRadioCom2/\">xplm_AudioRadioCom2</a></td><td>\"1\"</td><td>Incoming speech on COM2</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_AudioRadioPilot\"><a href=\"/sdk/xplm_AudioRadioPilot/\">xplm_AudioRadioPilot</a></td><td>\"2\"</td><td>Pilot's own speech</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_AudioRadioCopilot\"><a href=\"/sdk/xplm_AudioRadioCopilot/\">xplm_AudioRadioCopilot</a></td><td>\"3\"</td><td>Copilot's own speech</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_AudioExteriorAircraft\"><a href=\"/sdk/xplm_AudioExteriorAircraft/\">xplm_AudioExteriorAircraft</a></td><td>\"4\"</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_AudioExteriorEnvironment\"><a href=\"/sdk/xplm_AudioExteriorEnvironment/\">xplm_AudioExteriorEnvironment</a></td><td>\"5\"</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_AudioExteriorUnprocessed\"><a href=\"/sdk/xplm_AudioExteriorUnprocessed/\">xplm_AudioExteriorUnprocessed</a></td><td>\"6\"</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_AudioInterior\"><a href=\"/sdk/xplm_AudioInterior/\">xplm_AudioInterior</a></td><td>\"7\"</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_AudioUI\"><a href=\"/sdk/xplm_AudioUI/\">xplm_AudioUI</a></td><td>\"8\"</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_AudioGround\"><a href=\"/sdk/xplm_AudioGround/\">xplm_AudioGround</a></td><td>\"9\"</td><td>Dedicated ground vehicle cable</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_Master\"><a href=\"/sdk/xplm_Master/\">xplm_Master</a></td><td>\"10\"</td><td>Master bus. Not normally to be used directly.</td></tr></table></div></p></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "### [XPLMAudioBus](/sdk/XPLMAudioBus/)\n\nThis enumeration states the type of audio you wish to play - that is, the part\nof the simulated environment that the audio belongs in. If you use FMOD\ndirectly, note that COM1, COM2, Pilot and GND exist in a different FMOD bank so\nyou may see these channels being unloaded/reloaded independently of the others.\nThey may also be using a different FMOD::System if the user has selected a\ndedicated headset output device.\n\n| Name | Value | Description |\n| --- | --- | --- |\n| [xplm_AudioRadioCom1](/sdk/xplm_AudioRadioCom1/) | \"0\" | Incoming speech on\nCOM1 |\n| [xplm_AudioRadioCom2](/sdk/xplm_AudioRadioCom2/) | \"1\" | Incoming speech on\nCOM2 |\n| [xplm_AudioRadioPilot](/sdk/xplm_AudioRadioPilot/) | \"2\" | Pilot's own speech\n|\n| [xplm_AudioRadioCopilot](/sdk/xplm_AudioRadioCopilot/) | \"3\" | Copilot's own\nspeech |\n| [xplm_AudioExteriorAircraft](/sdk/xplm_AudioExteriorAircraft/) | \"4\" |\n| [xplm_AudioExteriorEnvironment](/sdk/xplm_AudioExteriorEnvironment/) | \"5\" |\n| [xplm_AudioExteriorUnprocessed](/sdk/xplm_AudioExteriorUnprocessed/) | \"6\" |\n| [xplm_AudioInterior](/sdk/xplm_AudioInterior/) | \"7\" |\n| [xplm_AudioUI](/sdk/xplm_AudioUI/) | \"8\" |\n| [xplm_AudioGround](/sdk/xplm_AudioGround/) | \"9\" | Dedicated ground vehicle\ncable |\n| [xplm_Master](/sdk/xplm_Master/) | \"10\" | Master bus. Not normally to be used\ndirectly. |",
      "own_functions": [
        "XPLMAudioBus"
      ],
      "processing_timestamp": "2025-06-25T20:39:24.437929+00:00",
      "title": "XPLMAudioBus | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMAudioBus/"
    },
    "https://developer.x-plane.com/sdk/XPLMAvionicsBezelCallback_f/": {
      "api_signatures": [],
      "category": {
        "category": "XPLM_Processing",
        "module": "Xplm Processing",
        "url": "https://developer.x-plane.com/sdk/XPLMAvionicsBezelCallback_f/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"callback XPLM410\"><h3 class=\"sdk-api-callback\" id=\"XPLMAvionicsBezelCallback_f\"><a href=\"/sdk/XPLMAvionicsBezelCallback_f/\">XPLMAvionicsBezelCallback_f</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>typedef void (* <a href=\"/sdk/XPLMAvionicsBezelCallback_f/\">XPLMAvionicsBezelCallback_f</a>)(\n                         float                inAmbiantR,\n                         float                inAmbiantG,\n                         float                inAmbiantB,\n                         void *               inRefcon);\n</code></pre><p>This is the prototype for drawing callbacks for custom devices' bezel. You are passed in the red, green, and blue values you can optinally use for tinting your bezel accoring to ambiant light.</p><p>Refcon is a unique value that you specify when creating the device, allowing you to slip a pointer to your own data to the callback.</p><p>Upon entry the OpenGL context will be correctly set up for you and OpenGL will be in panel coordinates for 2d drawing. The OpenGL state (texturing, etc.) will be unknown.</p></div></div></article>",
      "code_examples": [
        {
          "char_count": 275,
          "code": "typedef void (*XPLMAvionicsBezelCallback_f)(\n                         float                inAmbiantR,\n                         float                inAmbiantG,\n                         float                inAmbiantB,\n                         void *               inRefcon);",
          "context": "XPLMAvionicsBezelCallback_f",
          "id": "example_0",
          "language": "c",
          "line_count": 5,
          "type": "snippet"
        }
      ],
      "cross_references": [],
      "markdown": "### [XPLMAvionicsBezelCallback_f](/sdk/XPLMAvionicsBezelCallback_f/)\n\n```cpp\ntypedef void (* XPLMAvionicsBezelCallback_f)(\n                         float                inAmbiantR,\n                         float                inAmbiantG,\n                         float                inAmbiantB,\n                         void *               inRefcon);\n\n```\n\nThis is the prototype for drawing callbacks for custom devices' bezel. You are\npassed in the red, green, and blue values you can optinally use for tinting your\nbezel accoring to ambiant light.\n\nRefcon is a unique value that you specify when creating the device, allowing you\nto slip a pointer to your own data to the callback.\n\nUpon entry the OpenGL context will be correctly set up for you and OpenGL will\nbe in panel coordinates for 2d drawing. The OpenGL state (texturing, etc.) will\nbe unknown.",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:24.313103+00:00",
      "title": "XPLMAvionicsBezelCallback_f | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMAvionicsBezelCallback_f/"
    },
    "https://developer.x-plane.com/sdk/XPLMAvionicsBrightness_f/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/XPLMAvionicsBrightness_f/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"callback XPLM410\"><h3 class=\"sdk-api-callback\" id=\"XPLMAvionicsBrightness_f\"><a href=\"/sdk/XPLMAvionicsBrightness_f/\">XPLMAvionicsBrightness_f</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>typedef float (* <a href=\"/sdk/XPLMAvionicsBrightness_f/\">XPLMAvionicsBrightness_f</a>)(\n                         float                inRheoValue,\n                         float                inAmbiantBrightness,\n                         float                inBusVoltsRatio,\n                         void *               inRefcon);\n</code></pre><p>This is the prototype for screen brightness callbacks for custom devices. If you provide a callback, you can return the ratio of the screen’s maximum brightness that the simulator should use when displaying the screen in the 3D cockpit.</p><p>inRheoValue is the current ratio value (between 0 and 1) of the instrument brightness rheostat to which the device is bound.</p><p>inAmbientBrightness is the value (between 0 and 1) that the callback should return for the screen to be at a usable brightness based on ambient light (if your device has a photo cell and automatically adjusts its brightness, you can return this and your screen will be at the optimal brightness to be readable, but not blind the pilot).</p><p>inBusVoltsRatio is the ratio of the nominal voltage currently present on the bus to which the device is bound, or -1 if the device is not bound to the current aircraft.</p><p>Refcon is a unique value that you specify when creating the device, allowing you to slip a pointer to your own data to the callback.</p></div></div></article>",
      "code_examples": [
        {
          "char_count": 288,
          "code": "typedef float (*XPLMAvionicsBrightness_f)(\n                         float                inRheoValue,\n                         float                inAmbiantBrightness,\n                         float                inBusVoltsRatio,\n                         void *               inRefcon);",
          "context": "XPLMAvionicsBrightness_f",
          "id": "example_0",
          "language": "c",
          "line_count": 5,
          "type": "snippet"
        }
      ],
      "cross_references": [],
      "markdown": "### [XPLMAvionicsBrightness_f](/sdk/XPLMAvionicsBrightness_f/)\n\n```cpp\ntypedef float (* XPLMAvionicsBrightness_f)(\n                         float                inRheoValue,\n                         float                inAmbiantBrightness,\n                         float                inBusVoltsRatio,\n                         void *               inRefcon);\n\n```\n\nThis is the prototype for screen brightness callbacks for custom devices. If you\nprovide a callback, you can return the ratio of the screen’s maximum brightness\nthat the simulator should use when displaying the screen in the 3D cockpit.\n\ninRheoValue is the current ratio value (between 0 and 1) of the instrument\nbrightness rheostat to which the device is bound.\n\ninAmbientBrightness is the value (between 0 and 1) that the callback should\nreturn for the screen to be at a usable brightness based on ambient light (if\nyour device has a photo cell and automatically adjusts its brightness, you can\nreturn this and your screen will be at the optimal brightness to be readable,\nbut not blind the pilot).\n\ninBusVoltsRatio is the ratio of the nominal voltage currently present on the bus\nto which the device is bound, or -1 if the device is not bound to the current\naircraft.\n\nRefcon is a unique value that you specify when creating the device, allowing you\nto slip a pointer to your own data to the callback.",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.101580+00:00",
      "title": "XPLMAvionicsBrightness_f | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMAvionicsBrightness_f/"
    },
    "https://developer.x-plane.com/sdk/XPLMAvionicsCallback_f/": {
      "api_signatures": [],
      "category": {
        "category": "XPLM_Processing",
        "module": "Xplm Processing",
        "url": "https://developer.x-plane.com/sdk/XPLMAvionicsCallback_f/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"callback\"><h3 class=\"sdk-api-callback\" id=\"XPLMAvionicsCallback_f\"><a href=\"/sdk/XPLMAvionicsCallback_f/\">XPLMAvionicsCallback_f</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>typedef int (* <a href=\"/sdk/XPLMAvionicsCallback_f/\">XPLMAvionicsCallback_f</a>)(\n                         <a href=\"/sdk/XPLMDeviceID/\">XPLMDeviceID</a>         inDeviceID,\n                         int                  inIsBefore,\n                         void *               inRefcon);\n</code></pre><p>This is the prototype for drawing callbacks for customized built-in device. You are passed in the device you are enhancing/replacing, and (if this is used for a built-in device that you are customizing) whether it is before or after X-Plane drawing. If you are before X-Plane, return 1 to let X-Plane draw or 0 to suppress X-Plane drawing. If you are called after X-Plane, the return value is ignored.</p><p>Refcon is a unique value that you specify when registering the callback, allowing you to slip a pointer to your own data to the callback.</p><p>Upon entry the OpenGL context will be correctly set up for you and OpenGL will be in panel coordinates for 2d drawing. The OpenGL state (texturing, etc.) will be unknown.</p></div></div></article>",
      "code_examples": [
        {
          "char_count": 176,
          "code": "typedef int (*XPLMAvionicsCallback_f)(XPLMDeviceIDinDeviceID,\n                         int                  inIsBefore,\n                         void *               inRefcon);",
          "context": "XPLMAvionicsCallback_f",
          "id": "example_0",
          "language": "c",
          "line_count": 3,
          "type": "snippet"
        }
      ],
      "cross_references": [
        "XPLMDeviceID"
      ],
      "markdown": "### [XPLMAvionicsCallback_f](/sdk/XPLMAvionicsCallback_f/)\n\n```cpp\ntypedef int (* XPLMAvionicsCallback_f)(\n                         XPLMDeviceID         inDeviceID,\n                         int                  inIsBefore,\n                         void *               inRefcon);\n\n```\n\nThis is the prototype for drawing callbacks for customized built-in device. You\nare passed in the device you are enhancing/replacing, and (if this is used for a\nbuilt-in device that you are customizing) whether it is before or after X-Plane\ndrawing. If you are before X-Plane, return 1 to let X-Plane draw or 0 to\nsuppress X-Plane drawing. If you are called after X-Plane, the return value is\nignored.\n\nRefcon is a unique value that you specify when registering the callback,\nallowing you to slip a pointer to your own data to the callback.\n\nUpon entry the OpenGL context will be correctly set up for you and OpenGL will\nbe in panel coordinates for 2d drawing. The OpenGL state (texturing, etc.) will\nbe unknown.",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:24.320102+00:00",
      "title": "XPLMAvionicsCallback_f | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMAvionicsCallback_f/"
    },
    "https://developer.x-plane.com/sdk/XPLMAvionicsCursor_f/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/XPLMAvionicsCursor_f/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"callback XPLM410\"><h3 class=\"sdk-api-callback\" id=\"XPLMAvionicsCursor_f\"><a href=\"/sdk/XPLMAvionicsCursor_f/\">XPLMAvionicsCursor_f</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>typedef <a href=\"/sdk/XPLMCursorStatus/\">XPLMCursorStatus</a> (* <a href=\"/sdk/XPLMAvionicsCursor_f/\">XPLMAvionicsCursor_f</a>)(\n                         int                  x,\n                         int                  y,\n                         void *               inRefcon);\n</code></pre><p>Cursor callback that decides which cursor to show when the mouse is over your screen or (2D-popup) bezel. Return<a href=\"/sdk/xplm_CursorDefault/\">xplm_CursorDefault</a>to let X-Plane use which cursor to show, or other values to force the cursor to a particular one (see<a href=\"/sdk/XPLMCursorStatus/\">XPLMCursorStatus</a>).</p></div></div></article>",
      "code_examples": [
        {
          "char_count": 202,
          "code": "typedefXPLMCursorStatus(*XPLMAvionicsCursor_f)(\n                         int                  x,\n                         int                  y,\n                         void *               inRefcon);",
          "context": "XPLMAvionicsCursor_f",
          "id": "example_0",
          "language": "c",
          "line_count": 4,
          "type": "snippet"
        }
      ],
      "cross_references": [
        "XPLMCursorStatus"
      ],
      "markdown": "### [XPLMAvionicsCursor_f](/sdk/XPLMAvionicsCursor_f/)\n\n```cpp\ntypedef XPLMCursorStatus (* XPLMAvionicsCursor_f)(\n                         int                  x,\n                         int                  y,\n                         void *               inRefcon);\n\n```\n\nCursor callback that decides which cursor to show when the mouse is over your\nscreen or (2D-popup) bezel.\nReturn[xplm_CursorDefault](/sdk/xplm_CursorDefault/)to let X-Plane use which\ncursor to show, or other values to force the cursor to a particular one\n(see[XPLMCursorStatus](/sdk/XPLMCursorStatus/)).",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.106584+00:00",
      "title": "XPLMAvionicsCursor_f | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMAvionicsCursor_f/"
    },
    "https://developer.x-plane.com/sdk/XPLMAvionicsID/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/XPLMAvionicsID/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"typedef\"><h3 class=\"sdk-api-type\" id=\"XPLMAvionicsID\"><a href=\"/sdk/XPLMAvionicsID/\">XPLMAvionicsID</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>typedef void * <a href=\"/sdk/XPLMAvionicsID/\">XPLMAvionicsID</a>;</code></pre><p>This is an opaque identifier for an avionics display that you enhance or replace. When you register your callbacks (via<a href=\"/sdk/XPLMRegisterAvionicsCallbacksEx/\">XPLMRegisterAvionicsCallbacksEx</a>()) or create a new device (via XPLMCreateAvionicsDevice()), you will specify drawing and mouse callbacks, and get back such a handle.</p></div></div></article>",
      "code_examples": [],
      "cross_references": [
        "XPLMRegisterAvionicsCallbacksEx"
      ],
      "markdown": "### [XPLMAvionicsID](/sdk/XPLMAvionicsID/)\n\n```cpp\ntypedef void * XPLMAvionicsID;\n```\n\nThis is an opaque identifier for an avionics display that you enhance or\nreplace. When you register your callbacks\n(via[XPLMRegisterAvionicsCallbacksEx](/sdk/XPLMRegisterAvionicsCallbacksEx/)())\nor create a new device (via XPLMCreateAvionicsDevice()), you will specify\ndrawing and mouse callbacks, and get back such a handle.",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.117580+00:00",
      "title": "XPLMAvionicsID | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMAvionicsID/"
    },
    "https://developer.x-plane.com/sdk/XPLMAvionicsKeyboard_f/": {
      "api_signatures": [],
      "category": {
        "category": "XPLM_Utilities",
        "module": "Xplm Utilities",
        "url": "https://developer.x-plane.com/sdk/XPLMAvionicsKeyboard_f/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"callback XPLM410\"><h3 class=\"sdk-api-callback\" id=\"XPLMAvionicsKeyboard_f\"><a href=\"/sdk/XPLMAvionicsKeyboard_f/\">XPLMAvionicsKeyboard_f</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>typedef int (* <a href=\"/sdk/XPLMAvionicsKeyboard_f/\">XPLMAvionicsKeyboard_f</a>)(\n                         char                 inKey,\n                         <a href=\"/sdk/XPLMKeyFlags/\">XPLMKeyFlags</a>         inFlags,\n                         char                 inVirtualKey,\n                         void *               inRefCon,\n                         int                  losingFocus);\n</code></pre><p>Key callback called when your device is popped up and you’ve requested to capture the keyboard. Return 1 to consume the event, or 0 to let X-Plane process it (for stock avionics devices).</p></div></div></article>",
      "code_examples": [
        {
          "char_count": 287,
          "code": "typedef int (*XPLMAvionicsKeyboard_f)(\n                         char                 inKey,XPLMKeyFlagsinFlags,\n                         char                 inVirtualKey,\n                         void *               inRefCon,\n                         int                  losingFocus);",
          "context": "XPLMAvionicsKeyboard_f",
          "id": "example_0",
          "language": "c",
          "line_count": 5,
          "type": "snippet"
        }
      ],
      "cross_references": [
        "XPLMKeyFlags"
      ],
      "markdown": "### [XPLMAvionicsKeyboard_f](/sdk/XPLMAvionicsKeyboard_f/)\n\n```cpp\ntypedef int (* XPLMAvionicsKeyboard_f)(\n                         char                 inKey,\n                         XPLMKeyFlags         inFlags,\n                         char                 inVirtualKey,\n                         void *               inRefCon,\n                         int                  losingFocus);\n\n```\n\nKey callback called when your device is popped up and you’ve requested to\ncapture the keyboard. Return 1 to consume the event, or 0 to let X-Plane process\nit (for stock avionics devices).",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:24.493619+00:00",
      "title": "XPLMAvionicsKeyboard_f | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMAvionicsKeyboard_f/"
    },
    "https://developer.x-plane.com/sdk/XPLMAvionicsMouseWheel_f/": {
      "api_signatures": [],
      "category": {
        "category": "XPLM_Utilities",
        "module": "Xplm Utilities",
        "url": "https://developer.x-plane.com/sdk/XPLMAvionicsMouseWheel_f/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"callback XPLM410\"><h3 class=\"sdk-api-callback\" id=\"XPLMAvionicsMouseWheel_f\"><a href=\"/sdk/XPLMAvionicsMouseWheel_f/\">XPLMAvionicsMouseWheel_f</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>typedef int (* <a href=\"/sdk/XPLMAvionicsMouseWheel_f/\">XPLMAvionicsMouseWheel_f</a>)(\n                         int                  x,\n                         int                  y,\n                         int                  wheel,\n                         int                  clicks,\n                         void *               inRefcon);\n</code></pre><p>Mouse wheel callback for scroll actions into your screen or (2D-popup) bezel, useful if your bezel has knobs that can be turned using the mouse wheel, or if you want to simulate pinch-to-zoom on a touchscreen. Return 1 to consume the event, or 0 to let X-Plane process it (for stock avionics devices). The number of “clicks” indicates how far the wheel was turned since the last callback. The wheel is 0 for the vertical axis or 1 for the horizontal axis (for OS/mouse combinations that support this).</p></div></div></article>",
      "code_examples": [
        {
          "char_count": 302,
          "code": "typedef int (*XPLMAvionicsMouseWheel_f)(\n                         int                  x,\n                         int                  y,\n                         int                  wheel,\n                         int                  clicks,\n                         void *               inRefcon);",
          "context": "XPLMAvionicsMouseWheel_f",
          "id": "example_0",
          "language": "c",
          "line_count": 6,
          "type": "snippet"
        }
      ],
      "cross_references": [],
      "markdown": "### [XPLMAvionicsMouseWheel_f](/sdk/XPLMAvionicsMouseWheel_f/)\n\n```cpp\ntypedef int (* XPLMAvionicsMouseWheel_f)(\n                         int                  x,\n                         int                  y,\n                         int                  wheel,\n                         int                  clicks,\n                         void *               inRefcon);\n\n```\n\nMouse wheel callback for scroll actions into your screen or (2D-popup) bezel,\nuseful if your bezel has knobs that can be turned using the mouse wheel, or if\nyou want to simulate pinch-to-zoom on a touchscreen. Return 1 to consume the\nevent, or 0 to let X-Plane process it (for stock avionics devices). The number\nof “clicks” indicates how far the wheel was turned since the last callback. The\nwheel is 0 for the vertical axis or 1 for the horizontal axis (for OS/mouse\ncombinations that support this).",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:24.495620+00:00",
      "title": "XPLMAvionicsMouseWheel_f | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMAvionicsMouseWheel_f/"
    },
    "https://developer.x-plane.com/sdk/XPLMAvionicsMouse_f/": {
      "api_signatures": [],
      "category": {
        "category": "XPLM_Utilities",
        "module": "Xplm Utilities",
        "url": "https://developer.x-plane.com/sdk/XPLMAvionicsMouse_f/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"callback XPLM410\"><h3 class=\"sdk-api-callback\" id=\"XPLMAvionicsMouse_f\"><a href=\"/sdk/XPLMAvionicsMouse_f/\">XPLMAvionicsMouse_f</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>typedef int (* <a href=\"/sdk/XPLMAvionicsMouse_f/\">XPLMAvionicsMouse_f</a>)(\n                         int                  x,\n                         int                  y,\n                         <a href=\"/sdk/XPLMMouseStatus/\">XPLMMouseStatus</a>      inMouse,\n                         void *               inRefcon);\n</code></pre><p>Mouse click callback for clicks into your screen or (2D-popup) bezel, useful if the device you are making simulates a touch-screen the user can click in the 3d cockpit, or if your pop-up’s bezel has buttons that the user can click. Return 1 to consume the event, or 0 to let X-Plane process it (for stock avionics devices).</p></div></div></article>",
      "code_examples": [
        {
          "char_count": 213,
          "code": "typedef int (*XPLMAvionicsMouse_f)(\n                         int                  x,\n                         int                  y,XPLMMouseStatusinMouse,\n                         void *               inRefcon);",
          "context": "XPLMAvionicsMouse_f",
          "id": "example_0",
          "language": "c",
          "line_count": 4,
          "type": "snippet"
        }
      ],
      "cross_references": [
        "XPLMMouseStatus"
      ],
      "markdown": "### [XPLMAvionicsMouse_f](/sdk/XPLMAvionicsMouse_f/)\n\n```cpp\ntypedef int (* XPLMAvionicsMouse_f)(\n                         int                  x,\n                         int                  y,\n                         XPLMMouseStatus      inMouse,\n                         void *               inRefcon);\n\n```\n\nMouse click callback for clicks into your screen or (2D-popup) bezel, useful if\nthe device you are making simulates a touch-screen the user can click in the 3d\ncockpit, or if your pop-up’s bezel has buttons that the user can click. Return 1\nto consume the event, or 0 to let X-Plane process it (for stock avionics\ndevices).",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:24.497621+00:00",
      "title": "XPLMAvionicsMouse_f | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMAvionicsMouse_f/"
    },
    "https://developer.x-plane.com/sdk/XPLMAvionicsNeedsDrawing/": {
      "api_signatures": [
        {
          "description": "Tells X-Plane that your device’s screen needs to be re-drawn. If your device is marked for on-demand drawing, X-Plane will call your screen drawing callback before drawing the next simulator frame. If your device is already drawn every frame, this has no effect.",
          "name": "XPLMAvionicsNeedsDrawing",
          "parameters": [],
          "signature": "XPLM_API voidXPLMAvionicsNeedsDrawing(XPLMAvionicsIDinHandle);"
        },
        {
          "name": "voidXPLMAvionicsNeedsDrawing",
          "signature": "XPLM_API voidXPLMAvionicsNeedsDrawing(XPLMAvionicsIDinHandle);",
          "source": "code_block_extraction",
          "type": "function"
        }
      ],
      "category": {
        "category": "XPLM_Display",
        "module": "Xplm Display",
        "url": "https://developer.x-plane.com/sdk/XPLMAvionicsNeedsDrawing/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"function XPLM410\"><h3 class=\"sdk-api-function\" id=\"XPLMAvionicsNeedsDrawing\"><a href=\"/sdk/XPLMAvionicsNeedsDrawing/\">XPLMAvionicsNeedsDrawing</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API void       <a href=\"/sdk/XPLMAvionicsNeedsDrawing/\">XPLMAvionicsNeedsDrawing</a>(\n                         <a href=\"/sdk/XPLMAvionicsID/\">XPLMAvionicsID</a>       inHandle);\n</code></pre><p>Tells X-Plane that your device’s screen needs to be re-drawn. If your device is marked for on-demand drawing, X-Plane will call your screen drawing callback before drawing the next simulator frame. If your device is already drawn every frame, this has no effect.</p></div></div></article>",
      "code_examples": [
        {
          "char_count": 62,
          "code": "XPLM_API voidXPLMAvionicsNeedsDrawing(XPLMAvionicsIDinHandle);",
          "context": "XPLMAvionicsNeedsDrawing",
          "id": "example_0",
          "language": "c",
          "line_count": 1,
          "type": "snippet"
        }
      ],
      "cross_references": [],
      "markdown": "### [XPLMAvionicsNeedsDrawing](/sdk/XPLMAvionicsNeedsDrawing/)\n\n```cpp\nXPLM_API void       XPLMAvionicsNeedsDrawing(\n                         XPLMAvionicsID       inHandle);\n\n```\n\nTells X-Plane that your device’s screen needs to be re-drawn. If your device is\nmarked for on-demand drawing, X-Plane will call your screen drawing callback\nbefore drawing the next simulator frame. If your device is already drawn every\nframe, this has no effect.",
      "own_functions": [
        "XPLMAvionicsNeedsDrawing",
        "voidXPLMAvionicsNeedsDrawing"
      ],
      "processing_timestamp": "2025-06-25T20:39:23.439909+00:00",
      "title": "XPLMAvionicsNeedsDrawing | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMAvionicsNeedsDrawing/"
    },
    "https://developer.x-plane.com/sdk/XPLMAvionicsScreenCallback_f/": {
      "api_signatures": [],
      "category": {
        "category": "XPLM_Display",
        "module": "Xplm Display",
        "url": "https://developer.x-plane.com/sdk/XPLMAvionicsScreenCallback_f/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"callback XPLM410\"><h3 class=\"sdk-api-callback\" id=\"XPLMAvionicsScreenCallback_f\"><a href=\"/sdk/XPLMAvionicsScreenCallback_f/\">XPLMAvionicsScreenCallback_f</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>typedef void (* <a href=\"/sdk/XPLMAvionicsScreenCallback_f/\">XPLMAvionicsScreenCallback_f</a>)(\n                         void *               inRefcon);\n</code></pre><p>This is the prototype for drawing callbacks for custom devices' screens. Refcon is a unique value that you specify when creating the device, allowing you to slip a pointer to your own data to the callback.</p><p>Upon entry the OpenGL context will be correctly set up for you and OpenGL will be in panel coordinates for 2d drawing. The OpenGL state (texturing, etc.) will be unknown. X-Plane does not clear your screen for you between calls - this means you can re-use portions to save drawing, but otherwise you must call glClear() to erase the screen’s contents.</p></div></div></article>",
      "code_examples": [
        {
          "char_count": 102,
          "code": "typedef void (*XPLMAvionicsScreenCallback_f)(\n                         void *               inRefcon);",
          "context": "XPLMAvionicsScreenCallback_f",
          "id": "example_0",
          "language": "c",
          "line_count": 2,
          "type": "snippet"
        }
      ],
      "cross_references": [],
      "markdown": "### [XPLMAvionicsScreenCallback_f](/sdk/XPLMAvionicsScreenCallback_f/)\n\n```cpp\ntypedef void (* XPLMAvionicsScreenCallback_f)(\n                         void *               inRefcon);\n\n```\n\nThis is the prototype for drawing callbacks for custom devices' screens. Refcon\nis a unique value that you specify when creating the device, allowing you to\nslip a pointer to your own data to the callback.\n\nUpon entry the OpenGL context will be correctly set up for you and OpenGL will\nbe in panel coordinates for 2d drawing. The OpenGL state (texturing, etc.) will\nbe unknown. X-Plane does not clear your screen for you between calls - this\nmeans you can re-use portions to save drawing, but otherwise you must call\nglClear() to erase the screen’s contents.",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:23.444906+00:00",
      "title": "XPLMAvionicsScreenCallback_f | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMAvionicsScreenCallback_f/"
    },
    "https://developer.x-plane.com/sdk/XPLMBankID/": {
      "api_signatures": [
        {
          "name": "XPLMBankID",
          "type": "enum",
          "values": [
            {
              "description": "Master bank. Handles all aircraft and environmental audio.",
              "name": "xplm_MasterBank",
              "value": "\"0\""
            },
            {
              "description": "Radio bank. Handles COM1/COM2/GND/Pilot/Copilot.",
              "name": "xplm_RadioBank",
              "value": "\"1\""
            }
          ]
        }
      ],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/XPLMBankID/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enum\"><h3 class=\"sdk-api-enum\" id=\"XPLMBankID\"><a href=\"/sdk/XPLMBankID/\">XPLMBankID</a></h3><p>These values are returned as the parameter of the “<a href=\"/sdk/XPLM_MSG_FMOD_BANK_LOADED/\">XPLM_MSG_FMOD_BANK_LOADED</a>” and “<a href=\"/sdk/XPLM_MSG_FMOD_BANK_UNLOADING/\">XPLM_MSG_FMOD_BANK_UNLOADING</a>” messages.</p><p><div class=\"enumitem\"><table><thead><tr><th>Name</th><th>Value</th><th>Description</th></tr></thead><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_MasterBank\"><a href=\"/sdk/xplm_MasterBank/\">xplm_MasterBank</a></td><td>\"0\"</td><td>Master bank. Handles all aircraft and environmental audio.</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_RadioBank\"><a href=\"/sdk/xplm_RadioBank/\">xplm_RadioBank</a></td><td>\"1\"</td><td>Radio bank. Handles COM1/COM2/GND/Pilot/Copilot.</td></tr></table></div></p></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "### [XPLMBankID](/sdk/XPLMBankID/)\n\nThese values are returned as the parameter of the\n“[XPLM_MSG_FMOD_BANK_LOADED](/sdk/XPLM_MSG_FMOD_BANK_LOADED/)” and\n“[XPLM_MSG_FMOD_BANK_UNLOADING](/sdk/XPLM_MSG_FMOD_BANK_UNLOADING/)” messages.\n\n| Name | Value | Description |\n| --- | --- | --- |\n| [xplm_MasterBank](/sdk/xplm_MasterBank/) | \"0\" | Master bank. Handles all\naircraft and environmental audio. |\n| [xplm_RadioBank](/sdk/xplm_RadioBank/) | \"1\" | Radio bank. Handles\nCOM1/COM2/GND/Pilot/Copilot. |",
      "own_functions": [
        "XPLMBankID"
      ],
      "processing_timestamp": "2025-06-25T20:39:22.112581+00:00",
      "title": "XPLMBankID | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMBankID/"
    },
    "https://developer.x-plane.com/sdk/XPLMBindTexture2d/": {
      "api_signatures": [
        {
          "description": "XPLMBindTexture2dchanges what texture is bound to the 2d texturing target. This routine caches the current 2d texture across all texturing units in the sim and plug-ins, preventing extraneous binding. For example, consider several plug-ins running in series; if they all use the ‘general interface’ bitmap to do UI, calling this function will skip the rebinding of the general interface texture on all but the first plug-in, which can provide better frame rates on some graphics cards.",
          "name": "XPLMBindTexture2d",
          "parameters": [
            {
              "full_declaration": "int                  inTextureNum",
              "name": "inTextureNum",
              "type": "int"
            },
            {
              "full_declaration": "int                  inTextureUnit",
              "name": "inTextureUnit",
              "type": "int"
            }
          ],
          "signature": "XPLM_API voidXPLMBindTexture2d(\n                         int                  inTextureNum,\n                         int                  inTextureUnit);"
        },
        {
          "name": "voidXPLMBindTexture2d",
          "signature": "XPLM_API voidXPLMBindTexture2d(\n                         int                  inTextureNum,\n                         int                  inTextureUnit);",
          "source": "code_block_extraction",
          "type": "function"
        }
      ],
      "category": {
        "category": "XPLM_Display",
        "module": "Xplm Display",
        "url": "https://developer.x-plane.com/sdk/XPLMBindTexture2d/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPLMBindTexture2d\"><a href=\"/sdk/XPLMBindTexture2d/\">XPLMBindTexture2d</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API void       <a href=\"/sdk/XPLMBindTexture2d/\">XPLMBindTexture2d</a>(\n                         int                  inTextureNum,\n                         int                  inTextureUnit);\n</code></pre><p><a href=\"/sdk/XPLMBindTexture2d/\">XPLMBindTexture2d</a>changes what texture is bound to the 2d texturing target. This routine caches the current 2d texture across all texturing units in the sim and plug-ins, preventing extraneous binding. For example, consider several plug-ins running in series; if they all use the ‘general interface’ bitmap to do UI, calling this function will skip the rebinding of the general interface texture on all but the first plug-in, which can provide better frame rates on some graphics cards.</p><p>inTextureID is the ID of the texture object to bind; inTextureUnit is a zero-based texture unit (e.g. 0 for the first one), up to a maximum of 4 units. (This number may increase in future versions of X-Plane.)</p><p>Use this routine instead of glBindTexture(GL_TEXTURE_2D, ….);</p></div></div></article>",
      "code_examples": [
        {
          "char_count": 153,
          "code": "XPLM_API voidXPLMBindTexture2d(\n                         int                  inTextureNum,\n                         int                  inTextureUnit);",
          "context": "XPLMBindTexture2d",
          "id": "example_0",
          "language": "c",
          "line_count": 3,
          "type": "snippet"
        }
      ],
      "cross_references": [],
      "markdown": "### [XPLMBindTexture2d](/sdk/XPLMBindTexture2d/)\n\n```cpp\nXPLM_API void       XPLMBindTexture2d(\n                         int                  inTextureNum,\n                         int                  inTextureUnit);\n\n```\n\n[XPLMBindTexture2d](/sdk/XPLMBindTexture2d/)changes what texture is bound to the\n2d texturing target. This routine caches the current 2d texture across all\ntexturing units in the sim and plug-ins, preventing extraneous binding. For\nexample, consider several plug-ins running in series; if they all use the\n‘general interface’ bitmap to do UI, calling this function will skip the\nrebinding of the general interface texture on all but the first plug-in, which\ncan provide better frame rates on some graphics cards.\n\ninTextureID is the ID of the texture object to bind; inTextureUnit is a\nzero-based texture unit (e.g. 0 for the first one), up to a maximum of 4 units.\n(This number may increase in future versions of X-Plane.)\n\nUse this routine instead of glBindTexture(GL_TEXTURE_2D, ….);",
      "own_functions": [
        "XPLMBindTexture2d",
        "voidXPLMBindTexture2d"
      ],
      "processing_timestamp": "2025-06-25T20:39:23.446908+00:00",
      "title": "XPLMBindTexture2d | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMBindTexture2d/"
    },
    "https://developer.x-plane.com/sdk/XPLMBringWindowToFront/": {
      "api_signatures": [
        {
          "description": "This routine brings the window to the front of the Z-order for its layer. Windows are brought to the front automatically when they are created. Beyond that, you should make sure you are front before handling mouse clicks.",
          "name": "XPLMBringWindowToFront",
          "parameters": [],
          "signature": "XPLM_API voidXPLMBringWindowToFront(XPLMWindowIDinWindow);"
        },
        {
          "name": "voidXPLMBringWindowToFront",
          "signature": "XPLM_API voidXPLMBringWindowToFront(XPLMWindowIDinWindow);",
          "source": "code_block_extraction",
          "type": "function"
        }
      ],
      "category": {
        "category": "XPLM_Display",
        "module": "Xplm Display",
        "url": "https://developer.x-plane.com/sdk/XPLMBringWindowToFront/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPLMBringWindowToFront\"><a href=\"/sdk/XPLMBringWindowToFront/\">XPLMBringWindowToFront</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API void       <a href=\"/sdk/XPLMBringWindowToFront/\">XPLMBringWindowToFront</a>(\n                         <a href=\"/sdk/XPLMWindowID/\">XPLMWindowID</a>         inWindow);\n</code></pre><p>This routine brings the window to the front of the Z-order for its layer. Windows are brought to the front automatically when they are created. Beyond that, you should make sure you are front before handling mouse clicks.</p><p>Note that this only brings your window to the front of its layer (<a href=\"/sdk/XPLMWindowLayer/\">XPLMWindowLayer</a>). Thus, if you have a window in the floating window layer (<a href=\"/sdk/xplm_WindowLayerFloatingWindows/\">xplm_WindowLayerFloatingWindows</a>), but there is a modal window (in layer<a href=\"/sdk/xplm_WindowLayerModal/\">xplm_WindowLayerModal</a>) above you, you would still not be the true frontmost window after calling this. (After all, the window layers are strictly ordered, and no window in a lower layer can ever be above any window in a higher one.)</p></div></div></article>",
      "code_examples": [
        {
          "char_count": 58,
          "code": "XPLM_API voidXPLMBringWindowToFront(XPLMWindowIDinWindow);",
          "context": "XPLMBringWindowToFront",
          "id": "example_0",
          "language": "c",
          "line_count": 1,
          "type": "snippet"
        }
      ],
      "cross_references": [
        "XPLMWindowLayer"
      ],
      "markdown": "### [XPLMBringWindowToFront](/sdk/XPLMBringWindowToFront/)\n\n```cpp\nXPLM_API void       XPLMBringWindowToFront(\n                         XPLMWindowID         inWindow);\n\n```\n\nThis routine brings the window to the front of the Z-order for its layer.\nWindows are brought to the front automatically when they are created. Beyond\nthat, you should make sure you are front before handling mouse clicks.\n\nNote that this only brings your window to the front of its layer\n([XPLMWindowLayer](/sdk/XPLMWindowLayer/)). Thus, if you have a window in the\nfloating window layer\n([xplm_WindowLayerFloatingWindows](/sdk/xplm_WindowLayerFloatingWindows/)), but\nthere is a modal window (in\nlayer[xplm_WindowLayerModal](/sdk/xplm_WindowLayerModal/)) above you, you would\nstill not be the true frontmost window after calling this. (After all, the\nwindow layers are strictly ordered, and no window in a lower layer can ever be\nabove any window in a higher one.)",
      "own_functions": [
        "XPLMBringWindowToFront",
        "voidXPLMBringWindowToFront"
      ],
      "processing_timestamp": "2025-06-25T20:39:23.449909+00:00",
      "title": "XPLMBringWindowToFront | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMBringWindowToFront/"
    },
    "https://developer.x-plane.com/sdk/XPLMCameraControlDuration/": {
      "api_signatures": [
        {
          "name": "XPLMCameraControlDuration",
          "type": "enum",
          "values": [
            {
              "description": "Control the camera until the user picks a new view.",
              "name": "xplm_ControlCameraUntilViewChanges",
              "value": "\"1\""
            },
            {
              "description": "Control the camera until your plugin is disabled or another plugin forcibly takes control.",
              "name": "xplm_ControlCameraForever",
              "value": "\"2\""
            }
          ]
        }
      ],
      "category": {
        "category": "XPLM_Camera",
        "module": "Xplm Camera",
        "url": "https://developer.x-plane.com/sdk/XPLMCameraControlDuration/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enum\"><h3 class=\"sdk-api-enum\" id=\"XPLMCameraControlDuration\"><a href=\"/sdk/XPLMCameraControlDuration/\">XPLMCameraControlDuration</a></h3><p>This enumeration states how long you want to retain control of the camera. You can retain it indefinitely or until the user selects a new view.</p><p><div class=\"enumitem\"><table><thead><tr><th>Name</th><th>Value</th><th>Description</th></tr></thead><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_ControlCameraUntilViewChanges\"><a href=\"/sdk/xplm_ControlCameraUntilViewChanges/\">xplm_ControlCameraUntilViewChanges</a></td><td>\"1\"</td><td>Control the camera until the user picks a new view.</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_ControlCameraForever\"><a href=\"/sdk/xplm_ControlCameraForever/\">xplm_ControlCameraForever</a></td><td>\"2\"</td><td>Control the camera until your plugin is disabled or another plugin forcibly takes control.</td></tr></table></div></p></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "### [XPLMCameraControlDuration](/sdk/XPLMCameraControlDuration/)\n\nThis enumeration states how long you want to retain control of the camera. You\ncan retain it indefinitely or until the user selects a new view.\n\n| Name | Value | Description |\n| --- | --- | --- |\n| [xplm_ControlCameraUntilViewChanges](/sdk/xplm_ControlCameraUntilViewChanges/)\n| \"1\" | Control the camera until the user picks a new view. |\n| [xplm_ControlCameraForever](/sdk/xplm_ControlCameraForever/) | \"2\" | Control\nthe camera until your plugin is disabled or another plugin forcibly takes\ncontrol. |",
      "own_functions": [
        "XPLMCameraControlDuration"
      ],
      "processing_timestamp": "2025-06-25T20:39:23.314093+00:00",
      "title": "XPLMCameraControlDuration | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMCameraControlDuration/"
    },
    "https://developer.x-plane.com/sdk/XPLMCameraControl_f/": {
      "api_signatures": [],
      "category": {
        "category": "XPLM_Camera",
        "module": "Xplm Camera",
        "url": "https://developer.x-plane.com/sdk/XPLMCameraControl_f/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"callback\"><h3 class=\"sdk-api-callback\" id=\"XPLMCameraControl_f\"><a href=\"/sdk/XPLMCameraControl_f/\">XPLMCameraControl_f</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>typedef int (* <a href=\"/sdk/XPLMCameraControl_f/\">XPLMCameraControl_f</a>)(\n                         <a href=\"/sdk/XPLMCameraPosition_t/\">XPLMCameraPosition_t</a> * outCameraPosition,    /* Can be NULL */\n                         int                  inIsLosingControl,\n                         void *               inRefcon);\n</code></pre><p>You use an XPLMCameraControl function to provide continuous control over the camera. You are passed a structure in which to put the new camera position; modify it and return 1 to reposition the camera. Return 0 to surrender control of the camera; camera control will be handled by X-Plane on this draw loop. The contents of the structure as you are called are undefined.</p><p>If X-Plane is taking camera control away from you, this function will be called with inIsLosingControl set to 1 and ioCameraPosition NULL.</p></div></div></article>",
      "code_examples": [
        {
          "char_count": 218,
          "code": "typedef int (*XPLMCameraControl_f)(XPLMCameraPosition_t* outCameraPosition,    /* Can be NULL */\n                         int                  inIsLosingControl,\n                         void *               inRefcon);",
          "context": "XPLMCameraControl_f",
          "id": "example_0",
          "language": "c",
          "line_count": 3,
          "type": "snippet"
        }
      ],
      "cross_references": [],
      "markdown": "### [XPLMCameraControl_f](/sdk/XPLMCameraControl_f/)\n\n```cpp\ntypedef int (* XPLMCameraControl_f)(\n                         XPLMCameraPosition_t * outCameraPosition,    /* Can be NULL */\n                         int                  inIsLosingControl,\n                         void *               inRefcon);\n\n```\n\nYou use an XPLMCameraControl function to provide continuous control over the\ncamera. You are passed a structure in which to put the new camera position;\nmodify it and return 1 to reposition the camera. Return 0 to surrender control\nof the camera; camera control will be handled by X-Plane on this draw loop. The\ncontents of the structure as you are called are undefined.\n\nIf X-Plane is taking camera control away from you, this function will be called\nwith inIsLosingControl set to 1 and ioCameraPosition NULL.",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:23.316091+00:00",
      "title": "XPLMCameraControl_f | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMCameraControl_f/"
    },
    "https://developer.x-plane.com/sdk/XPLMCameraPosition_t/": {
      "api_signatures": [],
      "category": {
        "category": "XPLM_Camera",
        "module": "Xplm Camera",
        "url": "https://developer.x-plane.com/sdk/XPLMCameraPosition_t/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"struct\"><h3 class=\"sdk-api-struct\" id=\"XPLMCameraPosition_t\"><a href=\"/sdk/XPLMCameraPosition_t/\">XPLMCameraPosition_t</a></h3><p>This structure contains a full specification of the camera. X, Y, and Z are the camera’s position in OpenGL coordinates; pitch, roll, and yaw are rotations from a camera facing flat north in degrees. Positive pitch means nose up, positive roll means roll right, and positive yaw means yaw right, all in degrees. Zoom is a zoom factor, with 1.0 meaning normal zoom and 2.0 magnifying by 2x (objects appear larger).</p><pre class=\"language-cpp\" data-manual=\"true\"><code>typedef struct {\n     float                     x;\n     float                     y;\n     float                     z;\n     float                     pitch;\n     float                     heading;\n     float                     roll;\n     float                     zoom;\n} <a href=\"/sdk/XPLMCameraPosition_t/\">XPLMCameraPosition_t</a>;</code></pre></div></div></article>",
      "code_examples": [
        {
          "char_count": 293,
          "code": "typedef struct {\n     float                     x;\n     float                     y;\n     float                     z;\n     float                     pitch;\n     float                     heading;\n     float                     roll;\n     float                     zoom;\n}XPLMCameraPosition_t;",
          "context": "This structure contains a full specification of the camera. X, Y, and Z are the camera’s position in OpenGL coordinates; pitch, roll, and yaw are rotations from a camera facing flat north in degrees. ",
          "id": "example_0",
          "language": "c",
          "line_count": 9,
          "type": "snippet"
        }
      ],
      "cross_references": [],
      "markdown": "### [XPLMCameraPosition_t](/sdk/XPLMCameraPosition_t/)\n\nThis structure contains a full specification of the camera. X, Y, and Z are the\ncamera’s position in OpenGL coordinates; pitch, roll, and yaw are rotations from\na camera facing flat north in degrees. Positive pitch means nose up, positive\nroll means roll right, and positive yaw means yaw right, all in degrees. Zoom is\na zoom factor, with 1.0 meaning normal zoom and 2.0 magnifying by 2x (objects\nappear larger).\n\n```cpp\ntypedef struct {\n     float                     x;\n     float                     y;\n     float                     z;\n     float                     pitch;\n     float                     heading;\n     float                     roll;\n     float                     zoom;\n} XPLMCameraPosition_t;\n```",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:23.317091+00:00",
      "title": "XPLMCameraPosition_t | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMCameraPosition_t/"
    },
    "https://developer.x-plane.com/sdk/XPLMCanWriteDataRef/": {
      "api_signatures": [
        {
          "description": "Given a dataref, this routine returns true if you can successfully set the data, false otherwise. Some datarefs are read-only.",
          "name": "XPLMCanWriteDataRef",
          "parameters": [],
          "signature": "XPLM_API intXPLMCanWriteDataRef(XPLMDataRefinDataRef);"
        },
        {
          "name": "intXPLMCanWriteDataRef",
          "signature": "XPLM_API intXPLMCanWriteDataRef(XPLMDataRefinDataRef);",
          "source": "code_block_extraction",
          "type": "function"
        }
      ],
      "category": {
        "category": "XPLM_DataAccess",
        "module": "Xplm Dataaccess",
        "url": "https://developer.x-plane.com/sdk/XPLMCanWriteDataRef/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPLMCanWriteDataRef\"><a href=\"/sdk/XPLMCanWriteDataRef/\">XPLMCanWriteDataRef</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API int        <a href=\"/sdk/XPLMCanWriteDataRef/\">XPLMCanWriteDataRef</a>(\n                         <a href=\"/sdk/XPLMDataRef/\">XPLMDataRef</a>          inDataRef);\n</code></pre><p>Given a dataref, this routine returns true if you can successfully set the data, false otherwise. Some datarefs are read-only.</p><p>NOTE: even if a dataref is marked writable, it may not act writable. This can happen for datarefs that X-Plane writes to on every frame of simulation. In some cases, the dataref is writable but you have to set a separate “override” dataref to 1 to stop X-Plane from writing it.</p></div></div></article>",
      "code_examples": [
        {
          "char_count": 54,
          "code": "XPLM_API intXPLMCanWriteDataRef(XPLMDataRefinDataRef);",
          "context": "XPLMCanWriteDataRef",
          "id": "example_0",
          "language": "c",
          "line_count": 1,
          "type": "snippet"
        }
      ],
      "cross_references": [],
      "markdown": "### [XPLMCanWriteDataRef](/sdk/XPLMCanWriteDataRef/)\n\n```cpp\nXPLM_API int        XPLMCanWriteDataRef(\n                         XPLMDataRef          inDataRef);\n\n```\n\nGiven a dataref, this routine returns true if you can successfully set the data,\nfalse otherwise. Some datarefs are read-only.\n\nNOTE: even if a dataref is marked writable, it may not act writable. This can\nhappen for datarefs that X-Plane writes to on every frame of simulation. In some\ncases, the dataref is writable but you have to set a separate “override” dataref\nto 1 to stop X-Plane from writing it.",
      "own_functions": [
        "XPLMCanWriteDataRef",
        "intXPLMCanWriteDataRef"
      ],
      "processing_timestamp": "2025-06-25T20:39:23.333091+00:00",
      "title": "XPLMCanWriteDataRef | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMCanWriteDataRef/"
    },
    "https://developer.x-plane.com/sdk/XPLMCheckMenuItem/": {
      "api_signatures": [
        {
          "description": "Set whether a menu item is checked. Pass in the menu ID and item index.",
          "name": "XPLMCheckMenuItem",
          "parameters": [
            {
              "full_declaration": "int                  index",
              "name": "index",
              "type": "int"
            }
          ],
          "signature": "XPLM_API voidXPLMCheckMenuItem(XPLMMenuIDinMenu,\n                         int                  index,XPLMMenuCheckinCheck);"
        },
        {
          "name": "voidXPLMCheckMenuItem",
          "signature": "XPLM_API voidXPLMCheckMenuItem(XPLMMenuIDinMenu,\n                         int                  index,XPLMMenuCheckinCheck);",
          "source": "code_block_extraction",
          "type": "function"
        }
      ],
      "category": {
        "category": "XPLM_Menus",
        "module": "Xplm Menus",
        "url": "https://developer.x-plane.com/sdk/XPLMCheckMenuItem/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPLMCheckMenuItem\"><a href=\"/sdk/XPLMCheckMenuItem/\">XPLMCheckMenuItem</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API void       <a href=\"/sdk/XPLMCheckMenuItem/\">XPLMCheckMenuItem</a>(\n                         <a href=\"/sdk/XPLMMenuID/\">XPLMMenuID</a>           inMenu,\n                         int                  index,\n                         <a href=\"/sdk/XPLMMenuCheck/\">XPLMMenuCheck</a>        inCheck);\n</code></pre><p>Set whether a menu item is checked. Pass in the menu ID and item index.</p></div></div></article>",
      "code_examples": [
        {
          "char_count": 123,
          "code": "XPLM_API voidXPLMCheckMenuItem(XPLMMenuIDinMenu,\n                         int                  index,XPLMMenuCheckinCheck);",
          "context": "XPLMCheckMenuItem",
          "id": "example_0",
          "language": "c",
          "line_count": 2,
          "type": "snippet"
        }
      ],
      "cross_references": [
        "XPLMMenuCheck"
      ],
      "markdown": "### [XPLMCheckMenuItem](/sdk/XPLMCheckMenuItem/)\n\n```cpp\nXPLM_API void       XPLMCheckMenuItem(\n                         XPLMMenuID           inMenu,\n                         int                  index,\n                         XPLMMenuCheck        inCheck);\n\n```\n\nSet whether a menu item is checked. Pass in the menu ID and item index.",
      "own_functions": [
        "XPLMCheckMenuItem",
        "voidXPLMCheckMenuItem"
      ],
      "processing_timestamp": "2025-06-25T20:39:23.887635+00:00",
      "title": "XPLMCheckMenuItem | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMCheckMenuItem/"
    },
    "https://developer.x-plane.com/sdk/XPLMCheckMenuItemState/": {
      "api_signatures": [
        {
          "description": "This routine returns whether a menu item is checked or not. A menu item’s check mark may be on or off, or a menu may not have an icon at all.",
          "name": "XPLMCheckMenuItemState",
          "parameters": [
            {
              "full_declaration": "int                  index",
              "name": "index",
              "type": "int"
            },
            {
              "full_declaration": "XPLMMenuCheck*      outCheck",
              "name": "outCheck",
              "type": "XPLMMenuCheck*"
            }
          ],
          "signature": "XPLM_API voidXPLMCheckMenuItemState(XPLMMenuIDinMenu,\n                         int                  index,XPLMMenuCheck*      outCheck);"
        },
        {
          "name": "voidXPLMCheckMenuItemState",
          "signature": "XPLM_API voidXPLMCheckMenuItemState(XPLMMenuIDinMenu,\n                         int                  index,XPLMMenuCheck*      outCheck);",
          "source": "code_block_extraction",
          "type": "function"
        }
      ],
      "category": {
        "category": "XPLM_Menus",
        "module": "Xplm Menus",
        "url": "https://developer.x-plane.com/sdk/XPLMCheckMenuItemState/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPLMCheckMenuItemState\"><a href=\"/sdk/XPLMCheckMenuItemState/\">XPLMCheckMenuItemState</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API void       <a href=\"/sdk/XPLMCheckMenuItemState/\">XPLMCheckMenuItemState</a>(\n                         <a href=\"/sdk/XPLMMenuID/\">XPLMMenuID</a>           inMenu,\n                         int                  index,\n                         <a href=\"/sdk/XPLMMenuCheck/\">XPLMMenuCheck</a> *      outCheck);\n</code></pre><p>This routine returns whether a menu item is checked or not. A menu item’s check mark may be on or off, or a menu may not have an icon at all.</p></div></div></article>",
      "code_examples": [
        {
          "char_count": 136,
          "code": "XPLM_API voidXPLMCheckMenuItemState(XPLMMenuIDinMenu,\n                         int                  index,XPLMMenuCheck*      outCheck);",
          "context": "XPLMCheckMenuItemState",
          "id": "example_0",
          "language": "c",
          "line_count": 2,
          "type": "snippet"
        }
      ],
      "cross_references": [
        "XPLMCheckMenuItem",
        "XPLMMenuCheck"
      ],
      "markdown": "### [XPLMCheckMenuItemState](/sdk/XPLMCheckMenuItemState/)\n\n```cpp\nXPLM_API void       XPLMCheckMenuItemState(\n                         XPLMMenuID           inMenu,\n                         int                  index,\n                         XPLMMenuCheck *      outCheck);\n\n```\n\nThis routine returns whether a menu item is checked or not. A menu item’s check\nmark may be on or off, or a menu may not have an icon at all.",
      "own_functions": [
        "XPLMCheckMenuItemState",
        "voidXPLMCheckMenuItemState"
      ],
      "processing_timestamp": "2025-06-25T20:39:23.881637+00:00",
      "title": "XPLMCheckMenuItemState | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMCheckMenuItemState/"
    },
    "https://developer.x-plane.com/sdk/XPLMClearAllMenuItems/": {
      "api_signatures": [
        {
          "description": "This function removes all menu items from a menu, allowing you to rebuild it. Use this function if you need to change the number of items on a menu.",
          "name": "XPLMClearAllMenuItems",
          "parameters": [],
          "signature": "XPLM_API voidXPLMClearAllMenuItems(XPLMMenuIDinMenuID);"
        },
        {
          "name": "voidXPLMClearAllMenuItems",
          "signature": "XPLM_API voidXPLMClearAllMenuItems(XPLMMenuIDinMenuID);",
          "source": "code_block_extraction",
          "type": "function"
        }
      ],
      "category": {
        "category": "XPLM_Menus",
        "module": "Xplm Menus",
        "url": "https://developer.x-plane.com/sdk/XPLMClearAllMenuItems/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPLMClearAllMenuItems\"><a href=\"/sdk/XPLMClearAllMenuItems/\">XPLMClearAllMenuItems</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API void       <a href=\"/sdk/XPLMClearAllMenuItems/\">XPLMClearAllMenuItems</a>(\n                         <a href=\"/sdk/XPLMMenuID/\">XPLMMenuID</a>           inMenuID);\n</code></pre><p>This function removes all menu items from a menu, allowing you to rebuild it. Use this function if you need to change the number of items on a menu.</p></div></div></article>",
      "code_examples": [
        {
          "char_count": 55,
          "code": "XPLM_API voidXPLMClearAllMenuItems(XPLMMenuIDinMenuID);",
          "context": "XPLMClearAllMenuItems",
          "id": "example_0",
          "language": "c",
          "line_count": 1,
          "type": "snippet"
        }
      ],
      "cross_references": [],
      "markdown": "### [XPLMClearAllMenuItems](/sdk/XPLMClearAllMenuItems/)\n\n```cpp\nXPLM_API void       XPLMClearAllMenuItems(\n                         XPLMMenuID           inMenuID);\n\n```\n\nThis function removes all menu items from a menu, allowing you to rebuild it.\nUse this function if you need to change the number of items on a menu.",
      "own_functions": [
        "XPLMClearAllMenuItems",
        "voidXPLMClearAllMenuItems"
      ],
      "processing_timestamp": "2025-06-25T20:39:23.885636+00:00",
      "title": "XPLMClearAllMenuItems | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMClearAllMenuItems/"
    },
    "https://developer.x-plane.com/sdk/XPLMClearFMSEntry/": {
      "api_signatures": [
        {
          "description": "This routine clears the given entry, potentially shortening the flight plan.",
          "name": "XPLMClearFMSEntry",
          "parameters": [
            {
              "full_declaration": "int                  inIndex",
              "name": "inIndex",
              "type": "int"
            }
          ],
          "signature": "XPLM_API voidXPLMClearFMSEntry(\n                         int                  inIndex);"
        },
        {
          "name": "voidXPLMClearFMSEntry",
          "signature": "XPLM_API voidXPLMClearFMSEntry(\n                         int                  inIndex);",
          "source": "code_block_extraction",
          "type": "function"
        }
      ],
      "category": {
        "category": "XPLM_Navigation",
        "module": "Xplm Navigation",
        "url": "https://developer.x-plane.com/sdk/XPLMClearFMSEntry/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPLMClearFMSEntry\"><a href=\"/sdk/XPLMClearFMSEntry/\">XPLMClearFMSEntry</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API void       <a href=\"/sdk/XPLMClearFMSEntry/\">XPLMClearFMSEntry</a>(\n                         int                  inIndex);\n</code></pre><p>This routine clears the given entry, potentially shortening the flight plan.</p></div></div></article>",
      "code_examples": [
        {
          "char_count": 87,
          "code": "XPLM_API voidXPLMClearFMSEntry(\n                         int                  inIndex);",
          "context": "XPLMClearFMSEntry",
          "id": "example_0",
          "language": "c",
          "line_count": 2,
          "type": "snippet"
        }
      ],
      "cross_references": [],
      "markdown": "### [XPLMClearFMSEntry](/sdk/XPLMClearFMSEntry/)\n\n```cpp\nXPLM_API void       XPLMClearFMSEntry(\n                         int                  inIndex);\n\n```\n\nThis routine clears the given entry, potentially shortening the flight plan.",
      "own_functions": [
        "XPLMClearFMSEntry",
        "voidXPLMClearFMSEntry"
      ],
      "processing_timestamp": "2025-06-25T20:39:23.947823+00:00",
      "title": "XPLMClearFMSEntry | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMClearFMSEntry/"
    },
    "https://developer.x-plane.com/sdk/XPLMClearFMSFlightPlanEntry/": {
      "api_signatures": [
        {
          "description": "This routine clears the given entry, potentially shortening the flight plan.",
          "name": "XPLMClearFMSFlightPlanEntry",
          "parameters": [
            {
              "full_declaration": "int                  inIndex",
              "name": "inIndex",
              "type": "int"
            }
          ],
          "signature": "XPLM_API voidXPLMClearFMSFlightPlanEntry(XPLMNavFlightPlaninFlightPlan,\n                         int                  inIndex);"
        },
        {
          "name": "voidXPLMClearFMSFlightPlanEntry",
          "signature": "XPLM_API voidXPLMClearFMSFlightPlanEntry(XPLMNavFlightPlaninFlightPlan,\n                         int                  inIndex);",
          "source": "code_block_extraction",
          "type": "function"
        }
      ],
      "category": {
        "category": "XPLM_Navigation",
        "module": "Xplm Navigation",
        "url": "https://developer.x-plane.com/sdk/XPLMClearFMSFlightPlanEntry/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"function XPLM410\"><h3 class=\"sdk-api-function\" id=\"XPLMClearFMSFlightPlanEntry\"><a href=\"/sdk/XPLMClearFMSFlightPlanEntry/\">XPLMClearFMSFlightPlanEntry</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API void       <a href=\"/sdk/XPLMClearFMSFlightPlanEntry/\">XPLMClearFMSFlightPlanEntry</a>(\n                         <a href=\"/sdk/XPLMNavFlightPlan/\">XPLMNavFlightPlan</a>    inFlightPlan,\n                         int                  inIndex);\n</code></pre><p>This routine clears the given entry, potentially shortening the flight plan.</p></div></div></article>",
      "code_examples": [
        {
          "char_count": 127,
          "code": "XPLM_API voidXPLMClearFMSFlightPlanEntry(XPLMNavFlightPlaninFlightPlan,\n                         int                  inIndex);",
          "context": "XPLMClearFMSFlightPlanEntry",
          "id": "example_0",
          "language": "c",
          "line_count": 2,
          "type": "snippet"
        }
      ],
      "cross_references": [
        "XPLMNavFlightPlan"
      ],
      "markdown": "### [XPLMClearFMSFlightPlanEntry](/sdk/XPLMClearFMSFlightPlanEntry/)\n\n```cpp\nXPLM_API void       XPLMClearFMSFlightPlanEntry(\n                         XPLMNavFlightPlan    inFlightPlan,\n                         int                  inIndex);\n\n```\n\nThis routine clears the given entry, potentially shortening the flight plan.",
      "own_functions": [
        "XPLMClearFMSFlightPlanEntry",
        "voidXPLMClearFMSFlightPlanEntry"
      ],
      "processing_timestamp": "2025-06-25T20:39:23.951824+00:00",
      "title": "XPLMClearFMSFlightPlanEntry | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMClearFMSFlightPlanEntry/"
    },
    "https://developer.x-plane.com/sdk/XPLMCommandBegin/": {
      "api_signatures": [
        {
          "description": "XPLMCommandBeginstarts the execution of a command, specified by its command reference. The command is “held down” untilXPLMCommandEndis called. You must balance eachXPLMCommandBegincall with anXPLMCommandEndcall.",
          "name": "XPLMCommandBegin",
          "parameters": [],
          "signature": "XPLM_API voidXPLMCommandBegin(XPLMCommandRefinCommand);"
        },
        {
          "name": "voidXPLMCommandBegin",
          "signature": "XPLM_API voidXPLMCommandBegin(XPLMCommandRefinCommand);",
          "source": "code_block_extraction",
          "type": "function"
        }
      ],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/XPLMCommandBegin/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPLMCommandBegin\"><a href=\"/sdk/XPLMCommandBegin/\">XPLMCommandBegin</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API void       <a href=\"/sdk/XPLMCommandBegin/\">XPLMCommandBegin</a>(\n                         <a href=\"/sdk/XPLMCommandRef/\">XPLMCommandRef</a>       inCommand);\n</code></pre><p><a href=\"/sdk/XPLMCommandBegin/\">XPLMCommandBegin</a>starts the execution of a command, specified by its command reference. The command is “held down” until<a href=\"/sdk/XPLMCommandEnd/\">XPLMCommandEnd</a>is called. You must balance each<a href=\"/sdk/XPLMCommandBegin/\">XPLMCommandBegin</a>call with an<a href=\"/sdk/XPLMCommandEnd/\">XPLMCommandEnd</a>call.</p></div></div></article>",
      "code_examples": [
        {
          "char_count": 55,
          "code": "XPLM_API voidXPLMCommandBegin(XPLMCommandRefinCommand);",
          "context": "XPLMCommandBegin",
          "id": "example_0",
          "language": "c",
          "line_count": 1,
          "type": "snippet"
        }
      ],
      "cross_references": [
        "XPLMCommandEnd"
      ],
      "markdown": "### [XPLMCommandBegin](/sdk/XPLMCommandBegin/)\n\n```cpp\nXPLM_API void       XPLMCommandBegin(\n                         XPLMCommandRef       inCommand);\n\n```\n\n[XPLMCommandBegin](/sdk/XPLMCommandBegin/)starts the execution of a command,\nspecified by its command reference. The command is “held down”\nuntil[XPLMCommandEnd](/sdk/XPLMCommandEnd/)is called. You must balance\neach[XPLMCommandBegin](/sdk/XPLMCommandBegin/)call with\nan[XPLMCommandEnd](/sdk/XPLMCommandEnd/)call.",
      "own_functions": [
        "XPLMCommandBegin",
        "voidXPLMCommandBegin"
      ],
      "processing_timestamp": "2025-06-25T20:39:22.115581+00:00",
      "title": "XPLMCommandBegin | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMCommandBegin/"
    },
    "https://developer.x-plane.com/sdk/XPLMCommandButtonID/": {
      "api_signatures": [],
      "category": {
        "category": "Widget_System",
        "module": "Widget System",
        "url": "https://developer.x-plane.com/sdk/XPLMCommandButtonID/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"bulkenum\"><h3 class=\"sdk-api-enum bulk\" id=\"XPLMCommandButtonID\"><a href=\"/sdk/XPLMCommandButtonID/\">XPLMCommandButtonID</a></h3><p>These are enumerations for all of the things you can do with a joystick button in X-Plane. They currently match the buttons menu in the equipment setup dialog, but these enums will be stable even if they change in X-Plane.</p><pre class=\"language-cpp\" data-manual=\"true\"><code>enum {\n          xplm_joy_nothing=0,\n          xplm_joy_start_all,\n          xplm_joy_start_0,\n          xplm_joy_start_1,\n          xplm_joy_start_2,\n          xplm_joy_start_3,\n          xplm_joy_start_4,\n          xplm_joy_start_5,\n          xplm_joy_start_6,\n          xplm_joy_start_7,\n          xplm_joy_throt_up,\n          xplm_joy_throt_dn,\n          xplm_joy_prop_up,\n          xplm_joy_prop_dn,\n          xplm_joy_mixt_up,\n          xplm_joy_mixt_dn,\n          xplm_joy_carb_tog,\n          xplm_joy_carb_on,\n          xplm_joy_carb_off,\n          xplm_joy_trev,\n          xplm_joy_trm_up,\n          xplm_joy_trm_dn,\n          xplm_joy_rot_trm_up,\n          xplm_joy_rot_trm_dn,\n          xplm_joy_rud_lft,\n          xplm_joy_rud_cntr,\n          xplm_joy_rud_rgt,\n          xplm_joy_ail_lft,\n          xplm_joy_ail_cntr,\n          xplm_joy_ail_rgt,\n          xplm_joy_B_rud_lft,\n          xplm_joy_B_rud_rgt,\n          xplm_joy_look_up,\n          xplm_joy_look_dn,\n          xplm_joy_look_lft,\n          xplm_joy_look_rgt,\n          xplm_joy_glance_l,\n          xplm_joy_glance_r,\n          xplm_joy_v_fnh,\n          xplm_joy_v_fwh,\n          xplm_joy_v_tra,\n          xplm_joy_v_twr,\n          xplm_joy_v_run,\n          xplm_joy_v_cha,\n          xplm_joy_v_fr1,\n          xplm_joy_v_fr2,\n          xplm_joy_v_spo,\n          xplm_joy_flapsup,\n          xplm_joy_flapsdn,\n          xplm_joy_vctswpfwd,\n          xplm_joy_vctswpaft,\n          xplm_joy_gear_tog,\n          xplm_joy_gear_up,\n          xplm_joy_gear_down,\n          xplm_joy_lft_brake,\n          xplm_joy_rgt_brake,\n          xplm_joy_brakesREG,\n          xplm_joy_brakesMAX,\n          xplm_joy_speedbrake,\n          xplm_joy_ott_dis,\n          xplm_joy_ott_atr,\n          xplm_joy_ott_asi,\n          xplm_joy_ott_hdg,\n          xplm_joy_ott_alt,\n          xplm_joy_ott_vvi,\n          xplm_joy_tim_start,\n          xplm_joy_tim_reset,\n          xplm_joy_ecam_up,\n          xplm_joy_ecam_dn,\n          xplm_joy_fadec,\n          xplm_joy_yaw_damp,\n          xplm_joy_art_stab,\n          xplm_joy_chute,\n          xplm_joy_JATO,\n          xplm_joy_arrest,\n          xplm_joy_jettison,\n          xplm_joy_fuel_dump,\n          xplm_joy_puffsmoke,\n          xplm_joy_prerotate,\n          xplm_joy_UL_prerot,\n          xplm_joy_UL_collec,\n          xplm_joy_TOGA,\n          xplm_joy_shutdown,\n          xplm_joy_con_atc,\n          xplm_joy_fail_now,\n          xplm_joy_pause,\n          xplm_joy_rock_up,\n          xplm_joy_rock_dn,\n          xplm_joy_rock_lft,\n          xplm_joy_rock_rgt,\n          xplm_joy_rock_for,\n          xplm_joy_rock_aft,\n          xplm_joy_idle_hilo,\n          xplm_joy_lanlights,\n          xplm_joy_max\n};\ntypedef int <a href=\"/sdk/XPLMCommandButtonID/\">XPLMCommandButtonID</a>;</code></pre></div></div></article>",
      "code_examples": [
        {
          "char_count": 2729,
          "code": "enum {\n          xplm_joy_nothing=0,\n          xplm_joy_start_all,\n          xplm_joy_start_0,\n          xplm_joy_start_1,\n          xplm_joy_start_2,\n          xplm_joy_start_3,\n          xplm_joy_start_4,\n          xplm_joy_start_5,\n          xplm_joy_start_6,\n          xplm_joy_start_7,\n          xplm_joy_throt_up,\n          xplm_joy_throt_dn,\n          xplm_joy_prop_up,\n          xplm_joy_prop_dn,\n          xplm_joy_mixt_up,\n          xplm_joy_mixt_dn,\n          xplm_joy_carb_tog,\n          xplm_joy_carb_on,\n          xplm_joy_carb_off,\n          xplm_joy_trev,\n          xplm_joy_trm_up,\n          xplm_joy_trm_dn,\n          xplm_joy_rot_trm_up,\n          xplm_joy_rot_trm_dn,\n          xplm_joy_rud_lft,\n          xplm_joy_rud_cntr,\n          xplm_joy_rud_rgt,\n          xplm_joy_ail_lft,\n          xplm_joy_ail_cntr,\n          xplm_joy_ail_rgt,\n          xplm_joy_B_rud_lft,\n          xplm_joy_B_rud_rgt,\n          xplm_joy_look_up,\n          xplm_joy_look_dn,\n          xplm_joy_look_lft,\n          xplm_joy_look_rgt,\n          xplm_joy_glance_l,\n          xplm_joy_glance_r,\n          xplm_joy_v_fnh,\n          xplm_joy_v_fwh,\n          xplm_joy_v_tra,\n          xplm_joy_v_twr,\n          xplm_joy_v_run,\n          xplm_joy_v_cha,\n          xplm_joy_v_fr1,\n          xplm_joy_v_fr2,\n          xplm_joy_v_spo,\n          xplm_joy_flapsup,\n          xplm_joy_flapsdn,\n          xplm_joy_vctswpfwd,\n          xplm_joy_vctswpaft,\n          xplm_joy_gear_tog,\n          xplm_joy_gear_up,\n          xplm_joy_gear_down,\n          xplm_joy_lft_brake,\n          xplm_joy_rgt_brake,\n          xplm_joy_brakesREG,\n          xplm_joy_brakesMAX,\n          xplm_joy_speedbrake,\n          xplm_joy_ott_dis,\n          xplm_joy_ott_atr,\n          xplm_joy_ott_asi,\n          xplm_joy_ott_hdg,\n          xplm_joy_ott_alt,\n          xplm_joy_ott_vvi,\n          xplm_joy_tim_start,\n          xplm_joy_tim_reset,\n          xplm_joy_ecam_up,\n          xplm_joy_ecam_dn,\n          xplm_joy_fadec,\n          xplm_joy_yaw_damp,\n          xplm_joy_art_stab,\n          xplm_joy_chute,\n          xplm_joy_JATO,\n          xplm_joy_arrest,\n          xplm_joy_jettison,\n          xplm_joy_fuel_dump,\n          xplm_joy_puffsmoke,\n          xplm_joy_prerotate,\n          xplm_joy_UL_prerot,\n          xplm_joy_UL_collec,\n          xplm_joy_TOGA,\n          xplm_joy_shutdown,\n          xplm_joy_con_atc,\n          xplm_joy_fail_now,\n          xplm_joy_pause,\n          xplm_joy_rock_up,\n          xplm_joy_rock_dn,\n          xplm_joy_rock_lft,\n          xplm_joy_rock_rgt,\n          xplm_joy_rock_for,\n          xplm_joy_rock_aft,\n          xplm_joy_idle_hilo,\n          xplm_joy_lanlights,\n          xplm_joy_max\n};\ntypedef intXPLMCommandButtonID;",
          "context": "These are enumerations for all of the things you can do with a joystick button in X-Plane. They currently match the buttons menu in the equipment setup dialog, but these enums will be stable even if t",
          "id": "example_0",
          "language": "c",
          "line_count": 98,
          "type": "example"
        }
      ],
      "cross_references": [],
      "markdown": "### [XPLMCommandButtonID](/sdk/XPLMCommandButtonID/)\n\nThese are enumerations for all of the things you can do with a joystick button\nin X-Plane. They currently match the buttons menu in the equipment setup dialog,\nbut these enums will be stable even if they change in X-Plane.\n\n```cpp\nenum {\n          xplm_joy_nothing=0,\n          xplm_joy_start_all,\n          xplm_joy_start_0,\n          xplm_joy_start_1,\n          xplm_joy_start_2,\n          xplm_joy_start_3,\n          xplm_joy_start_4,\n          xplm_joy_start_5,\n          xplm_joy_start_6,\n          xplm_joy_start_7,\n          xplm_joy_throt_up,\n          xplm_joy_throt_dn,\n          xplm_joy_prop_up,\n          xplm_joy_prop_dn,\n          xplm_joy_mixt_up,\n          xplm_joy_mixt_dn,\n          xplm_joy_carb_tog,\n          xplm_joy_carb_on,\n          xplm_joy_carb_off,\n          xplm_joy_trev,\n          xplm_joy_trm_up,\n          xplm_joy_trm_dn,\n          xplm_joy_rot_trm_up,\n          xplm_joy_rot_trm_dn,\n          xplm_joy_rud_lft,\n          xplm_joy_rud_cntr,\n          xplm_joy_rud_rgt,\n          xplm_joy_ail_lft,\n          xplm_joy_ail_cntr,\n          xplm_joy_ail_rgt,\n          xplm_joy_B_rud_lft,\n          xplm_joy_B_rud_rgt,\n          xplm_joy_look_up,\n          xplm_joy_look_dn,\n          xplm_joy_look_lft,\n          xplm_joy_look_rgt,\n          xplm_joy_glance_l,\n          xplm_joy_glance_r,\n          xplm_joy_v_fnh,\n          xplm_joy_v_fwh,\n          xplm_joy_v_tra,\n          xplm_joy_v_twr,\n          xplm_joy_v_run,\n          xplm_joy_v_cha,\n          xplm_joy_v_fr1,\n          xplm_joy_v_fr2,\n          xplm_joy_v_spo,\n          xplm_joy_flapsup,\n          xplm_joy_flapsdn,\n          xplm_joy_vctswpfwd,\n          xplm_joy_vctswpaft,\n          xplm_joy_gear_tog,\n          xplm_joy_gear_up,\n          xplm_joy_gear_down,\n          xplm_joy_lft_brake,\n          xplm_joy_rgt_brake,\n          xplm_joy_brakesREG,\n          xplm_joy_brakesMAX,\n          xplm_joy_speedbrake,\n          xplm_joy_ott_dis,\n          xplm_joy_ott_atr,\n          xplm_joy_ott_asi,\n          xplm_joy_ott_hdg,\n          xplm_joy_ott_alt,\n          xplm_joy_ott_vvi,\n          xplm_joy_tim_start,\n          xplm_joy_tim_reset,\n          xplm_joy_ecam_up,\n          xplm_joy_ecam_dn,\n          xplm_joy_fadec,\n          xplm_joy_yaw_damp,\n          xplm_joy_art_stab,\n          xplm_joy_chute,\n          xplm_joy_JATO,\n          xplm_joy_arrest,\n          xplm_joy_jettison,\n          xplm_joy_fuel_dump,\n          xplm_joy_puffsmoke,\n          xplm_joy_prerotate,\n          xplm_joy_UL_prerot,\n          xplm_joy_UL_collec,\n          xplm_joy_TOGA,\n          xplm_joy_shutdown,\n          xplm_joy_con_atc,\n          xplm_joy_fail_now,\n          xplm_joy_pause,\n          xplm_joy_rock_up,\n          xplm_joy_rock_dn,\n          xplm_joy_rock_lft,\n          xplm_joy_rock_rgt,\n          xplm_joy_rock_for,\n          xplm_joy_rock_aft,\n          xplm_joy_idle_hilo,\n          xplm_joy_lanlights,\n          xplm_joy_max\n};\ntypedef int XPLMCommandButtonID;\n```",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:23.026100+00:00",
      "title": "XPLMCommandButtonID | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMCommandButtonID/"
    },
    "https://developer.x-plane.com/sdk/XPLMCommandButtonPress/": {
      "api_signatures": [
        {
          "description": "This function simulates any of the actions that might be taken by pressing a joystick button. However, this lets you call the command directly rather than having to know which button is mapped where. Important: you must release each button you press. The APIs are separate so that you can ‘hold down’ a button for a fixed amount of time.",
          "name": "XPLMCommandButtonPress",
          "parameters": [],
          "signature": "XPLM_API voidXPLMCommandButtonPress(XPLMCommandButtonIDinButton);"
        },
        {
          "name": "voidXPLMCommandButtonPress",
          "signature": "XPLM_API voidXPLMCommandButtonPress(XPLMCommandButtonIDinButton);",
          "source": "code_block_extraction",
          "type": "function"
        }
      ],
      "category": {
        "category": "Widget_System",
        "module": "Widget System",
        "url": "https://developer.x-plane.com/sdk/XPLMCommandButtonPress/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPLMCommandButtonPress\"><a href=\"/sdk/XPLMCommandButtonPress/\">XPLMCommandButtonPress</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API void       <a href=\"/sdk/XPLMCommandButtonPress/\">XPLMCommandButtonPress</a>(\n                         <a href=\"/sdk/XPLMCommandButtonID/\">XPLMCommandButtonID</a>  inButton);\n</code></pre><p>This function simulates any of the actions that might be taken by pressing a joystick button. However, this lets you call the command directly rather than having to know which button is mapped where. Important: you must release each button you press. The APIs are separate so that you can ‘hold down’ a button for a fixed amount of time.</p><p>Deprecated: use<a href=\"/sdk/XPLMCommandBegin/\">XPLMCommandBegin</a>.</p></div></div></article>",
      "code_examples": [
        {
          "char_count": 65,
          "code": "XPLM_API voidXPLMCommandButtonPress(XPLMCommandButtonIDinButton);",
          "context": "XPLMCommandButtonPress",
          "id": "example_0",
          "language": "c",
          "line_count": 1,
          "type": "snippet"
        }
      ],
      "cross_references": [
        "XPLMCommandBegin"
      ],
      "markdown": "### [XPLMCommandButtonPress](/sdk/XPLMCommandButtonPress/)\n\n```cpp\nXPLM_API void       XPLMCommandButtonPress(\n                         XPLMCommandButtonID  inButton);\n\n```\n\nThis function simulates any of the actions that might be taken by pressing a\njoystick button. However, this lets you call the command directly rather than\nhaving to know which button is mapped where. Important: you must release each\nbutton you press. The APIs are separate so that you can ‘hold down’ a button for\na fixed amount of time.\n\nDeprecated: use[XPLMCommandBegin](/sdk/XPLMCommandBegin/).",
      "own_functions": [
        "XPLMCommandButtonPress",
        "voidXPLMCommandButtonPress"
      ],
      "processing_timestamp": "2025-06-25T20:39:23.031101+00:00",
      "title": "XPLMCommandButtonPress | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMCommandButtonPress/"
    },
    "https://developer.x-plane.com/sdk/XPLMCommandButtonRelease/": {
      "api_signatures": [
        {
          "description": "This function simulates any of the actions that might be taken by pressing a joystick button. SeeXPLMCommandButtonPress.",
          "name": "XPLMCommandButtonRelease",
          "parameters": [],
          "signature": "XPLM_API voidXPLMCommandButtonRelease(XPLMCommandButtonIDinButton);"
        },
        {
          "name": "voidXPLMCommandButtonRelease",
          "signature": "XPLM_API voidXPLMCommandButtonRelease(XPLMCommandButtonIDinButton);",
          "source": "code_block_extraction",
          "type": "function"
        }
      ],
      "category": {
        "category": "Widget_System",
        "module": "Widget System",
        "url": "https://developer.x-plane.com/sdk/XPLMCommandButtonRelease/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPLMCommandButtonRelease\"><a href=\"/sdk/XPLMCommandButtonRelease/\">XPLMCommandButtonRelease</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API void       <a href=\"/sdk/XPLMCommandButtonRelease/\">XPLMCommandButtonRelease</a>(\n                         <a href=\"/sdk/XPLMCommandButtonID/\">XPLMCommandButtonID</a>  inButton);\n</code></pre><p>This function simulates any of the actions that might be taken by pressing a joystick button. See<a href=\"/sdk/XPLMCommandButtonPress/\">XPLMCommandButtonPress</a>.</p><p>Deprecated: use<a href=\"/sdk/XPLMCommandEnd/\">XPLMCommandEnd</a>.</p></div></div></article>",
      "code_examples": [
        {
          "char_count": 67,
          "code": "XPLM_API voidXPLMCommandButtonRelease(XPLMCommandButtonIDinButton);",
          "context": "XPLMCommandButtonRelease",
          "id": "example_0",
          "language": "c",
          "line_count": 1,
          "type": "snippet"
        }
      ],
      "cross_references": [
        "XPLMCommandEnd",
        "XPLMCommandButtonPress"
      ],
      "markdown": "### [XPLMCommandButtonRelease](/sdk/XPLMCommandButtonRelease/)\n\n```cpp\nXPLM_API void       XPLMCommandButtonRelease(\n                         XPLMCommandButtonID  inButton);\n\n```\n\nThis function simulates any of the actions that might be taken by pressing a\njoystick button. See[XPLMCommandButtonPress](/sdk/XPLMCommandButtonPress/).\n\nDeprecated: use[XPLMCommandEnd](/sdk/XPLMCommandEnd/).",
      "own_functions": [
        "XPLMCommandButtonRelease",
        "voidXPLMCommandButtonRelease"
      ],
      "processing_timestamp": "2025-06-25T20:39:23.033100+00:00",
      "title": "XPLMCommandButtonRelease | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMCommandButtonRelease/"
    },
    "https://developer.x-plane.com/sdk/XPLMCommandCallback_f/": {
      "api_signatures": [],
      "category": {
        "category": "XPLM_Processing",
        "module": "Xplm Processing",
        "url": "https://developer.x-plane.com/sdk/XPLMCommandCallback_f/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"callback\"><h3 class=\"sdk-api-callback\" id=\"XPLMCommandCallback_f\"><a href=\"/sdk/XPLMCommandCallback_f/\">XPLMCommandCallback_f</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>typedef int (* <a href=\"/sdk/XPLMCommandCallback_f/\">XPLMCommandCallback_f</a>)(\n                         <a href=\"/sdk/XPLMCommandRef/\">XPLMCommandRef</a>       inCommand,\n                         <a href=\"/sdk/XPLMCommandPhase/\">XPLMCommandPhase</a>     inPhase,\n                         void *               inRefcon);\n</code></pre><p>A command callback is a function in your plugin that is called when a command is pressed. Your callback receives the command reference for the particular command, the phase of the command that is executing, and a reference pointer that you specify when registering the callback.</p><p>Your command handler should return 1 to let processing of the command continue to other plugins and X-Plane, or 0 to halt processing, potentially bypassing X-Plane code.</p></div></div></article>",
      "code_examples": [
        {
          "char_count": 142,
          "code": "typedef int (*XPLMCommandCallback_f)(XPLMCommandRefinCommand,XPLMCommandPhaseinPhase,\n                         void *               inRefcon);",
          "context": "XPLMCommandCallback_f",
          "id": "example_0",
          "language": "c",
          "line_count": 2,
          "type": "snippet"
        }
      ],
      "cross_references": [
        "XPLMCommandPhase"
      ],
      "markdown": "### [XPLMCommandCallback_f](/sdk/XPLMCommandCallback_f/)\n\n```cpp\ntypedef int (* XPLMCommandCallback_f)(\n                         XPLMCommandRef       inCommand,\n                         XPLMCommandPhase     inPhase,\n                         void *               inRefcon);\n\n```\n\nA command callback is a function in your plugin that is called when a command is\npressed. Your callback receives the command reference for the particular\ncommand, the phase of the command that is executing, and a reference pointer\nthat you specify when registering the callback.\n\nYour command handler should return 1 to let processing of the command continue\nto other plugins and X-Plane, or 0 to halt processing, potentially bypassing\nX-Plane code.",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:24.317101+00:00",
      "title": "XPLMCommandCallback_f | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMCommandCallback_f/"
    },
    "https://developer.x-plane.com/sdk/XPLMCommandEnd/": {
      "api_signatures": [
        {
          "description": "XPLMCommandEndends the execution of a given command that was started withXPLMCommandBegin. You must not issueXPLMCommandEndfor a command you did not begin.",
          "name": "XPLMCommandEnd",
          "parameters": [],
          "signature": "XPLM_API voidXPLMCommandEnd(XPLMCommandRefinCommand);"
        },
        {
          "name": "voidXPLMCommandEnd",
          "signature": "XPLM_API voidXPLMCommandEnd(XPLMCommandRefinCommand);",
          "source": "code_block_extraction",
          "type": "function"
        }
      ],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/XPLMCommandEnd/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPLMCommandEnd\"><a href=\"/sdk/XPLMCommandEnd/\">XPLMCommandEnd</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API void       <a href=\"/sdk/XPLMCommandEnd/\">XPLMCommandEnd</a>(\n                         <a href=\"/sdk/XPLMCommandRef/\">XPLMCommandRef</a>       inCommand);\n</code></pre><p><a href=\"/sdk/XPLMCommandEnd/\">XPLMCommandEnd</a>ends the execution of a given command that was started with<a href=\"/sdk/XPLMCommandBegin/\">XPLMCommandBegin</a>. You must not issue<a href=\"/sdk/XPLMCommandEnd/\">XPLMCommandEnd</a>for a command you did not begin.</p></div></div></article>",
      "code_examples": [
        {
          "char_count": 53,
          "code": "XPLM_API voidXPLMCommandEnd(XPLMCommandRefinCommand);",
          "context": "XPLMCommandEnd",
          "id": "example_0",
          "language": "c",
          "line_count": 1,
          "type": "snippet"
        }
      ],
      "cross_references": [
        "XPLMCommandBegin"
      ],
      "markdown": "### [XPLMCommandEnd](/sdk/XPLMCommandEnd/)\n\n```cpp\nXPLM_API void       XPLMCommandEnd(\n                         XPLMCommandRef       inCommand);\n\n```\n\n[XPLMCommandEnd](/sdk/XPLMCommandEnd/)ends the execution of a given command that\nwas started with[XPLMCommandBegin](/sdk/XPLMCommandBegin/). You must not\nissue[XPLMCommandEnd](/sdk/XPLMCommandEnd/)for a command you did not begin.",
      "own_functions": [
        "XPLMCommandEnd",
        "voidXPLMCommandEnd"
      ],
      "processing_timestamp": "2025-06-25T20:39:22.108580+00:00",
      "title": "XPLMCommandEnd | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMCommandEnd/"
    },
    "https://developer.x-plane.com/sdk/XPLMCommandKeyID/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/XPLMCommandKeyID/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"bulkenum\"><h3 class=\"sdk-api-enum bulk\" id=\"XPLMCommandKeyID\"><a href=\"/sdk/XPLMCommandKeyID/\">XPLMCommandKeyID</a></h3><p>These enums represent all the keystrokes available within X-Plane. They can be sent to X-Plane directly. For example, you can reverse thrust using these enumerations.</p><pre class=\"language-cpp\" data-manual=\"true\"><code>enum {\n          xplm_key_pause=0,\n          xplm_key_revthrust,\n          xplm_key_jettison,\n          xplm_key_brakesreg,\n          xplm_key_brakesmax,\n          xplm_key_gear,\n          xplm_key_timedn,\n          xplm_key_timeup,\n          xplm_key_fadec,\n          xplm_key_otto_dis,\n          xplm_key_otto_atr,\n          xplm_key_otto_asi,\n          xplm_key_otto_hdg,\n          xplm_key_otto_gps,\n          xplm_key_otto_lev,\n          xplm_key_otto_hnav,\n          xplm_key_otto_alt,\n          xplm_key_otto_vvi,\n          xplm_key_otto_vnav,\n          xplm_key_otto_nav1,\n          xplm_key_otto_nav2,\n          xplm_key_targ_dn,\n          xplm_key_targ_up,\n          xplm_key_hdgdn,\n          xplm_key_hdgup,\n          xplm_key_barodn,\n          xplm_key_baroup,\n          xplm_key_obs1dn,\n          xplm_key_obs1up,\n          xplm_key_obs2dn,\n          xplm_key_obs2up,\n          xplm_key_com1_1,\n          xplm_key_com1_2,\n          xplm_key_com1_3,\n          xplm_key_com1_4,\n          xplm_key_nav1_1,\n          xplm_key_nav1_2,\n          xplm_key_nav1_3,\n          xplm_key_nav1_4,\n          xplm_key_com2_1,\n          xplm_key_com2_2,\n          xplm_key_com2_3,\n          xplm_key_com2_4,\n          xplm_key_nav2_1,\n          xplm_key_nav2_2,\n          xplm_key_nav2_3,\n          xplm_key_nav2_4,\n          xplm_key_adf_1,\n          xplm_key_adf_2,\n          xplm_key_adf_3,\n          xplm_key_adf_4,\n          xplm_key_adf_5,\n          xplm_key_adf_6,\n          xplm_key_transpon_1,\n          xplm_key_transpon_2,\n          xplm_key_transpon_3,\n          xplm_key_transpon_4,\n          xplm_key_transpon_5,\n          xplm_key_transpon_6,\n          xplm_key_transpon_7,\n          xplm_key_transpon_8,\n          xplm_key_flapsup,\n          xplm_key_flapsdn,\n          xplm_key_cheatoff,\n          xplm_key_cheaton,\n          xplm_key_sbrkoff,\n          xplm_key_sbrkon,\n          xplm_key_ailtrimL,\n          xplm_key_ailtrimR,\n          xplm_key_rudtrimL,\n          xplm_key_rudtrimR,\n          xplm_key_elvtrimD,\n          xplm_key_elvtrimU,\n          xplm_key_forward,\n          xplm_key_down,\n          xplm_key_left,\n          xplm_key_right,\n          xplm_key_back,\n          xplm_key_tower,\n          xplm_key_runway,\n          xplm_key_chase,\n          xplm_key_free1,\n          xplm_key_free2,\n          xplm_key_spot,\n          xplm_key_fullscrn1,\n          xplm_key_fullscrn2,\n          xplm_key_tanspan,\n          xplm_key_smoke,\n          xplm_key_map,\n          xplm_key_zoomin,\n          xplm_key_zoomout,\n          xplm_key_cycledump,\n          xplm_key_replay,\n          xplm_key_tranID,\n          xplm_key_max\n};\ntypedef int <a href=\"/sdk/XPLMCommandKeyID/\">XPLMCommandKeyID</a>;</code></pre></div></div></article>",
      "code_examples": [
        {
          "char_count": 2675,
          "code": "enum {\n          xplm_key_pause=0,\n          xplm_key_revthrust,\n          xplm_key_jettison,\n          xplm_key_brakesreg,\n          xplm_key_brakesmax,\n          xplm_key_gear,\n          xplm_key_timedn,\n          xplm_key_timeup,\n          xplm_key_fadec,\n          xplm_key_otto_dis,\n          xplm_key_otto_atr,\n          xplm_key_otto_asi,\n          xplm_key_otto_hdg,\n          xplm_key_otto_gps,\n          xplm_key_otto_lev,\n          xplm_key_otto_hnav,\n          xplm_key_otto_alt,\n          xplm_key_otto_vvi,\n          xplm_key_otto_vnav,\n          xplm_key_otto_nav1,\n          xplm_key_otto_nav2,\n          xplm_key_targ_dn,\n          xplm_key_targ_up,\n          xplm_key_hdgdn,\n          xplm_key_hdgup,\n          xplm_key_barodn,\n          xplm_key_baroup,\n          xplm_key_obs1dn,\n          xplm_key_obs1up,\n          xplm_key_obs2dn,\n          xplm_key_obs2up,\n          xplm_key_com1_1,\n          xplm_key_com1_2,\n          xplm_key_com1_3,\n          xplm_key_com1_4,\n          xplm_key_nav1_1,\n          xplm_key_nav1_2,\n          xplm_key_nav1_3,\n          xplm_key_nav1_4,\n          xplm_key_com2_1,\n          xplm_key_com2_2,\n          xplm_key_com2_3,\n          xplm_key_com2_4,\n          xplm_key_nav2_1,\n          xplm_key_nav2_2,\n          xplm_key_nav2_3,\n          xplm_key_nav2_4,\n          xplm_key_adf_1,\n          xplm_key_adf_2,\n          xplm_key_adf_3,\n          xplm_key_adf_4,\n          xplm_key_adf_5,\n          xplm_key_adf_6,\n          xplm_key_transpon_1,\n          xplm_key_transpon_2,\n          xplm_key_transpon_3,\n          xplm_key_transpon_4,\n          xplm_key_transpon_5,\n          xplm_key_transpon_6,\n          xplm_key_transpon_7,\n          xplm_key_transpon_8,\n          xplm_key_flapsup,\n          xplm_key_flapsdn,\n          xplm_key_cheatoff,\n          xplm_key_cheaton,\n          xplm_key_sbrkoff,\n          xplm_key_sbrkon,\n          xplm_key_ailtrimL,\n          xplm_key_ailtrimR,\n          xplm_key_rudtrimL,\n          xplm_key_rudtrimR,\n          xplm_key_elvtrimD,\n          xplm_key_elvtrimU,\n          xplm_key_forward,\n          xplm_key_down,\n          xplm_key_left,\n          xplm_key_right,\n          xplm_key_back,\n          xplm_key_tower,\n          xplm_key_runway,\n          xplm_key_chase,\n          xplm_key_free1,\n          xplm_key_free2,\n          xplm_key_spot,\n          xplm_key_fullscrn1,\n          xplm_key_fullscrn2,\n          xplm_key_tanspan,\n          xplm_key_smoke,\n          xplm_key_map,\n          xplm_key_zoomin,\n          xplm_key_zoomout,\n          xplm_key_cycledump,\n          xplm_key_replay,\n          xplm_key_tranID,\n          xplm_key_max\n};\ntypedef intXPLMCommandKeyID;",
          "context": "These enums represent all the keystrokes available within X-Plane. They can be sent to X-Plane directly. For example, you can reverse thrust using these enumerations.",
          "id": "example_0",
          "language": "c",
          "line_count": 98,
          "type": "example"
        }
      ],
      "cross_references": [],
      "markdown": "### [XPLMCommandKeyID](/sdk/XPLMCommandKeyID/)\n\nThese enums represent all the keystrokes available within X-Plane. They can be\nsent to X-Plane directly. For example, you can reverse thrust using these\nenumerations.\n\n```cpp\nenum {\n          xplm_key_pause=0,\n          xplm_key_revthrust,\n          xplm_key_jettison,\n          xplm_key_brakesreg,\n          xplm_key_brakesmax,\n          xplm_key_gear,\n          xplm_key_timedn,\n          xplm_key_timeup,\n          xplm_key_fadec,\n          xplm_key_otto_dis,\n          xplm_key_otto_atr,\n          xplm_key_otto_asi,\n          xplm_key_otto_hdg,\n          xplm_key_otto_gps,\n          xplm_key_otto_lev,\n          xplm_key_otto_hnav,\n          xplm_key_otto_alt,\n          xplm_key_otto_vvi,\n          xplm_key_otto_vnav,\n          xplm_key_otto_nav1,\n          xplm_key_otto_nav2,\n          xplm_key_targ_dn,\n          xplm_key_targ_up,\n          xplm_key_hdgdn,\n          xplm_key_hdgup,\n          xplm_key_barodn,\n          xplm_key_baroup,\n          xplm_key_obs1dn,\n          xplm_key_obs1up,\n          xplm_key_obs2dn,\n          xplm_key_obs2up,\n          xplm_key_com1_1,\n          xplm_key_com1_2,\n          xplm_key_com1_3,\n          xplm_key_com1_4,\n          xplm_key_nav1_1,\n          xplm_key_nav1_2,\n          xplm_key_nav1_3,\n          xplm_key_nav1_4,\n          xplm_key_com2_1,\n          xplm_key_com2_2,\n          xplm_key_com2_3,\n          xplm_key_com2_4,\n          xplm_key_nav2_1,\n          xplm_key_nav2_2,\n          xplm_key_nav2_3,\n          xplm_key_nav2_4,\n          xplm_key_adf_1,\n          xplm_key_adf_2,\n          xplm_key_adf_3,\n          xplm_key_adf_4,\n          xplm_key_adf_5,\n          xplm_key_adf_6,\n          xplm_key_transpon_1,\n          xplm_key_transpon_2,\n          xplm_key_transpon_3,\n          xplm_key_transpon_4,\n          xplm_key_transpon_5,\n          xplm_key_transpon_6,\n          xplm_key_transpon_7,\n          xplm_key_transpon_8,\n          xplm_key_flapsup,\n          xplm_key_flapsdn,\n          xplm_key_cheatoff,\n          xplm_key_cheaton,\n          xplm_key_sbrkoff,\n          xplm_key_sbrkon,\n          xplm_key_ailtrimL,\n          xplm_key_ailtrimR,\n          xplm_key_rudtrimL,\n          xplm_key_rudtrimR,\n          xplm_key_elvtrimD,\n          xplm_key_elvtrimU,\n          xplm_key_forward,\n          xplm_key_down,\n          xplm_key_left,\n          xplm_key_right,\n          xplm_key_back,\n          xplm_key_tower,\n          xplm_key_runway,\n          xplm_key_chase,\n          xplm_key_free1,\n          xplm_key_free2,\n          xplm_key_spot,\n          xplm_key_fullscrn1,\n          xplm_key_fullscrn2,\n          xplm_key_tanspan,\n          xplm_key_smoke,\n          xplm_key_map,\n          xplm_key_zoomin,\n          xplm_key_zoomout,\n          xplm_key_cycledump,\n          xplm_key_replay,\n          xplm_key_tranID,\n          xplm_key_max\n};\ntypedef int XPLMCommandKeyID;\n```",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.119581+00:00",
      "title": "XPLMCommandKeyID | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMCommandKeyID/"
    },
    "https://developer.x-plane.com/sdk/XPLMCommandKeyStroke/": {
      "api_signatures": [
        {
          "description": "This routine simulates a command-key stroke. However, the keys are done by function, not by actual letter, so this function works even if the user has remapped their keyboard. Examples of things you might do with this include pausing the simulator.",
          "name": "XPLMCommandKeyStroke",
          "parameters": [],
          "signature": "XPLM_API voidXPLMCommandKeyStroke(XPLMCommandKeyIDinKey);"
        },
        {
          "name": "voidXPLMCommandKeyStroke",
          "signature": "XPLM_API voidXPLMCommandKeyStroke(XPLMCommandKeyIDinKey);",
          "source": "code_block_extraction",
          "type": "function"
        }
      ],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/XPLMCommandKeyStroke/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPLMCommandKeyStroke\"><a href=\"/sdk/XPLMCommandKeyStroke/\">XPLMCommandKeyStroke</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API void       <a href=\"/sdk/XPLMCommandKeyStroke/\">XPLMCommandKeyStroke</a>(\n                         <a href=\"/sdk/XPLMCommandKeyID/\">XPLMCommandKeyID</a>     inKey);\n</code></pre><p>This routine simulates a command-key stroke. However, the keys are done by function, not by actual letter, so this function works even if the user has remapped their keyboard. Examples of things you might do with this include pausing the simulator.</p><p>Deprecated: use<a href=\"/sdk/XPLMCommandOnce/\">XPLMCommandOnce</a></p></div></div></article>",
      "code_examples": [
        {
          "char_count": 57,
          "code": "XPLM_API voidXPLMCommandKeyStroke(XPLMCommandKeyIDinKey);",
          "context": "XPLMCommandKeyStroke",
          "id": "example_0",
          "language": "c",
          "line_count": 1,
          "type": "snippet"
        }
      ],
      "cross_references": [
        "XPLMCommandOnce"
      ],
      "markdown": "### [XPLMCommandKeyStroke](/sdk/XPLMCommandKeyStroke/)\n\n```cpp\nXPLM_API void       XPLMCommandKeyStroke(\n                         XPLMCommandKeyID     inKey);\n\n```\n\nThis routine simulates a command-key stroke. However, the keys are done by\nfunction, not by actual letter, so this function works even if the user has\nremapped their keyboard. Examples of things you might do with this include\npausing the simulator.\n\nDeprecated: use[XPLMCommandOnce](/sdk/XPLMCommandOnce/)",
      "own_functions": [
        "XPLMCommandKeyStroke",
        "voidXPLMCommandKeyStroke"
      ],
      "processing_timestamp": "2025-06-25T20:39:22.123579+00:00",
      "title": "XPLMCommandKeyStroke | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMCommandKeyStroke/"
    },
    "https://developer.x-plane.com/sdk/XPLMCommandOnce/": {
      "api_signatures": [
        {
          "description": "This executes a given command momentarily, that is, the command begins and ends immediately. This is the equivalent of callingXPLMCommandBegin() andXPLMCommandEnd() back to back.",
          "name": "XPLMCommandOnce",
          "parameters": [],
          "signature": "XPLM_API voidXPLMCommandOnce(XPLMCommandRefinCommand);"
        },
        {
          "name": "voidXPLMCommandOnce",
          "signature": "XPLM_API voidXPLMCommandOnce(XPLMCommandRefinCommand);",
          "source": "code_block_extraction",
          "type": "function"
        }
      ],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/XPLMCommandOnce/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPLMCommandOnce\"><a href=\"/sdk/XPLMCommandOnce/\">XPLMCommandOnce</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API void       <a href=\"/sdk/XPLMCommandOnce/\">XPLMCommandOnce</a>(\n                         <a href=\"/sdk/XPLMCommandRef/\">XPLMCommandRef</a>       inCommand);\n</code></pre><p>This executes a given command momentarily, that is, the command begins and ends immediately. This is the equivalent of calling<a href=\"/sdk/XPLMCommandBegin/\">XPLMCommandBegin</a>() and<a href=\"/sdk/XPLMCommandEnd/\">XPLMCommandEnd</a>() back to back.</p></div></div></article>",
      "code_examples": [
        {
          "char_count": 54,
          "code": "XPLM_API voidXPLMCommandOnce(XPLMCommandRefinCommand);",
          "context": "XPLMCommandOnce",
          "id": "example_0",
          "language": "c",
          "line_count": 1,
          "type": "snippet"
        }
      ],
      "cross_references": [
        "XPLMCommandBegin",
        "XPLMCommandEnd"
      ],
      "markdown": "### [XPLMCommandOnce](/sdk/XPLMCommandOnce/)\n\n```cpp\nXPLM_API void       XPLMCommandOnce(\n                         XPLMCommandRef       inCommand);\n\n```\n\nThis executes a given command momentarily, that is, the command begins and ends\nimmediately. This is the equivalent of\ncalling[XPLMCommandBegin](/sdk/XPLMCommandBegin/)()\nand[XPLMCommandEnd](/sdk/XPLMCommandEnd/)() back to back.",
      "own_functions": [
        "XPLMCommandOnce",
        "voidXPLMCommandOnce"
      ],
      "processing_timestamp": "2025-06-25T20:39:22.132582+00:00",
      "title": "XPLMCommandOnce | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMCommandOnce/"
    },
    "https://developer.x-plane.com/sdk/XPLMCommandPhase/": {
      "api_signatures": [
        {
          "name": "XPLMCommandPhase",
          "type": "enum",
          "values": [
            {
              "description": "The command is being started.",
              "name": "xplm_CommandBegin",
              "value": "\"0\""
            },
            {
              "description": "The command is continuing to execute.",
              "name": "xplm_CommandContinue",
              "value": "\"1\""
            },
            {
              "description": "The command has ended.",
              "name": "xplm_CommandEnd",
              "value": "\"2\""
            }
          ]
        }
      ],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/XPLMCommandPhase/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enum\"><h3 class=\"sdk-api-enum\" id=\"XPLMCommandPhase\"><a href=\"/sdk/XPLMCommandPhase/\">XPLMCommandPhase</a></h3><p>The phases of a command.</p><p><div class=\"enumitem\"><table><thead><tr><th>Name</th><th>Value</th><th>Description</th></tr></thead><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_CommandBegin\"><a href=\"/sdk/xplm_CommandBegin/\">xplm_CommandBegin</a></td><td>\"0\"</td><td>The command is being started.</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_CommandContinue\"><a href=\"/sdk/xplm_CommandContinue/\">xplm_CommandContinue</a></td><td>\"1\"</td><td>The command is continuing to execute.</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_CommandEnd\"><a href=\"/sdk/xplm_CommandEnd/\">xplm_CommandEnd</a></td><td>\"2\"</td><td>The command has ended.</td></tr></table></div></p></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "### [XPLMCommandPhase](/sdk/XPLMCommandPhase/)\n\nThe phases of a command.\n\n| Name | Value | Description |\n| --- | --- | --- |\n| [xplm_CommandBegin](/sdk/xplm_CommandBegin/) | \"0\" | The command is being\nstarted. |\n| [xplm_CommandContinue](/sdk/xplm_CommandContinue/) | \"1\" | The command is\ncontinuing to execute. |\n| [xplm_CommandEnd](/sdk/xplm_CommandEnd/) | \"2\" | The command has ended. |",
      "own_functions": [
        "XPLMCommandPhase"
      ],
      "processing_timestamp": "2025-06-25T20:39:22.129581+00:00",
      "title": "XPLMCommandPhase | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMCommandPhase/"
    },
    "https://developer.x-plane.com/sdk/XPLMCommandRef/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/XPLMCommandRef/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"typedef\"><h3 class=\"sdk-api-type\" id=\"XPLMCommandRef\"><a href=\"/sdk/XPLMCommandRef/\">XPLMCommandRef</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>typedef void * <a href=\"/sdk/XPLMCommandRef/\">XPLMCommandRef</a>;</code></pre><p>A command ref is an opaque identifier for an X-Plane command. Command references stay the same for the life of your plugin but not between executions of X-Plane. Command refs are used to execute commands, create commands, and create callbacks for particular commands.</p><p>Note that a command is not “owned” by a particular plugin. Since many plugins may participate in a command’s execution, the command does not go away if the plugin that created it is unloaded.</p></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "### [XPLMCommandRef](/sdk/XPLMCommandRef/)\n\n```cpp\ntypedef void * XPLMCommandRef;\n```\n\nA command ref is an opaque identifier for an X-Plane command. Command references\nstay the same for the life of your plugin but not between executions of X-Plane.\nCommand refs are used to execute commands, create commands, and create callbacks\nfor particular commands.\n\nNote that a command is not “owned” by a particular plugin. Since many plugins\nmay participate in a command’s execution, the command does not go away if the\nplugin that created it is unloaded.",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.125580+00:00",
      "title": "XPLMCommandRef | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMCommandRef/"
    },
    "https://developer.x-plane.com/sdk/XPLMControlCamera/": {
      "api_signatures": [
        {
          "description": "This function repositions the camera on the next drawing cycle. You must pass a non-null control function. Specify in inHowLong how long you’d like control (indefinitely or until a new view mode is set by the user).",
          "name": "XPLMControlCamera",
          "parameters": [
            {
              "full_declaration": "void *               inRefcon",
              "name": "inRefcon",
              "type": "void *"
            }
          ],
          "signature": "XPLM_API voidXPLMControlCamera(XPLMCameraControlDurationinHowLong,XPLMCameraControl_finControlFunc,\n                         void *               inRefcon);"
        },
        {
          "name": "voidXPLMControlCamera",
          "signature": "XPLM_API voidXPLMControlCamera(XPLMCameraControlDurationinHowLong,XPLMCameraControl_finControlFunc,\n                         void *               inRefcon);",
          "source": "code_block_extraction",
          "type": "function"
        }
      ],
      "category": {
        "category": "XPLM_Camera",
        "module": "Xplm Camera",
        "url": "https://developer.x-plane.com/sdk/XPLMControlCamera/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPLMControlCamera\"><a href=\"/sdk/XPLMControlCamera/\">XPLMControlCamera</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API void       <a href=\"/sdk/XPLMControlCamera/\">XPLMControlCamera</a>(\n                         <a href=\"/sdk/XPLMCameraControlDuration/\">XPLMCameraControlDuration</a> inHowLong,\n                         <a href=\"/sdk/XPLMCameraControl_f/\">XPLMCameraControl_f</a>  inControlFunc,\n                         void *               inRefcon);\n</code></pre><p>This function repositions the camera on the next drawing cycle. You must pass a non-null control function. Specify in inHowLong how long you’d like control (indefinitely or until a new view mode is set by the user).</p></div></div></article>",
      "code_examples": [
        {
          "char_count": 156,
          "code": "XPLM_API voidXPLMControlCamera(XPLMCameraControlDurationinHowLong,XPLMCameraControl_finControlFunc,\n                         void *               inRefcon);",
          "context": "XPLMControlCamera",
          "id": "example_0",
          "language": "c",
          "line_count": 2,
          "type": "snippet"
        }
      ],
      "cross_references": [
        "XPLMCameraControlDuration",
        "XPLMCamera"
      ],
      "markdown": "### [XPLMControlCamera](/sdk/XPLMControlCamera/)\n\n```cpp\nXPLM_API void       XPLMControlCamera(\n                         XPLMCameraControlDuration inHowLong,\n                         XPLMCameraControl_f  inControlFunc,\n                         void *               inRefcon);\n\n```\n\nThis function repositions the camera on the next drawing cycle. You must pass a\nnon-null control function. Specify in inHowLong how long you’d like control\n(indefinitely or until a new view mode is set by the user).",
      "own_functions": [
        "XPLMControlCamera",
        "voidXPLMControlCamera"
      ],
      "processing_timestamp": "2025-06-25T20:39:23.319095+00:00",
      "title": "XPLMControlCamera | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMControlCamera/"
    },
    "https://developer.x-plane.com/sdk/XPLMCountAircraft/": {
      "api_signatures": [
        {
          "description": "This function returns the number of aircraft X-Plane is capable of having, as well as the number of aircraft that are currently active. These numbers count the user’s aircraft. It can also return the plugin that is currently controlling aircraft. In X-Plane 7, this routine reflects the number of aircraft the user has enabled in the rendering options window.",
          "name": "XPLMCountAircraft",
          "parameters": [
            {
              "full_declaration": "int *                outTotalAircraft",
              "name": "outTotalAircraft",
              "type": "int *"
            },
            {
              "full_declaration": "int *                outActiveAircraft",
              "name": "outActiveAircraft",
              "type": "int *"
            },
            {
              "full_declaration": "XPLMPluginID*       outController",
              "name": "outController",
              "type": "XPLMPluginID*"
            }
          ],
          "signature": "XPLM_API voidXPLMCountAircraft(\n                         int *                outTotalAircraft,\n                         int *                outActiveAircraft,XPLMPluginID*       outController);"
        },
        {
          "name": "voidXPLMCountAircraft",
          "signature": "XPLM_API voidXPLMCountAircraft(\n                         int *                outTotalAircraft,\n                         int *                outActiveAircraft,XPLMPluginID*       outController);",
          "source": "code_block_extraction",
          "type": "function"
        }
      ],
      "category": {
        "category": "XPLM_Planes",
        "module": "Xplm Planes",
        "url": "https://developer.x-plane.com/sdk/XPLMCountAircraft/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPLMCountAircraft\"><a href=\"/sdk/XPLMCountAircraft/\">XPLMCountAircraft</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API void       <a href=\"/sdk/XPLMCountAircraft/\">XPLMCountAircraft</a>(\n                         int *                outTotalAircraft,\n                         int *                outActiveAircraft,\n                         <a href=\"/sdk/XPLMPluginID/\">XPLMPluginID</a> *       outController);\n</code></pre><p>This function returns the number of aircraft X-Plane is capable of having, as well as the number of aircraft that are currently active. These numbers count the user’s aircraft. It can also return the plugin that is currently controlling aircraft. In X-Plane 7, this routine reflects the number of aircraft the user has enabled in the rendering options window.</p></div></div></article>",
      "code_examples": [
        {
          "char_count": 195,
          "code": "XPLM_API voidXPLMCountAircraft(\n                         int *                outTotalAircraft,\n                         int *                outActiveAircraft,XPLMPluginID*       outController);",
          "context": "XPLMCountAircraft",
          "id": "example_0",
          "language": "c",
          "line_count": 3,
          "type": "snippet"
        }
      ],
      "cross_references": [
        "XPLMPlugin"
      ],
      "markdown": "### [XPLMCountAircraft](/sdk/XPLMCountAircraft/)\n\n```cpp\nXPLM_API void       XPLMCountAircraft(\n                         int *                outTotalAircraft,\n                         int *                outActiveAircraft,\n                         XPLMPluginID *       outController);\n\n```\n\nThis function returns the number of aircraft X-Plane is capable of having, as\nwell as the number of aircraft that are currently active. These numbers count\nthe user’s aircraft. It can also return the plugin that is currently controlling\naircraft. In X-Plane 7, this routine reflects the number of aircraft the user\nhas enabled in the rendering options window.",
      "own_functions": [
        "XPLMCountAircraft",
        "voidXPLMCountAircraft"
      ],
      "processing_timestamp": "2025-06-25T20:39:24.132186+00:00",
      "title": "XPLMCountAircraft | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMCountAircraft/"
    },
    "https://developer.x-plane.com/sdk/XPLMCountDataRefs/": {
      "api_signatures": [
        {
          "description": "Returns the total number of datarefs that have been registered in X-Plane.",
          "name": "XPLMCountDataRefs",
          "parameters": [],
          "signature": "XPLM_API intXPLMCountDataRefs(void);"
        },
        {
          "name": "intXPLMCountDataRefs",
          "signature": "XPLM_API intXPLMCountDataRefs(void);",
          "source": "code_block_extraction",
          "type": "function"
        }
      ],
      "category": {
        "category": "XPLM_DataAccess",
        "module": "Xplm Dataaccess",
        "url": "https://developer.x-plane.com/sdk/XPLMCountDataRefs/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"function XPLM400\"><h3 class=\"sdk-api-function\" id=\"XPLMCountDataRefs\"><a href=\"/sdk/XPLMCountDataRefs/\">XPLMCountDataRefs</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API int        <a href=\"/sdk/XPLMCountDataRefs/\">XPLMCountDataRefs</a>(void);\n</code></pre><p>Returns the total number of datarefs that have been registered in X-Plane.</p></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "### [XPLMCountDataRefs](/sdk/XPLMCountDataRefs/)\n\n```cpp\nXPLM_API int        XPLMCountDataRefs(void);\n\n```\n\nReturns the total number of datarefs that have been registered in X-Plane.",
      "own_functions": [
        "XPLMCountDataRefs",
        "intXPLMCountDataRefs"
      ],
      "processing_timestamp": "2025-06-25T20:39:23.336091+00:00",
      "title": "XPLMCountDataRefs | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMCountDataRefs/"
    },
    "https://developer.x-plane.com/sdk/XPLMCountFMSEntries/": {
      "api_signatures": [
        {
          "description": "This routine returns the number of entries in the FMS.",
          "name": "XPLMCountFMSEntries",
          "parameters": [],
          "signature": "XPLM_API intXPLMCountFMSEntries(void);"
        },
        {
          "name": "intXPLMCountFMSEntries",
          "signature": "XPLM_API intXPLMCountFMSEntries(void);",
          "source": "code_block_extraction",
          "type": "function"
        }
      ],
      "category": {
        "category": "XPLM_Navigation",
        "module": "Xplm Navigation",
        "url": "https://developer.x-plane.com/sdk/XPLMCountFMSEntries/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPLMCountFMSEntries\"><a href=\"/sdk/XPLMCountFMSEntries/\">XPLMCountFMSEntries</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API int        <a href=\"/sdk/XPLMCountFMSEntries/\">XPLMCountFMSEntries</a>(void);\n</code></pre><p>This routine returns the number of entries in the FMS.</p></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "### [XPLMCountFMSEntries](/sdk/XPLMCountFMSEntries/)\n\n```cpp\nXPLM_API int        XPLMCountFMSEntries(void);\n\n```\n\nThis routine returns the number of entries in the FMS.",
      "own_functions": [
        "XPLMCountFMSEntries",
        "intXPLMCountFMSEntries"
      ],
      "processing_timestamp": "2025-06-25T20:39:23.952824+00:00",
      "title": "XPLMCountFMSEntries | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMCountFMSEntries/"
    },
    "https://developer.x-plane.com/sdk/XPLMCountFMSFlightPlanEntries/": {
      "api_signatures": [
        {
          "description": "This routine returns the number of entries in the FMS.",
          "name": "XPLMCountFMSFlightPlanEntries",
          "parameters": [],
          "signature": "XPLM_API intXPLMCountFMSFlightPlanEntries(XPLMNavFlightPlaninFlightPlan);"
        },
        {
          "name": "intXPLMCountFMSFlightPlanEntries",
          "signature": "XPLM_API intXPLMCountFMSFlightPlanEntries(XPLMNavFlightPlaninFlightPlan);",
          "source": "code_block_extraction",
          "type": "function"
        }
      ],
      "category": {
        "category": "XPLM_Navigation",
        "module": "Xplm Navigation",
        "url": "https://developer.x-plane.com/sdk/XPLMCountFMSFlightPlanEntries/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"function XPLM410\"><h3 class=\"sdk-api-function\" id=\"XPLMCountFMSFlightPlanEntries\"><a href=\"/sdk/XPLMCountFMSFlightPlanEntries/\">XPLMCountFMSFlightPlanEntries</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API int        <a href=\"/sdk/XPLMCountFMSFlightPlanEntries/\">XPLMCountFMSFlightPlanEntries</a>(\n                         <a href=\"/sdk/XPLMNavFlightPlan/\">XPLMNavFlightPlan</a>    inFlightPlan);\n</code></pre><p>This routine returns the number of entries in the FMS.</p></div></div></article>",
      "code_examples": [
        {
          "char_count": 73,
          "code": "XPLM_API intXPLMCountFMSFlightPlanEntries(XPLMNavFlightPlaninFlightPlan);",
          "context": "XPLMCountFMSFlightPlanEntries",
          "id": "example_0",
          "language": "c",
          "line_count": 1,
          "type": "snippet"
        }
      ],
      "cross_references": [
        "XPLMNavFlightPlan"
      ],
      "markdown": "### [XPLMCountFMSFlightPlanEntries](/sdk/XPLMCountFMSFlightPlanEntries/)\n\n```cpp\nXPLM_API int        XPLMCountFMSFlightPlanEntries(\n                         XPLMNavFlightPlan    inFlightPlan);\n\n```\n\nThis routine returns the number of entries in the FMS.",
      "own_functions": [
        "XPLMCountFMSFlightPlanEntries",
        "intXPLMCountFMSFlightPlanEntries"
      ],
      "processing_timestamp": "2025-06-25T20:39:23.958331+00:00",
      "title": "XPLMCountFMSFlightPlanEntries | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMCountFMSFlightPlanEntries/"
    },
    "https://developer.x-plane.com/sdk/XPLMCountHotKeys/": {
      "api_signatures": [
        {
          "description": "Returns the number of current hot keys.",
          "name": "XPLMCountHotKeys",
          "parameters": [],
          "signature": "XPLM_API intXPLMCountHotKeys(void);"
        },
        {
          "name": "intXPLMCountHotKeys",
          "signature": "XPLM_API intXPLMCountHotKeys(void);",
          "source": "code_block_extraction",
          "type": "function"
        }
      ],
      "category": {
        "category": "XPLM_Utilities",
        "module": "Xplm Utilities",
        "url": "https://developer.x-plane.com/sdk/XPLMCountHotKeys/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPLMCountHotKeys\"><a href=\"/sdk/XPLMCountHotKeys/\">XPLMCountHotKeys</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API int        <a href=\"/sdk/XPLMCountHotKeys/\">XPLMCountHotKeys</a>(void);\n</code></pre><p>Returns the number of current hot keys.</p></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "### [XPLMCountHotKeys](/sdk/XPLMCountHotKeys/)\n\n```cpp\nXPLM_API int        XPLMCountHotKeys(void);\n\n```\n\nReturns the number of current hot keys.",
      "own_functions": [
        "XPLMCountHotKeys",
        "intXPLMCountHotKeys"
      ],
      "processing_timestamp": "2025-06-25T20:39:24.499619+00:00",
      "title": "XPLMCountHotKeys | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMCountHotKeys/"
    },
    "https://developer.x-plane.com/sdk/XPLMCountPlugins/": {
      "api_signatures": [
        {
          "description": "This routine returns the total number of plug-ins that are loaded, both disabled and enabled.",
          "name": "XPLMCountPlugins",
          "parameters": [],
          "signature": "XPLM_API intXPLMCountPlugins(void);"
        },
        {
          "name": "intXPLMCountPlugins",
          "signature": "XPLM_API intXPLMCountPlugins(void);",
          "source": "code_block_extraction",
          "type": "function"
        }
      ],
      "category": {
        "category": "XPLM_Plugin",
        "module": "Xplm Plugin",
        "url": "https://developer.x-plane.com/sdk/XPLMCountPlugins/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPLMCountPlugins\"><a href=\"/sdk/XPLMCountPlugins/\">XPLMCountPlugins</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API int        <a href=\"/sdk/XPLMCountPlugins/\">XPLMCountPlugins</a>(void);\n</code></pre><p>This routine returns the total number of plug-ins that are loaded, both disabled and enabled.</p></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "### [XPLMCountPlugins](/sdk/XPLMCountPlugins/)\n\n```cpp\nXPLM_API int        XPLMCountPlugins(void);\n\n```\n\nThis routine returns the total number of plug-ins that are loaded, both disabled\nand enabled.",
      "own_functions": [
        "XPLMCountPlugins",
        "intXPLMCountPlugins"
      ],
      "processing_timestamp": "2025-06-25T20:39:24.190542+00:00",
      "title": "XPLMCountPlugins | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMCountPlugins/"
    },
    "https://developer.x-plane.com/sdk/XPLMCreateAvionicsEx/": {
      "api_signatures": [
        {
          "description": "Creates a new cockpit device to be used in the 3D cockpit. You can call this at any time: if an aircraft referencing your device is loaded before your plugin, the simulator will make sure to retroactively map your display into it.",
          "name": "XPLMCreateAvionicsEx",
          "parameters": [
            {
              "full_declaration": "XPLMCreateAvionics_t* inParams",
              "name": "inParams",
              "type": "XPLMCreateAvionics_t*"
            }
          ],
          "signature": "XPLM_APIXPLMAvionicsIDXPLMCreateAvionicsEx(XPLMCreateAvionics_t* inParams);"
        }
      ],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/XPLMCreateAvionicsEx/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"function XPLM410\"><h3 class=\"sdk-api-function\" id=\"XPLMCreateAvionicsEx\"><a href=\"/sdk/XPLMCreateAvionicsEx/\">XPLMCreateAvionicsEx</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API <a href=\"/sdk/XPLMAvionicsID/\">XPLMAvionicsID</a> <a href=\"/sdk/XPLMCreateAvionicsEx/\">XPLMCreateAvionicsEx</a>(\n                         <a href=\"/sdk/XPLMCreateAvionics_t/\">XPLMCreateAvionics_t</a> * inParams);\n</code></pre><p>Creates a new cockpit device to be used in the 3D cockpit. You can call this at any time: if an aircraft referencing your device is loaded before your plugin, the simulator will make sure to retroactively map your display into it.</p><pre><code>        When you are done with the device, and at least before your plugin is unloaded, you should destroy the device using <a href=\"/sdk/XPLMDestroyAvionics/\">XPLMDestroyAvionics</a>().\n</code></pre></div></div></article>",
      "code_examples": [
        {
          "char_count": 75,
          "code": "XPLM_APIXPLMAvionicsIDXPLMCreateAvionicsEx(XPLMCreateAvionics_t* inParams);",
          "context": "XPLMCreateAvionicsEx",
          "id": "example_0",
          "language": "c",
          "line_count": 1,
          "type": "snippet"
        },
        {
          "char_count": 137,
          "code": "When you are done with the device, and at least before your plugin is unloaded, you should destroy the device usingXPLMDestroyAvionics().",
          "context": "Creates a new cockpit device to be used in the 3D cockpit. You can call this at any time: if an aircraft referencing your device is loaded before your plugin, the simulator will make sure to retroacti",
          "id": "example_1",
          "language": "c",
          "line_count": 1,
          "type": "snippet"
        }
      ],
      "cross_references": [
        "XPLMDestroyAvionics"
      ],
      "markdown": "### [XPLMCreateAvionicsEx](/sdk/XPLMCreateAvionicsEx/)\n\n```cpp\nXPLM_API XPLMAvionicsID XPLMCreateAvionicsEx(\n                         XPLMCreateAvionics_t * inParams);\n\n```\n\nCreates a new cockpit device to be used in the 3D cockpit. You can call this at\nany time: if an aircraft referencing your device is loaded before your plugin,\nthe simulator will make sure to retroactively map your display into it.\n\n```cpp\n        When you are done with the device, and at least before your plugin is unloaded, you should destroy the device using XPLMDestroyAvionics().\n\n```",
      "own_functions": [
        "XPLMCreateAvionicsEx"
      ],
      "processing_timestamp": "2025-06-25T20:39:22.121582+00:00",
      "title": "XPLMCreateAvionicsEx | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMCreateAvionicsEx/"
    },
    "https://developer.x-plane.com/sdk/XPLMCreateAvionics_t/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/XPLMCreateAvionics_t/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"struct XPLM410\"><h3 class=\"sdk-api-struct\" id=\"XPLMCreateAvionics_t\"><a href=\"/sdk/XPLMCreateAvionics_t/\">XPLMCreateAvionics_t</a></h3><p>The<a href=\"/sdk/XPLMCreateAvionics_t/\">XPLMCreateAvionics_t</a>structure defines all of the parameters used to generate your own glass cockpit device by using<a href=\"/sdk/XPLMCreateAvionicsEx/\">XPLMCreateAvionicsEx</a>(). The structure will be expanded in future SDK APIs to include more features. Always set the structSize member to the size of your struct in bytes!</p><pre class=\"language-cpp\" data-manual=\"true\"><code>typedef struct {\n     // Used to inform <a href=\"/sdk/XPLMCreateAvionicsEx/\">XPLMCreateAvionicsEx</a>() of the SDK version you compiled against; should always be set to sizeof(<a href=\"/sdk/XPLMCreateAvionics_t/\">XPLMCreateAvionics_t</a>)\n     int                       structSize;\n     // Width of the device's screen in pixels.\n     int                       screenWidth;\n     // Height of the device's screen in pixels.\n     int                       screenHeight;\n     // Width of the bezel around your device's screen for 2D pop-ups.\n     int                       bezelWidth;\n     // Height of the bezel around your device's screen for 2D pop-ups.\n     int                       bezelHeight;\n     // The screen's lateral offset into the bezel for 2D pop-ups.\n     int                       screenOffsetX;\n     // The screen's vertical offset into the bezel for 2D pop-ups.\n     int                       screenOffsetY;\n     // If set to true (1), X-Plane won't call your plugin to re-render the device's screen every frame. Instead, you should tell X-Plane you want to refresh your screen with <a href=\"/sdk/XPLMAvionicsNeedsDrawing/\">XPLMAvionicsNeedsDrawing</a>(), and X-Plane will call you before rendering the next simulator frame.\n     int                       drawOnDemand;\n     // The draw callback you will use to draw the 2D-popup bezel. This is called only when the popup window is visible, and X-Plane is about to draw the bezel in it.\n     <a href=\"/sdk/XPLMAvionicsBezelCallback_f/\">XPLMAvionicsBezelCallback_f</a> bezelDrawCallback;\n     // The draw callback you will be using to draw into the device's screen framebuffer.\n     <a href=\"/sdk/XPLMAvionicsScreenCallback_f/\">XPLMAvionicsScreenCallback_f</a> drawCallback;\n     // The mouse click callback that is called when the user clicks onto your bezel.\n     <a href=\"/sdk/XPLMAvionicsMouse_f/\">XPLMAvionicsMouse_f</a>       bezelClickCallback;\n     // The mouse click callback that is called when the user clicks onto your bezel.\n     <a href=\"/sdk/XPLMAvionicsMouse_f/\">XPLMAvionicsMouse_f</a>       bezelRightClickCallback;\n     // The callback that is called when the users uses the scroll wheel over your avionics' bezel.\n     <a href=\"/sdk/XPLMAvionicsMouseWheel_f/\">XPLMAvionicsMouseWheel_f</a>  bezelScrollCallback;\n     // The callback that lets you determine what cursor should be shown when the mouse is over your device's bezel.\n     <a href=\"/sdk/XPLMAvionicsCursor_f/\">XPLMAvionicsCursor_f</a>      bezelCursorCallback;\n     // The mouse click callback that is called when the user clicks onto your screen.\n     <a href=\"/sdk/XPLMAvionicsMouse_f/\">XPLMAvionicsMouse_f</a>       screenTouchCallback;\n     // The right mouse click callback that is called when the user clicks onto your screen.\n     <a href=\"/sdk/XPLMAvionicsMouse_f/\">XPLMAvionicsMouse_f</a>       screenRightTouchCallback;\n     // The callback that is called when the users uses the scroll wheel over your avionics' screen.\n     <a href=\"/sdk/XPLMAvionicsMouseWheel_f/\">XPLMAvionicsMouseWheel_f</a>  screenScrollCallback;\n     // The callback that lets you determine what cursor should be shown when the mouse is over your device's screen.\n     <a href=\"/sdk/XPLMAvionicsCursor_f/\">XPLMAvionicsCursor_f</a>      screenCursorCallback;\n     // The key callback that is called when the user types in your popup.\n     <a href=\"/sdk/XPLMAvionicsKeyboard_f/\">XPLMAvionicsKeyboard_f</a>    keyboardCallback;\n     // The callback that is called to determine the absolute brightness of the device's screen. Set to NULL to use X-Plane's default behaviour.\n     <a href=\"/sdk/XPLMAvionicsBrightness_f/\">XPLMAvionicsBrightness_f</a>  brightnessCallback;\n     // A null-terminated string of maximum 64 characters to uniquely identify your cockpit device. This must be unique (you cannot re-use an ID that X-Plane or another plugin provides), and it must not contain spaces. This is the string the OBJ file must reference when marking polygons with ATTR_cockpit_device. The string is copied when you call <a href=\"/sdk/XPLMCreateAvionicsEx/\">XPLMCreateAvionicsEx</a>, so you don't need to hold this string in memory after the call.\n     char *                    deviceID;\n     // A null-terminated string to give a user-readable name to your device, which can be presented in UI dialogs.\n     char *                    deviceName;\n     // A reference which will be passed into your draw and mouse callbacks. Use this to pass information to yourself as needed.\n     void *                    refcon;\n} <a href=\"/sdk/XPLMCreateAvionics_t/\">XPLMCreateAvionics_t</a>;</code></pre></div></div></article>",
      "code_examples": [
        {
          "char_count": 3749,
          "code": "typedef struct {\n     // Used to informXPLMCreateAvionicsEx() of the SDK version you compiled against; should always be set to sizeof(XPLMCreateAvionics_t)\n     int                       structSize;\n     // Width of the device's screen in pixels.\n     int                       screenWidth;\n     // Height of the device's screen in pixels.\n     int                       screenHeight;\n     // Width of the bezel around your device's screen for 2D pop-ups.\n     int                       bezelWidth;\n     // Height of the bezel around your device's screen for 2D pop-ups.\n     int                       bezelHeight;\n     // The screen's lateral offset into the bezel for 2D pop-ups.\n     int                       screenOffsetX;\n     // The screen's vertical offset into the bezel for 2D pop-ups.\n     int                       screenOffsetY;\n     // If set to true (1), X-Plane won't call your plugin to re-render the device's screen every frame. Instead, you should tell X-Plane you want to refresh your screen withXPLMAvionicsNeedsDrawing(), and X-Plane will call you before rendering the next simulator frame.\n     int                       drawOnDemand;\n     // The draw callback you will use to draw the 2D-popup bezel. This is called only when the popup window is visible, and X-Plane is about to draw the bezel in it.XPLMAvionicsBezelCallback_fbezelDrawCallback;\n     // The draw callback you will be using to draw into the device's screen framebuffer.XPLMAvionicsScreenCallback_fdrawCallback;\n     // The mouse click callback that is called when the user clicks onto your bezel.XPLMAvionicsMouse_fbezelClickCallback;\n     // The mouse click callback that is called when the user clicks onto your bezel.XPLMAvionicsMouse_fbezelRightClickCallback;\n     // The callback that is called when the users uses the scroll wheel over your avionics' bezel.XPLMAvionicsMouseWheel_fbezelScrollCallback;\n     // The callback that lets you determine what cursor should be shown when the mouse is over your device's bezel.XPLMAvionicsCursor_fbezelCursorCallback;\n     // The mouse click callback that is called when the user clicks onto your screen.XPLMAvionicsMouse_fscreenTouchCallback;\n     // The right mouse click callback that is called when the user clicks onto your screen.XPLMAvionicsMouse_fscreenRightTouchCallback;\n     // The callback that is called when the users uses the scroll wheel over your avionics' screen.XPLMAvionicsMouseWheel_fscreenScrollCallback;\n     // The callback that lets you determine what cursor should be shown when the mouse is over your device's screen.XPLMAvionicsCursor_fscreenCursorCallback;\n     // The key callback that is called when the user types in your popup.XPLMAvionicsKeyboard_fkeyboardCallback;\n     // The callback that is called to determine the absolute brightness of the device's screen. Set to NULL to use X-Plane's default behaviour.XPLMAvionicsBrightness_fbrightnessCallback;\n     // A null-terminated string of maximum 64 characters to uniquely identify your cockpit device. This must be unique (you cannot re-use an ID that X-Plane or another plugin provides), and it must not contain spaces. This is the string the OBJ file must reference when marking polygons with ATTR_cockpit_device. The string is copied when you callXPLMCreateAvionicsEx, so you don't need to hold this string in memory after the call.\n     char *                    deviceID;\n     // A null-terminated string to give a user-readable name to your device, which can be presented in UI dialogs.\n     char *                    deviceName;\n     // A reference which will be passed into your draw and mouse callbacks. Use this to pass information to yourself as needed.\n     void *                    refcon;\n}XPLMCreateAvionics_t;",
          "context": "TheXPLMCreateAvionics_tstructure defines all of the parameters used to generate your own glass cockpit device by usingXPLMCreateAvionicsEx(). The structure will be expanded in future SDK APIs to inclu",
          "id": "example_0",
          "language": "c",
          "line_count": 36,
          "type": "example"
        }
      ],
      "cross_references": [
        "XPLMAvionicsNeedsDrawing",
        "XPLMCreateAvionicsEx"
      ],
      "markdown": "### [XPLMCreateAvionics_t](/sdk/XPLMCreateAvionics_t/)\n\nThe[XPLMCreateAvionics_t](/sdk/XPLMCreateAvionics_t/)structure defines all of\nthe parameters used to generate your own glass cockpit device by\nusing[XPLMCreateAvionicsEx](/sdk/XPLMCreateAvionicsEx/)(). The structure will be\nexpanded in future SDK APIs to include more features. Always set the structSize\nmember to the size of your struct in bytes!\n\n```cpp\ntypedef struct {\n     // Used to inform XPLMCreateAvionicsEx() of the SDK version you compiled against; should always be set to sizeof(XPLMCreateAvionics_t)\n     int                       structSize;\n     // Width of the device's screen in pixels.\n     int                       screenWidth;\n     // Height of the device's screen in pixels.\n     int                       screenHeight;\n     // Width of the bezel around your device's screen for 2D pop-ups.\n     int                       bezelWidth;\n     // Height of the bezel around your device's screen for 2D pop-ups.\n     int                       bezelHeight;\n     // The screen's lateral offset into the bezel for 2D pop-ups.\n     int                       screenOffsetX;\n     // The screen's vertical offset into the bezel for 2D pop-ups.\n     int                       screenOffsetY;\n     // If set to true (1), X-Plane won't call your plugin to re-render the device's screen every frame. Instead, you should tell X-Plane you want to refresh your screen with XPLMAvionicsNeedsDrawing(), and X-Plane will call you before rendering the next simulator frame.\n     int                       drawOnDemand;\n     // The draw callback you will use to draw the 2D-popup bezel. This is called only when the popup window is visible, and X-Plane is about to draw the bezel in it.\n     XPLMAvionicsBezelCallback_f bezelDrawCallback;\n     // The draw callback you will be using to draw into the device's screen framebuffer.\n     XPLMAvionicsScreenCallback_f drawCallback;\n     // The mouse click callback that is called when the user clicks onto your bezel.\n     XPLMAvionicsMouse_f       bezelClickCallback;\n     // The mouse click callback that is called when the user clicks onto your bezel.\n     XPLMAvionicsMouse_f       bezelRightClickCallback;\n     // The callback that is called when the users uses the scroll wheel over your avionics' bezel.\n     XPLMAvionicsMouseWheel_f  bezelScrollCallback;\n     // The callback that lets you determine what cursor should be shown when the mouse is over your device's bezel.\n     XPLMAvionicsCursor_f      bezelCursorCallback;\n     // The mouse click callback that is called when the user clicks onto your screen.\n     XPLMAvionicsMouse_f       screenTouchCallback;\n     // The right mouse click callback that is called when the user clicks onto your screen.\n     XPLMAvionicsMouse_f       screenRightTouchCallback;\n     // The callback that is called when the users uses the scroll wheel over your avionics' screen.\n     XPLMAvionicsMouseWheel_f  screenScrollCallback;\n     // The callback that lets you determine what cursor should be shown when the mouse is over your device's screen.\n     XPLMAvionicsCursor_f      screenCursorCallback;\n     // The key callback that is called when the user types in your popup.\n     XPLMAvionicsKeyboard_f    keyboardCallback;\n     // The callback that is called to determine the absolute brightness of the device's screen. Set to NULL to use X-Plane's default behaviour.\n     XPLMAvionicsBrightness_f  brightnessCallback;\n     // A null-terminated string of maximum 64 characters to uniquely identify your cockpit device. This must be unique (you cannot re-use an ID that X-Plane or another plugin provides), and it must not contain spaces. This is the string the OBJ file must reference when marking polygons with ATTR_cockpit_device. The string is copied when you call XPLMCreateAvionicsEx, so you don't need to hold this string in memory after the call.\n     char *                    deviceID;\n     // A null-terminated string to give a user-readable name to your device, which can be presented in UI dialogs.\n     char *                    deviceName;\n     // A reference which will be passed into your draw and mouse callbacks. Use this to pass information to yourself as needed.\n     void *                    refcon;\n} XPLMCreateAvionics_t;\n```",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.136666+00:00",
      "title": "XPLMCreateAvionics_t | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMCreateAvionics_t/"
    },
    "https://developer.x-plane.com/sdk/XPLMCreateCommand/": {
      "api_signatures": [
        {
          "description": "XPLMCreateCommandcreates a new command for a given string. If the command already exists, the existing command reference is returned. The description may appear in user interface contexts, such as the joystick configuration screen.",
          "name": "XPLMCreateCommand",
          "parameters": [
            {
              "full_declaration": "const char *         inName",
              "name": "inName",
              "type": "const char *"
            },
            {
              "full_declaration": "const char *         inDescription",
              "name": "inDescription",
              "type": "const char *"
            }
          ],
          "signature": "XPLM_APIXPLMCommandRefXPLMCreateCommand(\n                         const char *         inName,\n                         const char *         inDescription);"
        }
      ],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/XPLMCreateCommand/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPLMCreateCommand\"><a href=\"/sdk/XPLMCreateCommand/\">XPLMCreateCommand</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API <a href=\"/sdk/XPLMCommandRef/\">XPLMCommandRef</a> <a href=\"/sdk/XPLMCreateCommand/\">XPLMCreateCommand</a>(\n                         const char *         inName,\n                         const char *         inDescription);\n</code></pre><p><a href=\"/sdk/XPLMCreateCommand/\">XPLMCreateCommand</a>creates a new command for a given string. If the command already exists, the existing command reference is returned. The description may appear in user interface contexts, such as the joystick configuration screen.</p></div></div></article>",
      "code_examples": [
        {
          "char_count": 156,
          "code": "XPLM_APIXPLMCommandRefXPLMCreateCommand(\n                         const char *         inName,\n                         const char *         inDescription);",
          "context": "XPLMCreateCommand",
          "id": "example_0",
          "language": "c",
          "line_count": 3,
          "type": "snippet"
        }
      ],
      "cross_references": [],
      "markdown": "### [XPLMCreateCommand](/sdk/XPLMCreateCommand/)\n\n```cpp\nXPLM_API XPLMCommandRef XPLMCreateCommand(\n                         const char *         inName,\n                         const char *         inDescription);\n\n```\n\n[XPLMCreateCommand](/sdk/XPLMCreateCommand/)creates a new command for a given\nstring. If the command already exists, the existing command reference is\nreturned. The description may appear in user interface contexts, such as the\njoystick configuration screen.",
      "own_functions": [
        "XPLMCreateCommand"
      ],
      "processing_timestamp": "2025-06-25T20:39:22.143696+00:00",
      "title": "XPLMCreateCommand | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMCreateCommand/"
    },
    "https://developer.x-plane.com/sdk/XPLMCreateFlightLoop/": {
      "api_signatures": [
        {
          "description": "This routine creates a flight loop callback and returns its ID. The flight loop callback is created using the input param struct, and is inited to be unscheduled.",
          "name": "XPLMCreateFlightLoop",
          "parameters": [
            {
              "full_declaration": "XPLMCreateFlightLoop_t* inParams",
              "name": "inParams",
              "type": "XPLMCreateFlightLoop_t*"
            }
          ],
          "signature": "XPLM_APIXPLMFlightLoopIDXPLMCreateFlightLoop(XPLMCreateFlightLoop_t* inParams);"
        }
      ],
      "category": {
        "category": "XPLM_Processing",
        "module": "Xplm Processing",
        "url": "https://developer.x-plane.com/sdk/XPLMCreateFlightLoop/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"function XPLM210\"><h3 class=\"sdk-api-function\" id=\"XPLMCreateFlightLoop\"><a href=\"/sdk/XPLMCreateFlightLoop/\">XPLMCreateFlightLoop</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API <a href=\"/sdk/XPLMFlightLoopID/\">XPLMFlightLoopID</a> <a href=\"/sdk/XPLMCreateFlightLoop/\">XPLMCreateFlightLoop</a>(\n                         <a href=\"/sdk/XPLMCreateFlightLoop_t/\">XPLMCreateFlightLoop_t</a> * inParams);\n</code></pre><p>This routine creates a flight loop callback and returns its ID. The flight loop callback is created using the input param struct, and is inited to be unscheduled.</p></div></div></article>",
      "code_examples": [
        {
          "char_count": 79,
          "code": "XPLM_APIXPLMFlightLoopIDXPLMCreateFlightLoop(XPLMCreateFlightLoop_t* inParams);",
          "context": "XPLMCreateFlightLoop",
          "id": "example_0",
          "language": "c",
          "line_count": 1,
          "type": "snippet"
        }
      ],
      "cross_references": [],
      "markdown": "### [XPLMCreateFlightLoop](/sdk/XPLMCreateFlightLoop/)\n\n```cpp\nXPLM_API XPLMFlightLoopID XPLMCreateFlightLoop(\n                         XPLMCreateFlightLoop_t * inParams);\n\n```\n\nThis routine creates a flight loop callback and returns its ID. The flight loop\ncallback is created using the input param struct, and is inited to be\nunscheduled.",
      "own_functions": [
        "XPLMCreateFlightLoop"
      ],
      "processing_timestamp": "2025-06-25T20:39:24.315102+00:00",
      "title": "XPLMCreateFlightLoop | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMCreateFlightLoop/"
    },
    "https://developer.x-plane.com/sdk/XPLMCreateFlightLoop_t/": {
      "api_signatures": [],
      "category": {
        "category": "XPLM_Processing",
        "module": "Xplm Processing",
        "url": "https://developer.x-plane.com/sdk/XPLMCreateFlightLoop_t/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"struct XPLM210\"><h3 class=\"sdk-api-struct\" id=\"XPLMCreateFlightLoop_t\"><a href=\"/sdk/XPLMCreateFlightLoop_t/\">XPLMCreateFlightLoop_t</a></h3><p><a href=\"/sdk/XPLMCreateFlightLoop_t/\">XPLMCreateFlightLoop_t</a>contains the parameters to create a new flight loop callback. The structure may be expanded in future SDKs - always set structSize to the size of your structure in bytes.</p><pre class=\"language-cpp\" data-manual=\"true\"><code>typedef struct {\n     int                       structSize;\n     <a href=\"/sdk/XPLMFlightLoopPhaseType/\">XPLMFlightLoopPhaseType</a>   phase;\n     <a href=\"/sdk/XPLMFlightLoop_f/\">XPLMFlightLoop_f</a>          callbackFunc;\n     void *                    refcon;\n} <a href=\"/sdk/XPLMCreateFlightLoop_t/\">XPLMCreateFlightLoop_t</a>;</code></pre></div></div></article>",
      "code_examples": [
        {
          "char_count": 181,
          "code": "typedef struct {\n     int                       structSize;XPLMFlightLoopPhaseTypephase;XPLMFlightLoop_fcallbackFunc;\n     void *                    refcon;\n}XPLMCreateFlightLoop_t;",
          "context": "XPLMCreateFlightLoop_tcontains the parameters to create a new flight loop callback. The structure may be expanded in future SDKs - always set structSize to the size of your structure in bytes.",
          "id": "example_0",
          "language": "c",
          "line_count": 4,
          "type": "snippet"
        }
      ],
      "cross_references": [
        "XPLMCreateFlightLoop",
        "XPLMFlightLoopPhaseType"
      ],
      "markdown": "### [XPLMCreateFlightLoop_t](/sdk/XPLMCreateFlightLoop_t/)\n\n[XPLMCreateFlightLoop_t](/sdk/XPLMCreateFlightLoop_t/)contains the parameters to\ncreate a new flight loop callback. The structure may be expanded in future SDKs\n- always set structSize to the size of your structure in bytes.\n\n```cpp\ntypedef struct {\n     int                       structSize;\n     XPLMFlightLoopPhaseType   phase;\n     XPLMFlightLoop_f          callbackFunc;\n     void *                    refcon;\n} XPLMCreateFlightLoop_t;\n```",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:24.325105+00:00",
      "title": "XPLMCreateFlightLoop_t | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMCreateFlightLoop_t/"
    },
    "https://developer.x-plane.com/sdk/XPLMCreateInstance/": {
      "api_signatures": [
        {
          "description": "XPLMCreateInstancecreates a new instance, managed by your plug-in, and returns a handle to the instance. A few important requirements:",
          "name": "XPLMCreateInstance",
          "parameters": [
            {
              "full_declaration": "const char **        datarefs",
              "name": "datarefs",
              "type": "const char **"
            }
          ],
          "signature": "XPLM_APIXPLMInstanceRefXPLMCreateInstance(XPLMObjectRefobj,\n                         const char **        datarefs);"
        }
      ],
      "category": {
        "category": "XPLM_Instance",
        "module": "Xplm Instance",
        "url": "https://developer.x-plane.com/sdk/XPLMCreateInstance/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPLMCreateInstance\"><a href=\"/sdk/XPLMCreateInstance/\">XPLMCreateInstance</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API <a href=\"/sdk/XPLMInstanceRef/\">XPLMInstanceRef</a> <a href=\"/sdk/XPLMCreateInstance/\">XPLMCreateInstance</a>(\n                         <a href=\"/sdk/XPLMObjectRef/\">XPLMObjectRef</a>        obj,\n                         const char **        datarefs);\n</code></pre><p><a href=\"/sdk/XPLMCreateInstance/\">XPLMCreateInstance</a>creates a new instance, managed by your plug-in, and returns a handle to the instance. A few important requirements:</p><ul><li><p>The object passed in must be fully loaded and returned from the XPLM before you can create your instance; you cannot pass a null obj ref, nor can you change the ref later.</p></li><li><p>If you use any custom datarefs in your object, they must be registered before the object is loaded. This is true even if their data will be provided via the instance dataref list.</p></li><li><p>The instance dataref array must be a valid pointer to a null-terminated array. That is, if you do not want any datarefs, you must pass a pointer to a one-element array containing a null item. You cannot pass null for the array itself.</p></li></ul></div></div></article>",
      "code_examples": [
        {
          "char_count": 116,
          "code": "XPLM_APIXPLMInstanceRefXPLMCreateInstance(XPLMObjectRefobj,\n                         const char **        datarefs);",
          "context": "XPLMCreateInstance",
          "id": "example_0",
          "language": "c",
          "line_count": 2,
          "type": "snippet"
        }
      ],
      "cross_references": [
        "XPLMInstance"
      ],
      "markdown": "### [XPLMCreateInstance](/sdk/XPLMCreateInstance/)\n\n```cpp\nXPLM_API XPLMInstanceRef XPLMCreateInstance(\n                         XPLMObjectRef        obj,\n                         const char **        datarefs);\n\n```\n\n[XPLMCreateInstance](/sdk/XPLMCreateInstance/)creates a new instance, managed by\nyour plug-in, and returns a handle to the instance. A few important\nrequirements:\n\n- The object passed in must be fully loaded and returned from the XPLM before you\n  can create your instance; you cannot pass a null obj ref, nor can you change the\n  ref later.\n- If you use any custom datarefs in your object, they must be registered before\n  the object is loaded. This is true even if their data will be provided via the\n  instance dataref list.\n- The instance dataref array must be a valid pointer to a null-terminated array.\n  That is, if you do not want any datarefs, you must pass a pointer to a\n  one-element array containing a null item. You cannot pass null for the array\n  itself.",
      "own_functions": [
        "XPLMCreateInstance"
      ],
      "processing_timestamp": "2025-06-25T20:39:23.727407+00:00",
      "title": "XPLMCreateInstance | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMCreateInstance/"
    },
    "https://developer.x-plane.com/sdk/XPLMCreateMapLayer/": {
      "api_signatures": [
        {
          "description": "This routine creates a new map layer. You pass in anXPLMCreateMapLayer_tstructure with all of the fields defined. You must set the structSize of the structure to the size of the actual structure you used.",
          "name": "XPLMCreateMapLayer",
          "parameters": [
            {
              "full_declaration": "XPLMCreateMapLayer_t* inParams",
              "name": "inParams",
              "type": "XPLMCreateMapLayer_t*"
            }
          ],
          "signature": "XPLM_APIXPLMMapLayerIDXPLMCreateMapLayer(XPLMCreateMapLayer_t* inParams);"
        }
      ],
      "category": {
        "category": "XPLM_Map",
        "module": "Xplm Map",
        "url": "https://developer.x-plane.com/sdk/XPLMCreateMapLayer/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPLMCreateMapLayer\"><a href=\"/sdk/XPLMCreateMapLayer/\">XPLMCreateMapLayer</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API <a href=\"/sdk/XPLMMapLayerID/\">XPLMMapLayerID</a> <a href=\"/sdk/XPLMCreateMapLayer/\">XPLMCreateMapLayer</a>(\n                         <a href=\"/sdk/XPLMCreateMapLayer_t/\">XPLMCreateMapLayer_t</a> * inParams);\n</code></pre><p>This routine creates a new map layer. You pass in an<a href=\"/sdk/XPLMCreateMapLayer_t/\">XPLMCreateMapLayer_t</a>structure with all of the fields defined. You must set the structSize of the structure to the size of the actual structure you used.</p><p>Returns NULL if the layer creation failed. This happens most frequently because the map you specified in your<a href=\"/sdk/XPLMCreateMapLayer_t/\">XPLMCreateMapLayer_t</a>::mapToCreateLayerIn field doesn’t exist (that is, if<a href=\"/sdk/XPLMMapExists/\">XPLMMapExists</a>() returns 0 for the specified map). You can use<a href=\"/sdk/XPLMRegisterMapCreationHook/\">XPLMRegisterMapCreationHook</a>() to get a notification each time a new map is opened in X-Plane, at which time you can create layers in it.</p></div></div></article>",
      "code_examples": [
        {
          "char_count": 73,
          "code": "XPLM_APIXPLMMapLayerIDXPLMCreateMapLayer(XPLMCreateMapLayer_t* inParams);",
          "context": "XPLMCreateMapLayer",
          "id": "example_0",
          "language": "c",
          "line_count": 1,
          "type": "snippet"
        }
      ],
      "cross_references": [
        "XPLMMap",
        "XPLMRegisterMapCreationHook",
        "XPLMMapExists"
      ],
      "markdown": "### [XPLMCreateMapLayer](/sdk/XPLMCreateMapLayer/)\n\n```cpp\nXPLM_API XPLMMapLayerID XPLMCreateMapLayer(\n                         XPLMCreateMapLayer_t * inParams);\n\n```\n\nThis routine creates a new map layer. You pass in\nan[XPLMCreateMapLayer_t](/sdk/XPLMCreateMapLayer_t/)structure with all of the\nfields defined. You must set the structSize of the structure to the size of the\nactual structure you used.\n\nReturns NULL if the layer creation failed. This happens most frequently because\nthe map you specified in\nyour[XPLMCreateMapLayer_t](/sdk/XPLMCreateMapLayer_t/)::mapToCreateLayerIn field\ndoesn’t exist (that is, if[XPLMMapExists](/sdk/XPLMMapExists/)() returns 0 for\nthe specified map). You can\nuse[XPLMRegisterMapCreationHook](/sdk/XPLMRegisterMapCreationHook/)() to get a\nnotification each time a new map is opened in X-Plane, at which time you can\ncreate layers in it.",
      "own_functions": [
        "XPLMCreateMapLayer"
      ],
      "processing_timestamp": "2025-06-25T20:39:23.769753+00:00",
      "title": "XPLMCreateMapLayer | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMCreateMapLayer/"
    },
    "https://developer.x-plane.com/sdk/XPLMCreateMapLayer_t/": {
      "api_signatures": [],
      "category": {
        "category": "XPLM_Map",
        "module": "Xplm Map",
        "url": "https://developer.x-plane.com/sdk/XPLMCreateMapLayer_t/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"struct\"><h3 class=\"sdk-api-struct\" id=\"XPLMCreateMapLayer_t\"><a href=\"/sdk/XPLMCreateMapLayer_t/\">XPLMCreateMapLayer_t</a></h3><p>This structure defines all of the parameters used to create a map layer using<a href=\"/sdk/XPLMCreateMapLayer/\">XPLMCreateMapLayer</a>. The structure will be expanded in future SDK APIs to include more features. Always set the structSize member to the size of your struct in bytes!</p><p>Each layer must be associated with exactly one map instance in X-Plane. That map, and that map alone, will call your callbacks. Likewise, when that map is deleted, your layer will be as well.</p><pre class=\"language-cpp\" data-manual=\"true\"><code>typedef struct {\n     // Used to inform <a href=\"/sdk/XPLMCreateMapLayer/\">XPLMCreateMapLayer</a>() of the SDK version you compiled against; should always be set to sizeof(<a href=\"/sdk/XPLMCreateMapLayer_t/\">XPLMCreateMapLayer_t</a>)\n     int                       structSize;\n     // Globally unique string identifying the map you want this layer to appear in. As of XPLM300, this is limited to one of <a href=\"/sdk/XPLM_MAP_USER_INTERFACE/\">XPLM_MAP_USER_INTERFACE</a> or <a href=\"/sdk/XPLM_MAP_IOS/\">XPLM_MAP_IOS</a>\n     const char *              mapToCreateLayerIn;\n     // The type of layer you are creating, used to determine draw order (all plugin-created markings layers are drawn above all plugin-created fill layers)\n     <a href=\"/sdk/XPLMMapLayerType/\">XPLMMapLayerType</a>          layerType;\n     // Optional callback to inform you this layer is being deleted (due to its owning map being destroyed)\n     <a href=\"/sdk/XPLMMapWillBeDeletedCallback_f/\">XPLMMapWillBeDeletedCallback_f</a> willBeDeletedCallback;\n     // Optional callback you want to use to prepare your draw cache when the map bounds change (set to NULL if you don't want this callback)\n     <a href=\"/sdk/XPLMMapPrepareCacheCallback_f/\">XPLMMapPrepareCacheCallback_f</a> prepCacheCallback;\n     // Optional callback you want to use for arbitrary OpenGL drawing, which goes beneath all icons in the map's layering system (set to NULL if you don't want this callback)\n     <a href=\"/sdk/XPLMMapDrawingCallback_f/\">XPLMMapDrawingCallback_f</a>  drawCallback;\n     // Optional callback you want to use for drawing icons, which go above all built-in X-Plane icons (except the aircraft) in the map's layering system (set to NULL if you don't want this callback)\n     <a href=\"/sdk/XPLMMapIconDrawingCallback_f/\">XPLMMapIconDrawingCallback_f</a> iconCallback;\n     // Optional callback you want to use for drawing map labels, which go above all built-in X-Plane icons and labels (except those of aircraft) in the map's layering system (set to NULL if you don't want this callback)\n     <a href=\"/sdk/XPLMMapLabelDrawingCallback_f/\">XPLMMapLabelDrawingCallback_f</a> labelCallback;\n     // True if you want a checkbox to be created in the map UI to toggle this layer on and off; false if the layer should simply always be enabled\n     int                       showUiToggle;\n     // Short label to use for this layer in the user interface\n     const char *              layerName;\n     // A reference to arbitrary data that will be passed to your callbacks\n     void *                    refcon;\n} <a href=\"/sdk/XPLMCreateMapLayer_t/\">XPLMCreateMapLayer_t</a>;</code></pre></div></div></article>",
      "code_examples": [
        {
          "char_count": 2091,
          "code": "typedef struct {\n     // Used to informXPLMCreateMapLayer() of the SDK version you compiled against; should always be set to sizeof(XPLMCreateMapLayer_t)\n     int                       structSize;\n     // Globally unique string identifying the map you want this layer to appear in. As of XPLM300, this is limited to one ofXPLM_MAP_USER_INTERFACEorXPLM_MAP_IOSconst char *              mapToCreateLayerIn;\n     // The type of layer you are creating, used to determine draw order (all plugin-created markings layers are drawn above all plugin-created fill layers)XPLMMapLayerTypelayerType;\n     // Optional callback to inform you this layer is being deleted (due to its owning map being destroyed)XPLMMapWillBeDeletedCallback_fwillBeDeletedCallback;\n     // Optional callback you want to use to prepare your draw cache when the map bounds change (set to NULL if you don't want this callback)XPLMMapPrepareCacheCallback_fprepCacheCallback;\n     // Optional callback you want to use for arbitrary OpenGL drawing, which goes beneath all icons in the map's layering system (set to NULL if you don't want this callback)XPLMMapDrawingCallback_fdrawCallback;\n     // Optional callback you want to use for drawing icons, which go above all built-in X-Plane icons (except the aircraft) in the map's layering system (set to NULL if you don't want this callback)XPLMMapIconDrawingCallback_ficonCallback;\n     // Optional callback you want to use for drawing map labels, which go above all built-in X-Plane icons and labels (except those of aircraft) in the map's layering system (set to NULL if you don't want this callback)XPLMMapLabelDrawingCallback_flabelCallback;\n     // True if you want a checkbox to be created in the map UI to toggle this layer on and off; false if the layer should simply always be enabled\n     int                       showUiToggle;\n     // Short label to use for this layer in the user interface\n     const char *              layerName;\n     // A reference to arbitrary data that will be passed to your callbacks\n     void *                    refcon;\n}XPLMCreateMapLayer_t;",
          "context": "Each layer must be associated with exactly one map instance in X-Plane. That map, and that map alone, will call your callbacks. Likewise, when that map is deleted, your layer will be as well.",
          "id": "example_0",
          "language": "c",
          "line_count": 17,
          "type": "example"
        }
      ],
      "cross_references": [
        "XPLMCreateMapLayer",
        "XPLMMapLayerType",
        "XPLMMap"
      ],
      "markdown": "### [XPLMCreateMapLayer_t](/sdk/XPLMCreateMapLayer_t/)\n\nThis structure defines all of the parameters used to create a map layer\nusing[XPLMCreateMapLayer](/sdk/XPLMCreateMapLayer/). The structure will be\nexpanded in future SDK APIs to include more features. Always set the structSize\nmember to the size of your struct in bytes!\n\nEach layer must be associated with exactly one map instance in X-Plane. That\nmap, and that map alone, will call your callbacks. Likewise, when that map is\ndeleted, your layer will be as well.\n\n```cpp\ntypedef struct {\n     // Used to inform XPLMCreateMapLayer() of the SDK version you compiled against; should always be set to sizeof(XPLMCreateMapLayer_t)\n     int                       structSize;\n     // Globally unique string identifying the map you want this layer to appear in. As of XPLM300, this is limited to one of XPLM_MAP_USER_INTERFACE or XPLM_MAP_IOS\n     const char *              mapToCreateLayerIn;\n     // The type of layer you are creating, used to determine draw order (all plugin-created markings layers are drawn above all plugin-created fill layers)\n     XPLMMapLayerType          layerType;\n     // Optional callback to inform you this layer is being deleted (due to its owning map being destroyed)\n     XPLMMapWillBeDeletedCallback_f willBeDeletedCallback;\n     // Optional callback you want to use to prepare your draw cache when the map bounds change (set to NULL if you don't want this callback)\n     XPLMMapPrepareCacheCallback_f prepCacheCallback;\n     // Optional callback you want to use for arbitrary OpenGL drawing, which goes beneath all icons in the map's layering system (set to NULL if you don't want this callback)\n     XPLMMapDrawingCallback_f  drawCallback;\n     // Optional callback you want to use for drawing icons, which go above all built-in X-Plane icons (except the aircraft) in the map's layering system (set to NULL if you don't want this callback)\n     XPLMMapIconDrawingCallback_f iconCallback;\n     // Optional callback you want to use for drawing map labels, which go above all built-in X-Plane icons and labels (except those of aircraft) in the map's layering system (set to NULL if you don't want this callback)\n     XPLMMapLabelDrawingCallback_f labelCallback;\n     // True if you want a checkbox to be created in the map UI to toggle this layer on and off; false if the layer should simply always be enabled\n     int                       showUiToggle;\n     // Short label to use for this layer in the user interface\n     const char *              layerName;\n     // A reference to arbitrary data that will be passed to your callbacks\n     void *                    refcon;\n} XPLMCreateMapLayer_t;\n```",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:23.778823+00:00",
      "title": "XPLMCreateMapLayer_t | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMCreateMapLayer_t/"
    },
    "https://developer.x-plane.com/sdk/XPLMCreateMenu/": {
      "api_signatures": [
        {
          "description": "This function creates a new menu and returns its ID. It returns NULL if the menu cannot be created. Pass in a parent menu ID and an item index to create a submenu, or NULL for the parent menu to put the menu in the menu bar. The menu’s name is only used if the menu is in the menubar. You also pass a handler function and a menu reference value. Pass NULL for the handler if you do not need callbacks from the menu (for example, if it only contains submenus).",
          "name": "XPLMCreateMenu",
          "parameters": [
            {
              "full_declaration": "const char *         inName",
              "name": "inName",
              "type": "const char *"
            },
            {
              "full_declaration": "int                  inParentItem",
              "name": "inParentItem",
              "type": "int"
            },
            {
              "full_declaration": "void *               inMenuRef",
              "name": "inMenuRef",
              "type": "void *"
            }
          ],
          "signature": "XPLM_APIXPLMMenuIDXPLMCreateMenu(\n                         const char *         inName,XPLMMenuIDinParentMenu,\n                         int                  inParentItem,XPLMMenuHandler_finHandler,\n                         void *               inMenuRef);"
        }
      ],
      "category": {
        "category": "XPLM_Menus",
        "module": "Xplm Menus",
        "url": "https://developer.x-plane.com/sdk/XPLMCreateMenu/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPLMCreateMenu\"><a href=\"/sdk/XPLMCreateMenu/\">XPLMCreateMenu</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API <a href=\"/sdk/XPLMMenuID/\">XPLMMenuID</a> <a href=\"/sdk/XPLMCreateMenu/\">XPLMCreateMenu</a>(\n                         const char *         inName,\n                         <a href=\"/sdk/XPLMMenuID/\">XPLMMenuID</a>           inParentMenu,\n                         int                  inParentItem,\n                         <a href=\"/sdk/XPLMMenuHandler_f/\">XPLMMenuHandler_f</a>    inHandler,\n                         void *               inMenuRef);\n</code></pre><p>This function creates a new menu and returns its ID. It returns NULL if the menu cannot be created. Pass in a parent menu ID and an item index to create a submenu, or NULL for the parent menu to put the menu in the menu bar. The menu’s name is only used if the menu is in the menubar. You also pass a handler function and a menu reference value. Pass NULL for the handler if you do not need callbacks from the menu (for example, if it only contains submenus).</p><p>Important: you must pass a valid, non-empty menu title even if the menu is a submenu where the title is not visible.</p></div></div></article>",
      "code_examples": [
        {
          "char_count": 255,
          "code": "XPLM_APIXPLMMenuIDXPLMCreateMenu(\n                         const char *         inName,XPLMMenuIDinParentMenu,\n                         int                  inParentItem,XPLMMenuHandler_finHandler,\n                         void *               inMenuRef);",
          "context": "XPLMCreateMenu",
          "id": "example_0",
          "language": "c",
          "line_count": 4,
          "type": "snippet"
        }
      ],
      "cross_references": [],
      "markdown": "### [XPLMCreateMenu](/sdk/XPLMCreateMenu/)\n\n```cpp\nXPLM_API XPLMMenuID XPLMCreateMenu(\n                         const char *         inName,\n                         XPLMMenuID           inParentMenu,\n                         int                  inParentItem,\n                         XPLMMenuHandler_f    inHandler,\n                         void *               inMenuRef);\n\n```\n\nThis function creates a new menu and returns its ID. It returns NULL if the menu\ncannot be created. Pass in a parent menu ID and an item index to create a\nsubmenu, or NULL for the parent menu to put the menu in the menu bar. The menu’s\nname is only used if the menu is in the menubar. You also pass a handler\nfunction and a menu reference value. Pass NULL for the handler if you do not\nneed callbacks from the menu (for example, if it only contains submenus).\n\nImportant: you must pass a valid, non-empty menu title even if the menu is a\nsubmenu where the title is not visible.",
      "own_functions": [
        "XPLMCreateMenu"
      ],
      "processing_timestamp": "2025-06-25T20:39:23.890636+00:00",
      "title": "XPLMCreateMenu | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMCreateMenu/"
    },
    "https://developer.x-plane.com/sdk/XPLMCreateProbe/": {
      "api_signatures": [
        {
          "description": "Creates a new probe object of a given type and returns.",
          "name": "XPLMCreateProbe",
          "parameters": [],
          "signature": "XPLM_APIXPLMProbeRefXPLMCreateProbe(XPLMProbeTypeinProbeType);"
        }
      ],
      "category": {
        "category": "XPLM_Scenery",
        "module": "Xplm Scenery",
        "url": "https://developer.x-plane.com/sdk/XPLMCreateProbe/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPLMCreateProbe\"><a href=\"/sdk/XPLMCreateProbe/\">XPLMCreateProbe</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API <a href=\"/sdk/XPLMProbeRef/\">XPLMProbeRef</a> <a href=\"/sdk/XPLMCreateProbe/\">XPLMCreateProbe</a>(\n                         <a href=\"/sdk/XPLMProbeType/\">XPLMProbeType</a>        inProbeType);\n</code></pre><p>Creates a new probe object of a given type and returns.</p></div></div></article>",
      "code_examples": [
        {
          "char_count": 62,
          "code": "XPLM_APIXPLMProbeRefXPLMCreateProbe(XPLMProbeTypeinProbeType);",
          "context": "XPLMCreateProbe",
          "id": "example_0",
          "language": "c",
          "line_count": 1,
          "type": "snippet"
        }
      ],
      "cross_references": [
        "XPLMProbeType"
      ],
      "markdown": "### [XPLMCreateProbe](/sdk/XPLMCreateProbe/)\n\n```cpp\nXPLM_API XPLMProbeRef XPLMCreateProbe(\n                         XPLMProbeType        inProbeType);\n\n```\n\nCreates a new probe object of a given type and returns.",
      "own_functions": [
        "XPLMCreateProbe"
      ],
      "processing_timestamp": "2025-06-25T20:39:24.374047+00:00",
      "title": "XPLMCreateProbe | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMCreateProbe/"
    },
    "https://developer.x-plane.com/sdk/XPLMCreateWindow/": {
      "api_signatures": [
        {
          "description": "Deprecated as of XPLM300.",
          "name": "XPLMCreateWindow",
          "parameters": [
            {
              "full_declaration": "int                  inLeft",
              "name": "inLeft",
              "type": "int"
            },
            {
              "full_declaration": "int                  inTop",
              "name": "inTop",
              "type": "int"
            },
            {
              "full_declaration": "int                  inRight",
              "name": "inRight",
              "type": "int"
            },
            {
              "full_declaration": "int                  inBottom",
              "name": "inBottom",
              "type": "int"
            },
            {
              "full_declaration": "int                  inIsVisible",
              "name": "inIsVisible",
              "type": "int"
            },
            {
              "full_declaration": "void *               inRefcon",
              "name": "inRefcon",
              "type": "void *"
            }
          ],
          "signature": "XPLM_APIXPLMWindowIDXPLMCreateWindow(\n                         int                  inLeft,\n                         int                  inTop,\n                         int                  inRight,\n                         int                  inBottom,\n                         int                  inIsVisible,XPLMDrawWindow_finDrawCallback,XPLMHandleKey_finKeyCallback,XPLMHandleMouseClick_finMouseCallback,\n                         void *               inRefcon);"
        }
      ],
      "category": {
        "category": "XPLM_Display",
        "module": "Xplm Display",
        "url": "https://developer.x-plane.com/sdk/XPLMCreateWindow/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPLMCreateWindow\"><a href=\"/sdk/XPLMCreateWindow/\">XPLMCreateWindow</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API <a href=\"/sdk/XPLMWindowID/\">XPLMWindowID</a> <a href=\"/sdk/XPLMCreateWindow/\">XPLMCreateWindow</a>(\n                         int                  inLeft,\n                         int                  inTop,\n                         int                  inRight,\n                         int                  inBottom,\n                         int                  inIsVisible,\n                         <a href=\"/sdk/XPLMDrawWindow_f/\">XPLMDrawWindow_f</a>     inDrawCallback,\n                         <a href=\"/sdk/XPLMHandleKey_f/\">XPLMHandleKey_f</a>      inKeyCallback,\n                         <a href=\"/sdk/XPLMHandleMouseClick_f/\">XPLMHandleMouseClick_f</a> inMouseCallback,\n                         void *               inRefcon);\n</code></pre><p>Deprecated as of XPLM300.</p><p>This routine creates a new legacy window. Unlike modern windows (created via<a href=\"/sdk/XPLMCreateWindowEx/\">XPLMCreateWindowEx</a>()), legacy windows do not have access to X-Plane 11 features like automatic scaling for high-DPI screens, native window styles, or support for being “popped out” into first-class operating system windows.</p><p>Pass in the dimensions and offsets to the window’s bottom left corner from the bottom left of the screen. You can specify whether the window is initially visible or not. Also, you pass in three callbacks to run the window and a refcon. This function returns a window ID you can use to refer to the new window.</p><p>NOTE: Legacy windows do not have “frames”; you are responsible for drawing the background and frame of the window. Higher level libraries have routines which make this easy.</p></div></div></article>",
      "code_examples": [
        {
          "char_count": 469,
          "code": "XPLM_APIXPLMWindowIDXPLMCreateWindow(\n                         int                  inLeft,\n                         int                  inTop,\n                         int                  inRight,\n                         int                  inBottom,\n                         int                  inIsVisible,XPLMDrawWindow_finDrawCallback,XPLMHandleKey_finKeyCallback,XPLMHandleMouseClick_finMouseCallback,\n                         void *               inRefcon);",
          "context": "XPLMCreateWindow",
          "id": "example_0",
          "language": "c",
          "line_count": 7,
          "type": "snippet"
        }
      ],
      "cross_references": [
        "XPLMCreateWindowEx"
      ],
      "markdown": "### [XPLMCreateWindow](/sdk/XPLMCreateWindow/)\n\n```cpp\nXPLM_API XPLMWindowID XPLMCreateWindow(\n                         int                  inLeft,\n                         int                  inTop,\n                         int                  inRight,\n                         int                  inBottom,\n                         int                  inIsVisible,\n                         XPLMDrawWindow_f     inDrawCallback,\n                         XPLMHandleKey_f      inKeyCallback,\n                         XPLMHandleMouseClick_f inMouseCallback,\n                         void *               inRefcon);\n\n```\n\nDeprecated as of XPLM300.\n\nThis routine creates a new legacy window. Unlike modern windows (created\nvia[XPLMCreateWindowEx](/sdk/XPLMCreateWindowEx/)()), legacy windows do not have\naccess to X-Plane 11 features like automatic scaling for high-DPI screens,\nnative window styles, or support for being “popped out” into first-class\noperating system windows.\n\nPass in the dimensions and offsets to the window’s bottom left corner from the\nbottom left of the screen. You can specify whether the window is initially\nvisible or not. Also, you pass in three callbacks to run the window and a\nrefcon. This function returns a window ID you can use to refer to the new\nwindow.\n\nNOTE: Legacy windows do not have “frames”; you are responsible for drawing the\nbackground and frame of the window. Higher level libraries have routines which\nmake this easy.",
      "own_functions": [
        "XPLMCreateWindow"
      ],
      "processing_timestamp": "2025-06-25T20:39:23.459570+00:00",
      "title": "XPLMCreateWindow | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMCreateWindow/"
    },
    "https://developer.x-plane.com/sdk/XPLMCreateWindowEx/": {
      "api_signatures": [
        {
          "description": "This routine creates a new “modern” window. You pass in anXPLMCreateWindow_tstructure with all of the fields set in. You must set the structSize of the structure to the size of the actual structure you used. Also, you must provide functions for every callback—you may not leave them null! (If you do not support the cursor or mouse wheel, use functions that return the default values.)",
          "name": "XPLMCreateWindowEx",
          "parameters": [
            {
              "full_declaration": "XPLMCreateWindow_t* inParams",
              "name": "inParams",
              "type": "XPLMCreateWindow_t*"
            }
          ],
          "signature": "XPLM_APIXPLMWindowIDXPLMCreateWindowEx(XPLMCreateWindow_t* inParams);"
        }
      ],
      "category": {
        "category": "XPLM_Display",
        "module": "Xplm Display",
        "url": "https://developer.x-plane.com/sdk/XPLMCreateWindowEx/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"function XPLM200\"><h3 class=\"sdk-api-function\" id=\"XPLMCreateWindowEx\"><a href=\"/sdk/XPLMCreateWindowEx/\">XPLMCreateWindowEx</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API <a href=\"/sdk/XPLMWindowID/\">XPLMWindowID</a> <a href=\"/sdk/XPLMCreateWindowEx/\">XPLMCreateWindowEx</a>(\n                         <a href=\"/sdk/XPLMCreateWindow_t/\">XPLMCreateWindow_t</a> * inParams);\n</code></pre><p>This routine creates a new “modern” window. You pass in an<a href=\"/sdk/XPLMCreateWindow_t/\">XPLMCreateWindow_t</a>structure with all of the fields set in. You must set the structSize of the structure to the size of the actual structure you used. Also, you must provide functions for every callback—you may not leave them null! (If you do not support the cursor or mouse wheel, use functions that return the default values.)</p></div></div></article>",
      "code_examples": [
        {
          "char_count": 69,
          "code": "XPLM_APIXPLMWindowIDXPLMCreateWindowEx(XPLMCreateWindow_t* inParams);",
          "context": "XPLMCreateWindowEx",
          "id": "example_0",
          "language": "c",
          "line_count": 1,
          "type": "snippet"
        }
      ],
      "cross_references": [
        "XPLMCreateWindow"
      ],
      "markdown": "### [XPLMCreateWindowEx](/sdk/XPLMCreateWindowEx/)\n\n```cpp\nXPLM_API XPLMWindowID XPLMCreateWindowEx(\n                         XPLMCreateWindow_t * inParams);\n\n```\n\nThis routine creates a new “modern” window. You pass in\nan[XPLMCreateWindow_t](/sdk/XPLMCreateWindow_t/)structure with all of the fields\nset in. You must set the structSize of the structure to the size of the actual\nstructure you used. Also, you must provide functions for every callback—you may\nnot leave them null! (If you do not support the cursor or mouse wheel, use\nfunctions that return the default values.)",
      "own_functions": [
        "XPLMCreateWindowEx"
      ],
      "processing_timestamp": "2025-06-25T20:39:23.456524+00:00",
      "title": "XPLMCreateWindowEx | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMCreateWindowEx/"
    },
    "https://developer.x-plane.com/sdk/XPLMCreateWindow_t/": {
      "api_signatures": [],
      "category": {
        "category": "XPLM_Display",
        "module": "Xplm Display",
        "url": "https://developer.x-plane.com/sdk/XPLMCreateWindow_t/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"struct XPLM200\"><h3 class=\"sdk-api-struct\" id=\"XPLMCreateWindow_t\"><a href=\"/sdk/XPLMCreateWindow_t/\">XPLMCreateWindow_t</a></h3><p>The XPMCreateWindow_t structure defines all of the parameters used to create a modern window using<a href=\"/sdk/XPLMCreateWindowEx/\">XPLMCreateWindowEx</a>(). The structure will be expanded in future SDK APIs to include more features. Always set the structSize member to the size of your struct in bytes!</p><p>All windows created by this function in the XPLM300 version of the API are created with the new X-Plane 11 GUI features. This means your plugin will get to “know” about the existence of X-Plane windows other than the main window. All drawing and mouse callbacks for your window will occur in “boxels,” giving your windows automatic support for high-DPI scaling in X-Plane. In addition, your windows can opt-in to decoration with the X-Plane 11 window styling, and you can use the<a href=\"/sdk/XPLMSetWindowPositioningMode/\">XPLMSetWindowPositioningMode</a>() API to make your window “popped out” into a first-class operating system window.</p><p>Note that this requires dealing with your window’s bounds in “global desktop” positioning units, rather than the traditional panel coordinate system. In global desktop coordinates, the main X-Plane window may not have its origin at coordinate (0, 0), and your own window may have negative coordinates. Assuming you don’t implicitly assume (0, 0) as your origin, the only API change you should need is to start using<a href=\"/sdk/XPLMGetMouseLocationGlobal/\">XPLMGetMouseLocationGlobal</a>() rather than<a href=\"/sdk/XPLMGetMouseLocation/\">XPLMGetMouseLocation</a>(), and<a href=\"/sdk/XPLMGetScreenBoundsGlobal/\">XPLMGetScreenBoundsGlobal</a>() instead of<a href=\"/sdk/XPLMGetScreenSize/\">XPLMGetScreenSize</a>().</p><p>If you ask to be decorated as a floating window, you’ll get the blue window control bar and blue backing that you see in X-Plane 11’s normal “floating” windows (like the map).</p><pre class=\"language-cpp\" data-manual=\"true\"><code>typedef struct {\n     // Used to inform <a href=\"/sdk/XPLMCreateWindowEx/\">XPLMCreateWindowEx</a>() of the SDK version you compiled against; should always be set to sizeof(<a href=\"/sdk/XPLMCreateWindow_t/\">XPLMCreateWindow_t</a>)\n     int                       structSize;\n     // Left bound, in global desktop boxels\n     int                       left;\n     // Top bound, in global desktop boxels\n     int                       top;\n     // Right bound, in global desktop boxels\n     int                       right;\n     // Bottom bound, in global desktop boxels\n     int                       bottom;\n     int                       visible;\n     <a href=\"/sdk/XPLMDrawWindow_f/\">XPLMDrawWindow_f</a>          drawWindowFunc;\n     // A callback to handle the user left-clicking within your window (or NULL to ignore left clicks)\n     <a href=\"/sdk/XPLMHandleMouseClick_f/\">XPLMHandleMouseClick_f</a>    handleMouseClickFunc;\n     <a href=\"/sdk/XPLMHandleKey_f/\">XPLMHandleKey_f</a>           handleKeyFunc;\n     <a href=\"/sdk/XPLMHandleCursor_f/\">XPLMHandleCursor_f</a>        handleCursorFunc;\n     <a href=\"/sdk/XPLMHandleMouseWheel_f/\">XPLMHandleMouseWheel_f</a>    handleMouseWheelFunc;\n     // A reference which will be passed into each of your window callbacks. Use this to pass information to yourself as needed.\n     void *                    refcon;\n     // Specifies the type of X-Plane 11-style \"wrapper\" you want around your window, if any\n     <a href=\"/sdk/XPLMWindowDecoration/\">XPLMWindowDecoration</a>      decorateAsFloatingWindow;\n     <a href=\"/sdk/XPLMWindowLayer/\">XPLMWindowLayer</a>           layer;\n     // A callback to handle the user right-clicking within your window (or NULL to ignore right clicks)\n     <a href=\"/sdk/XPLMHandleMouseClick_f/\">XPLMHandleMouseClick_f</a>    handleRightClickFunc;\n} <a href=\"/sdk/XPLMCreateWindow_t/\">XPLMCreateWindow_t</a>;</code></pre></div></div></article>",
      "code_examples": [
        {
          "char_count": 1346,
          "code": "typedef struct {\n     // Used to informXPLMCreateWindowEx() of the SDK version you compiled against; should always be set to sizeof(XPLMCreateWindow_t)\n     int                       structSize;\n     // Left bound, in global desktop boxels\n     int                       left;\n     // Top bound, in global desktop boxels\n     int                       top;\n     // Right bound, in global desktop boxels\n     int                       right;\n     // Bottom bound, in global desktop boxels\n     int                       bottom;\n     int                       visible;XPLMDrawWindow_fdrawWindowFunc;\n     // A callback to handle the user left-clicking within your window (or NULL to ignore left clicks)XPLMHandleMouseClick_fhandleMouseClickFunc;XPLMHandleKey_fhandleKeyFunc;XPLMHandleCursor_fhandleCursorFunc;XPLMHandleMouseWheel_fhandleMouseWheelFunc;\n     // A reference which will be passed into each of your window callbacks. Use this to pass information to yourself as needed.\n     void *                    refcon;\n     // Specifies the type of X-Plane 11-style \"wrapper\" you want around your window, if anyXPLMWindowDecorationdecorateAsFloatingWindow;XPLMWindowLayerlayer;\n     // A callback to handle the user right-clicking within your window (or NULL to ignore right clicks)XPLMHandleMouseClick_fhandleRightClickFunc;\n}XPLMCreateWindow_t;",
          "context": "If you ask to be decorated as a floating window, you’ll get the blue window control bar and blue backing that you see in X-Plane 11’s normal “floating” windows (like the map).",
          "id": "example_0",
          "language": "c",
          "line_count": 18,
          "type": "example"
        }
      ],
      "cross_references": [
        "XPLMCreateWindowEx",
        "XPLMGetMouseLocationGlobal",
        "XPLMWindowDecoration",
        "XPLMGetScreenBoundsGlobal",
        "XPLMWindowLayer",
        "XPLMGetMouseLocation",
        "XPLMGetScreenSize",
        "XPLMSetWindowPositioningMode",
        "XPLMCreateWindow"
      ],
      "markdown": "### [XPLMCreateWindow_t](/sdk/XPLMCreateWindow_t/)\n\nThe XPMCreateWindow_t structure defines all of the parameters used to create a\nmodern window using[XPLMCreateWindowEx](/sdk/XPLMCreateWindowEx/)(). The\nstructure will be expanded in future SDK APIs to include more features. Always\nset the structSize member to the size of your struct in bytes!\n\nAll windows created by this function in the XPLM300 version of the API are\ncreated with the new X-Plane 11 GUI features. This means your plugin will get to\n“know” about the existence of X-Plane windows other than the main window. All\ndrawing and mouse callbacks for your window will occur in “boxels,” giving your\nwindows automatic support for high-DPI scaling in X-Plane. In addition, your\nwindows can opt-in to decoration with the X-Plane 11 window styling, and you can\nuse the[XPLMSetWindowPositioningMode](/sdk/XPLMSetWindowPositioningMode/)() API\nto make your window “popped out” into a first-class operating system window.\n\nNote that this requires dealing with your window’s bounds in “global desktop”\npositioning units, rather than the traditional panel coordinate system. In\nglobal desktop coordinates, the main X-Plane window may not have its origin at\ncoordinate (0, 0), and your own window may have negative coordinates. Assuming\nyou don’t implicitly assume (0, 0) as your origin, the only API change you\nshould need is to start\nusing[XPLMGetMouseLocationGlobal](/sdk/XPLMGetMouseLocationGlobal/)() rather\nthan[XPLMGetMouseLocation](/sdk/XPLMGetMouseLocation/)(),\nand[XPLMGetScreenBoundsGlobal](/sdk/XPLMGetScreenBoundsGlobal/)() instead\nof[XPLMGetScreenSize](/sdk/XPLMGetScreenSize/)().\n\nIf you ask to be decorated as a floating window, you’ll get the blue window\ncontrol bar and blue backing that you see in X-Plane 11’s normal “floating”\nwindows (like the map).\n\n```cpp\ntypedef struct {\n     // Used to inform XPLMCreateWindowEx() of the SDK version you compiled against; should always be set to sizeof(XPLMCreateWindow_t)\n     int                       structSize;\n     // Left bound, in global desktop boxels\n     int                       left;\n     // Top bound, in global desktop boxels\n     int                       top;\n     // Right bound, in global desktop boxels\n     int                       right;\n     // Bottom bound, in global desktop boxels\n     int                       bottom;\n     int                       visible;\n     XPLMDrawWindow_f          drawWindowFunc;\n     // A callback to handle the user left-clicking within your window (or NULL to ignore left clicks)\n     XPLMHandleMouseClick_f    handleMouseClickFunc;\n     XPLMHandleKey_f           handleKeyFunc;\n     XPLMHandleCursor_f        handleCursorFunc;\n     XPLMHandleMouseWheel_f    handleMouseWheelFunc;\n     // A reference which will be passed into each of your window callbacks. Use this to pass information to yourself as needed.\n     void *                    refcon;\n     // Specifies the type of X-Plane 11-style \"wrapper\" you want around your window, if any\n     XPLMWindowDecoration      decorateAsFloatingWindow;\n     XPLMWindowLayer           layer;\n     // A callback to handle the user right-clicking within your window (or NULL to ignore right clicks)\n     XPLMHandleMouseClick_f    handleRightClickFunc;\n} XPLMCreateWindow_t;\n```",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:23.454418+00:00",
      "title": "XPLMCreateWindow_t | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMCreateWindow_t/"
    },
    "https://developer.x-plane.com/sdk/XPLMCursorStatus/": {
      "api_signatures": [
        {
          "name": "XPLMCursorStatus",
          "type": "enum",
          "values": [
            {
              "description": "X-Plane manages the cursor normally, plugin does not affect the cusrsor.",
              "name": "xplm_CursorDefault",
              "value": "\"0\""
            },
            {
              "description": "X-Plane hides the cursor.",
              "name": "xplm_CursorHidden",
              "value": "\"1\""
            },
            {
              "description": "X-Plane shows the cursor as the default arrow.",
              "name": "xplm_CursorArrow",
              "value": "\"2\""
            },
            {
              "description": "X-Plane shows the cursor but lets you select an OS cursor.",
              "name": "xplm_CursorCustom",
              "value": "\"3\""
            }
          ]
        }
      ],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/XPLMCursorStatus/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enum XPLM200\"><h3 class=\"sdk-api-enum\" id=\"XPLMCursorStatus\"><a href=\"/sdk/XPLMCursorStatus/\">XPLMCursorStatus</a></h3><p><a href=\"/sdk/XPLMCursorStatus/\">XPLMCursorStatus</a>describes how you would like X-Plane to manage the cursor. See<a href=\"/sdk/XPLMHandleCursor_f/\">XPLMHandleCursor_f</a>for more info.</p><p><div class=\"enumitem XPLM200\"><table><thead><tr><th>Name</th><th>Value</th><th>Description</th></tr></thead><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_CursorDefault\"><a href=\"/sdk/xplm_CursorDefault/\">xplm_CursorDefault</a></td><td>\"0\"</td><td>X-Plane manages the cursor normally, plugin does not affect the cusrsor.</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_CursorHidden\"><a href=\"/sdk/xplm_CursorHidden/\">xplm_CursorHidden</a></td><td>\"1\"</td><td>X-Plane hides the cursor.</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_CursorArrow\"><a href=\"/sdk/xplm_CursorArrow/\">xplm_CursorArrow</a></td><td>\"2\"</td><td>X-Plane shows the cursor as the default arrow.</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_CursorCustom\"><a href=\"/sdk/xplm_CursorCustom/\">xplm_CursorCustom</a></td><td>\"3\"</td><td>X-Plane shows the cursor but lets you select an OS cursor.</td></tr></table></div></p></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "### [XPLMCursorStatus](/sdk/XPLMCursorStatus/)\n\n[XPLMCursorStatus](/sdk/XPLMCursorStatus/)describes how you would like X-Plane\nto manage the cursor. See[XPLMHandleCursor_f](/sdk/XPLMHandleCursor_f/)for more\ninfo.\n\n| Name | Value | Description |\n| --- | --- | --- |\n| [xplm_CursorDefault](/sdk/xplm_CursorDefault/) | \"0\" | X-Plane manages the\ncursor normally, plugin does not affect the cusrsor. |\n| [xplm_CursorHidden](/sdk/xplm_CursorHidden/) | \"1\" | X-Plane hides the cursor.\n|\n| [xplm_CursorArrow](/sdk/xplm_CursorArrow/) | \"2\" | X-Plane shows the cursor as\nthe default arrow. |\n| [xplm_CursorCustom](/sdk/xplm_CursorCustom/) | \"3\" | X-Plane shows the cursor\nbut lets you select an OS cursor. |",
      "own_functions": [
        "XPLMCursorStatus"
      ],
      "processing_timestamp": "2025-06-25T20:39:22.141696+00:00",
      "title": "XPLMCursorStatus | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMCursorStatus/"
    },
    "https://developer.x-plane.com/sdk/XPLMCustomizeAvionics_t/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/XPLMCustomizeAvionics_t/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"struct\"><h3 class=\"sdk-api-struct\" id=\"XPLMCustomizeAvionics_t\"><a href=\"/sdk/XPLMCustomizeAvionics_t/\">XPLMCustomizeAvionics_t</a></h3><p>The<a href=\"/sdk/XPLMCustomizeAvionics_t/\">XPLMCustomizeAvionics_t</a>structure defines all of the parameters used to replace or enhance built-in simulator avionics devices using<a href=\"/sdk/XPLMRegisterAvionicsCallbacksEx/\">XPLMRegisterAvionicsCallbacksEx</a>(). The structure will be expanded in future SDK APIs to include more features. Always set the structSize member to the size of your struct in bytes!</p><pre class=\"language-cpp\" data-manual=\"true\"><code>typedef struct {\n     // Used to inform <a href=\"/sdk/XPLMRegisterAvionicsCallbacksEx/\">XPLMRegisterAvionicsCallbacksEx</a>() of the SDK version you compiled against; should always be set to sizeof(<a href=\"/sdk/XPLMCustomizeAvionics_t/\">XPLMCustomizeAvionics_t</a>)\n     int                       structSize;\n     // The built-in avionics device to which you want your drawing applied.\n     <a href=\"/sdk/XPLMDeviceID/\">XPLMDeviceID</a>              deviceId;\n     // The draw callback to be called before X-Plane draws.\n     <a href=\"/sdk/XPLMAvionicsCallback_f/\">XPLMAvionicsCallback_f</a>    drawCallbackBefore;\n     // The draw callback to be called after X-Plane has drawn.\n     <a href=\"/sdk/XPLMAvionicsCallback_f/\">XPLMAvionicsCallback_f</a>    drawCallbackAfter;\n     // The mouse click callback that is called when the user clicks onto the device's bezel.\n     <a href=\"/sdk/XPLMAvionicsMouse_f/\">XPLMAvionicsMouse_f</a>       bezelClickCallback;\n     // The mouse click callback that is called when the user clicks onto the device's bezel.\n     <a href=\"/sdk/XPLMAvionicsMouse_f/\">XPLMAvionicsMouse_f</a>       bezelRightClickCallback;\n     // The callback that is called when the users uses the scroll wheel over the device's bezel.\n     <a href=\"/sdk/XPLMAvionicsMouseWheel_f/\">XPLMAvionicsMouseWheel_f</a>  bezelScrollCallback;\n     // The callback that lets you determine what cursor should be shown when the mouse is over the device's bezel.\n     <a href=\"/sdk/XPLMAvionicsCursor_f/\">XPLMAvionicsCursor_f</a>      bezelCursorCallback;\n     // The mouse click callback that is called when the user clicks onto the device's screen.\n     <a href=\"/sdk/XPLMAvionicsMouse_f/\">XPLMAvionicsMouse_f</a>       screenTouchCallback;\n     // The right mouse click callback that is called when the user clicks onto the device's screen.\n     <a href=\"/sdk/XPLMAvionicsMouse_f/\">XPLMAvionicsMouse_f</a>       screenRightTouchCallback;\n     // The callback that is called when the users uses the scroll wheel over the device's screen.\n     <a href=\"/sdk/XPLMAvionicsMouseWheel_f/\">XPLMAvionicsMouseWheel_f</a>  screenScrollCallback;\n     // The callback that lets you determine what cursor should be shown when the mouse is over the device's screen.\n     <a href=\"/sdk/XPLMAvionicsCursor_f/\">XPLMAvionicsCursor_f</a>      screenCursorCallback;\n     // The key callback that is called when the user types in the device's popup.\n     <a href=\"/sdk/XPLMAvionicsKeyboard_f/\">XPLMAvionicsKeyboard_f</a>    keyboardCallback;\n     // A reference which will be passed into each of your draw callbacks. Use this to pass information to yourself as needed.\n     void *                    refcon;\n} <a href=\"/sdk/XPLMCustomizeAvionics_t/\">XPLMCustomizeAvionics_t</a>;</code></pre></div></div></article>",
      "code_examples": [
        {
          "char_count": 1978,
          "code": "typedef struct {\n     // Used to informXPLMRegisterAvionicsCallbacksEx() of the SDK version you compiled against; should always be set to sizeof(XPLMCustomizeAvionics_t)\n     int                       structSize;\n     // The built-in avionics device to which you want your drawing applied.XPLMDeviceIDdeviceId;\n     // The draw callback to be called before X-Plane draws.XPLMAvionicsCallback_fdrawCallbackBefore;\n     // The draw callback to be called after X-Plane has drawn.XPLMAvionicsCallback_fdrawCallbackAfter;\n     // The mouse click callback that is called when the user clicks onto the device's bezel.XPLMAvionicsMouse_fbezelClickCallback;\n     // The mouse click callback that is called when the user clicks onto the device's bezel.XPLMAvionicsMouse_fbezelRightClickCallback;\n     // The callback that is called when the users uses the scroll wheel over the device's bezel.XPLMAvionicsMouseWheel_fbezelScrollCallback;\n     // The callback that lets you determine what cursor should be shown when the mouse is over the device's bezel.XPLMAvionicsCursor_fbezelCursorCallback;\n     // The mouse click callback that is called when the user clicks onto the device's screen.XPLMAvionicsMouse_fscreenTouchCallback;\n     // The right mouse click callback that is called when the user clicks onto the device's screen.XPLMAvionicsMouse_fscreenRightTouchCallback;\n     // The callback that is called when the users uses the scroll wheel over the device's screen.XPLMAvionicsMouseWheel_fscreenScrollCallback;\n     // The callback that lets you determine what cursor should be shown when the mouse is over the device's screen.XPLMAvionicsCursor_fscreenCursorCallback;\n     // The key callback that is called when the user types in the device's popup.XPLMAvionicsKeyboard_fkeyboardCallback;\n     // A reference which will be passed into each of your draw callbacks. Use this to pass information to yourself as needed.\n     void *                    refcon;\n}XPLMCustomizeAvionics_t;",
          "context": "TheXPLMCustomizeAvionics_tstructure defines all of the parameters used to replace or enhance built-in simulator avionics devices usingXPLMRegisterAvionicsCallbacksEx(). The structure will be expanded ",
          "id": "example_0",
          "language": "c",
          "line_count": 18,
          "type": "example"
        }
      ],
      "cross_references": [
        "XPLMRegisterAvionicsCallbacksEx",
        "XPLMDeviceID"
      ],
      "markdown": "### [XPLMCustomizeAvionics_t](/sdk/XPLMCustomizeAvionics_t/)\n\nThe[XPLMCustomizeAvionics_t](/sdk/XPLMCustomizeAvionics_t/)structure defines all\nof the parameters used to replace or enhance built-in simulator avionics devices\nusing[XPLMRegisterAvionicsCallbacksEx](/sdk/XPLMRegisterAvionicsCallbacksEx/)().\nThe structure will be expanded in future SDK APIs to include more features.\nAlways set the structSize member to the size of your struct in bytes!\n\n```cpp\ntypedef struct {\n     // Used to inform XPLMRegisterAvionicsCallbacksEx() of the SDK version you compiled against; should always be set to sizeof(XPLMCustomizeAvionics_t)\n     int                       structSize;\n     // The built-in avionics device to which you want your drawing applied.\n     XPLMDeviceID              deviceId;\n     // The draw callback to be called before X-Plane draws.\n     XPLMAvionicsCallback_f    drawCallbackBefore;\n     // The draw callback to be called after X-Plane has drawn.\n     XPLMAvionicsCallback_f    drawCallbackAfter;\n     // The mouse click callback that is called when the user clicks onto the device's bezel.\n     XPLMAvionicsMouse_f       bezelClickCallback;\n     // The mouse click callback that is called when the user clicks onto the device's bezel.\n     XPLMAvionicsMouse_f       bezelRightClickCallback;\n     // The callback that is called when the users uses the scroll wheel over the device's bezel.\n     XPLMAvionicsMouseWheel_f  bezelScrollCallback;\n     // The callback that lets you determine what cursor should be shown when the mouse is over the device's bezel.\n     XPLMAvionicsCursor_f      bezelCursorCallback;\n     // The mouse click callback that is called when the user clicks onto the device's screen.\n     XPLMAvionicsMouse_f       screenTouchCallback;\n     // The right mouse click callback that is called when the user clicks onto the device's screen.\n     XPLMAvionicsMouse_f       screenRightTouchCallback;\n     // The callback that is called when the users uses the scroll wheel over the device's screen.\n     XPLMAvionicsMouseWheel_f  screenScrollCallback;\n     // The callback that lets you determine what cursor should be shown when the mouse is over the device's screen.\n     XPLMAvionicsCursor_f      screenCursorCallback;\n     // The key callback that is called when the user types in the device's popup.\n     XPLMAvionicsKeyboard_f    keyboardCallback;\n     // A reference which will be passed into each of your draw callbacks. Use this to pass information to yourself as needed.\n     void *                    refcon;\n} XPLMCustomizeAvionics_t;\n```",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.149769+00:00",
      "title": "XPLMCustomizeAvionics_t | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMCustomizeAvionics_t/"
    },
    "https://developer.x-plane.com/sdk/XPLMDataChanged_f/": {
      "api_signatures": [],
      "category": {
        "category": "XPLM_DataAccess",
        "module": "Xplm Dataaccess",
        "url": "https://developer.x-plane.com/sdk/XPLMDataChanged_f/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"callback\"><h3 class=\"sdk-api-callback\" id=\"XPLMDataChanged_f\"><a href=\"/sdk/XPLMDataChanged_f/\">XPLMDataChanged_f</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>typedef void (* <a href=\"/sdk/XPLMDataChanged_f/\">XPLMDataChanged_f</a>)(\n                         void *               inRefcon);\n</code></pre><p>An<a href=\"/sdk/XPLMDataChanged_f/\">XPLMDataChanged_f</a>is a callback that the XPLM calls whenever any other plug-in modifies shared data. A refcon you provide is passed back to help identify which data is being changed. In response, you may want to call one of the XPLMGetDataxxx routines to find the new value of the data.</p></div></div></article>",
      "code_examples": [
        {
          "char_count": 91,
          "code": "typedef void (*XPLMDataChanged_f)(\n                         void *               inRefcon);",
          "context": "XPLMDataChanged_f",
          "id": "example_0",
          "language": "c",
          "line_count": 2,
          "type": "snippet"
        }
      ],
      "cross_references": [],
      "markdown": "### [XPLMDataChanged_f](/sdk/XPLMDataChanged_f/)\n\n```cpp\ntypedef void (* XPLMDataChanged_f)(\n                         void *               inRefcon);\n\n```\n\nAn[XPLMDataChanged_f](/sdk/XPLMDataChanged_f/)is a callback that the XPLM calls\nwhenever any other plug-in modifies shared data. A refcon you provide is passed\nback to help identify which data is being changed. In response, you may want to\ncall one of the XPLMGetDataxxx routines to find the new value of the data.",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:23.335091+00:00",
      "title": "XPLMDataChanged_f | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMDataChanged_f/"
    },
    "https://developer.x-plane.com/sdk/XPLMDataFileType/": {
      "api_signatures": [
        {
          "name": "XPLMDataFileType",
          "type": "enum",
          "values": [
            {
              "description": "A situation (.sit) file, which starts off a flight in a given configuration.",
              "name": "xplm_DataFile_Situation",
              "value": "\"1\""
            },
            {
              "description": "A situation movie (.smo) file, which replays a past flight.",
              "name": "xplm_DataFile_ReplayMovie",
              "value": "\"2\""
            }
          ]
        }
      ],
      "category": {
        "category": "XPLM_DataAccess",
        "module": "Xplm Dataaccess",
        "url": "https://developer.x-plane.com/sdk/XPLMDataFileType/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enum XPLM200\"><h3 class=\"sdk-api-enum\" id=\"XPLMDataFileType\"><a href=\"/sdk/XPLMDataFileType/\">XPLMDataFileType</a></h3><p>These enums define types of data files you can load or unload using the SDK.</p><p><div class=\"enumitem XPLM200\"><table><thead><tr><th>Name</th><th>Value</th><th>Description</th></tr></thead><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_DataFile_Situation\"><a href=\"/sdk/xplm_DataFile_Situation/\">xplm_DataFile_Situation</a></td><td>\"1\"</td><td>A situation (.sit) file, which starts off a flight in a given configuration.</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_DataFile_ReplayMovie\"><a href=\"/sdk/xplm_DataFile_ReplayMovie/\">xplm_DataFile_ReplayMovie</a></td><td>\"2\"</td><td>A situation movie (.smo) file, which replays a past flight.</td></tr></table></div></p></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "### [XPLMDataFileType](/sdk/XPLMDataFileType/)\n\nThese enums define types of data files you can load or unload using the SDK.\n\n| Name | Value | Description |\n| --- | --- | --- |\n| [xplm_DataFile_Situation](/sdk/xplm_DataFile_Situation/) | \"1\" | A situation\n(.sit) file, which starts off a flight in a given configuration. |\n| [xplm_DataFile_ReplayMovie](/sdk/xplm_DataFile_ReplayMovie/) | \"2\" | A\nsituation movie (.smo) file, which replays a past flight. |",
      "own_functions": [
        "XPLMDataFileType"
      ],
      "processing_timestamp": "2025-06-25T20:39:23.340175+00:00",
      "title": "XPLMDataFileType | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMDataFileType/"
    },
    "https://developer.x-plane.com/sdk/XPLMDataRef/": {
      "api_signatures": [],
      "category": {
        "category": "XPLM_DataAccess",
        "module": "Xplm Dataaccess",
        "url": "https://developer.x-plane.com/sdk/XPLMDataRef/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"typedef\"><h3 class=\"sdk-api-type\" id=\"XPLMDataRef\"><a href=\"/sdk/XPLMDataRef/\">XPLMDataRef</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>typedef void * <a href=\"/sdk/XPLMDataRef/\">XPLMDataRef</a>;</code></pre><p>A dataref is an opaque handle to data provided by the simulator or another plugin. It uniquely identifies one variable (or array of variables) over the lifetime of your plugin. You never hard code these values; you always get them from<a href=\"/sdk/XPLMFindDataRef/\">XPLMFindDataRef</a>.</p></div></div></article>",
      "code_examples": [],
      "cross_references": [
        "XPLMFindDataRef"
      ],
      "markdown": "### [XPLMDataRef](/sdk/XPLMDataRef/)\n\n```cpp\ntypedef void * XPLMDataRef;\n```\n\nA dataref is an opaque handle to data provided by the simulator or another\nplugin. It uniquely identifies one variable (or array of variables) over the\nlifetime of your plugin. You never hard code these values; you always get them\nfrom[XPLMFindDataRef](/sdk/XPLMFindDataRef/).",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:23.344174+00:00",
      "title": "XPLMDataRef | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMDataRef/"
    },
    "https://developer.x-plane.com/sdk/XPLMDataRefInfo_t/": {
      "api_signatures": [],
      "category": {
        "category": "XPLM_DataAccess",
        "module": "Xplm Dataaccess",
        "url": "https://developer.x-plane.com/sdk/XPLMDataRefInfo_t/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"struct XPLM400\"><h3 class=\"sdk-api-struct\" id=\"XPLMDataRefInfo_t\"><a href=\"/sdk/XPLMDataRefInfo_t/\">XPLMDataRefInfo_t</a></h3><p>The<a href=\"/sdk/XPLMDataRefInfo_t/\">XPLMDataRefInfo_t</a>structure contains all of the information about a single data ref. The structure can be expanded in future SDK APIs to include more features. Always set the structSize member to the size of your struct in bytes!</p><pre class=\"language-cpp\" data-manual=\"true\"><code>typedef struct {\n     // Used to inform XPLMGetDatarefInfo() of the SDK version you compiled against; should always be set to sizeof(<a href=\"/sdk/XPLMDataRefInfo_t/\">XPLMDataRefInfo_t</a>)\n     int                       structSize;\n     // The full name/path of the data ref\n     const char *              name;\n     <a href=\"/sdk/XPLMDataTypeID/\">XPLMDataTypeID</a>            type;\n     // TRUE if the data ref permits writing to it. FALSE if it's read-only.\n     int                       writable;\n     // The handle to the plugin that registered this dataref.\n     <a href=\"/sdk/XPLMPluginID/\">XPLMPluginID</a>              owner;\n} <a href=\"/sdk/XPLMDataRefInfo_t/\">XPLMDataRefInfo_t</a>;</code></pre></div></div></article>",
      "code_examples": [
        {
          "char_count": 512,
          "code": "typedef struct {\n     // Used to inform XPLMGetDatarefInfo() of the SDK version you compiled against; should always be set to sizeof(XPLMDataRefInfo_t)\n     int                       structSize;\n     // The full name/path of the data ref\n     const char *              name;XPLMDataTypeIDtype;\n     // TRUE if the data ref permits writing to it. FALSE if it's read-only.\n     int                       writable;\n     // The handle to the plugin that registered this dataref.XPLMPluginIDowner;\n}XPLMDataRefInfo_t;",
          "context": "TheXPLMDataRefInfo_tstructure contains all of the information about a single data ref. The structure can be expanded in future SDK APIs to include more features. Always set the structSize member to th",
          "id": "example_0",
          "language": "c",
          "line_count": 9,
          "type": "snippet"
        }
      ],
      "cross_references": [
        "XPLMPlugin",
        "XPLMDataTypeID"
      ],
      "markdown": "### [XPLMDataRefInfo_t](/sdk/XPLMDataRefInfo_t/)\n\nThe[XPLMDataRefInfo_t](/sdk/XPLMDataRefInfo_t/)structure contains all of the\ninformation about a single data ref. The structure can be expanded in future SDK\nAPIs to include more features. Always set the structSize member to the size of\nyour struct in bytes!\n\n```cpp\ntypedef struct {\n     // Used to inform XPLMGetDatarefInfo() of the SDK version you compiled against; should always be set to sizeof(XPLMDataRefInfo_t)\n     int                       structSize;\n     // The full name/path of the data ref\n     const char *              name;\n     XPLMDataTypeID            type;\n     // TRUE if the data ref permits writing to it. FALSE if it's read-only.\n     int                       writable;\n     // The handle to the plugin that registered this dataref.\n     XPLMPluginID              owner;\n} XPLMDataRefInfo_t;\n```",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:23.342173+00:00",
      "title": "XPLMDataRefInfo_t | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMDataRefInfo_t/"
    },
    "https://developer.x-plane.com/sdk/XPLMDataTypeID/": {
      "api_signatures": [
        {
          "name": "XPLMDataTypeID",
          "type": "enum",
          "values": [
            {
              "description": "Data of a type the current XPLM doesn't do.",
              "name": "xplmType_Unknown",
              "value": "\"0\""
            },
            {
              "description": "A single 4-byte integer, native endian.",
              "name": "xplmType_Int",
              "value": "\"1\""
            },
            {
              "description": "A single 4-byte float, native endian.",
              "name": "xplmType_Float",
              "value": "\"2\""
            },
            {
              "description": "A single 8-byte double, native endian.",
              "name": "xplmType_Double",
              "value": "\"4\""
            },
            {
              "description": "An array of 4-byte floats, native endian.",
              "name": "xplmType_FloatArray",
              "value": "\"8\""
            },
            {
              "description": "An array of 4-byte integers, native endian.",
              "name": "xplmType_IntArray",
              "value": "\"16\""
            },
            {
              "description": "A variable block of data.",
              "name": "xplmType_Data",
              "value": "\"32\""
            }
          ]
        }
      ],
      "category": {
        "category": "XPLM_DataAccess",
        "module": "Xplm Dataaccess",
        "url": "https://developer.x-plane.com/sdk/XPLMDataTypeID/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enum\"><h3 class=\"sdk-api-enum\" id=\"XPLMDataTypeID\"><a href=\"/sdk/XPLMDataTypeID/\">XPLMDataTypeID</a></h3><p>This is an enumeration that defines the type of the data behind a data reference. This allows you to sanity check that the data type matches what you expect. But for the most part, you will know the type of data you are expecting from the online documentation.</p><p>Data types each take a bit field; it is legal to have a single dataref be more than one type of data. Whe this happens, you can pick any matching get/set API.</p><p><div class=\"enumitem\"><table><thead><tr><th>Name</th><th>Value</th><th>Description</th></tr></thead><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplmType_Unknown\"><a href=\"/sdk/xplmType_Unknown/\">xplmType_Unknown</a></td><td>\"0\"</td><td>Data of a type the current XPLM doesn't do.</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplmType_Int\"><a href=\"/sdk/xplmType_Int/\">xplmType_Int</a></td><td>\"1\"</td><td>A single 4-byte integer, native endian.</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplmType_Float\"><a href=\"/sdk/xplmType_Float/\">xplmType_Float</a></td><td>\"2\"</td><td>A single 4-byte float, native endian.</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplmType_Double\"><a href=\"/sdk/xplmType_Double/\">xplmType_Double</a></td><td>\"4\"</td><td>A single 8-byte double, native endian.</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplmType_FloatArray\"><a href=\"/sdk/xplmType_FloatArray/\">xplmType_FloatArray</a></td><td>\"8\"</td><td>An array of 4-byte floats, native endian.</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplmType_IntArray\"><a href=\"/sdk/xplmType_IntArray/\">xplmType_IntArray</a></td><td>\"16\"</td><td>An array of 4-byte integers, native endian.</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplmType_Data\"><a href=\"/sdk/xplmType_Data/\">xplmType_Data</a></td><td>\"32\"</td><td>A variable block of data.</td></tr></table></div></p></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "### [XPLMDataTypeID](/sdk/XPLMDataTypeID/)\n\nThis is an enumeration that defines the type of the data behind a data\nreference. This allows you to sanity check that the data type matches what you\nexpect. But for the most part, you will know the type of data you are expecting\nfrom the online documentation.\n\nData types each take a bit field; it is legal to have a single dataref be more\nthan one type of data. Whe this happens, you can pick any matching get/set API.\n\n| Name | Value | Description |\n| --- | --- | --- |\n| [xplmType_Unknown](/sdk/xplmType_Unknown/) | \"0\" | Data of a type the current\nXPLM doesn't do. |\n| [xplmType_Int](/sdk/xplmType_Int/) | \"1\" | A single 4-byte integer, native\nendian. |\n| [xplmType_Float](/sdk/xplmType_Float/) | \"2\" | A single 4-byte float, native\nendian. |\n| [xplmType_Double](/sdk/xplmType_Double/) | \"4\" | A single 8-byte double,\nnative endian. |\n| [xplmType_FloatArray](/sdk/xplmType_FloatArray/) | \"8\" | An array of 4-byte\nfloats, native endian. |\n| [xplmType_IntArray](/sdk/xplmType_IntArray/) | \"16\" | An array of 4-byte\nintegers, native endian. |\n| [xplmType_Data](/sdk/xplmType_Data/) | \"32\" | A variable block of data. |",
      "own_functions": [
        "XPLMDataTypeID"
      ],
      "processing_timestamp": "2025-06-25T20:39:23.353173+00:00",
      "title": "XPLMDataTypeID | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMDataTypeID/"
    },
    "https://developer.x-plane.com/sdk/XPLMDebugString/": {
      "api_signatures": [
        {
          "description": "This routine outputs a C-style string to the Log.txt file. The file is immediately flushed so you will not lose data. (This does cause a performance penalty.)",
          "name": "XPLMDebugString",
          "parameters": [
            {
              "full_declaration": "const char *         inString",
              "name": "inString",
              "type": "const char *"
            }
          ],
          "signature": "XPLM_API voidXPLMDebugString(\n                         const char *         inString);"
        },
        {
          "name": "voidXPLMDebugString",
          "signature": "XPLM_API voidXPLMDebugString(\n                         const char *         inString);",
          "source": "code_block_extraction",
          "type": "function"
        }
      ],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/XPLMDebugString/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPLMDebugString\"><a href=\"/sdk/XPLMDebugString/\">XPLMDebugString</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API void       <a href=\"/sdk/XPLMDebugString/\">XPLMDebugString</a>(\n                         const char *         inString);\n</code></pre><p>This routine outputs a C-style string to the Log.txt file. The file is immediately flushed so you will not lose data. (This does cause a performance penalty.)</p><p>Please do<em>not</em>leave routine diagnostic logging enabled in your shipping plugin. The X-Plane Log file is shared by X-Plane and every plugin in the system, and plugins that (when functioning normally) print verbose log output make it difficult for developers to find error conditions from other parts of the system.</p></div></div></article>",
      "code_examples": [
        {
          "char_count": 86,
          "code": "XPLM_API voidXPLMDebugString(\n                         const char *         inString);",
          "context": "XPLMDebugString",
          "id": "example_0",
          "language": "c",
          "line_count": 2,
          "type": "snippet"
        }
      ],
      "cross_references": [],
      "markdown": "### [XPLMDebugString](/sdk/XPLMDebugString/)\n\n```cpp\nXPLM_API void       XPLMDebugString(\n                         const char *         inString);\n\n```\n\nThis routine outputs a C-style string to the Log.txt file. The file is\nimmediately flushed so you will not lose data. (This does cause a performance\npenalty.)\n\nPlease do*not*leave routine diagnostic logging enabled in your shipping plugin.\nThe X-Plane Log file is shared by X-Plane and every plugin in the system, and\nplugins that (when functioning normally) print verbose log output make it\ndifficult for developers to find error conditions from other parts of the\nsystem.",
      "own_functions": [
        "XPLMDebugString",
        "voidXPLMDebugString"
      ],
      "processing_timestamp": "2025-06-25T20:39:22.145695+00:00",
      "title": "XPLMDebugString | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMDebugString/"
    },
    "https://developer.x-plane.com/sdk/XPLMDefs/": {
      "api_signatures": [
        {
          "name": "XPLMKeyFlags",
          "type": "enum",
          "values": [
            {
              "description": "The shift key is down",
              "name": "xplm_ShiftFlag",
              "value": "\"1\""
            },
            {
              "description": "The option or alt key is down",
              "name": "xplm_OptionAltFlag",
              "value": "\"2\""
            },
            {
              "description": "The control key is down",
              "name": "xplm_ControlFlag",
              "value": "\"4\""
            },
            {
              "description": "The key is being pressed down",
              "name": "xplm_DownFlag",
              "value": "\"8\""
            },
            {
              "description": "The key is being released",
              "name": "xplm_UpFlag",
              "value": "\"16\""
            }
          ]
        },
        {
          "name": "XPLMCursorStatus",
          "type": "enum",
          "values": [
            {
              "description": "X-Plane manages the cursor normally, plugin does not affect the cusrsor.",
              "name": "xplm_CursorDefault",
              "value": "\"0\""
            },
            {
              "description": "X-Plane hides the cursor.",
              "name": "xplm_CursorHidden",
              "value": "\"1\""
            },
            {
              "description": "X-Plane shows the cursor as the default arrow.",
              "name": "xplm_CursorArrow",
              "value": "\"2\""
            },
            {
              "description": "X-Plane shows the cursor but lets you select an OS cursor.",
              "name": "xplm_CursorCustom",
              "value": "\"3\""
            }
          ]
        },
        {
          "name": "XPLMMouseStatus",
          "type": "enum",
          "values": []
        }
      ],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/XPLMDefs/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"api\"><h1 class=\"sdk-api-title\" id=\"XPLMDefs\"><a href=\"/sdk/XPLMDefs/\">XPLMDefs</a>API</h1><p>This file is contains the cross-platform and basic definitions for the X-Plane SDK.</p><p>The preprocessor macros APL, LIN and IBM must be defined to specify the compilation target; define APL to 1 to compile on Mac, IBM to 1 to compile on Windows and LIN to 1 to compile on Linux. Only one compilation target may be used at a time. You must specify these macro definitions before including<a href=\"/sdk/XPLMDefs/\">XPLMDefs</a>.h or any other XPLM headers. You can do this using the -D command line option or a preprocessor header.</p><div class=\"component\"><h2 id=\"DLL Definitions\">DLL Definitions</h2><p>These definitions control the importing and exporting of functions within the DLL.</p><p>You can prefix your five required callbacks with the PLUGIN_API macro to declare them as exported C functions. The XPLM_API macro identifies functions that are provided to you via the plugin SDK. (Link against XPLM.lib to use these functions.)</p></div><div class=\"component\"><h2 id=\"GLOBAL DEFINITIONS\">GLOBAL DEFINITIONS</h2><p>These definitions are used in all parts of the SDK.</p><div class=\"typedef\"><h3 class=\"sdk-api-type\" id=\"XPLMPluginID\"><a href=\"/sdk/XPLMPluginID/\">XPLMPluginID</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>typedef int <a href=\"/sdk/XPLMPluginID/\">XPLMPluginID</a>;</code></pre><p>Each plug-in is identified by a unique integer ID. This ID can be used to disable or enable a plug-in, or discover what plug-in is ‘running’ at the time. A plug-in ID is unique within the currently running instance of X-Plane unless plug-ins are reloaded. Plug-ins may receive a different unique ID each time they are loaded. This includes the unloading and reloading of plugins that are part of the user’s aircraft.</p><p>For persistent identification of plug-ins, use<a href=\"/sdk/XPLMFindPluginBySignature/\">XPLMFindPluginBySignature</a>in XPLMUtiltiies.h .</p><p>-1 indicates no plug-in.</p></div><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"XPLM_NO_PLUGIN_ID\"><a href=\"/sdk/XPLM_NO_PLUGIN_ID/\">XPLM_NO_PLUGIN_ID</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_NO_PLUGIN_ID/\">XPLM_NO_PLUGIN_ID</a>    (-1)</code></pre><p>No plugin.</p></div><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"XPLM_PLUGIN_XPLANE\"><a href=\"/sdk/XPLM_PLUGIN_XPLANE/\">XPLM_PLUGIN_XPLANE</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_PLUGIN_XPLANE/\">XPLM_PLUGIN_XPLANE</a>   (0)</code></pre><p>X-Plane itself</p></div><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"kXPLM_Version\"><a href=\"/sdk/kXPLM_Version/\">kXPLM_Version</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/kXPLM_Version/\">kXPLM_Version</a>        (411)</code></pre><p>The current XPLM revision is 4.1.1 (411).</p></div><div class=\"enum\"><h3 class=\"sdk-api-enum\" id=\"XPLMKeyFlags\"><a href=\"/sdk/XPLMKeyFlags/\">XPLMKeyFlags</a></h3><p>These bitfields define modifier keys in a platform independent way. When a key is pressed, a series of messages are sent to your plugin. The down flag is set in the first of these messages, and the up flag in the last. While the key is held down, messages are sent with neither flag set to indicate that the key is being held down as a repeated character.</p><p>The control flag is mapped to the control flag on Macintosh and PC. Generally X-Plane uses the control key and not the command key on Macintosh, providing a consistent interface across platforms that does not necessarily match the Macintosh user interface guidelines. There is not yet a way for plugins to access the Macintosh control keys without using #ifdefed code.</p><p><div class=\"enumitem\"><table><thead><tr><th>Name</th><th>Value</th><th>Description</th></tr></thead><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_ShiftFlag\"><a href=\"/sdk/xplm_ShiftFlag/\">xplm_ShiftFlag</a></td><td>\"1\"</td><td>The shift key is down</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_OptionAltFlag\"><a href=\"/sdk/xplm_OptionAltFlag/\">xplm_OptionAltFlag</a></td><td>\"2\"</td><td>The option or alt key is down</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_ControlFlag \"><a href=\"/sdk/xplm_ControlFlag /\">xplm_ControlFlag</a></td><td>\"4\"</td><td>The control key is down</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_DownFlag\"><a href=\"/sdk/xplm_DownFlag/\">xplm_DownFlag</a></td><td>\"8\"</td><td>The key is being pressed down</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_UpFlag\"><a href=\"/sdk/xplm_UpFlag/\">xplm_UpFlag</a></td><td>\"16\"</td><td>The key is being released</td></tr></table></div></p></div></div><div class=\"component\"><h2 id=\"ASCII CONTROL KEY CODES\">ASCII CONTROL KEY CODES</h2><p>These definitions define how various control keys are mapped to ASCII key codes. Not all key presses generate an ASCII value, so plugin code should be prepared to see null characters come from the keyboard…this usually represents a key stroke that has no equivalent ASCII, like a page-down press. Use virtual key codes to find these key strokes.</p><p>ASCII key codes take into account modifier keys; shift keys will affect capitals and punctuation; control key combinations may have no vaild ASCII and produce NULL. To detect control-key combinations, use virtual key codes, not ASCII keys.</p><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"XPLM_KEY_RETURN\"><a href=\"/sdk/XPLM_KEY_RETURN/\">XPLM_KEY_RETURN</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_KEY_RETURN/\">XPLM_KEY_RETURN</a>      13</code></pre></div><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"XPLM_KEY_ESCAPE\"><a href=\"/sdk/XPLM_KEY_ESCAPE/\">XPLM_KEY_ESCAPE</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_KEY_ESCAPE/\">XPLM_KEY_ESCAPE</a>      27</code></pre></div><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"XPLM_KEY_TAB\"><a href=\"/sdk/XPLM_KEY_TAB/\">XPLM_KEY_TAB</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_KEY_TAB/\">XPLM_KEY_TAB</a>         9</code></pre></div><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"XPLM_KEY_DELETE\"><a href=\"/sdk/XPLM_KEY_DELETE/\">XPLM_KEY_DELETE</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_KEY_DELETE/\">XPLM_KEY_DELETE</a>      8</code></pre></div><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"XPLM_KEY_LEFT\"><a href=\"/sdk/XPLM_KEY_LEFT/\">XPLM_KEY_LEFT</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_KEY_LEFT/\">XPLM_KEY_LEFT</a>        28</code></pre></div><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"XPLM_KEY_RIGHT\"><a href=\"/sdk/XPLM_KEY_RIGHT/\">XPLM_KEY_RIGHT</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_KEY_RIGHT/\">XPLM_KEY_RIGHT</a>       29</code></pre></div><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"XPLM_KEY_UP\"><a href=\"/sdk/XPLM_KEY_UP/\">XPLM_KEY_UP</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_KEY_UP/\">XPLM_KEY_UP</a>          30</code></pre></div><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"XPLM_KEY_DOWN\"><a href=\"/sdk/XPLM_KEY_DOWN/\">XPLM_KEY_DOWN</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_KEY_DOWN/\">XPLM_KEY_DOWN</a>        31</code></pre></div><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"XPLM_KEY_0\"><a href=\"/sdk/XPLM_KEY_0/\">XPLM_KEY_0</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_KEY_0/\">XPLM_KEY_0</a>           48</code></pre></div><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"XPLM_KEY_1\"><a href=\"/sdk/XPLM_KEY_1/\">XPLM_KEY_1</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_KEY_1/\">XPLM_KEY_1</a>           49</code></pre></div><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"XPLM_KEY_2\"><a href=\"/sdk/XPLM_KEY_2/\">XPLM_KEY_2</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_KEY_2/\">XPLM_KEY_2</a>           50</code></pre></div><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"XPLM_KEY_3\"><a href=\"/sdk/XPLM_KEY_3/\">XPLM_KEY_3</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_KEY_3/\">XPLM_KEY_3</a>           51</code></pre></div><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"XPLM_KEY_4\"><a href=\"/sdk/XPLM_KEY_4/\">XPLM_KEY_4</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_KEY_4/\">XPLM_KEY_4</a>           52</code></pre></div><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"XPLM_KEY_5\"><a href=\"/sdk/XPLM_KEY_5/\">XPLM_KEY_5</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_KEY_5/\">XPLM_KEY_5</a>           53</code></pre></div><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"XPLM_KEY_6\"><a href=\"/sdk/XPLM_KEY_6/\">XPLM_KEY_6</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_KEY_6/\">XPLM_KEY_6</a>           54</code></pre></div><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"XPLM_KEY_7\"><a href=\"/sdk/XPLM_KEY_7/\">XPLM_KEY_7</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_KEY_7/\">XPLM_KEY_7</a>           55</code></pre></div><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"XPLM_KEY_8\"><a href=\"/sdk/XPLM_KEY_8/\">XPLM_KEY_8</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_KEY_8/\">XPLM_KEY_8</a>           56</code></pre></div><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"XPLM_KEY_9\"><a href=\"/sdk/XPLM_KEY_9/\">XPLM_KEY_9</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_KEY_9/\">XPLM_KEY_9</a>           57</code></pre></div><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"XPLM_KEY_DECIMAL\"><a href=\"/sdk/XPLM_KEY_DECIMAL/\">XPLM_KEY_DECIMAL</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_KEY_DECIMAL/\">XPLM_KEY_DECIMAL</a>     46</code></pre></div></div><div class=\"component\"><h2 id=\"VIRTUAL KEY CODES\">VIRTUAL KEY CODES</h2><p>These are cross-platform defines for every distinct keyboard press on the computer. Every physical key on the keyboard has a virtual key code. So the “two” key on the top row of the main keyboard has a different code from the “two” key on the numeric key pad. But the ‘w’ and ‘W’ character are indistinguishable by virtual key code because they are the same physical key (one with and one without the shift key).</p><p>Use virtual key codes to detect keystrokes that do not have ASCII equivalents, allow the user to map the numeric keypad separately from the main keyboard, and detect control key and other modifier-key combinations that generate ASCII control key sequences (many of which are not available directly via character keys in the SDK).</p><p>To assign virtual key codes we started with the Microsoft set but made some additions and changes. A few differences:</p><ol><li>Modifier keys are not available as virtual key codes. You cannot get distinct modifier press and release messages. Please do not try to use modifier keys as regular keys; doing so will almost certainly interfere with users' abilities to use the native X-Plane key bindings.</li><li>Some keys that do not exist on both Mac and PC keyboards are removed.</li><li>Do not assume that the values of these keystrokes are interchangeable with MS v-keys.</li></ol><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"XPLM_VK_BACK\"><a href=\"/sdk/XPLM_VK_BACK/\">XPLM_VK_BACK</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_VK_BACK/\">XPLM_VK_BACK</a>         0x08</code></pre></div><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"XPLM_VK_TAB\"><a href=\"/sdk/XPLM_VK_TAB/\">XPLM_VK_TAB</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_VK_TAB/\">XPLM_VK_TAB</a>          0x09</code></pre></div><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"XPLM_VK_CLEAR\"><a href=\"/sdk/XPLM_VK_CLEAR/\">XPLM_VK_CLEAR</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_VK_CLEAR/\">XPLM_VK_CLEAR</a>        0x0C</code></pre></div><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"XPLM_VK_RETURN\"><a href=\"/sdk/XPLM_VK_RETURN/\">XPLM_VK_RETURN</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_VK_RETURN/\">XPLM_VK_RETURN</a>       0x0D</code></pre></div><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"XPLM_VK_ESCAPE\"><a href=\"/sdk/XPLM_VK_ESCAPE/\">XPLM_VK_ESCAPE</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_VK_ESCAPE/\">XPLM_VK_ESCAPE</a>       0x1B</code></pre></div><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"XPLM_VK_SPACE\"><a href=\"/sdk/XPLM_VK_SPACE/\">XPLM_VK_SPACE</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_VK_SPACE/\">XPLM_VK_SPACE</a>        0x20</code></pre></div><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"XPLM_VK_PRIOR\"><a href=\"/sdk/XPLM_VK_PRIOR/\">XPLM_VK_PRIOR</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_VK_PRIOR/\">XPLM_VK_PRIOR</a>        0x21</code></pre></div><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"XPLM_VK_NEXT\"><a href=\"/sdk/XPLM_VK_NEXT/\">XPLM_VK_NEXT</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_VK_NEXT/\">XPLM_VK_NEXT</a>         0x22</code></pre></div><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"XPLM_VK_END\"><a href=\"/sdk/XPLM_VK_END/\">XPLM_VK_END</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_VK_END/\">XPLM_VK_END</a>          0x23</code></pre></div><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"XPLM_VK_HOME\"><a href=\"/sdk/XPLM_VK_HOME/\">XPLM_VK_HOME</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_VK_HOME/\">XPLM_VK_HOME</a>         0x24</code></pre></div><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"XPLM_VK_LEFT\"><a href=\"/sdk/XPLM_VK_LEFT/\">XPLM_VK_LEFT</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_VK_LEFT/\">XPLM_VK_LEFT</a>         0x25</code></pre></div><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"XPLM_VK_UP\"><a href=\"/sdk/XPLM_VK_UP/\">XPLM_VK_UP</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_VK_UP/\">XPLM_VK_UP</a>           0x26</code></pre></div><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"XPLM_VK_RIGHT\"><a href=\"/sdk/XPLM_VK_RIGHT/\">XPLM_VK_RIGHT</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_VK_RIGHT/\">XPLM_VK_RIGHT</a>        0x27</code></pre></div><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"XPLM_VK_DOWN\"><a href=\"/sdk/XPLM_VK_DOWN/\">XPLM_VK_DOWN</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_VK_DOWN/\">XPLM_VK_DOWN</a>         0x28</code></pre></div><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"XPLM_VK_SELECT\"><a href=\"/sdk/XPLM_VK_SELECT/\">XPLM_VK_SELECT</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_VK_SELECT/\">XPLM_VK_SELECT</a>       0x29</code></pre></div><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"XPLM_VK_PRINT\"><a href=\"/sdk/XPLM_VK_PRINT/\">XPLM_VK_PRINT</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_VK_PRINT/\">XPLM_VK_PRINT</a>        0x2A</code></pre></div><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"XPLM_VK_EXECUTE\"><a href=\"/sdk/XPLM_VK_EXECUTE/\">XPLM_VK_EXECUTE</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_VK_EXECUTE/\">XPLM_VK_EXECUTE</a>      0x2B</code></pre></div><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"XPLM_VK_SNAPSHOT\"><a href=\"/sdk/XPLM_VK_SNAPSHOT/\">XPLM_VK_SNAPSHOT</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_VK_SNAPSHOT/\">XPLM_VK_SNAPSHOT</a>     0x2C</code></pre></div><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"XPLM_VK_INSERT\"><a href=\"/sdk/XPLM_VK_INSERT/\">XPLM_VK_INSERT</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_VK_INSERT/\">XPLM_VK_INSERT</a>       0x2D</code></pre></div><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"XPLM_VK_DELETE\"><a href=\"/sdk/XPLM_VK_DELETE/\">XPLM_VK_DELETE</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_VK_DELETE/\">XPLM_VK_DELETE</a>       0x2E</code></pre></div><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"XPLM_VK_HELP\"><a href=\"/sdk/XPLM_VK_HELP/\">XPLM_VK_HELP</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_VK_HELP/\">XPLM_VK_HELP</a>         0x2F</code></pre></div><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"XPLM_VK_0\"><a href=\"/sdk/XPLM_VK_0/\">XPLM_VK_0</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_VK_0/\">XPLM_VK_0</a>            0x30</code></pre><p><a href=\"/sdk/XPLM_VK_0/\">XPLM_VK_0</a>thru<a href=\"/sdk/XPLM_VK_9/\">XPLM_VK_9</a>are the same as ASCII ‘0’ thru ‘9’ (0x30 - 0x39)</p></div><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"XPLM_VK_1\"><a href=\"/sdk/XPLM_VK_1/\">XPLM_VK_1</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_VK_1/\">XPLM_VK_1</a>            0x31</code></pre></div><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"XPLM_VK_2\"><a href=\"/sdk/XPLM_VK_2/\">XPLM_VK_2</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_VK_2/\">XPLM_VK_2</a>            0x32</code></pre></div><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"XPLM_VK_3\"><a href=\"/sdk/XPLM_VK_3/\">XPLM_VK_3</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_VK_3/\">XPLM_VK_3</a>            0x33</code></pre></div><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"XPLM_VK_4\"><a href=\"/sdk/XPLM_VK_4/\">XPLM_VK_4</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_VK_4/\">XPLM_VK_4</a>            0x34</code></pre></div><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"XPLM_VK_5\"><a href=\"/sdk/XPLM_VK_5/\">XPLM_VK_5</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_VK_5/\">XPLM_VK_5</a>            0x35</code></pre></div><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"XPLM_VK_6\"><a href=\"/sdk/XPLM_VK_6/\">XPLM_VK_6</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_VK_6/\">XPLM_VK_6</a>            0x36</code></pre></div><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"XPLM_VK_7\"><a href=\"/sdk/XPLM_VK_7/\">XPLM_VK_7</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_VK_7/\">XPLM_VK_7</a>            0x37</code></pre></div><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"XPLM_VK_8\"><a href=\"/sdk/XPLM_VK_8/\">XPLM_VK_8</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_VK_8/\">XPLM_VK_8</a>            0x38</code></pre></div><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"XPLM_VK_9\"><a href=\"/sdk/XPLM_VK_9/\">XPLM_VK_9</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_VK_9/\">XPLM_VK_9</a>            0x39</code></pre></div><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"XPLM_VK_A\"><a href=\"/sdk/XPLM_VK_A/\">XPLM_VK_A</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_VK_A/\">XPLM_VK_A</a>            0x41</code></pre><p><a href=\"/sdk/XPLM_VK_A/\">XPLM_VK_A</a>thru<a href=\"/sdk/XPLM_VK_Z/\">XPLM_VK_Z</a>are the same as ASCII ‘A’ thru ‘Z’ (0x41 - 0x5A)</p></div><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"XPLM_VK_B\"><a href=\"/sdk/XPLM_VK_B/\">XPLM_VK_B</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_VK_B/\">XPLM_VK_B</a>            0x42</code></pre></div><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"XPLM_VK_C\"><a href=\"/sdk/XPLM_VK_C/\">XPLM_VK_C</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_VK_C/\">XPLM_VK_C</a>            0x43</code></pre></div><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"XPLM_VK_D\"><a href=\"/sdk/XPLM_VK_D/\">XPLM_VK_D</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_VK_D/\">XPLM_VK_D</a>            0x44</code></pre></div><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"XPLM_VK_E\"><a href=\"/sdk/XPLM_VK_E/\">XPLM_VK_E</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_VK_E/\">XPLM_VK_E</a>            0x45</code></pre></div><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"XPLM_VK_F\"><a href=\"/sdk/XPLM_VK_F/\">XPLM_VK_F</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_VK_F/\">XPLM_VK_F</a>            0x46</code></pre></div><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"XPLM_VK_G\"><a href=\"/sdk/XPLM_VK_G/\">XPLM_VK_G</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_VK_G/\">XPLM_VK_G</a>            0x47</code></pre></div><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"XPLM_VK_H\"><a href=\"/sdk/XPLM_VK_H/\">XPLM_VK_H</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_VK_H/\">XPLM_VK_H</a>            0x48</code></pre></div><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"XPLM_VK_I\"><a href=\"/sdk/XPLM_VK_I/\">XPLM_VK_I</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_VK_I/\">XPLM_VK_I</a>            0x49</code></pre></div><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"XPLM_VK_J\"><a href=\"/sdk/XPLM_VK_J/\">XPLM_VK_J</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_VK_J/\">XPLM_VK_J</a>            0x4A</code></pre></div><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"XPLM_VK_K\"><a href=\"/sdk/XPLM_VK_K/\">XPLM_VK_K</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_VK_K/\">XPLM_VK_K</a>            0x4B</code></pre></div><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"XPLM_VK_L\"><a href=\"/sdk/XPLM_VK_L/\">XPLM_VK_L</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_VK_L/\">XPLM_VK_L</a>            0x4C</code></pre></div><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"XPLM_VK_M\"><a href=\"/sdk/XPLM_VK_M/\">XPLM_VK_M</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_VK_M/\">XPLM_VK_M</a>            0x4D</code></pre></div><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"XPLM_VK_N\"><a href=\"/sdk/XPLM_VK_N/\">XPLM_VK_N</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_VK_N/\">XPLM_VK_N</a>            0x4E</code></pre></div><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"XPLM_VK_O\"><a href=\"/sdk/XPLM_VK_O/\">XPLM_VK_O</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_VK_O/\">XPLM_VK_O</a>            0x4F</code></pre></div><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"XPLM_VK_P\"><a href=\"/sdk/XPLM_VK_P/\">XPLM_VK_P</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_VK_P/\">XPLM_VK_P</a>            0x50</code></pre></div><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"XPLM_VK_Q\"><a href=\"/sdk/XPLM_VK_Q/\">XPLM_VK_Q</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_VK_Q/\">XPLM_VK_Q</a>            0x51</code></pre></div><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"XPLM_VK_R\"><a href=\"/sdk/XPLM_VK_R/\">XPLM_VK_R</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_VK_R/\">XPLM_VK_R</a>            0x52</code></pre></div><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"XPLM_VK_S\"><a href=\"/sdk/XPLM_VK_S/\">XPLM_VK_S</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_VK_S/\">XPLM_VK_S</a>            0x53</code></pre></div><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"XPLM_VK_T\"><a href=\"/sdk/XPLM_VK_T/\">XPLM_VK_T</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_VK_T/\">XPLM_VK_T</a>            0x54</code></pre></div><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"XPLM_VK_U\"><a href=\"/sdk/XPLM_VK_U/\">XPLM_VK_U</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_VK_U/\">XPLM_VK_U</a>            0x55</code></pre></div><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"XPLM_VK_V\"><a href=\"/sdk/XPLM_VK_V/\">XPLM_VK_V</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_VK_V/\">XPLM_VK_V</a>            0x56</code></pre></div><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"XPLM_VK_W\"><a href=\"/sdk/XPLM_VK_W/\">XPLM_VK_W</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_VK_W/\">XPLM_VK_W</a>            0x57</code></pre></div><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"XPLM_VK_X\"><a href=\"/sdk/XPLM_VK_X/\">XPLM_VK_X</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_VK_X/\">XPLM_VK_X</a>            0x58</code></pre></div><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"XPLM_VK_Y\"><a href=\"/sdk/XPLM_VK_Y/\">XPLM_VK_Y</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_VK_Y/\">XPLM_VK_Y</a>            0x59</code></pre></div><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"XPLM_VK_Z\"><a href=\"/sdk/XPLM_VK_Z/\">XPLM_VK_Z</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_VK_Z/\">XPLM_VK_Z</a>            0x5A</code></pre></div><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"XPLM_VK_NUMPAD0\"><a href=\"/sdk/XPLM_VK_NUMPAD0/\">XPLM_VK_NUMPAD0</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_VK_NUMPAD0/\">XPLM_VK_NUMPAD0</a>      0x60</code></pre></div><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"XPLM_VK_NUMPAD1\"><a href=\"/sdk/XPLM_VK_NUMPAD1/\">XPLM_VK_NUMPAD1</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_VK_NUMPAD1/\">XPLM_VK_NUMPAD1</a>      0x61</code></pre></div><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"XPLM_VK_NUMPAD2\"><a href=\"/sdk/XPLM_VK_NUMPAD2/\">XPLM_VK_NUMPAD2</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_VK_NUMPAD2/\">XPLM_VK_NUMPAD2</a>      0x62</code></pre></div><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"XPLM_VK_NUMPAD3\"><a href=\"/sdk/XPLM_VK_NUMPAD3/\">XPLM_VK_NUMPAD3</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_VK_NUMPAD3/\">XPLM_VK_NUMPAD3</a>      0x63</code></pre></div><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"XPLM_VK_NUMPAD4\"><a href=\"/sdk/XPLM_VK_NUMPAD4/\">XPLM_VK_NUMPAD4</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_VK_NUMPAD4/\">XPLM_VK_NUMPAD4</a>      0x64</code></pre></div><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"XPLM_VK_NUMPAD5\"><a href=\"/sdk/XPLM_VK_NUMPAD5/\">XPLM_VK_NUMPAD5</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_VK_NUMPAD5/\">XPLM_VK_NUMPAD5</a>      0x65</code></pre></div><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"XPLM_VK_NUMPAD6\"><a href=\"/sdk/XPLM_VK_NUMPAD6/\">XPLM_VK_NUMPAD6</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_VK_NUMPAD6/\">XPLM_VK_NUMPAD6</a>      0x66</code></pre></div><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"XPLM_VK_NUMPAD7\"><a href=\"/sdk/XPLM_VK_NUMPAD7/\">XPLM_VK_NUMPAD7</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_VK_NUMPAD7/\">XPLM_VK_NUMPAD7</a>      0x67</code></pre></div><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"XPLM_VK_NUMPAD8\"><a href=\"/sdk/XPLM_VK_NUMPAD8/\">XPLM_VK_NUMPAD8</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_VK_NUMPAD8/\">XPLM_VK_NUMPAD8</a>      0x68</code></pre></div><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"XPLM_VK_NUMPAD9\"><a href=\"/sdk/XPLM_VK_NUMPAD9/\">XPLM_VK_NUMPAD9</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_VK_NUMPAD9/\">XPLM_VK_NUMPAD9</a>      0x69</code></pre></div><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"XPLM_VK_MULTIPLY\"><a href=\"/sdk/XPLM_VK_MULTIPLY/\">XPLM_VK_MULTIPLY</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_VK_MULTIPLY/\">XPLM_VK_MULTIPLY</a>     0x6A</code></pre></div><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"XPLM_VK_ADD\"><a href=\"/sdk/XPLM_VK_ADD/\">XPLM_VK_ADD</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_VK_ADD/\">XPLM_VK_ADD</a>          0x6B</code></pre></div><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"XPLM_VK_SEPARATOR\"><a href=\"/sdk/XPLM_VK_SEPARATOR/\">XPLM_VK_SEPARATOR</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_VK_SEPARATOR/\">XPLM_VK_SEPARATOR</a>    0x6C</code></pre></div><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"XPLM_VK_SUBTRACT\"><a href=\"/sdk/XPLM_VK_SUBTRACT/\">XPLM_VK_SUBTRACT</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_VK_SUBTRACT/\">XPLM_VK_SUBTRACT</a>     0x6D</code></pre></div><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"XPLM_VK_DECIMAL\"><a href=\"/sdk/XPLM_VK_DECIMAL/\">XPLM_VK_DECIMAL</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_VK_DECIMAL/\">XPLM_VK_DECIMAL</a>      0x6E</code></pre></div><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"XPLM_VK_DIVIDE\"><a href=\"/sdk/XPLM_VK_DIVIDE/\">XPLM_VK_DIVIDE</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_VK_DIVIDE/\">XPLM_VK_DIVIDE</a>       0x6F</code></pre></div><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"XPLM_VK_F1\"><a href=\"/sdk/XPLM_VK_F1/\">XPLM_VK_F1</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_VK_F1/\">XPLM_VK_F1</a>           0x70</code></pre></div><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"XPLM_VK_F2\"><a href=\"/sdk/XPLM_VK_F2/\">XPLM_VK_F2</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_VK_F2/\">XPLM_VK_F2</a>           0x71</code></pre></div><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"XPLM_VK_F3\"><a href=\"/sdk/XPLM_VK_F3/\">XPLM_VK_F3</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_VK_F3/\">XPLM_VK_F3</a>           0x72</code></pre></div><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"XPLM_VK_F4\"><a href=\"/sdk/XPLM_VK_F4/\">XPLM_VK_F4</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_VK_F4/\">XPLM_VK_F4</a>           0x73</code></pre></div><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"XPLM_VK_F5\"><a href=\"/sdk/XPLM_VK_F5/\">XPLM_VK_F5</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_VK_F5/\">XPLM_VK_F5</a>           0x74</code></pre></div><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"XPLM_VK_F6\"><a href=\"/sdk/XPLM_VK_F6/\">XPLM_VK_F6</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_VK_F6/\">XPLM_VK_F6</a>           0x75</code></pre></div><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"XPLM_VK_F7\"><a href=\"/sdk/XPLM_VK_F7/\">XPLM_VK_F7</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_VK_F7/\">XPLM_VK_F7</a>           0x76</code></pre></div><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"XPLM_VK_F8\"><a href=\"/sdk/XPLM_VK_F8/\">XPLM_VK_F8</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_VK_F8/\">XPLM_VK_F8</a>           0x77</code></pre></div><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"XPLM_VK_F9\"><a href=\"/sdk/XPLM_VK_F9/\">XPLM_VK_F9</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_VK_F9/\">XPLM_VK_F9</a>           0x78</code></pre></div><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"XPLM_VK_F10\"><a href=\"/sdk/XPLM_VK_F10/\">XPLM_VK_F10</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_VK_F10/\">XPLM_VK_F10</a>          0x79</code></pre></div><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"XPLM_VK_F11\"><a href=\"/sdk/XPLM_VK_F11/\">XPLM_VK_F11</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_VK_F11/\">XPLM_VK_F11</a>          0x7A</code></pre></div><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"XPLM_VK_F12\"><a href=\"/sdk/XPLM_VK_F12/\">XPLM_VK_F12</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_VK_F12/\">XPLM_VK_F12</a>          0x7B</code></pre></div><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"XPLM_VK_F13\"><a href=\"/sdk/XPLM_VK_F13/\">XPLM_VK_F13</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_VK_F13/\">XPLM_VK_F13</a>          0x7C</code></pre></div><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"XPLM_VK_F14\"><a href=\"/sdk/XPLM_VK_F14/\">XPLM_VK_F14</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_VK_F14/\">XPLM_VK_F14</a>          0x7D</code></pre></div><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"XPLM_VK_F15\"><a href=\"/sdk/XPLM_VK_F15/\">XPLM_VK_F15</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_VK_F15/\">XPLM_VK_F15</a>          0x7E</code></pre></div><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"XPLM_VK_F16\"><a href=\"/sdk/XPLM_VK_F16/\">XPLM_VK_F16</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_VK_F16/\">XPLM_VK_F16</a>          0x7F</code></pre></div><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"XPLM_VK_F17\"><a href=\"/sdk/XPLM_VK_F17/\">XPLM_VK_F17</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_VK_F17/\">XPLM_VK_F17</a>          0x80</code></pre></div><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"XPLM_VK_F18\"><a href=\"/sdk/XPLM_VK_F18/\">XPLM_VK_F18</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_VK_F18/\">XPLM_VK_F18</a>          0x81</code></pre></div><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"XPLM_VK_F19\"><a href=\"/sdk/XPLM_VK_F19/\">XPLM_VK_F19</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_VK_F19/\">XPLM_VK_F19</a>          0x82</code></pre></div><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"XPLM_VK_F20\"><a href=\"/sdk/XPLM_VK_F20/\">XPLM_VK_F20</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_VK_F20/\">XPLM_VK_F20</a>          0x83</code></pre></div><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"XPLM_VK_F21\"><a href=\"/sdk/XPLM_VK_F21/\">XPLM_VK_F21</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_VK_F21/\">XPLM_VK_F21</a>          0x84</code></pre></div><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"XPLM_VK_F22\"><a href=\"/sdk/XPLM_VK_F22/\">XPLM_VK_F22</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_VK_F22/\">XPLM_VK_F22</a>          0x85</code></pre></div><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"XPLM_VK_F23\"><a href=\"/sdk/XPLM_VK_F23/\">XPLM_VK_F23</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_VK_F23/\">XPLM_VK_F23</a>          0x86</code></pre></div><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"XPLM_VK_F24\"><a href=\"/sdk/XPLM_VK_F24/\">XPLM_VK_F24</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_VK_F24/\">XPLM_VK_F24</a>          0x87</code></pre></div><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"XPLM_VK_EQUAL\"><a href=\"/sdk/XPLM_VK_EQUAL/\">XPLM_VK_EQUAL</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_VK_EQUAL/\">XPLM_VK_EQUAL</a>        0xB0</code></pre><p>The following definitions are extended and are not based on the Microsoft key set.</p></div><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"XPLM_VK_MINUS\"><a href=\"/sdk/XPLM_VK_MINUS/\">XPLM_VK_MINUS</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_VK_MINUS/\">XPLM_VK_MINUS</a>        0xB1</code></pre></div><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"XPLM_VK_RBRACE\"><a href=\"/sdk/XPLM_VK_RBRACE/\">XPLM_VK_RBRACE</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_VK_RBRACE/\">XPLM_VK_RBRACE</a>       0xB2</code></pre></div><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"XPLM_VK_LBRACE\"><a href=\"/sdk/XPLM_VK_LBRACE/\">XPLM_VK_LBRACE</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_VK_LBRACE/\">XPLM_VK_LBRACE</a>       0xB3</code></pre></div><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"XPLM_VK_QUOTE\"><a href=\"/sdk/XPLM_VK_QUOTE/\">XPLM_VK_QUOTE</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_VK_QUOTE/\">XPLM_VK_QUOTE</a>        0xB4</code></pre></div><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"XPLM_VK_SEMICOLON\"><a href=\"/sdk/XPLM_VK_SEMICOLON/\">XPLM_VK_SEMICOLON</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_VK_SEMICOLON/\">XPLM_VK_SEMICOLON</a>    0xB5</code></pre></div><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"XPLM_VK_BACKSLASH\"><a href=\"/sdk/XPLM_VK_BACKSLASH/\">XPLM_VK_BACKSLASH</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_VK_BACKSLASH/\">XPLM_VK_BACKSLASH</a>    0xB6</code></pre></div><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"XPLM_VK_COMMA\"><a href=\"/sdk/XPLM_VK_COMMA/\">XPLM_VK_COMMA</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_VK_COMMA/\">XPLM_VK_COMMA</a>        0xB7</code></pre></div><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"XPLM_VK_SLASH\"><a href=\"/sdk/XPLM_VK_SLASH/\">XPLM_VK_SLASH</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_VK_SLASH/\">XPLM_VK_SLASH</a>        0xB8</code></pre></div><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"XPLM_VK_PERIOD\"><a href=\"/sdk/XPLM_VK_PERIOD/\">XPLM_VK_PERIOD</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_VK_PERIOD/\">XPLM_VK_PERIOD</a>       0xB9</code></pre></div><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"XPLM_VK_BACKQUOTE\"><a href=\"/sdk/XPLM_VK_BACKQUOTE/\">XPLM_VK_BACKQUOTE</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_VK_BACKQUOTE/\">XPLM_VK_BACKQUOTE</a>    0xBA</code></pre></div><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"XPLM_VK_ENTER\"><a href=\"/sdk/XPLM_VK_ENTER/\">XPLM_VK_ENTER</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_VK_ENTER/\">XPLM_VK_ENTER</a>        0xBB</code></pre></div><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"XPLM_VK_NUMPAD_ENT\"><a href=\"/sdk/XPLM_VK_NUMPAD_ENT/\">XPLM_VK_NUMPAD_ENT</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_VK_NUMPAD_ENT/\">XPLM_VK_NUMPAD_ENT</a>   0xBC</code></pre></div><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"XPLM_VK_NUMPAD_EQ\"><a href=\"/sdk/XPLM_VK_NUMPAD_EQ/\">XPLM_VK_NUMPAD_EQ</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_VK_NUMPAD_EQ/\">XPLM_VK_NUMPAD_EQ</a>    0xBD</code></pre></div></div><div class=\"struct\"><h3 class=\"sdk-api-struct\" id=\"XPLMFixedString150_t\"><a href=\"/sdk/XPLMFixedString150_t/\">XPLMFixedString150_t</a></h3><p>A container for a fixed-size string buffer of 150 characters.</p><pre class=\"language-cpp\" data-manual=\"true\"><code>typedef struct {\n     // The size of the struct.\n     char                      buffer[150];\n} <a href=\"/sdk/XPLMFixedString150_t/\">XPLMFixedString150_t</a>;</code></pre></div><div class=\"enum XPLM200\"><h3 class=\"sdk-api-enum\" id=\"XPLMCursorStatus\"><a href=\"/sdk/XPLMCursorStatus/\">XPLMCursorStatus</a></h3><p><a href=\"/sdk/XPLMCursorStatus/\">XPLMCursorStatus</a>describes how you would like X-Plane to manage the cursor. See<a href=\"/sdk/XPLMHandleCursor_f/\">XPLMHandleCursor_f</a>for more info.</p><p><div class=\"enumitem XPLM200\"><table><thead><tr><th>Name</th><th>Value</th><th>Description</th></tr></thead><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_CursorDefault\"><a href=\"/sdk/xplm_CursorDefault/\">xplm_CursorDefault</a></td><td>\"0\"</td><td>X-Plane manages the cursor normally, plugin does not affect the cusrsor.</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_CursorHidden\"><a href=\"/sdk/xplm_CursorHidden/\">xplm_CursorHidden</a></td><td>\"1\"</td><td>X-Plane hides the cursor.</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_CursorArrow\"><a href=\"/sdk/xplm_CursorArrow/\">xplm_CursorArrow</a></td><td>\"2\"</td><td>X-Plane shows the cursor as the default arrow.</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_CursorCustom\"><a href=\"/sdk/xplm_CursorCustom/\">xplm_CursorCustom</a></td><td>\"3\"</td><td>X-Plane shows the cursor but lets you select an OS cursor.</td></tr></table></div></p></div><div class=\"enum\"><h3 class=\"sdk-api-enum\" id=\"XPLMMouseStatus\"><a href=\"/sdk/XPLMMouseStatus/\">XPLMMouseStatus</a></h3><pre><code>When the mouse is clicked, your mouse click routine is called repeatedly.  It is first called with the\nmouse down message.  It is then called zero or more times with the mouse-drag message, and finally it\nis called once with the mouse up message.  All of these messages will be directed to the same window;\nyou are guaranteed to not receive a drag or mouse-up event without first receiving the corresponding mouse-down.\n</code></pre><p><div class=\"enumitem\"><table><thead><tr><th>Name</th><th>Value</th><th>Description</th></tr></thead><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_MouseDown\"><a href=\"/sdk/xplm_MouseDown/\">xplm_MouseDown</a></td><td>\"1\"</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_MouseDrag\"><a href=\"/sdk/xplm_MouseDrag/\">xplm_MouseDrag</a></td><td>\"2\"</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_MouseUp\"><a href=\"/sdk/xplm_MouseUp/\">xplm_MouseUp</a></td><td>\"3\"</td></tr></table></div></p></div></div></div></article>",
      "code_examples": [
        {
          "char_count": 115,
          "code": "typedef struct {\n     // The size of the struct.\n     char                      buffer[150];\n}XPLMFixedString150_t;",
          "context": "A container for a fixed-size string buffer of 150 characters.",
          "id": "example_134",
          "language": "c",
          "line_count": 4,
          "type": "snippet"
        },
        {
          "char_count": 419,
          "code": "When the mouse is clicked, your mouse click routine is called repeatedly.  It is first called with the\nmouse down message.  It is then called zero or more times with the mouse-drag message, and finally it\nis called once with the mouse up message.  All of these messages will be directed to the same window;\nyou are guaranteed to not receive a drag or mouse-up event without first receiving the corresponding mouse-down.",
          "context": "XPLMMouseStatus",
          "id": "example_135",
          "language": "c",
          "line_count": 4,
          "type": "snippet"
        }
      ],
      "cross_references": [
        "XPLMFindPluginBySignature",
        "XPLMPlugin"
      ],
      "markdown": "# [XPLMDefs](/sdk/XPLMDefs/)API\n\nThis file is contains the cross-platform and basic definitions for the X-Plane\nSDK.\n\nThe preprocessor macros APL, LIN and IBM must be defined to specify the\ncompilation target; define APL to 1 to compile on Mac, IBM to 1 to compile on\nWindows and LIN to 1 to compile on Linux. Only one compilation target may be\nused at a time. You must specify these macro definitions before\nincluding[XPLMDefs](/sdk/XPLMDefs/).h or any other XPLM headers. You can do this\nusing the -D command line option or a preprocessor header.\n\n## DLL Definitions\n\nThese definitions control the importing and exporting of functions within the\nDLL.\n\nYou can prefix your five required callbacks with the PLUGIN_API macro to declare\nthem as exported C functions. The XPLM_API macro identifies functions that are\nprovided to you via the plugin SDK. (Link against XPLM.lib to use these\nfunctions.)\n\n## GLOBAL DEFINITIONS\n\nThese definitions are used in all parts of the SDK.\n\n### [XPLMPluginID](/sdk/XPLMPluginID/)\n\n```cpp\ntypedef int XPLMPluginID;\n```\n\nEach plug-in is identified by a unique integer ID. This ID can be used to\ndisable or enable a plug-in, or discover what plug-in is ‘running’ at the time.\nA plug-in ID is unique within the currently running instance of X-Plane unless\nplug-ins are reloaded. Plug-ins may receive a different unique ID each time they\nare loaded. This includes the unloading and reloading of plugins that are part\nof the user’s aircraft.\n\nFor persistent identification of plug-ins,\nuse[XPLMFindPluginBySignature](/sdk/XPLMFindPluginBySignature/)in\nXPLMUtiltiies.h .\n\n-1 indicates no plug-in.\n\n### [XPLM_NO_PLUGIN_ID](/sdk/XPLM_NO_PLUGIN_ID/)\n\n```cpp\n#define XPLM_NO_PLUGIN_ID    (-1)\n```\n\nNo plugin.\n\n### [XPLM_PLUGIN_XPLANE](/sdk/XPLM_PLUGIN_XPLANE/)\n\n```cpp\n#define XPLM_PLUGIN_XPLANE   (0)\n```\n\nX-Plane itself\n\n### [kXPLM_Version](/sdk/kXPLM_Version/)\n\n```cpp\n#define kXPLM_Version        (411)\n```\n\nThe current XPLM revision is 4.1.1 (411).\n\n### [XPLMKeyFlags](/sdk/XPLMKeyFlags/)\n\nThese bitfields define modifier keys in a platform independent way. When a key\nis pressed, a series of messages are sent to your plugin. The down flag is set\nin the first of these messages, and the up flag in the last. While the key is\nheld down, messages are sent with neither flag set to indicate that the key is\nbeing held down as a repeated character.\n\nThe control flag is mapped to the control flag on Macintosh and PC. Generally\nX-Plane uses the control key and not the command key on Macintosh, providing a\nconsistent interface across platforms that does not necessarily match the\nMacintosh user interface guidelines. There is not yet a way for plugins to\naccess the Macintosh control keys without using #ifdefed code.\n\n| Name | Value | Description |\n| --- | --- | --- |\n| [xplm_ShiftFlag](/sdk/xplm_ShiftFlag/) | \"1\" | The shift key is down |\n| [xplm_OptionAltFlag](/sdk/xplm_OptionAltFlag/) | \"2\" | The option or alt key\nis down |\n| [xplm_ControlFlag](/sdk/xplm_ControlFlag /) | \"4\" | The control key is down |\n| [xplm_DownFlag](/sdk/xplm_DownFlag/) | \"8\" | The key is being pressed down |\n| [xplm_UpFlag](/sdk/xplm_UpFlag/) | \"16\" | The key is being released |\n\n## ASCII CONTROL KEY CODES\n\nThese definitions define how various control keys are mapped to ASCII key codes.\nNot all key presses generate an ASCII value, so plugin code should be prepared\nto see null characters come from the keyboard…this usually represents a key\nstroke that has no equivalent ASCII, like a page-down press. Use virtual key\ncodes to find these key strokes.\n\nASCII key codes take into account modifier keys; shift keys will affect capitals\nand punctuation; control key combinations may have no vaild ASCII and produce\nNULL. To detect control-key combinations, use virtual key codes, not ASCII keys.\n\n### [XPLM_KEY_RETURN](/sdk/XPLM_KEY_RETURN/)\n\n```cpp\n#define XPLM_KEY_RETURN      13\n```\n\n### [XPLM_KEY_ESCAPE](/sdk/XPLM_KEY_ESCAPE/)\n\n```cpp\n#define XPLM_KEY_ESCAPE      27\n```\n\n### [XPLM_KEY_TAB](/sdk/XPLM_KEY_TAB/)\n\n```cpp\n#define XPLM_KEY_TAB         9\n```\n\n### [XPLM_KEY_DELETE](/sdk/XPLM_KEY_DELETE/)\n\n```cpp\n#define XPLM_KEY_DELETE      8\n```\n\n### [XPLM_KEY_LEFT](/sdk/XPLM_KEY_LEFT/)\n\n```cpp\n#define XPLM_KEY_LEFT        28\n```\n\n### [XPLM_KEY_RIGHT](/sdk/XPLM_KEY_RIGHT/)\n\n```cpp\n#define XPLM_KEY_RIGHT       29\n```\n\n### [XPLM_KEY_UP](/sdk/XPLM_KEY_UP/)\n\n```cpp\n#define XPLM_KEY_UP          30\n```\n\n### [XPLM_KEY_DOWN](/sdk/XPLM_KEY_DOWN/)\n\n```cpp\n#define XPLM_KEY_DOWN        31\n```\n\n### [XPLM_KEY_0](/sdk/XPLM_KEY_0/)\n\n```cpp\n#define XPLM_KEY_0           48\n```\n\n### [XPLM_KEY_1](/sdk/XPLM_KEY_1/)\n\n```cpp\n#define XPLM_KEY_1           49\n```\n\n### [XPLM_KEY_2](/sdk/XPLM_KEY_2/)\n\n```cpp\n#define XPLM_KEY_2           50\n```\n\n### [XPLM_KEY_3](/sdk/XPLM_KEY_3/)\n\n```cpp\n#define XPLM_KEY_3           51\n```\n\n### [XPLM_KEY_4](/sdk/XPLM_KEY_4/)\n\n```cpp\n#define XPLM_KEY_4           52\n```\n\n### [XPLM_KEY_5](/sdk/XPLM_KEY_5/)\n\n```cpp\n#define XPLM_KEY_5           53\n```\n\n### [XPLM_KEY_6](/sdk/XPLM_KEY_6/)\n\n```cpp\n#define XPLM_KEY_6           54\n```\n\n### [XPLM_KEY_7](/sdk/XPLM_KEY_7/)\n\n```cpp\n#define XPLM_KEY_7           55\n```\n\n### [XPLM_KEY_8](/sdk/XPLM_KEY_8/)\n\n```cpp\n#define XPLM_KEY_8           56\n```\n\n### [XPLM_KEY_9](/sdk/XPLM_KEY_9/)\n\n```cpp\n#define XPLM_KEY_9           57\n```\n\n### [XPLM_KEY_DECIMAL](/sdk/XPLM_KEY_DECIMAL/)\n\n```cpp\n#define XPLM_KEY_DECIMAL     46\n```\n\n## VIRTUAL KEY CODES\n\nThese are cross-platform defines for every distinct keyboard press on the\ncomputer. Every physical key on the keyboard has a virtual key code. So the\n“two” key on the top row of the main keyboard has a different code from the\n“two” key on the numeric key pad. But the ‘w’ and ‘W’ character are\nindistinguishable by virtual key code because they are the same physical key\n(one with and one without the shift key).\n\nUse virtual key codes to detect keystrokes that do not have ASCII equivalents,\nallow the user to map the numeric keypad separately from the main keyboard, and\ndetect control key and other modifier-key combinations that generate ASCII\ncontrol key sequences (many of which are not available directly via character\nkeys in the SDK).\n\nTo assign virtual key codes we started with the Microsoft set but made some\nadditions and changes. A few differences:\n\n1. Modifier keys are not available as virtual key codes. You cannot get distinct modifier press and release messages. Please do not try to use modifier keys as regular keys; doing so will almost certainly interfere with users' abilities to use the native X-Plane key bindings.\n2. Some keys that do not exist on both Mac and PC keyboards are removed.\n3. Do not assume that the values of these keystrokes are interchangeable with MS v-keys.\n\n### [XPLM_VK_BACK](/sdk/XPLM_VK_BACK/)\n\n```cpp\n#define XPLM_VK_BACK         0x08\n```\n\n### [XPLM_VK_TAB](/sdk/XPLM_VK_TAB/)\n\n```cpp\n#define XPLM_VK_TAB          0x09\n```\n\n### [XPLM_VK_CLEAR](/sdk/XPLM_VK_CLEAR/)\n\n```cpp\n#define XPLM_VK_CLEAR        0x0C\n```\n\n### [XPLM_VK_RETURN](/sdk/XPLM_VK_RETURN/)\n\n```cpp\n#define XPLM_VK_RETURN       0x0D\n```\n\n### [XPLM_VK_ESCAPE](/sdk/XPLM_VK_ESCAPE/)\n\n```cpp\n#define XPLM_VK_ESCAPE       0x1B\n```\n\n### [XPLM_VK_SPACE](/sdk/XPLM_VK_SPACE/)\n\n```cpp\n#define XPLM_VK_SPACE        0x20\n```\n\n### [XPLM_VK_PRIOR](/sdk/XPLM_VK_PRIOR/)\n\n```cpp\n#define XPLM_VK_PRIOR        0x21\n```\n\n### [XPLM_VK_NEXT](/sdk/XPLM_VK_NEXT/)\n\n```cpp\n#define XPLM_VK_NEXT         0x22\n```\n\n### [XPLM_VK_END](/sdk/XPLM_VK_END/)\n\n```cpp\n#define XPLM_VK_END          0x23\n```\n\n### [XPLM_VK_HOME](/sdk/XPLM_VK_HOME/)\n\n```cpp\n#define XPLM_VK_HOME         0x24\n```\n\n### [XPLM_VK_LEFT](/sdk/XPLM_VK_LEFT/)\n\n```cpp\n#define XPLM_VK_LEFT         0x25\n```\n\n### [XPLM_VK_UP](/sdk/XPLM_VK_UP/)\n\n```cpp\n#define XPLM_VK_UP           0x26\n```\n\n### [XPLM_VK_RIGHT](/sdk/XPLM_VK_RIGHT/)\n\n```cpp\n#define XPLM_VK_RIGHT        0x27\n```\n\n### [XPLM_VK_DOWN](/sdk/XPLM_VK_DOWN/)\n\n```cpp\n#define XPLM_VK_DOWN         0x28\n```\n\n### [XPLM_VK_SELECT](/sdk/XPLM_VK_SELECT/)\n\n```cpp\n#define XPLM_VK_SELECT       0x29\n```\n\n### [XPLM_VK_PRINT](/sdk/XPLM_VK_PRINT/)\n\n```cpp\n#define XPLM_VK_PRINT        0x2A\n```\n\n### [XPLM_VK_EXECUTE](/sdk/XPLM_VK_EXECUTE/)\n\n```cpp\n#define XPLM_VK_EXECUTE      0x2B\n```\n\n### [XPLM_VK_SNAPSHOT](/sdk/XPLM_VK_SNAPSHOT/)\n\n```cpp\n#define XPLM_VK_SNAPSHOT     0x2C\n```\n\n### [XPLM_VK_INSERT](/sdk/XPLM_VK_INSERT/)\n\n```cpp\n#define XPLM_VK_INSERT       0x2D\n```\n\n### [XPLM_VK_DELETE](/sdk/XPLM_VK_DELETE/)\n\n```cpp\n#define XPLM_VK_DELETE       0x2E\n```\n\n### [XPLM_VK_HELP](/sdk/XPLM_VK_HELP/)\n\n```cpp\n#define XPLM_VK_HELP         0x2F\n```\n\n### [XPLM_VK_0](/sdk/XPLM_VK_0/)\n\n```cpp\n#define XPLM_VK_0            0x30\n```\n\n[XPLM_VK_0](/sdk/XPLM_VK_0/)thru[XPLM_VK_9](/sdk/XPLM_VK_9/)are the same as\nASCII ‘0’ thru ‘9’ (0x30 - 0x39)\n\n### [XPLM_VK_1](/sdk/XPLM_VK_1/)\n\n```cpp\n#define XPLM_VK_1            0x31\n```\n\n### [XPLM_VK_2](/sdk/XPLM_VK_2/)\n\n```cpp\n#define XPLM_VK_2            0x32\n```\n\n### [XPLM_VK_3](/sdk/XPLM_VK_3/)\n\n```cpp\n#define XPLM_VK_3            0x33\n```\n\n### [XPLM_VK_4](/sdk/XPLM_VK_4/)\n\n```cpp\n#define XPLM_VK_4            0x34\n```\n\n### [XPLM_VK_5](/sdk/XPLM_VK_5/)\n\n```cpp\n#define XPLM_VK_5            0x35\n```\n\n### [XPLM_VK_6](/sdk/XPLM_VK_6/)\n\n```cpp\n#define XPLM_VK_6            0x36\n```\n\n### [XPLM_VK_7](/sdk/XPLM_VK_7/)\n\n```cpp\n#define XPLM_VK_7            0x37\n```\n\n### [XPLM_VK_8](/sdk/XPLM_VK_8/)\n\n```cpp\n#define XPLM_VK_8            0x38\n```\n\n### [XPLM_VK_9](/sdk/XPLM_VK_9/)\n\n```cpp\n#define XPLM_VK_9            0x39\n```\n\n### [XPLM_VK_A](/sdk/XPLM_VK_A/)\n\n```cpp\n#define XPLM_VK_A            0x41\n```\n\n[XPLM_VK_A](/sdk/XPLM_VK_A/)thru[XPLM_VK_Z](/sdk/XPLM_VK_Z/)are the same as\nASCII ‘A’ thru ‘Z’ (0x41 - 0x5A)\n\n### [XPLM_VK_B](/sdk/XPLM_VK_B/)\n\n```cpp\n#define XPLM_VK_B            0x42\n```\n\n### [XPLM_VK_C](/sdk/XPLM_VK_C/)\n\n```cpp\n#define XPLM_VK_C            0x43\n```\n\n### [XPLM_VK_D](/sdk/XPLM_VK_D/)\n\n```cpp\n#define XPLM_VK_D            0x44\n```\n\n### [XPLM_VK_E](/sdk/XPLM_VK_E/)\n\n```cpp\n#define XPLM_VK_E            0x45\n```\n\n### [XPLM_VK_F](/sdk/XPLM_VK_F/)\n\n```cpp\n#define XPLM_VK_F            0x46\n```\n\n### [XPLM_VK_G](/sdk/XPLM_VK_G/)\n\n```cpp\n#define XPLM_VK_G            0x47\n```\n\n### [XPLM_VK_H](/sdk/XPLM_VK_H/)\n\n```cpp\n#define XPLM_VK_H            0x48\n```\n\n### [XPLM_VK_I](/sdk/XPLM_VK_I/)\n\n```cpp\n#define XPLM_VK_I            0x49\n```\n\n### [XPLM_VK_J](/sdk/XPLM_VK_J/)\n\n```cpp\n#define XPLM_VK_J            0x4A\n```\n\n### [XPLM_VK_K](/sdk/XPLM_VK_K/)\n\n```cpp\n#define XPLM_VK_K            0x4B\n```\n\n### [XPLM_VK_L](/sdk/XPLM_VK_L/)\n\n```cpp\n#define XPLM_VK_L            0x4C\n```\n\n### [XPLM_VK_M](/sdk/XPLM_VK_M/)\n\n```cpp\n#define XPLM_VK_M            0x4D\n```\n\n### [XPLM_VK_N](/sdk/XPLM_VK_N/)\n\n```cpp\n#define XPLM_VK_N            0x4E\n```\n\n### [XPLM_VK_O](/sdk/XPLM_VK_O/)\n\n```cpp\n#define XPLM_VK_O            0x4F\n```\n\n### [XPLM_VK_P](/sdk/XPLM_VK_P/)\n\n```cpp\n#define XPLM_VK_P            0x50\n```\n\n### [XPLM_VK_Q](/sdk/XPLM_VK_Q/)\n\n```cpp\n#define XPLM_VK_Q            0x51\n```\n\n### [XPLM_VK_R](/sdk/XPLM_VK_R/)\n\n```cpp\n#define XPLM_VK_R            0x52\n```\n\n### [XPLM_VK_S](/sdk/XPLM_VK_S/)\n\n```cpp\n#define XPLM_VK_S            0x53\n```\n\n### [XPLM_VK_T](/sdk/XPLM_VK_T/)\n\n```cpp\n#define XPLM_VK_T            0x54\n```\n\n### [XPLM_VK_U](/sdk/XPLM_VK_U/)\n\n```cpp\n#define XPLM_VK_U            0x55\n```\n\n### [XPLM_VK_V](/sdk/XPLM_VK_V/)\n\n```cpp\n#define XPLM_VK_V            0x56\n```\n\n### [XPLM_VK_W](/sdk/XPLM_VK_W/)\n\n```cpp\n#define XPLM_VK_W            0x57\n```\n\n### [XPLM_VK_X](/sdk/XPLM_VK_X/)\n\n```cpp\n#define XPLM_VK_X            0x58\n```\n\n### [XPLM_VK_Y](/sdk/XPLM_VK_Y/)\n\n```cpp\n#define XPLM_VK_Y            0x59\n```\n\n### [XPLM_VK_Z](/sdk/XPLM_VK_Z/)\n\n```cpp\n#define XPLM_VK_Z            0x5A\n```\n\n### [XPLM_VK_NUMPAD0](/sdk/XPLM_VK_NUMPAD0/)\n\n```cpp\n#define XPLM_VK_NUMPAD0      0x60\n```\n\n### [XPLM_VK_NUMPAD1](/sdk/XPLM_VK_NUMPAD1/)\n\n```cpp\n#define XPLM_VK_NUMPAD1      0x61\n```\n\n### [XPLM_VK_NUMPAD2](/sdk/XPLM_VK_NUMPAD2/)\n\n```cpp\n#define XPLM_VK_NUMPAD2      0x62\n```\n\n### [XPLM_VK_NUMPAD3](/sdk/XPLM_VK_NUMPAD3/)\n\n```cpp\n#define XPLM_VK_NUMPAD3      0x63\n```\n\n### [XPLM_VK_NUMPAD4](/sdk/XPLM_VK_NUMPAD4/)\n\n```cpp\n#define XPLM_VK_NUMPAD4      0x64\n```\n\n### [XPLM_VK_NUMPAD5](/sdk/XPLM_VK_NUMPAD5/)\n\n```cpp\n#define XPLM_VK_NUMPAD5      0x65\n```\n\n### [XPLM_VK_NUMPAD6](/sdk/XPLM_VK_NUMPAD6/)\n\n```cpp\n#define XPLM_VK_NUMPAD6      0x66\n```\n\n### [XPLM_VK_NUMPAD7](/sdk/XPLM_VK_NUMPAD7/)\n\n```cpp\n#define XPLM_VK_NUMPAD7      0x67\n```\n\n### [XPLM_VK_NUMPAD8](/sdk/XPLM_VK_NUMPAD8/)\n\n```cpp\n#define XPLM_VK_NUMPAD8      0x68\n```\n\n### [XPLM_VK_NUMPAD9](/sdk/XPLM_VK_NUMPAD9/)\n\n```cpp\n#define XPLM_VK_NUMPAD9      0x69\n```\n\n### [XPLM_VK_MULTIPLY](/sdk/XPLM_VK_MULTIPLY/)\n\n```cpp\n#define XPLM_VK_MULTIPLY     0x6A\n```\n\n### [XPLM_VK_ADD](/sdk/XPLM_VK_ADD/)\n\n```cpp\n#define XPLM_VK_ADD          0x6B\n```\n\n### [XPLM_VK_SEPARATOR](/sdk/XPLM_VK_SEPARATOR/)\n\n```cpp\n#define XPLM_VK_SEPARATOR    0x6C\n```\n\n### [XPLM_VK_SUBTRACT](/sdk/XPLM_VK_SUBTRACT/)\n\n```cpp\n#define XPLM_VK_SUBTRACT     0x6D\n```\n\n### [XPLM_VK_DECIMAL](/sdk/XPLM_VK_DECIMAL/)\n\n```cpp\n#define XPLM_VK_DECIMAL      0x6E\n```\n\n### [XPLM_VK_DIVIDE](/sdk/XPLM_VK_DIVIDE/)\n\n```cpp\n#define XPLM_VK_DIVIDE       0x6F\n```\n\n### [XPLM_VK_F1](/sdk/XPLM_VK_F1/)\n\n```cpp\n#define XPLM_VK_F1           0x70\n```\n\n### [XPLM_VK_F2](/sdk/XPLM_VK_F2/)\n\n```cpp\n#define XPLM_VK_F2           0x71\n```\n\n### [XPLM_VK_F3](/sdk/XPLM_VK_F3/)\n\n```cpp\n#define XPLM_VK_F3           0x72\n```\n\n### [XPLM_VK_F4](/sdk/XPLM_VK_F4/)\n\n```cpp\n#define XPLM_VK_F4           0x73\n```\n\n### [XPLM_VK_F5](/sdk/XPLM_VK_F5/)\n\n```cpp\n#define XPLM_VK_F5           0x74\n```\n\n### [XPLM_VK_F6](/sdk/XPLM_VK_F6/)\n\n```cpp\n#define XPLM_VK_F6           0x75\n```\n\n### [XPLM_VK_F7](/sdk/XPLM_VK_F7/)\n\n```cpp\n#define XPLM_VK_F7           0x76\n```\n\n### [XPLM_VK_F8](/sdk/XPLM_VK_F8/)\n\n```cpp\n#define XPLM_VK_F8           0x77\n```\n\n### [XPLM_VK_F9](/sdk/XPLM_VK_F9/)\n\n```cpp\n#define XPLM_VK_F9           0x78\n```\n\n### [XPLM_VK_F10](/sdk/XPLM_VK_F10/)\n\n```cpp\n#define XPLM_VK_F10          0x79\n```\n\n### [XPLM_VK_F11](/sdk/XPLM_VK_F11/)\n\n```cpp\n#define XPLM_VK_F11          0x7A\n```\n\n### [XPLM_VK_F12](/sdk/XPLM_VK_F12/)\n\n```cpp\n#define XPLM_VK_F12          0x7B\n```\n\n### [XPLM_VK_F13](/sdk/XPLM_VK_F13/)\n\n```cpp\n#define XPLM_VK_F13          0x7C\n```\n\n### [XPLM_VK_F14](/sdk/XPLM_VK_F14/)\n\n```cpp\n#define XPLM_VK_F14          0x7D\n```\n\n### [XPLM_VK_F15](/sdk/XPLM_VK_F15/)\n\n```cpp\n#define XPLM_VK_F15          0x7E\n```\n\n### [XPLM_VK_F16](/sdk/XPLM_VK_F16/)\n\n```cpp\n#define XPLM_VK_F16          0x7F\n```\n\n### [XPLM_VK_F17](/sdk/XPLM_VK_F17/)\n\n```cpp\n#define XPLM_VK_F17          0x80\n```\n\n### [XPLM_VK_F18](/sdk/XPLM_VK_F18/)\n\n```cpp\n#define XPLM_VK_F18          0x81\n```\n\n### [XPLM_VK_F19](/sdk/XPLM_VK_F19/)\n\n```cpp\n#define XPLM_VK_F19          0x82\n```\n\n### [XPLM_VK_F20](/sdk/XPLM_VK_F20/)\n\n```cpp\n#define XPLM_VK_F20          0x83\n```\n\n### [XPLM_VK_F21](/sdk/XPLM_VK_F21/)\n\n```cpp\n#define XPLM_VK_F21          0x84\n```\n\n### [XPLM_VK_F22](/sdk/XPLM_VK_F22/)\n\n```cpp\n#define XPLM_VK_F22          0x85\n```\n\n### [XPLM_VK_F23](/sdk/XPLM_VK_F23/)\n\n```cpp\n#define XPLM_VK_F23          0x86\n```\n\n### [XPLM_VK_F24](/sdk/XPLM_VK_F24/)\n\n```cpp\n#define XPLM_VK_F24          0x87\n```\n\n### [XPLM_VK_EQUAL](/sdk/XPLM_VK_EQUAL/)\n\n```cpp\n#define XPLM_VK_EQUAL        0xB0\n```\n\nThe following definitions are extended and are not based on the Microsoft key\nset.\n\n### [XPLM_VK_MINUS](/sdk/XPLM_VK_MINUS/)\n\n```cpp\n#define XPLM_VK_MINUS        0xB1\n```\n\n### [XPLM_VK_RBRACE](/sdk/XPLM_VK_RBRACE/)\n\n```cpp\n#define XPLM_VK_RBRACE       0xB2\n```\n\n### [XPLM_VK_LBRACE](/sdk/XPLM_VK_LBRACE/)\n\n```cpp\n#define XPLM_VK_LBRACE       0xB3\n```\n\n### [XPLM_VK_QUOTE](/sdk/XPLM_VK_QUOTE/)\n\n```cpp\n#define XPLM_VK_QUOTE        0xB4\n```\n\n### [XPLM_VK_SEMICOLON](/sdk/XPLM_VK_SEMICOLON/)\n\n```cpp\n#define XPLM_VK_SEMICOLON    0xB5\n```\n\n### [XPLM_VK_BACKSLASH](/sdk/XPLM_VK_BACKSLASH/)\n\n```cpp\n#define XPLM_VK_BACKSLASH    0xB6\n```\n\n### [XPLM_VK_COMMA](/sdk/XPLM_VK_COMMA/)\n\n```cpp\n#define XPLM_VK_COMMA        0xB7\n```\n\n### [XPLM_VK_SLASH](/sdk/XPLM_VK_SLASH/)\n\n```cpp\n#define XPLM_VK_SLASH        0xB8\n```\n\n### [XPLM_VK_PERIOD](/sdk/XPLM_VK_PERIOD/)\n\n```cpp\n#define XPLM_VK_PERIOD       0xB9\n```\n\n### [XPLM_VK_BACKQUOTE](/sdk/XPLM_VK_BACKQUOTE/)\n\n```cpp\n#define XPLM_VK_BACKQUOTE    0xBA\n```\n\n### [XPLM_VK_ENTER](/sdk/XPLM_VK_ENTER/)\n\n```cpp\n#define XPLM_VK_ENTER        0xBB\n```\n\n### [XPLM_VK_NUMPAD_ENT](/sdk/XPLM_VK_NUMPAD_ENT/)\n\n```cpp\n#define XPLM_VK_NUMPAD_ENT   0xBC\n```\n\n### [XPLM_VK_NUMPAD_EQ](/sdk/XPLM_VK_NUMPAD_EQ/)\n\n```cpp\n#define XPLM_VK_NUMPAD_EQ    0xBD\n```\n\n### [XPLMFixedString150_t](/sdk/XPLMFixedString150_t/)\n\nA container for a fixed-size string buffer of 150 characters.\n\n```cpp\ntypedef struct {\n     // The size of the struct.\n     char                      buffer[150];\n} XPLMFixedString150_t;\n```\n\n### [XPLMCursorStatus](/sdk/XPLMCursorStatus/)\n\n[XPLMCursorStatus](/sdk/XPLMCursorStatus/)describes how you would like X-Plane\nto manage the cursor. See[XPLMHandleCursor_f](/sdk/XPLMHandleCursor_f/)for more\ninfo.\n\n| Name | Value | Description |\n| --- | --- | --- |\n| [xplm_CursorDefault](/sdk/xplm_CursorDefault/) | \"0\" | X-Plane manages the\ncursor normally, plugin does not affect the cusrsor. |\n| [xplm_CursorHidden](/sdk/xplm_CursorHidden/) | \"1\" | X-Plane hides the cursor.\n|\n| [xplm_CursorArrow](/sdk/xplm_CursorArrow/) | \"2\" | X-Plane shows the cursor as\nthe default arrow. |\n| [xplm_CursorCustom](/sdk/xplm_CursorCustom/) | \"3\" | X-Plane shows the cursor\nbut lets you select an OS cursor. |\n\n### [XPLMMouseStatus](/sdk/XPLMMouseStatus/)\n\n```cpp\nWhen the mouse is clicked, your mouse click routine is called repeatedly.  It is first called with the\nmouse down message.  It is then called zero or more times with the mouse-drag message, and finally it\nis called once with the mouse up message.  All of these messages will be directed to the same window;\nyou are guaranteed to not receive a drag or mouse-up event without first receiving the corresponding mouse-down.\n\n```\n\n| Name | Value | Description |\n| --- | --- | --- |\n| [xplm_MouseDown](/sdk/xplm_MouseDown/) | \"1\" |\n| [xplm_MouseDrag](/sdk/xplm_MouseDrag/) | \"2\" |\n| [xplm_MouseUp](/sdk/xplm_MouseUp/) | \"3\" |",
      "own_functions": [
        "XPLMKeyFlags",
        "XPLMCursorStatus",
        "XPLMMouseStatus"
      ],
      "processing_timestamp": "2025-06-25T20:39:22.247436+00:00",
      "title": "XPLMDefs | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMDefs/"
    },
    "https://developer.x-plane.com/sdk/XPLMDegMagneticToDegTrue/": {
      "api_signatures": [
        {
          "description": "Converts a heading in degrees relative to magnetic north at the user’s current location into a value relative to true north.",
          "name": "XPLMDegMagneticToDegTrue",
          "parameters": [
            {
              "full_declaration": "float                headingDegreesMagnetic",
              "name": "headingDegreesMagnetic",
              "type": "float"
            }
          ],
          "signature": "XPLM_API floatXPLMDegMagneticToDegTrue(\n                         float                headingDegreesMagnetic);"
        },
        {
          "name": "floatXPLMDegMagneticToDegTrue",
          "signature": "XPLM_API floatXPLMDegMagneticToDegTrue(\n                         float                headingDegreesMagnetic);",
          "source": "code_block_extraction",
          "type": "function"
        }
      ],
      "category": {
        "category": "XPLM_Navigation",
        "module": "Xplm Navigation",
        "url": "https://developer.x-plane.com/sdk/XPLMDegMagneticToDegTrue/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPLMDegMagneticToDegTrue\"><a href=\"/sdk/XPLMDegMagneticToDegTrue/\">XPLMDegMagneticToDegTrue</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API float      <a href=\"/sdk/XPLMDegMagneticToDegTrue/\">XPLMDegMagneticToDegTrue</a>(\n                         float                headingDegreesMagnetic);\n</code></pre><p>Converts a heading in degrees relative to magnetic north at the user’s current location into a value relative to true north.</p></div></div></article>",
      "code_examples": [
        {
          "char_count": 110,
          "code": "XPLM_API floatXPLMDegMagneticToDegTrue(\n                         float                headingDegreesMagnetic);",
          "context": "XPLMDegMagneticToDegTrue",
          "id": "example_0",
          "language": "c",
          "line_count": 2,
          "type": "snippet"
        }
      ],
      "cross_references": [],
      "markdown": "### [XPLMDegMagneticToDegTrue](/sdk/XPLMDegMagneticToDegTrue/)\n\n```cpp\nXPLM_API float      XPLMDegMagneticToDegTrue(\n                         float                headingDegreesMagnetic);\n\n```\n\nConverts a heading in degrees relative to magnetic north at the user’s current\nlocation into a value relative to true north.",
      "own_functions": [
        "XPLMDegMagneticToDegTrue",
        "floatXPLMDegMagneticToDegTrue"
      ],
      "processing_timestamp": "2025-06-25T20:39:23.956332+00:00",
      "title": "XPLMDegMagneticToDegTrue | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMDegMagneticToDegTrue/"
    },
    "https://developer.x-plane.com/sdk/XPLMDegTrueToDegMagnetic/": {
      "api_signatures": [
        {
          "description": "Converts a heading in degrees relative to true north into a value relative to magnetic north at the user’s current location.",
          "name": "XPLMDegTrueToDegMagnetic",
          "parameters": [
            {
              "full_declaration": "float                headingDegreesTrue",
              "name": "headingDegreesTrue",
              "type": "float"
            }
          ],
          "signature": "XPLM_API floatXPLMDegTrueToDegMagnetic(\n                         float                headingDegreesTrue);"
        },
        {
          "name": "floatXPLMDegTrueToDegMagnetic",
          "signature": "XPLM_API floatXPLMDegTrueToDegMagnetic(\n                         float                headingDegreesTrue);",
          "source": "code_block_extraction",
          "type": "function"
        }
      ],
      "category": {
        "category": "XPLM_Navigation",
        "module": "Xplm Navigation",
        "url": "https://developer.x-plane.com/sdk/XPLMDegTrueToDegMagnetic/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPLMDegTrueToDegMagnetic\"><a href=\"/sdk/XPLMDegTrueToDegMagnetic/\">XPLMDegTrueToDegMagnetic</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API float      <a href=\"/sdk/XPLMDegTrueToDegMagnetic/\">XPLMDegTrueToDegMagnetic</a>(\n                         float                headingDegreesTrue);\n</code></pre><p>Converts a heading in degrees relative to true north into a value relative to magnetic north at the user’s current location.</p></div></div></article>",
      "code_examples": [
        {
          "char_count": 106,
          "code": "XPLM_API floatXPLMDegTrueToDegMagnetic(\n                         float                headingDegreesTrue);",
          "context": "XPLMDegTrueToDegMagnetic",
          "id": "example_0",
          "language": "c",
          "line_count": 2,
          "type": "snippet"
        }
      ],
      "cross_references": [],
      "markdown": "### [XPLMDegTrueToDegMagnetic](/sdk/XPLMDegTrueToDegMagnetic/)\n\n```cpp\nXPLM_API float      XPLMDegTrueToDegMagnetic(\n                         float                headingDegreesTrue);\n\n```\n\nConverts a heading in degrees relative to true north into a value relative to\nmagnetic north at the user’s current location.",
      "own_functions": [
        "XPLMDegTrueToDegMagnetic",
        "floatXPLMDegTrueToDegMagnetic"
      ],
      "processing_timestamp": "2025-06-25T20:39:23.955333+00:00",
      "title": "XPLMDegTrueToDegMagnetic | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMDegTrueToDegMagnetic/"
    },
    "https://developer.x-plane.com/sdk/XPLMDestroyAvionics/": {
      "api_signatures": [
        {
          "description": "Destroys the cockpit device and deallocates its screen’s memory. You should only ever call this for devices that you created usingXPLMCreateAvionicsEx(), not X-Plane' built-ine devices you have customised.",
          "name": "XPLMDestroyAvionics",
          "parameters": [],
          "signature": "XPLM_API voidXPLMDestroyAvionics(XPLMAvionicsIDinHandle);"
        },
        {
          "name": "voidXPLMDestroyAvionics",
          "signature": "XPLM_API voidXPLMDestroyAvionics(XPLMAvionicsIDinHandle);",
          "source": "code_block_extraction",
          "type": "function"
        }
      ],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/XPLMDestroyAvionics/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"function XPLM410\"><h3 class=\"sdk-api-function\" id=\"XPLMDestroyAvionics\"><a href=\"/sdk/XPLMDestroyAvionics/\">XPLMDestroyAvionics</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API void       <a href=\"/sdk/XPLMDestroyAvionics/\">XPLMDestroyAvionics</a>(\n                         <a href=\"/sdk/XPLMAvionicsID/\">XPLMAvionicsID</a>       inHandle);\n</code></pre><p>Destroys the cockpit device and deallocates its screen’s memory. You should only ever call this for devices that you created using<a href=\"/sdk/XPLMCreateAvionicsEx/\">XPLMCreateAvionicsEx</a>(), not X-Plane' built-ine devices you have customised.</p></div></div></article>",
      "code_examples": [
        {
          "char_count": 57,
          "code": "XPLM_API voidXPLMDestroyAvionics(XPLMAvionicsIDinHandle);",
          "context": "XPLMDestroyAvionics",
          "id": "example_0",
          "language": "c",
          "line_count": 1,
          "type": "snippet"
        }
      ],
      "cross_references": [
        "XPLMCreateAvionicsEx"
      ],
      "markdown": "### [XPLMDestroyAvionics](/sdk/XPLMDestroyAvionics/)\n\n```cpp\nXPLM_API void       XPLMDestroyAvionics(\n                         XPLMAvionicsID       inHandle);\n\n```\n\nDestroys the cockpit device and deallocates its screen’s memory. You should only\never call this for devices that you created\nusing[XPLMCreateAvionicsEx](/sdk/XPLMCreateAvionicsEx/)(), not X-Plane'\nbuilt-ine devices you have customised.",
      "own_functions": [
        "XPLMDestroyAvionics",
        "voidXPLMDestroyAvionics"
      ],
      "processing_timestamp": "2025-06-25T20:39:22.252938+00:00",
      "title": "XPLMDestroyAvionics | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMDestroyAvionics/"
    },
    "https://developer.x-plane.com/sdk/XPLMDestroyFlightLoop/": {
      "api_signatures": [
        {
          "description": "This routine destroys a flight loop callback by ID. Only call it on flight loops created with the newerXPLMCreateFlightLoopAPI.",
          "name": "XPLMDestroyFlightLoop",
          "parameters": [],
          "signature": "XPLM_API voidXPLMDestroyFlightLoop(XPLMFlightLoopIDinFlightLoopID);"
        },
        {
          "name": "voidXPLMDestroyFlightLoop",
          "signature": "XPLM_API voidXPLMDestroyFlightLoop(XPLMFlightLoopIDinFlightLoopID);",
          "source": "code_block_extraction",
          "type": "function"
        }
      ],
      "category": {
        "category": "XPLM_Processing",
        "module": "Xplm Processing",
        "url": "https://developer.x-plane.com/sdk/XPLMDestroyFlightLoop/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"function XPLM210\"><h3 class=\"sdk-api-function\" id=\"XPLMDestroyFlightLoop\"><a href=\"/sdk/XPLMDestroyFlightLoop/\">XPLMDestroyFlightLoop</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API void       <a href=\"/sdk/XPLMDestroyFlightLoop/\">XPLMDestroyFlightLoop</a>(\n                         <a href=\"/sdk/XPLMFlightLoopID/\">XPLMFlightLoopID</a>     inFlightLoopID);\n</code></pre><p>This routine destroys a flight loop callback by ID. Only call it on flight loops created with the newer<a href=\"/sdk/XPLMCreateFlightLoop/\">XPLMCreateFlightLoop</a>API.</p></div></div></article>",
      "code_examples": [
        {
          "char_count": 67,
          "code": "XPLM_API voidXPLMDestroyFlightLoop(XPLMFlightLoopIDinFlightLoopID);",
          "context": "XPLMDestroyFlightLoop",
          "id": "example_0",
          "language": "c",
          "line_count": 1,
          "type": "snippet"
        }
      ],
      "cross_references": [
        "XPLMCreateFlightLoop"
      ],
      "markdown": "### [XPLMDestroyFlightLoop](/sdk/XPLMDestroyFlightLoop/)\n\n```cpp\nXPLM_API void       XPLMDestroyFlightLoop(\n                         XPLMFlightLoopID     inFlightLoopID);\n\n```\n\nThis routine destroys a flight loop callback by ID. Only call it on flight loops\ncreated with the newer[XPLMCreateFlightLoop](/sdk/XPLMCreateFlightLoop/)API.",
      "own_functions": [
        "XPLMDestroyFlightLoop",
        "voidXPLMDestroyFlightLoop"
      ],
      "processing_timestamp": "2025-06-25T20:39:24.323101+00:00",
      "title": "XPLMDestroyFlightLoop | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMDestroyFlightLoop/"
    },
    "https://developer.x-plane.com/sdk/XPLMDestroyInstance/": {
      "api_signatures": [
        {
          "description": "XPLMDestroyInstancedestroys and deallocates your instance; once called, you are still responsible for releasing the OBJ ref.",
          "name": "XPLMDestroyInstance",
          "parameters": [],
          "signature": "XPLM_API voidXPLMDestroyInstance(XPLMInstanceRefinstance);"
        },
        {
          "name": "voidXPLMDestroyInstance",
          "signature": "XPLM_API voidXPLMDestroyInstance(XPLMInstanceRefinstance);",
          "source": "code_block_extraction",
          "type": "function"
        }
      ],
      "category": {
        "category": "XPLM_Instance",
        "module": "Xplm Instance",
        "url": "https://developer.x-plane.com/sdk/XPLMDestroyInstance/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPLMDestroyInstance\"><a href=\"/sdk/XPLMDestroyInstance/\">XPLMDestroyInstance</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API void       <a href=\"/sdk/XPLMDestroyInstance/\">XPLMDestroyInstance</a>(\n                         <a href=\"/sdk/XPLMInstanceRef/\">XPLMInstanceRef</a>      instance);\n</code></pre><p><a href=\"/sdk/XPLMDestroyInstance/\">XPLMDestroyInstance</a>destroys and deallocates your instance; once called, you are still responsible for releasing the OBJ ref.</p><p>Tip: you can release your OBJ ref after you call<a href=\"/sdk/XPLMCreateInstance/\">XPLMCreateInstance</a>as long as you never use it again; the instance will maintain its own reference to the OBJ and the object OBJ be deallocated when the instance is destroyed.</p></div></div></article>",
      "code_examples": [
        {
          "char_count": 58,
          "code": "XPLM_API voidXPLMDestroyInstance(XPLMInstanceRefinstance);",
          "context": "XPLMDestroyInstance",
          "id": "example_0",
          "language": "c",
          "line_count": 1,
          "type": "snippet"
        }
      ],
      "cross_references": [
        "XPLMCreateInstance",
        "XPLMInstance"
      ],
      "markdown": "### [XPLMDestroyInstance](/sdk/XPLMDestroyInstance/)\n\n```cpp\nXPLM_API void       XPLMDestroyInstance(\n                         XPLMInstanceRef      instance);\n\n```\n\n[XPLMDestroyInstance](/sdk/XPLMDestroyInstance/)destroys and deallocates your\ninstance; once called, you are still responsible for releasing the OBJ ref.\n\nTip: you can release your OBJ ref after you\ncall[XPLMCreateInstance](/sdk/XPLMCreateInstance/)as long as you never use it\nagain; the instance will maintain its own reference to the OBJ and the object\nOBJ be deallocated when the instance is destroyed.",
      "own_functions": [
        "XPLMDestroyInstance",
        "voidXPLMDestroyInstance"
      ],
      "processing_timestamp": "2025-06-25T20:39:23.723347+00:00",
      "title": "XPLMDestroyInstance | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMDestroyInstance/"
    },
    "https://developer.x-plane.com/sdk/XPLMDestroyMapLayer/": {
      "api_signatures": [
        {
          "description": "Destroys a map layer you created (calling yourXPLMMapWillBeDeletedCallback_fif applicable). Returns true if a deletion took place.",
          "name": "XPLMDestroyMapLayer",
          "parameters": [],
          "signature": "XPLM_API intXPLMDestroyMapLayer(XPLMMapLayerIDinLayer);"
        },
        {
          "name": "intXPLMDestroyMapLayer",
          "signature": "XPLM_API intXPLMDestroyMapLayer(XPLMMapLayerIDinLayer);",
          "source": "code_block_extraction",
          "type": "function"
        }
      ],
      "category": {
        "category": "XPLM_Map",
        "module": "Xplm Map",
        "url": "https://developer.x-plane.com/sdk/XPLMDestroyMapLayer/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPLMDestroyMapLayer\"><a href=\"/sdk/XPLMDestroyMapLayer/\">XPLMDestroyMapLayer</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API int        <a href=\"/sdk/XPLMDestroyMapLayer/\">XPLMDestroyMapLayer</a>(\n                         <a href=\"/sdk/XPLMMapLayerID/\">XPLMMapLayerID</a>       inLayer);\n</code></pre><p>Destroys a map layer you created (calling your<a href=\"/sdk/XPLMMapWillBeDeletedCallback_f/\">XPLMMapWillBeDeletedCallback_f</a>if applicable). Returns true if a deletion took place.</p></div></div></article>",
      "code_examples": [
        {
          "char_count": 55,
          "code": "XPLM_API intXPLMDestroyMapLayer(XPLMMapLayerIDinLayer);",
          "context": "XPLMDestroyMapLayer",
          "id": "example_0",
          "language": "c",
          "line_count": 1,
          "type": "snippet"
        }
      ],
      "cross_references": [
        "XPLMMap"
      ],
      "markdown": "### [XPLMDestroyMapLayer](/sdk/XPLMDestroyMapLayer/)\n\n```cpp\nXPLM_API int        XPLMDestroyMapLayer(\n                         XPLMMapLayerID       inLayer);\n\n```\n\nDestroys a map layer you created (calling\nyour[XPLMMapWillBeDeletedCallback_f](/sdk/XPLMMapWillBeDeletedCallback_f/)if\napplicable). Returns true if a deletion took place.",
      "own_functions": [
        "XPLMDestroyMapLayer",
        "intXPLMDestroyMapLayer"
      ],
      "processing_timestamp": "2025-06-25T20:39:23.780823+00:00",
      "title": "XPLMDestroyMapLayer | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMDestroyMapLayer/"
    },
    "https://developer.x-plane.com/sdk/XPLMDestroyMenu/": {
      "api_signatures": [
        {
          "description": "This function destroys a menu that you have created. Use this to remove a submenu if necessary. (Normally this function will not be necessary.)",
          "name": "XPLMDestroyMenu",
          "parameters": [],
          "signature": "XPLM_API voidXPLMDestroyMenu(XPLMMenuIDinMenuID);"
        },
        {
          "name": "voidXPLMDestroyMenu",
          "signature": "XPLM_API voidXPLMDestroyMenu(XPLMMenuIDinMenuID);",
          "source": "code_block_extraction",
          "type": "function"
        }
      ],
      "category": {
        "category": "XPLM_Menus",
        "module": "Xplm Menus",
        "url": "https://developer.x-plane.com/sdk/XPLMDestroyMenu/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPLMDestroyMenu\"><a href=\"/sdk/XPLMDestroyMenu/\">XPLMDestroyMenu</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API void       <a href=\"/sdk/XPLMDestroyMenu/\">XPLMDestroyMenu</a>(\n                         <a href=\"/sdk/XPLMMenuID/\">XPLMMenuID</a>           inMenuID);\n</code></pre><p>This function destroys a menu that you have created. Use this to remove a submenu if necessary. (Normally this function will not be necessary.)</p></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "### [XPLMDestroyMenu](/sdk/XPLMDestroyMenu/)\n\n```cpp\nXPLM_API void       XPLMDestroyMenu(\n                         XPLMMenuID           inMenuID);\n\n```\n\nThis function destroys a menu that you have created. Use this to remove a\nsubmenu if necessary. (Normally this function will not be necessary.)",
      "own_functions": [
        "XPLMDestroyMenu",
        "voidXPLMDestroyMenu"
      ],
      "processing_timestamp": "2025-06-25T20:39:23.899637+00:00",
      "title": "XPLMDestroyMenu | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMDestroyMenu/"
    },
    "https://developer.x-plane.com/sdk/XPLMDestroyProbe/": {
      "api_signatures": [
        {
          "description": "Deallocates an existing probe object.",
          "name": "XPLMDestroyProbe",
          "parameters": [],
          "signature": "XPLM_API voidXPLMDestroyProbe(XPLMProbeRefinProbe);"
        },
        {
          "name": "voidXPLMDestroyProbe",
          "signature": "XPLM_API voidXPLMDestroyProbe(XPLMProbeRefinProbe);",
          "source": "code_block_extraction",
          "type": "function"
        }
      ],
      "category": {
        "category": "XPLM_Scenery",
        "module": "Xplm Scenery",
        "url": "https://developer.x-plane.com/sdk/XPLMDestroyProbe/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPLMDestroyProbe\"><a href=\"/sdk/XPLMDestroyProbe/\">XPLMDestroyProbe</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API void       <a href=\"/sdk/XPLMDestroyProbe/\">XPLMDestroyProbe</a>(\n                         <a href=\"/sdk/XPLMProbeRef/\">XPLMProbeRef</a>         inProbe);\n</code></pre><p>Deallocates an existing probe object.</p></div></div></article>",
      "code_examples": [
        {
          "char_count": 51,
          "code": "XPLM_API voidXPLMDestroyProbe(XPLMProbeRefinProbe);",
          "context": "XPLMDestroyProbe",
          "id": "example_0",
          "language": "c",
          "line_count": 1,
          "type": "snippet"
        }
      ],
      "cross_references": [],
      "markdown": "### [XPLMDestroyProbe](/sdk/XPLMDestroyProbe/)\n\n```cpp\nXPLM_API void       XPLMDestroyProbe(\n                         XPLMProbeRef         inProbe);\n\n```\n\nDeallocates an existing probe object.",
      "own_functions": [
        "XPLMDestroyProbe",
        "voidXPLMDestroyProbe"
      ],
      "processing_timestamp": "2025-06-25T20:39:24.371046+00:00",
      "title": "XPLMDestroyProbe | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMDestroyProbe/"
    },
    "https://developer.x-plane.com/sdk/XPLMDestroyWindow/": {
      "api_signatures": [
        {
          "description": "This routine destroys a window. The window’s callbacks are not called after this call. Keyboard focus is removed from the window before destroying it.",
          "name": "XPLMDestroyWindow",
          "parameters": [],
          "signature": "XPLM_API voidXPLMDestroyWindow(XPLMWindowIDinWindowID);"
        },
        {
          "name": "voidXPLMDestroyWindow",
          "signature": "XPLM_API voidXPLMDestroyWindow(XPLMWindowIDinWindowID);",
          "source": "code_block_extraction",
          "type": "function"
        }
      ],
      "category": {
        "category": "XPLM_Display",
        "module": "Xplm Display",
        "url": "https://developer.x-plane.com/sdk/XPLMDestroyWindow/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPLMDestroyWindow\"><a href=\"/sdk/XPLMDestroyWindow/\">XPLMDestroyWindow</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API void       <a href=\"/sdk/XPLMDestroyWindow/\">XPLMDestroyWindow</a>(\n                         <a href=\"/sdk/XPLMWindowID/\">XPLMWindowID</a>         inWindowID);\n</code></pre><p>This routine destroys a window. The window’s callbacks are not called after this call. Keyboard focus is removed from the window before destroying it.</p></div></div></article>",
      "code_examples": [
        {
          "char_count": 55,
          "code": "XPLM_API voidXPLMDestroyWindow(XPLMWindowIDinWindowID);",
          "context": "XPLMDestroyWindow",
          "id": "example_0",
          "language": "c",
          "line_count": 1,
          "type": "snippet"
        }
      ],
      "cross_references": [],
      "markdown": "### [XPLMDestroyWindow](/sdk/XPLMDestroyWindow/)\n\n```cpp\nXPLM_API void       XPLMDestroyWindow(\n                         XPLMWindowID         inWindowID);\n\n```\n\nThis routine destroys a window. The window’s callbacks are not called after this\ncall. Keyboard focus is removed from the window before destroying it.",
      "own_functions": [
        "XPLMDestroyWindow",
        "voidXPLMDestroyWindow"
      ],
      "processing_timestamp": "2025-06-25T20:39:23.460568+00:00",
      "title": "XPLMDestroyWindow | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMDestroyWindow/"
    },
    "https://developer.x-plane.com/sdk/XPLMDeviceID/": {
      "api_signatures": [
        {
          "name": "XPLMDeviceID",
          "type": "enum",
          "values": [
            {
              "description": "GNS430, pilot side.",
              "name": "xplm_device_GNS430_1",
              "value": "\"0\""
            },
            {
              "description": "GNS430, copilot side.",
              "name": "xplm_device_GNS430_2",
              "value": "\"1\""
            },
            {
              "description": "GNS530, pilot side.",
              "name": "xplm_device_GNS530_1",
              "value": "\"2\""
            },
            {
              "description": "GNS530, copilot side.",
              "name": "xplm_device_GNS530_2",
              "value": "\"3\""
            },
            {
              "description": "generic airliner CDU, pilot side.",
              "name": "xplm_device_CDU739_1",
              "value": "\"4\""
            },
            {
              "description": "generic airliner CDU, copilot side.",
              "name": "xplm_device_CDU739_2",
              "value": "\"5\""
            },
            {
              "description": "G1000 Primary Flight Display, pilot side.",
              "name": "xplm_device_G1000_PFD_1",
              "value": "\"6\""
            },
            {
              "description": "G1000 Multifunction Display.",
              "name": "xplm_device_G1000_MFD",
              "value": "\"7\""
            },
            {
              "description": "G1000 Primary Flight Display, copilot side.",
              "name": "xplm_device_G1000_PFD_2",
              "value": "\"8\""
            },
            {
              "description": "Primus CDU, pilot side.",
              "name": "xplm_device_CDU815_1",
              "value": "\"9\""
            },
            {
              "description": "Primus CDU, copilot side.",
              "name": "xplm_device_CDU815_2",
              "value": "\"10\""
            },
            {
              "description": "Primus Primary Flight Display, pilot side.",
              "name": "xplm_device_Primus_PFD_1",
              "value": "\"11\""
            },
            {
              "description": "Primus Primary Flight Display, copilot side.",
              "name": "xplm_device_Primus_PFD_2",
              "value": "\"12\""
            },
            {
              "description": "Primus Multifunction Display, pilot side.",
              "name": "xplm_device_Primus_MFD_1",
              "value": "\"13\""
            },
            {
              "description": "Primus Multifunction Display, copilot side.",
              "name": "xplm_device_Primus_MFD_2",
              "value": "\"14\""
            },
            {
              "description": "Primus Multifunction Display, central.",
              "name": "xplm_device_Primus_MFD_3",
              "value": "\"15\""
            },
            {
              "description": "Primus Radio Management Unit, pilot side.",
              "name": "xplm_device_Primus_RMU_1",
              "value": "\"16\""
            },
            {
              "description": "Primus Radio Management Unit, copilot side.",
              "name": "xplm_device_Primus_RMU_2",
              "value": "\"17\""
            },
            {
              "description": "Airbus MCDU, pilot side.",
              "name": "xplm_device_MCDU_1",
              "value": "\"18\""
            },
            {
              "description": "Airbus MCDU, copilot side.",
              "name": "xplm_device_MCDU_2",
              "value": "\"19\""
            }
          ]
        }
      ],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/XPLMDeviceID/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enum\"><h3 class=\"sdk-api-enum\" id=\"XPLMDeviceID\"><a href=\"/sdk/XPLMDeviceID/\">XPLMDeviceID</a></h3><p>This constant indicates the device we want to override or enhance. We can get a callback before or after each item.</p><p><div class=\"enumitem\"><table><thead><tr><th>Name</th><th>Value</th><th>Description</th></tr></thead><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_device_GNS430_1\"><a href=\"/sdk/xplm_device_GNS430_1/\">xplm_device_GNS430_1</a></td><td>\"0\"</td><td>GNS430, pilot side.</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_device_GNS430_2\"><a href=\"/sdk/xplm_device_GNS430_2/\">xplm_device_GNS430_2</a></td><td>\"1\"</td><td>GNS430, copilot side.</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_device_GNS530_1\"><a href=\"/sdk/xplm_device_GNS530_1/\">xplm_device_GNS530_1</a></td><td>\"2\"</td><td>GNS530, pilot side.</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_device_GNS530_2\"><a href=\"/sdk/xplm_device_GNS530_2/\">xplm_device_GNS530_2</a></td><td>\"3\"</td><td>GNS530, copilot side.</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_device_CDU739_1\"><a href=\"/sdk/xplm_device_CDU739_1/\">xplm_device_CDU739_1</a></td><td>\"4\"</td><td>generic airliner CDU, pilot side.</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_device_CDU739_2\"><a href=\"/sdk/xplm_device_CDU739_2/\">xplm_device_CDU739_2</a></td><td>\"5\"</td><td>generic airliner CDU, copilot side.</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_device_G1000_PFD_1\"><a href=\"/sdk/xplm_device_G1000_PFD_1/\">xplm_device_G1000_PFD_1</a></td><td>\"6\"</td><td>G1000 Primary Flight Display, pilot side.</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_device_G1000_MFD\"><a href=\"/sdk/xplm_device_G1000_MFD/\">xplm_device_G1000_MFD</a></td><td>\"7\"</td><td>G1000 Multifunction Display.</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_device_G1000_PFD_2\"><a href=\"/sdk/xplm_device_G1000_PFD_2/\">xplm_device_G1000_PFD_2</a></td><td>\"8\"</td><td>G1000 Primary Flight Display, copilot side.</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_device_CDU815_1\"><a href=\"/sdk/xplm_device_CDU815_1/\">xplm_device_CDU815_1</a></td><td>\"9\"</td><td>Primus CDU, pilot side.</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_device_CDU815_2\"><a href=\"/sdk/xplm_device_CDU815_2/\">xplm_device_CDU815_2</a></td><td>\"10\"</td><td>Primus CDU, copilot side.</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_device_Primus_PFD_1\"><a href=\"/sdk/xplm_device_Primus_PFD_1/\">xplm_device_Primus_PFD_1</a></td><td>\"11\"</td><td>Primus Primary Flight Display, pilot side.</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_device_Primus_PFD_2\"><a href=\"/sdk/xplm_device_Primus_PFD_2/\">xplm_device_Primus_PFD_2</a></td><td>\"12\"</td><td>Primus Primary Flight Display, copilot side.</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_device_Primus_MFD_1\"><a href=\"/sdk/xplm_device_Primus_MFD_1/\">xplm_device_Primus_MFD_1</a></td><td>\"13\"</td><td>Primus Multifunction Display, pilot side.</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_device_Primus_MFD_2\"><a href=\"/sdk/xplm_device_Primus_MFD_2/\">xplm_device_Primus_MFD_2</a></td><td>\"14\"</td><td>Primus Multifunction Display, copilot side.</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_device_Primus_MFD_3\"><a href=\"/sdk/xplm_device_Primus_MFD_3/\">xplm_device_Primus_MFD_3</a></td><td>\"15\"</td><td>Primus Multifunction Display, central.</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_device_Primus_RMU_1\"><a href=\"/sdk/xplm_device_Primus_RMU_1/\">xplm_device_Primus_RMU_1</a></td><td>\"16\"</td><td>Primus Radio Management Unit, pilot side.</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_device_Primus_RMU_2\"><a href=\"/sdk/xplm_device_Primus_RMU_2/\">xplm_device_Primus_RMU_2</a></td><td>\"17\"</td><td>Primus Radio Management Unit, copilot side.</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_device_MCDU_1\"><a href=\"/sdk/xplm_device_MCDU_1/\">xplm_device_MCDU_1</a></td><td>\"18\"</td><td>Airbus MCDU, pilot side.</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_device_MCDU_2\"><a href=\"/sdk/xplm_device_MCDU_2/\">xplm_device_MCDU_2</a></td><td>\"19\"</td><td>Airbus MCDU, copilot side.</td></tr></table></div></p></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "### [XPLMDeviceID](/sdk/XPLMDeviceID/)\n\nThis constant indicates the device we want to override or enhance. We can get a\ncallback before or after each item.\n\n| Name | Value | Description |\n| --- | --- | --- |\n| [xplm_device_GNS430_1](/sdk/xplm_device_GNS430_1/) | \"0\" | GNS430, pilot side.\n|\n| [xplm_device_GNS430_2](/sdk/xplm_device_GNS430_2/) | \"1\" | GNS430, copilot\nside. |\n| [xplm_device_GNS530_1](/sdk/xplm_device_GNS530_1/) | \"2\" | GNS530, pilot side.\n|\n| [xplm_device_GNS530_2](/sdk/xplm_device_GNS530_2/) | \"3\" | GNS530, copilot\nside. |\n| [xplm_device_CDU739_1](/sdk/xplm_device_CDU739_1/) | \"4\" | generic airliner\nCDU, pilot side. |\n| [xplm_device_CDU739_2](/sdk/xplm_device_CDU739_2/) | \"5\" | generic airliner\nCDU, copilot side. |\n| [xplm_device_G1000_PFD_1](/sdk/xplm_device_G1000_PFD_1/) | \"6\" | G1000 Primary\nFlight Display, pilot side. |\n| [xplm_device_G1000_MFD](/sdk/xplm_device_G1000_MFD/) | \"7\" | G1000\nMultifunction Display. |\n| [xplm_device_G1000_PFD_2](/sdk/xplm_device_G1000_PFD_2/) | \"8\" | G1000 Primary\nFlight Display, copilot side. |\n| [xplm_device_CDU815_1](/sdk/xplm_device_CDU815_1/) | \"9\" | Primus CDU, pilot\nside. |\n| [xplm_device_CDU815_2](/sdk/xplm_device_CDU815_2/) | \"10\" | Primus CDU,\ncopilot side. |\n| [xplm_device_Primus_PFD_1](/sdk/xplm_device_Primus_PFD_1/) | \"11\" | Primus\nPrimary Flight Display, pilot side. |\n| [xplm_device_Primus_PFD_2](/sdk/xplm_device_Primus_PFD_2/) | \"12\" | Primus\nPrimary Flight Display, copilot side. |\n| [xplm_device_Primus_MFD_1](/sdk/xplm_device_Primus_MFD_1/) | \"13\" | Primus\nMultifunction Display, pilot side. |\n| [xplm_device_Primus_MFD_2](/sdk/xplm_device_Primus_MFD_2/) | \"14\" | Primus\nMultifunction Display, copilot side. |\n| [xplm_device_Primus_MFD_3](/sdk/xplm_device_Primus_MFD_3/) | \"15\" | Primus\nMultifunction Display, central. |\n| [xplm_device_Primus_RMU_1](/sdk/xplm_device_Primus_RMU_1/) | \"16\" | Primus\nRadio Management Unit, pilot side. |\n| [xplm_device_Primus_RMU_2](/sdk/xplm_device_Primus_RMU_2/) | \"17\" | Primus\nRadio Management Unit, copilot side. |\n| [xplm_device_MCDU_1](/sdk/xplm_device_MCDU_1/) | \"18\" | Airbus MCDU, pilot\nside. |\n| [xplm_device_MCDU_2](/sdk/xplm_device_MCDU_2/) | \"19\" | Airbus MCDU, copilot\nside. |",
      "own_functions": [
        "XPLMDeviceID"
      ],
      "processing_timestamp": "2025-06-25T20:39:22.268050+00:00",
      "title": "XPLMDeviceID | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMDeviceID/"
    },
    "https://developer.x-plane.com/sdk/XPLMDisableAIForPlane/": {
      "api_signatures": [
        {
          "description": "This routine turns off X-Plane’s AI for a given plane. The plane will continue to draw and be a real plane in X-Plane, but will not move itself.",
          "name": "XPLMDisableAIForPlane",
          "parameters": [
            {
              "full_declaration": "int                  inPlaneIndex",
              "name": "inPlaneIndex",
              "type": "int"
            }
          ],
          "signature": "XPLM_API voidXPLMDisableAIForPlane(\n                         int                  inPlaneIndex);"
        },
        {
          "name": "voidXPLMDisableAIForPlane",
          "signature": "XPLM_API voidXPLMDisableAIForPlane(\n                         int                  inPlaneIndex);",
          "source": "code_block_extraction",
          "type": "function"
        }
      ],
      "category": {
        "category": "XPLM_Planes",
        "module": "Xplm Planes",
        "url": "https://developer.x-plane.com/sdk/XPLMDisableAIForPlane/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPLMDisableAIForPlane\"><a href=\"/sdk/XPLMDisableAIForPlane/\">XPLMDisableAIForPlane</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API void       <a href=\"/sdk/XPLMDisableAIForPlane/\">XPLMDisableAIForPlane</a>(\n                         int                  inPlaneIndex);\n</code></pre><p>This routine turns off X-Plane’s AI for a given plane. The plane will continue to draw and be a real plane in X-Plane, but will not move itself.</p></div></div></article>",
      "code_examples": [
        {
          "char_count": 96,
          "code": "XPLM_API voidXPLMDisableAIForPlane(\n                         int                  inPlaneIndex);",
          "context": "XPLMDisableAIForPlane",
          "id": "example_0",
          "language": "c",
          "line_count": 2,
          "type": "snippet"
        }
      ],
      "cross_references": [],
      "markdown": "### [XPLMDisableAIForPlane](/sdk/XPLMDisableAIForPlane/)\n\n```cpp\nXPLM_API void       XPLMDisableAIForPlane(\n                         int                  inPlaneIndex);\n\n```\n\nThis routine turns off X-Plane’s AI for a given plane. The plane will continue\nto draw and be a real plane in X-Plane, but will not move itself.",
      "own_functions": [
        "XPLMDisableAIForPlane",
        "voidXPLMDisableAIForPlane"
      ],
      "processing_timestamp": "2025-06-25T20:39:24.156421+00:00",
      "title": "XPLMDisableAIForPlane | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMDisableAIForPlane/"
    },
    "https://developer.x-plane.com/sdk/XPLMDisablePlugin/": {
      "api_signatures": [
        {
          "description": "This routine disableds an enabled plug-in.",
          "name": "XPLMDisablePlugin",
          "parameters": [],
          "signature": "XPLM_API voidXPLMDisablePlugin(XPLMPluginIDinPluginID);"
        },
        {
          "name": "voidXPLMDisablePlugin",
          "signature": "XPLM_API voidXPLMDisablePlugin(XPLMPluginIDinPluginID);",
          "source": "code_block_extraction",
          "type": "function"
        }
      ],
      "category": {
        "category": "XPLM_Plugin",
        "module": "Xplm Plugin",
        "url": "https://developer.x-plane.com/sdk/XPLMDisablePlugin/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPLMDisablePlugin\"><a href=\"/sdk/XPLMDisablePlugin/\">XPLMDisablePlugin</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API void       <a href=\"/sdk/XPLMDisablePlugin/\">XPLMDisablePlugin</a>(\n                         <a href=\"/sdk/XPLMPluginID/\">XPLMPluginID</a>         inPluginID);\n</code></pre><p>This routine disableds an enabled plug-in.</p></div></div></article>",
      "code_examples": [
        {
          "char_count": 55,
          "code": "XPLM_API voidXPLMDisablePlugin(XPLMPluginIDinPluginID);",
          "context": "XPLMDisablePlugin",
          "id": "example_0",
          "language": "cpp",
          "line_count": 1,
          "type": "snippet"
        }
      ],
      "cross_references": [
        "XPLMPlugin"
      ],
      "markdown": "### [XPLMDisablePlugin](/sdk/XPLMDisablePlugin/)\n\n```cpp\nXPLM_API void       XPLMDisablePlugin(\n                         XPLMPluginID         inPluginID);\n\n```\n\nThis routine disableds an enabled plug-in.",
      "own_functions": [
        "XPLMDisablePlugin",
        "voidXPLMDisablePlugin"
      ],
      "processing_timestamp": "2025-06-25T20:39:24.195261+00:00",
      "title": "XPLMDisablePlugin | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMDisablePlugin/"
    },
    "https://developer.x-plane.com/sdk/XPLMDontControlCamera/": {
      "api_signatures": [
        {
          "description": "This function stops you from controlling the camera. If you have a camera control function, it will not be called with an inIsLosingControl flag. X-Plane will control the camera on the next cycle.",
          "name": "XPLMDontControlCamera",
          "parameters": [],
          "signature": "XPLM_API voidXPLMDontControlCamera(void);"
        },
        {
          "name": "voidXPLMDontControlCamera",
          "signature": "XPLM_API voidXPLMDontControlCamera(void);",
          "source": "code_block_extraction",
          "type": "function"
        }
      ],
      "category": {
        "category": "XPLM_Camera",
        "module": "Xplm Camera",
        "url": "https://developer.x-plane.com/sdk/XPLMDontControlCamera/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPLMDontControlCamera\"><a href=\"/sdk/XPLMDontControlCamera/\">XPLMDontControlCamera</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API void       <a href=\"/sdk/XPLMDontControlCamera/\">XPLMDontControlCamera</a>(void);\n</code></pre><p>This function stops you from controlling the camera. If you have a camera control function, it will not be called with an inIsLosingControl flag. X-Plane will control the camera on the next cycle.</p><p>For maximum compatibility you should not use this routine unless you are in posession of the camera.</p></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "### [XPLMDontControlCamera](/sdk/XPLMDontControlCamera/)\n\n```cpp\nXPLM_API void       XPLMDontControlCamera(void);\n\n```\n\nThis function stops you from controlling the camera. If you have a camera\ncontrol function, it will not be called with an inIsLosingControl flag. X-Plane\nwill control the camera on the next cycle.\n\nFor maximum compatibility you should not use this routine unless you are in\nposession of the camera.",
      "own_functions": [
        "XPLMDontControlCamera",
        "voidXPLMDontControlCamera"
      ],
      "processing_timestamp": "2025-06-25T20:39:23.321092+00:00",
      "title": "XPLMDontControlCamera | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMDontControlCamera/"
    },
    "https://developer.x-plane.com/sdk/XPLMDrawAircraft/": {
      "api_signatures": [
        {
          "deprecated": true,
          "description": "WARNING: Aircraft drawing via this API is deprecated and WILL NOT WORK in future versions of X-Plane. UseXPLMInstancefor 3-d drawing of custom aircraft models.",
          "name": "XPLMDrawAircraft",
          "parameters": [
            {
              "full_declaration": "int                  inPlaneIndex",
              "name": "inPlaneIndex",
              "type": "int"
            },
            {
              "full_declaration": "float                inX",
              "name": "inX",
              "type": "float"
            },
            {
              "full_declaration": "float                inY",
              "name": "inY",
              "type": "float"
            },
            {
              "full_declaration": "float                inZ",
              "name": "inZ",
              "type": "float"
            },
            {
              "full_declaration": "float                inPitch",
              "name": "inPitch",
              "type": "float"
            },
            {
              "full_declaration": "float                inRoll",
              "name": "inRoll",
              "type": "float"
            },
            {
              "full_declaration": "float                inYaw",
              "name": "inYaw",
              "type": "float"
            },
            {
              "full_declaration": "int                  inFullDraw",
              "name": "inFullDraw",
              "type": "int"
            },
            {
              "full_declaration": "XPLMPlaneDrawState_t* inDrawStateInfo",
              "name": "inDrawStateInfo",
              "type": "XPLMPlaneDrawState_t*"
            }
          ],
          "signature": "XPLM_API voidXPLMDrawAircraft(\n                         int                  inPlaneIndex,\n                         float                inX,\n                         float                inY,\n                         float                inZ,\n                         float                inPitch,\n                         float                inRoll,\n                         float                inYaw,\n                         int                  inFullDraw,XPLMPlaneDrawState_t* inDrawStateInfo);"
        },
        {
          "name": "voidXPLMDrawAircraft",
          "signature": "XPLM_API voidXPLMDrawAircraft(\n                         int                  inPlaneIndex,\n                         float                inX,\n                         float                inY,\n                         float                inZ,\n                         float                inPitch,\n                         float                inRoll,\n                         float                inYaw,\n                         int                  inFullDraw,XPLMPlaneDrawState_t* inDrawStateInfo);",
          "source": "code_block_extraction",
          "type": "function"
        }
      ],
      "category": {
        "category": "XPLM_Display",
        "module": "Xplm Display",
        "url": "https://developer.x-plane.com/sdk/XPLMDrawAircraft/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"function XPLM_DEPRECATED\"><h3 class=\"sdk-api-function\" id=\"XPLMDrawAircraft\"><a href=\"/sdk/XPLMDrawAircraft/\">XPLMDrawAircraft</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API void       <a href=\"/sdk/XPLMDrawAircraft/\">XPLMDrawAircraft</a>(\n                         int                  inPlaneIndex,\n                         float                inX,\n                         float                inY,\n                         float                inZ,\n                         float                inPitch,\n                         float                inRoll,\n                         float                inYaw,\n                         int                  inFullDraw,\n                         <a href=\"/sdk/XPLMPlaneDrawState_t/\">XPLMPlaneDrawState_t</a> * inDrawStateInfo);\n</code></pre><p>WARNING: Aircraft drawing via this API is deprecated and WILL NOT WORK in future versions of X-Plane. Use<a href=\"/sdk/XPLMInstance/\">XPLMInstance</a>for 3-d drawing of custom aircraft models.</p><p>This routine draws an aircraft. It can only be called from a 3-d drawing callback. Pass in the position of the plane in OpenGL local coordinates and the orientation of the plane. A 1 for full drawing indicates that the whole plane must be drawn; a 0 indicates you only need the nav lights drawn. (This saves rendering time when planes are far away.)</p></div></div></article>",
      "code_examples": [
        {
          "char_count": 502,
          "code": "XPLM_API voidXPLMDrawAircraft(\n                         int                  inPlaneIndex,\n                         float                inX,\n                         float                inY,\n                         float                inZ,\n                         float                inPitch,\n                         float                inRoll,\n                         float                inYaw,\n                         int                  inFullDraw,XPLMPlaneDrawState_t* inDrawStateInfo);",
          "context": "XPLMDrawAircraft",
          "id": "example_0",
          "language": "c",
          "line_count": 9,
          "type": "snippet"
        }
      ],
      "cross_references": [
        "XPLMInstance"
      ],
      "markdown": "### [XPLMDrawAircraft](/sdk/XPLMDrawAircraft/)\n\n```cpp\nXPLM_API void       XPLMDrawAircraft(\n                         int                  inPlaneIndex,\n                         float                inX,\n                         float                inY,\n                         float                inZ,\n                         float                inPitch,\n                         float                inRoll,\n                         float                inYaw,\n                         int                  inFullDraw,\n                         XPLMPlaneDrawState_t * inDrawStateInfo);\n\n```\n\nWARNING: Aircraft drawing via this API is deprecated and WILL NOT WORK in future\nversions of X-Plane. Use[XPLMInstance](/sdk/XPLMInstance/)for 3-d drawing of\ncustom aircraft models.\n\nThis routine draws an aircraft. It can only be called from a 3-d drawing\ncallback. Pass in the position of the plane in OpenGL local coordinates and the\norientation of the plane. A 1 for full drawing indicates that the whole plane\nmust be drawn; a 0 indicates you only need the nav lights drawn. (This saves\nrendering time when planes are far away.)",
      "own_functions": [
        "XPLMDrawAircraft",
        "voidXPLMDrawAircraft"
      ],
      "processing_timestamp": "2025-06-25T20:39:23.463567+00:00",
      "title": "XPLMDrawAircraft | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMDrawAircraft/"
    },
    "https://developer.x-plane.com/sdk/XPLMDrawCallback_f/": {
      "api_signatures": [],
      "category": {
        "category": "XPLM_Display",
        "module": "Xplm Display",
        "url": "https://developer.x-plane.com/sdk/XPLMDrawCallback_f/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"callback\"><h3 class=\"sdk-api-callback\" id=\"XPLMDrawCallback_f\"><a href=\"/sdk/XPLMDrawCallback_f/\">XPLMDrawCallback_f</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>typedef int (* <a href=\"/sdk/XPLMDrawCallback_f/\">XPLMDrawCallback_f</a>)(\n                         <a href=\"/sdk/XPLMDrawingPhase/\">XPLMDrawingPhase</a>     inPhase,\n                         int                  inIsBefore,\n                         void *               inRefcon);\n</code></pre><p>This is the prototype for a low level drawing callback. You are passed in the phase and whether it is before or after. If you are before the phase, return 1 to let X-Plane draw or 0 to suppress X-Plane drawing. If you are after the phase the return value is ignored.</p><p>Refcon is a unique value that you specify when registering the callback, allowing you to slip a pointer to your own data to the callback.</p><p>Upon entry the OpenGL context will be correctly set up for you and OpenGL will be in ‘local’ coordinates for 3d drawing and panel coordinates for 2d drawing. The OpenGL state (texturing, etc.) will be unknown.</p></div></div></article>",
      "code_examples": [
        {
          "char_count": 173,
          "code": "typedef int (*XPLMDrawCallback_f)(XPLMDrawingPhaseinPhase,\n                         int                  inIsBefore,\n                         void *               inRefcon);",
          "context": "XPLMDrawCallback_f",
          "id": "example_0",
          "language": "c",
          "line_count": 3,
          "type": "snippet"
        }
      ],
      "cross_references": [
        "XPLMDrawingPhase"
      ],
      "markdown": "### [XPLMDrawCallback_f](/sdk/XPLMDrawCallback_f/)\n\n```cpp\ntypedef int (* XPLMDrawCallback_f)(\n                         XPLMDrawingPhase     inPhase,\n                         int                  inIsBefore,\n                         void *               inRefcon);\n\n```\n\nThis is the prototype for a low level drawing callback. You are passed in the\nphase and whether it is before or after. If you are before the phase, return 1\nto let X-Plane draw or 0 to suppress X-Plane drawing. If you are after the phase\nthe return value is ignored.\n\nRefcon is a unique value that you specify when registering the callback,\nallowing you to slip a pointer to your own data to the callback.\n\nUpon entry the OpenGL context will be correctly set up for you and OpenGL will\nbe in ‘local’ coordinates for 3d drawing and panel coordinates for 2d drawing.\nThe OpenGL state (texturing, etc.) will be unknown.",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:23.465569+00:00",
      "title": "XPLMDrawCallback_f | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMDrawCallback_f/"
    },
    "https://developer.x-plane.com/sdk/XPLMDrawInfo_t/": {
      "api_signatures": [],
      "category": {
        "category": "XPLM_Display",
        "module": "Xplm Display",
        "url": "https://developer.x-plane.com/sdk/XPLMDrawInfo_t/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"struct XPLM200\"><h3 class=\"sdk-api-struct\" id=\"XPLMDrawInfo_t\"><a href=\"/sdk/XPLMDrawInfo_t/\">XPLMDrawInfo_t</a></h3><p>The<a href=\"/sdk/XPLMDrawInfo_t/\">XPLMDrawInfo_t</a>structure contains positioning info for one object that is to be drawn. Be sure to set structSize to the size of the structure for future expansion.</p><pre class=\"language-cpp\" data-manual=\"true\"><code>typedef struct {\n     // Set this to the size of this structure!\n     int                       structSize;\n     // X location of the object in local coordinates.\n     float                     x;\n     // Y location of the object in local coordinates.\n     float                     y;\n     // Z location of the object in local coordinates.\n     float                     z;\n     // Pitch in degres to rotate the object, positive is up.\n     float                     pitch;\n     // Heading in local coordinates to rotate the object, clockwise.\n     float                     heading;\n     // Roll to rotate the object.\n     float                     roll;\n} <a href=\"/sdk/XPLMDrawInfo_t/\">XPLMDrawInfo_t</a>;</code></pre></div></div></article>",
      "code_examples": [
        {
          "char_count": 673,
          "code": "typedef struct {\n     // Set this to the size of this structure!\n     int                       structSize;\n     // X location of the object in local coordinates.\n     float                     x;\n     // Y location of the object in local coordinates.\n     float                     y;\n     // Z location of the object in local coordinates.\n     float                     z;\n     // Pitch in degres to rotate the object, positive is up.\n     float                     pitch;\n     // Heading in local coordinates to rotate the object, clockwise.\n     float                     heading;\n     // Roll to rotate the object.\n     float                     roll;\n}XPLMDrawInfo_t;",
          "context": "TheXPLMDrawInfo_tstructure contains positioning info for one object that is to be drawn. Be sure to set structSize to the size of the structure for future expansion.",
          "id": "example_0",
          "language": "c",
          "line_count": 16,
          "type": "example"
        }
      ],
      "cross_references": [],
      "markdown": "### [XPLMDrawInfo_t](/sdk/XPLMDrawInfo_t/)\n\nThe[XPLMDrawInfo_t](/sdk/XPLMDrawInfo_t/)structure contains positioning info for\none object that is to be drawn. Be sure to set structSize to the size of the\nstructure for future expansion.\n\n```cpp\ntypedef struct {\n     // Set this to the size of this structure!\n     int                       structSize;\n     // X location of the object in local coordinates.\n     float                     x;\n     // Y location of the object in local coordinates.\n     float                     y;\n     // Z location of the object in local coordinates.\n     float                     z;\n     // Pitch in degres to rotate the object, positive is up.\n     float                     pitch;\n     // Heading in local coordinates to rotate the object, clockwise.\n     float                     heading;\n     // Roll to rotate the object.\n     float                     roll;\n} XPLMDrawInfo_t;\n```",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:23.470571+00:00",
      "title": "XPLMDrawInfo_t | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMDrawInfo_t/"
    },
    "https://developer.x-plane.com/sdk/XPLMDrawMapIconFromSheet/": {
      "api_signatures": [
        {
          "description": "Enables plugin-created map layers to draw PNG icons using X-Plane’s built-in icon drawing functionality. Only valid from within an XPLMIconDrawingCallback_t (but you can request an arbitrary number of icons to be drawn from within your callback).",
          "name": "XPLMDrawMapIconFromSheet",
          "parameters": [
            {
              "full_declaration": "const char *         inPngPath",
              "name": "inPngPath",
              "type": "const char *"
            },
            {
              "full_declaration": "int                  s",
              "name": "s",
              "type": "int"
            },
            {
              "full_declaration": "int                  t",
              "name": "t",
              "type": "int"
            },
            {
              "full_declaration": "int                  ds",
              "name": "ds",
              "type": "int"
            },
            {
              "full_declaration": "int                  dt",
              "name": "dt",
              "type": "int"
            },
            {
              "full_declaration": "float                mapX",
              "name": "mapX",
              "type": "float"
            },
            {
              "full_declaration": "float                mapY",
              "name": "mapY",
              "type": "float"
            },
            {
              "full_declaration": "float                rotationDegrees",
              "name": "rotationDegrees",
              "type": "float"
            },
            {
              "full_declaration": "float                mapWidth",
              "name": "mapWidth",
              "type": "float"
            }
          ],
          "signature": "XPLM_API voidXPLMDrawMapIconFromSheet(XPLMMapLayerIDlayer,\n                         const char *         inPngPath,\n                         int                  s,\n                         int                  t,\n                         int                  ds,\n                         int                  dt,\n                         float                mapX,\n                         float                mapY,XPLMMapOrientationorientation,\n                         float                rotationDegrees,\n                         float                mapWidth);"
        },
        {
          "name": "voidXPLMDrawMapIconFromSheet",
          "signature": "XPLM_API voidXPLMDrawMapIconFromSheet(XPLMMapLayerIDlayer,\n                         const char *         inPngPath,\n                         int                  s,\n                         int                  t,\n                         int                  ds,\n                         int                  dt,\n                         float                mapX,\n                         float                mapY,XPLMMapOrientationorientation,\n                         float                rotationDegrees,\n                         float                mapWidth);",
          "source": "code_block_extraction",
          "type": "function"
        }
      ],
      "category": {
        "category": "XPLM_Display",
        "module": "Xplm Display",
        "url": "https://developer.x-plane.com/sdk/XPLMDrawMapIconFromSheet/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPLMDrawMapIconFromSheet\"><a href=\"/sdk/XPLMDrawMapIconFromSheet/\">XPLMDrawMapIconFromSheet</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API void       <a href=\"/sdk/XPLMDrawMapIconFromSheet/\">XPLMDrawMapIconFromSheet</a>(\n                         <a href=\"/sdk/XPLMMapLayerID/\">XPLMMapLayerID</a>       layer,\n                         const char *         inPngPath,\n                         int                  s,\n                         int                  t,\n                         int                  ds,\n                         int                  dt,\n                         float                mapX,\n                         float                mapY,\n                         <a href=\"/sdk/XPLMMapOrientation/\">XPLMMapOrientation</a>   orientation,\n                         float                rotationDegrees,\n                         float                mapWidth);\n</code></pre><p>Enables plugin-created map layers to draw PNG icons using X-Plane’s built-in icon drawing functionality. Only valid from within an XPLMIconDrawingCallback_t (but you can request an arbitrary number of icons to be drawn from within your callback).</p><p>X-Plane will automatically manage the memory for your texture so that it only has to be loaded from disk once as long as you continue drawing it per-frame. (When you stop drawing it, the memory may purged in a “garbage collection” pass, require a load from disk in the future.)</p><p>Instead of having X-Plane draw a full PNG, this method allows you to use UV coordinates to request a portion of the image to be drawn. This allows you to use a single texture load (of an icon sheet, for example) to draw many icons. Doing so is much more efficient than drawing a dozen different small PNGs.</p><p>The UV coordinates used here treat the texture you load as being comprised of a number of identically sized “cells”. You specify the width and height in cells (ds and dt, respectively), as well as the coordinates within the cell grid for the sub-image you’d like to draw.</p><p>Note that you can use different ds and dt values in subsequent calls with the same texture sheet. This enables you to use icons of different sizes in the same sheet if you arrange them properly in the PNG.</p><p>This function is only valid from within an XPLMIconDrawingCallback_t (but you can request an arbitrary number of icons to be drawn from within your callback).</p></div></div></article>",
      "code_examples": [
        {
          "char_count": 567,
          "code": "XPLM_API voidXPLMDrawMapIconFromSheet(XPLMMapLayerIDlayer,\n                         const char *         inPngPath,\n                         int                  s,\n                         int                  t,\n                         int                  ds,\n                         int                  dt,\n                         float                mapX,\n                         float                mapY,XPLMMapOrientationorientation,\n                         float                rotationDegrees,\n                         float                mapWidth);",
          "context": "XPLMDrawMapIconFromSheet",
          "id": "example_0",
          "language": "c",
          "line_count": 10,
          "type": "snippet"
        }
      ],
      "cross_references": [
        "XPLMMap",
        "XPLMMapOrientation"
      ],
      "markdown": "### [XPLMDrawMapIconFromSheet](/sdk/XPLMDrawMapIconFromSheet/)\n\n```cpp\nXPLM_API void       XPLMDrawMapIconFromSheet(\n                         XPLMMapLayerID       layer,\n                         const char *         inPngPath,\n                         int                  s,\n                         int                  t,\n                         int                  ds,\n                         int                  dt,\n                         float                mapX,\n                         float                mapY,\n                         XPLMMapOrientation   orientation,\n                         float                rotationDegrees,\n                         float                mapWidth);\n\n```\n\nEnables plugin-created map layers to draw PNG icons using X-Plane’s built-in\nicon drawing functionality. Only valid from within an XPLMIconDrawingCallback_t\n(but you can request an arbitrary number of icons to be drawn from within your\ncallback).\n\nX-Plane will automatically manage the memory for your texture so that it only\nhas to be loaded from disk once as long as you continue drawing it per-frame.\n(When you stop drawing it, the memory may purged in a “garbage collection” pass,\nrequire a load from disk in the future.)\n\nInstead of having X-Plane draw a full PNG, this method allows you to use UV\ncoordinates to request a portion of the image to be drawn. This allows you to\nuse a single texture load (of an icon sheet, for example) to draw many icons.\nDoing so is much more efficient than drawing a dozen different small PNGs.\n\nThe UV coordinates used here treat the texture you load as being comprised of a\nnumber of identically sized “cells”. You specify the width and height in cells\n(ds and dt, respectively), as well as the coordinates within the cell grid for\nthe sub-image you’d like to draw.\n\nNote that you can use different ds and dt values in subsequent calls with the\nsame texture sheet. This enables you to use icons of different sizes in the same\nsheet if you arrange them properly in the PNG.\n\nThis function is only valid from within an XPLMIconDrawingCallback_t (but you\ncan request an arbitrary number of icons to be drawn from within your callback).",
      "own_functions": [
        "XPLMDrawMapIconFromSheet",
        "voidXPLMDrawMapIconFromSheet"
      ],
      "processing_timestamp": "2025-06-25T20:39:23.468567+00:00",
      "title": "XPLMDrawMapIconFromSheet | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMDrawMapIconFromSheet/"
    },
    "https://developer.x-plane.com/sdk/XPLMDrawMapLabel/": {
      "api_signatures": [
        {
          "description": "Enables plugin-created map layers to draw text labels using X-Plane’s built-in labeling functionality. Only valid from within anXPLMMapLabelDrawingCallback_f(but you can request an arbitrary number of text labels to be drawn from within your callback).",
          "name": "XPLMDrawMapLabel",
          "parameters": [
            {
              "full_declaration": "const char *         inText",
              "name": "inText",
              "type": "const char *"
            },
            {
              "full_declaration": "float                mapX",
              "name": "mapX",
              "type": "float"
            },
            {
              "full_declaration": "float                mapY",
              "name": "mapY",
              "type": "float"
            },
            {
              "full_declaration": "float                rotationDegrees",
              "name": "rotationDegrees",
              "type": "float"
            }
          ],
          "signature": "XPLM_API voidXPLMDrawMapLabel(XPLMMapLayerIDlayer,\n                         const char *         inText,\n                         float                mapX,\n                         float                mapY,XPLMMapOrientationorientation,\n                         float                rotationDegrees);"
        },
        {
          "name": "voidXPLMDrawMapLabel",
          "signature": "XPLM_API voidXPLMDrawMapLabel(XPLMMapLayerIDlayer,\n                         const char *         inText,\n                         float                mapX,\n                         float                mapY,XPLMMapOrientationorientation,\n                         float                rotationDegrees);",
          "source": "code_block_extraction",
          "type": "function"
        }
      ],
      "category": {
        "category": "XPLM_Display",
        "module": "Xplm Display",
        "url": "https://developer.x-plane.com/sdk/XPLMDrawMapLabel/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPLMDrawMapLabel\"><a href=\"/sdk/XPLMDrawMapLabel/\">XPLMDrawMapLabel</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API void       <a href=\"/sdk/XPLMDrawMapLabel/\">XPLMDrawMapLabel</a>(\n                         <a href=\"/sdk/XPLMMapLayerID/\">XPLMMapLayerID</a>       layer,\n                         const char *         inText,\n                         float                mapX,\n                         float                mapY,\n                         <a href=\"/sdk/XPLMMapOrientation/\">XPLMMapOrientation</a>   orientation,\n                         float                rotationDegrees);\n</code></pre><p>Enables plugin-created map layers to draw text labels using X-Plane’s built-in labeling functionality. Only valid from within an<a href=\"/sdk/XPLMMapLabelDrawingCallback_f/\">XPLMMapLabelDrawingCallback_f</a>(but you can request an arbitrary number of text labels to be drawn from within your callback).</p></div></div></article>",
      "code_examples": [
        {
          "char_count": 302,
          "code": "XPLM_API voidXPLMDrawMapLabel(XPLMMapLayerIDlayer,\n                         const char *         inText,\n                         float                mapX,\n                         float                mapY,XPLMMapOrientationorientation,\n                         float                rotationDegrees);",
          "context": "XPLMDrawMapLabel",
          "id": "example_0",
          "language": "c",
          "line_count": 5,
          "type": "snippet"
        }
      ],
      "cross_references": [
        "XPLMMap",
        "XPLMMapOrientation"
      ],
      "markdown": "### [XPLMDrawMapLabel](/sdk/XPLMDrawMapLabel/)\n\n```cpp\nXPLM_API void       XPLMDrawMapLabel(\n                         XPLMMapLayerID       layer,\n                         const char *         inText,\n                         float                mapX,\n                         float                mapY,\n                         XPLMMapOrientation   orientation,\n                         float                rotationDegrees);\n\n```\n\nEnables plugin-created map layers to draw text labels using X-Plane’s built-in\nlabeling functionality. Only valid from within\nan[XPLMMapLabelDrawingCallback_f](/sdk/XPLMMapLabelDrawingCallback_f/)(but you\ncan request an arbitrary number of text labels to be drawn from within your\ncallback).",
      "own_functions": [
        "XPLMDrawMapLabel",
        "voidXPLMDrawMapLabel"
      ],
      "processing_timestamp": "2025-06-25T20:39:23.472570+00:00",
      "title": "XPLMDrawMapLabel | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMDrawMapLabel/"
    },
    "https://developer.x-plane.com/sdk/XPLMDrawNumber/": {
      "api_signatures": [
        {
          "description": "This routine draws a number similar to the digit editing fields in PlaneMaker and data output display in X-Plane. Pass in a color, a position, a floating point value, and formatting info. Specify how many integer and how many decimal digits to show and whether to show a sign, as well as a character set. This routine returns the xOffset plus width of the string drawn.",
          "name": "XPLMDrawNumber",
          "parameters": [
            {
              "full_declaration": "float *              inColorRGB",
              "name": "inColorRGB",
              "type": "float *"
            },
            {
              "full_declaration": "int                  inXOffset",
              "name": "inXOffset",
              "type": "int"
            },
            {
              "full_declaration": "int                  inYOffset",
              "name": "inYOffset",
              "type": "int"
            },
            {
              "full_declaration": "double               inValue",
              "name": "inValue",
              "type": "double"
            },
            {
              "full_declaration": "int                  inDigits",
              "name": "inDigits",
              "type": "int"
            },
            {
              "full_declaration": "int                  inDecimals",
              "name": "inDecimals",
              "type": "int"
            },
            {
              "full_declaration": "int                  inShowSign",
              "name": "inShowSign",
              "type": "int"
            }
          ],
          "signature": "XPLM_API voidXPLMDrawNumber(\n                         float *              inColorRGB,\n                         int                  inXOffset,\n                         int                  inYOffset,\n                         double               inValue,\n                         int                  inDigits,\n                         int                  inDecimals,\n                         int                  inShowSign,XPLMFontIDinFontID);"
        },
        {
          "name": "voidXPLMDrawNumber",
          "signature": "XPLM_API voidXPLMDrawNumber(\n                         float *              inColorRGB,\n                         int                  inXOffset,\n                         int                  inYOffset,\n                         double               inValue,\n                         int                  inDigits,\n                         int                  inDecimals,\n                         int                  inShowSign,XPLMFontIDinFontID);",
          "source": "code_block_extraction",
          "type": "function"
        }
      ],
      "category": {
        "category": "XPLM_Display",
        "module": "Xplm Display",
        "url": "https://developer.x-plane.com/sdk/XPLMDrawNumber/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPLMDrawNumber\"><a href=\"/sdk/XPLMDrawNumber/\">XPLMDrawNumber</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API void       <a href=\"/sdk/XPLMDrawNumber/\">XPLMDrawNumber</a>(\n                         float *              inColorRGB,\n                         int                  inXOffset,\n                         int                  inYOffset,\n                         double               inValue,\n                         int                  inDigits,\n                         int                  inDecimals,\n                         int                  inShowSign,\n                         <a href=\"/sdk/XPLMFontID/\">XPLMFontID</a>           inFontID);\n</code></pre><p>This routine draws a number similar to the digit editing fields in PlaneMaker and data output display in X-Plane. Pass in a color, a position, a floating point value, and formatting info. Specify how many integer and how many decimal digits to show and whether to show a sign, as well as a character set. This routine returns the xOffset plus width of the string drawn.</p></div></div></article>",
      "code_examples": [
        {
          "char_count": 447,
          "code": "XPLM_API voidXPLMDrawNumber(\n                         float *              inColorRGB,\n                         int                  inXOffset,\n                         int                  inYOffset,\n                         double               inValue,\n                         int                  inDigits,\n                         int                  inDecimals,\n                         int                  inShowSign,XPLMFontIDinFontID);",
          "context": "XPLMDrawNumber",
          "id": "example_0",
          "language": "c",
          "line_count": 8,
          "type": "snippet"
        }
      ],
      "cross_references": [
        "XPLMFontID"
      ],
      "markdown": "### [XPLMDrawNumber](/sdk/XPLMDrawNumber/)\n\n```cpp\nXPLM_API void       XPLMDrawNumber(\n                         float *              inColorRGB,\n                         int                  inXOffset,\n                         int                  inYOffset,\n                         double               inValue,\n                         int                  inDigits,\n                         int                  inDecimals,\n                         int                  inShowSign,\n                         XPLMFontID           inFontID);\n\n```\n\nThis routine draws a number similar to the digit editing fields in PlaneMaker\nand data output display in X-Plane. Pass in a color, a position, a floating\npoint value, and formatting info. Specify how many integer and how many decimal\ndigits to show and whether to show a sign, as well as a character set. This\nroutine returns the xOffset plus width of the string drawn.",
      "own_functions": [
        "XPLMDrawNumber",
        "voidXPLMDrawNumber"
      ],
      "processing_timestamp": "2025-06-25T20:39:23.474569+00:00",
      "title": "XPLMDrawNumber | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMDrawNumber/"
    },
    "https://developer.x-plane.com/sdk/XPLMDrawObjects/": {
      "api_signatures": [
        {
          "deprecated": true,
          "description": "Deprecation Warning: use XPLMInstancing to draw 3-d objects by creating instances, rather than these APIs from draw callbacks.",
          "name": "XPLMDrawObjects",
          "parameters": [
            {
              "full_declaration": "int                  inCount",
              "name": "inCount",
              "type": "int"
            },
            {
              "full_declaration": "XPLMDrawInfo_t*     inLocations",
              "name": "inLocations",
              "type": "XPLMDrawInfo_t*"
            },
            {
              "full_declaration": "int                  lighting",
              "name": "lighting",
              "type": "int"
            },
            {
              "full_declaration": "int                  earth_relative",
              "name": "earth_relative",
              "type": "int"
            }
          ],
          "signature": "XPLM_API voidXPLMDrawObjects(XPLMObjectRefinObject,\n                         int                  inCount,XPLMDrawInfo_t*     inLocations,\n                         int                  lighting,\n                         int                  earth_relative);"
        },
        {
          "name": "voidXPLMDrawObjects",
          "signature": "XPLM_API voidXPLMDrawObjects(XPLMObjectRefinObject,\n                         int                  inCount,XPLMDrawInfo_t*     inLocations,\n                         int                  lighting,\n                         int                  earth_relative);",
          "source": "code_block_extraction",
          "type": "function"
        }
      ],
      "category": {
        "category": "XPLM_Display",
        "module": "Xplm Display",
        "url": "https://developer.x-plane.com/sdk/XPLMDrawObjects/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"function XPLM_DEPRECATED\"><h3 class=\"sdk-api-function\" id=\"XPLMDrawObjects\"><a href=\"/sdk/XPLMDrawObjects/\">XPLMDrawObjects</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API void       <a href=\"/sdk/XPLMDrawObjects/\">XPLMDrawObjects</a>(\n                         <a href=\"/sdk/XPLMObjectRef/\">XPLMObjectRef</a>        inObject,\n                         int                  inCount,\n                         <a href=\"/sdk/XPLMDrawInfo_t/\">XPLMDrawInfo_t</a> *     inLocations,\n                         int                  lighting,\n                         int                  earth_relative);\n</code></pre><p><strong>Deprecation Warning</strong>: use XPLMInstancing to draw 3-d objects by creating instances, rather than these APIs from draw callbacks.</p><p><a href=\"/sdk/XPLMDrawObjects/\">XPLMDrawObjects</a>draws an object from an OBJ file one or more times. You pass in the object and an array of<a href=\"/sdk/XPLMDrawInfo_t/\">XPLMDrawInfo_t</a>structs, one for each place you would like the object to be drawn.</p><p>X-Plane will attempt to cull the objects based on LOD and visibility, and will pick the appropriate LOD.</p><p>Lighting is a boolean; pass 1 to show the night version of object with night-only lights lit up. Pass 0 to show the daytime version of the object.</p><p>earth_relative controls the coordinate system. If this is 1, the rotations you specify are applied to the object after its coordinate system is transformed from local to earth-relative coordinates – that is, an object with no rotations will point toward true north and the Y axis will be up against gravity. If this is 0, the object is drawn with your rotations from local coordanates – that is, an object with no rotations is drawn pointing down the -Z axis and the Y axis of the object matches the local coordinate Y axis.</p></div></div></article>",
      "code_examples": [
        {
          "char_count": 257,
          "code": "XPLM_API voidXPLMDrawObjects(XPLMObjectRefinObject,\n                         int                  inCount,XPLMDrawInfo_t*     inLocations,\n                         int                  lighting,\n                         int                  earth_relative);",
          "context": "XPLMDrawObjects",
          "id": "example_0",
          "language": "c",
          "line_count": 4,
          "type": "snippet"
        }
      ],
      "cross_references": [],
      "markdown": "### [XPLMDrawObjects](/sdk/XPLMDrawObjects/)\n\n```cpp\nXPLM_API void       XPLMDrawObjects(\n                         XPLMObjectRef        inObject,\n                         int                  inCount,\n                         XPLMDrawInfo_t *     inLocations,\n                         int                  lighting,\n                         int                  earth_relative);\n\n```\n\n**Deprecation Warning**: use XPLMInstancing to draw 3-d objects by creating\ninstances, rather than these APIs from draw callbacks.\n\n[XPLMDrawObjects](/sdk/XPLMDrawObjects/)draws an object from an OBJ file one or\nmore times. You pass in the object and an array\nof[XPLMDrawInfo_t](/sdk/XPLMDrawInfo_t/)structs, one for each place you would\nlike the object to be drawn.\n\nX-Plane will attempt to cull the objects based on LOD and visibility, and will\npick the appropriate LOD.\n\nLighting is a boolean; pass 1 to show the night version of object with\nnight-only lights lit up. Pass 0 to show the daytime version of the object.\n\nearth_relative controls the coordinate system. If this is 1, the rotations you\nspecify are applied to the object after its coordinate system is transformed\nfrom local to earth-relative coordinates – that is, an object with no rotations\nwill point toward true north and the Y axis will be up against gravity. If this\nis 0, the object is drawn with your rotations from local coordanates – that is,\nan object with no rotations is drawn pointing down the -Z axis and the Y axis of\nthe object matches the local coordinate Y axis.",
      "own_functions": [
        "XPLMDrawObjects",
        "voidXPLMDrawObjects"
      ],
      "processing_timestamp": "2025-06-25T20:39:23.477568+00:00",
      "title": "XPLMDrawObjects | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMDrawObjects/"
    },
    "https://developer.x-plane.com/sdk/XPLMDrawString/": {
      "api_signatures": [
        {
          "description": "This routine draws a NULL terminated string in a given font. Pass in the lower left pixel that the character is to be drawn onto. Also pass the character and font ID. This function returns the x offset plus the width of all drawn characters. The color to draw in is specified as a pointer to an array of three floating point colors, representing RGB intensities from 0.0 to 1.0.",
          "name": "XPLMDrawString",
          "parameters": [
            {
              "full_declaration": "float *              inColorRGB",
              "name": "inColorRGB",
              "type": "float *"
            },
            {
              "full_declaration": "int                  inXOffset",
              "name": "inXOffset",
              "type": "int"
            },
            {
              "full_declaration": "int                  inYOffset",
              "name": "inYOffset",
              "type": "int"
            },
            {
              "full_declaration": "const char *         inChar",
              "name": "inChar",
              "type": "const char *"
            },
            {
              "full_declaration": "int *                inWordWrapWidth",
              "name": "inWordWrapWidth",
              "type": "int *"
            }
          ],
          "signature": "XPLM_API voidXPLMDrawString(\n                         float *              inColorRGB,\n                         int                  inXOffset,\n                         int                  inYOffset,\n                         const char *         inChar,\n                         int *                inWordWrapWidth,    /* Can be NULL */XPLMFontIDinFontID);"
        },
        {
          "name": "voidXPLMDrawString",
          "signature": "XPLM_API voidXPLMDrawString(\n                         float *              inColorRGB,\n                         int                  inXOffset,\n                         int                  inYOffset,\n                         const char *         inChar,\n                         int *                inWordWrapWidth,    /* Can be NULL */XPLMFontIDinFontID);",
          "source": "code_block_extraction",
          "type": "function"
        }
      ],
      "category": {
        "category": "XPLM_Display",
        "module": "Xplm Display",
        "url": "https://developer.x-plane.com/sdk/XPLMDrawString/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPLMDrawString\"><a href=\"/sdk/XPLMDrawString/\">XPLMDrawString</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API void       <a href=\"/sdk/XPLMDrawString/\">XPLMDrawString</a>(\n                         float *              inColorRGB,\n                         int                  inXOffset,\n                         int                  inYOffset,\n                         const char *         inChar,\n                         int *                inWordWrapWidth,    /* Can be NULL */\n                         <a href=\"/sdk/XPLMFontID/\">XPLMFontID</a>           inFontID);\n</code></pre><p>This routine draws a NULL terminated string in a given font. Pass in the lower left pixel that the character is to be drawn onto. Also pass the character and font ID. This function returns the x offset plus the width of all drawn characters. The color to draw in is specified as a pointer to an array of three floating point colors, representing RGB intensities from 0.0 to 1.0.</p></div></div></article>",
      "code_examples": [
        {
          "char_count": 358,
          "code": "XPLM_API voidXPLMDrawString(\n                         float *              inColorRGB,\n                         int                  inXOffset,\n                         int                  inYOffset,\n                         const char *         inChar,\n                         int *                inWordWrapWidth,    /* Can be NULL */XPLMFontIDinFontID);",
          "context": "XPLMDrawString",
          "id": "example_0",
          "language": "c",
          "line_count": 6,
          "type": "snippet"
        }
      ],
      "cross_references": [
        "XPLMFontID"
      ],
      "markdown": "### [XPLMDrawString](/sdk/XPLMDrawString/)\n\n```cpp\nXPLM_API void       XPLMDrawString(\n                         float *              inColorRGB,\n                         int                  inXOffset,\n                         int                  inYOffset,\n                         const char *         inChar,\n                         int *                inWordWrapWidth,    /* Can be NULL */\n                         XPLMFontID           inFontID);\n\n```\n\nThis routine draws a NULL terminated string in a given font. Pass in the lower\nleft pixel that the character is to be drawn onto. Also pass the character and\nfont ID. This function returns the x offset plus the width of all drawn\ncharacters. The color to draw in is specified as a pointer to an array of three\nfloating point colors, representing RGB intensities from 0.0 to 1.0.",
      "own_functions": [
        "XPLMDrawString",
        "voidXPLMDrawString"
      ],
      "processing_timestamp": "2025-06-25T20:39:23.479568+00:00",
      "title": "XPLMDrawString | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMDrawString/"
    },
    "https://developer.x-plane.com/sdk/XPLMDrawTranslucentDarkBox/": {
      "api_signatures": [
        {
          "description": "This routine draws a translucent dark box, partially obscuring parts of the screen but making text easy to read. This is the same graphics primitive used by X-Plane to show text files.",
          "name": "XPLMDrawTranslucentDarkBox",
          "parameters": [
            {
              "full_declaration": "int                  inLeft",
              "name": "inLeft",
              "type": "int"
            },
            {
              "full_declaration": "int                  inTop",
              "name": "inTop",
              "type": "int"
            },
            {
              "full_declaration": "int                  inRight",
              "name": "inRight",
              "type": "int"
            },
            {
              "full_declaration": "int                  inBottom",
              "name": "inBottom",
              "type": "int"
            }
          ],
          "signature": "XPLM_API voidXPLMDrawTranslucentDarkBox(\n                         int                  inLeft,\n                         int                  inTop,\n                         int                  inRight,\n                         int                  inBottom);"
        },
        {
          "name": "voidXPLMDrawTranslucentDarkBox",
          "signature": "XPLM_API voidXPLMDrawTranslucentDarkBox(\n                         int                  inLeft,\n                         int                  inTop,\n                         int                  inRight,\n                         int                  inBottom);",
          "source": "code_block_extraction",
          "type": "function"
        }
      ],
      "category": {
        "category": "XPLM_Display",
        "module": "Xplm Display",
        "url": "https://developer.x-plane.com/sdk/XPLMDrawTranslucentDarkBox/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPLMDrawTranslucentDarkBox\"><a href=\"/sdk/XPLMDrawTranslucentDarkBox/\">XPLMDrawTranslucentDarkBox</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API void       <a href=\"/sdk/XPLMDrawTranslucentDarkBox/\">XPLMDrawTranslucentDarkBox</a>(\n                         int                  inLeft,\n                         int                  inTop,\n                         int                  inRight,\n                         int                  inBottom);\n</code></pre><p>This routine draws a translucent dark box, partially obscuring parts of the screen but making text easy to read. This is the same graphics primitive used by X-Plane to show text files.</p></div></div></article>",
      "code_examples": [
        {
          "char_count": 259,
          "code": "XPLM_API voidXPLMDrawTranslucentDarkBox(\n                         int                  inLeft,\n                         int                  inTop,\n                         int                  inRight,\n                         int                  inBottom);",
          "context": "XPLMDrawTranslucentDarkBox",
          "id": "example_0",
          "language": "c",
          "line_count": 5,
          "type": "snippet"
        }
      ],
      "cross_references": [],
      "markdown": "### [XPLMDrawTranslucentDarkBox](/sdk/XPLMDrawTranslucentDarkBox/)\n\n```cpp\nXPLM_API void       XPLMDrawTranslucentDarkBox(\n                         int                  inLeft,\n                         int                  inTop,\n                         int                  inRight,\n                         int                  inBottom);\n\n```\n\nThis routine draws a translucent dark box, partially obscuring parts of the\nscreen but making text easy to read. This is the same graphics primitive used by\nX-Plane to show text files.",
      "own_functions": [
        "XPLMDrawTranslucentDarkBox",
        "voidXPLMDrawTranslucentDarkBox"
      ],
      "processing_timestamp": "2025-06-25T20:39:23.481569+00:00",
      "title": "XPLMDrawTranslucentDarkBox | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMDrawTranslucentDarkBox/"
    },
    "https://developer.x-plane.com/sdk/XPLMDrawWindow_f/": {
      "api_signatures": [],
      "category": {
        "category": "XPLM_Display",
        "module": "Xplm Display",
        "url": "https://developer.x-plane.com/sdk/XPLMDrawWindow_f/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"callback\"><h3 class=\"sdk-api-callback\" id=\"XPLMDrawWindow_f\"><a href=\"/sdk/XPLMDrawWindow_f/\">XPLMDrawWindow_f</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>typedef void (* <a href=\"/sdk/XPLMDrawWindow_f/\">XPLMDrawWindow_f</a>)(\n                         <a href=\"/sdk/XPLMWindowID/\">XPLMWindowID</a>         inWindowID,\n                         void *               inRefcon);\n</code></pre><p>A callback to handle 2-D drawing of your window. You are passed in your window and its refcon. Draw the window. You can use other XPLM functions from this header to find the current dimensions of your window, etc. When this callback is called, the OpenGL context will be set properly for 2-D window drawing.</p><p><strong>Note</strong>: Because you are drawing your window over a background, you can make a translucent window easily by simply not filling in your entire window’s bounds.</p></div></div></article>",
      "code_examples": [
        {
          "char_count": 113,
          "code": "typedef void (*XPLMDrawWindow_f)(XPLMWindowIDinWindowID,\n                         void *               inRefcon);",
          "context": "XPLMDrawWindow_f",
          "id": "example_0",
          "language": "c",
          "line_count": 2,
          "type": "snippet"
        }
      ],
      "cross_references": [],
      "markdown": "### [XPLMDrawWindow_f](/sdk/XPLMDrawWindow_f/)\n\n```cpp\ntypedef void (* XPLMDrawWindow_f)(\n                         XPLMWindowID         inWindowID,\n                         void *               inRefcon);\n\n```\n\nA callback to handle 2-D drawing of your window. You are passed in your window\nand its refcon. Draw the window. You can use other XPLM functions from this\nheader to find the current dimensions of your window, etc. When this callback is\ncalled, the OpenGL context will be set properly for 2-D window drawing.\n\n**Note**: Because you are drawing your window over a background, you can make a\ntranslucent window easily by simply not filling in your entire window’s bounds.",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:23.483572+00:00",
      "title": "XPLMDrawWindow_f | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMDrawWindow_f/"
    },
    "https://developer.x-plane.com/sdk/XPLMDrawingPhase/": {
      "api_signatures": [
        {
          "name": "XPLMDrawingPhase",
          "type": "enum",
          "values": [
            {
              "description": "Deprecated as of XPLM302. This is the earliest point at which you can draw in 3-d.",
              "name": "xplm_Phase_FirstScene",
              "value": "\"0\""
            },
            {
              "description": "Deprecated as of XPLM302. Drawing of land and water.",
              "name": "xplm_Phase_Terrain",
              "value": "\"5\""
            },
            {
              "description": "Deprecated as of XPLM302. Drawing runways and other airport detail.",
              "name": "xplm_Phase_Airports",
              "value": "\"10\""
            },
            {
              "description": "Deprecated as of XPLM302. Drawing roads, trails, trains, etc.",
              "name": "xplm_Phase_Vectors",
              "value": "\"15\""
            },
            {
              "description": "Deprecated as of XPLM302. 3-d objects (houses, smokestacks, etc.",
              "name": "xplm_Phase_Objects",
              "value": "\"20\""
            },
            {
              "description": "Deprecated as of XPLM302. External views of airplanes, both yours and the AI aircraft.",
              "name": "xplm_Phase_Airplanes",
              "value": "\"25\""
            },
            {
              "description": "Deprecated as of XPLM302. This is the last point at which you can draw in 3-d.",
              "name": "xplm_Phase_LastScene",
              "value": "\"30\""
            },
            {
              "description": "A chance to do modern 3D drawing.",
              "name": "xplm_Phase_Modern3D",
              "value": "\"31\""
            },
            {
              "description": "This is the first phase where you can draw in 2-d.",
              "name": "xplm_Phase_FirstCockpit",
              "value": "\"35\""
            },
            {
              "description": "The non-moving parts of the aircraft panel.",
              "name": "xplm_Phase_Panel",
              "value": "\"40\""
            },
            {
              "description": "The moving parts of the aircraft panel.",
              "name": "xplm_Phase_Gauges",
              "value": "\"45\""
            },
            {
              "description": "Floating windows from plugins.",
              "name": "xplm_Phase_Window",
              "value": "\"50\""
            },
            {
              "description": "The last chance to draw in 2d.",
              "name": "xplm_Phase_LastCockpit",
              "value": "\"55\""
            },
            {
              "description": "Removed as of XPLM300; Use the full-blownXPLMMapAPI instead.",
              "name": "xplm_Phase_LocalMap3D",
              "value": "\"100\""
            },
            {
              "description": "Removed as of XPLM300; Use the full-blownXPLMMapAPI instead.",
              "name": "xplm_Phase_LocalMap2D",
              "value": "\"101\""
            },
            {
              "description": "Removed as of XPLM300; Use the full-blownXPLMMapAPI instead.",
              "name": "xplm_Phase_LocalMapProfile",
              "value": "\"102\""
            }
          ]
        }
      ],
      "category": {
        "category": "XPLM_Display",
        "module": "Xplm Display",
        "url": "https://developer.x-plane.com/sdk/XPLMDrawingPhase/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enum\"><h3 class=\"sdk-api-enum\" id=\"XPLMDrawingPhase\"><a href=\"/sdk/XPLMDrawingPhase/\">XPLMDrawingPhase</a></h3><p>This constant indicates which part of drawing we are in. Drawing is done from the back to the front. We get a callback before or after each item. Metaphases provide access to the beginning and end of the 3d (scene) and 2d (cockpit) drawing in a manner that is independent of new phases added via X-Plane implementation.</p><p><strong>NOTE</strong>: As of XPLM302 the legacy 3D drawing phases (<a href=\"/sdk/xplm_Phase_FirstScene/\">xplm_Phase_FirstScene</a>to<a href=\"/sdk/xplm_Phase_LastScene/\">xplm_Phase_LastScene</a>) are deprecated. When running under X-Plane 11.50 with the modern Vulkan or Metal backend, X-Plane will no longer call these drawing phases. There is a new drawing phase,<a href=\"/sdk/xplm_Phase_Modern3D/\">xplm_Phase_Modern3D</a>, which is supported under OpenGL and Vulkan which is called out roughly where the old before<a href=\"/sdk/xplm_Phase_Airplanes/\">xplm_Phase_Airplanes</a>phase was for blending. This phase is<em>NOT</em>supported under Metal and comes with potentially substantial performance overhead. Please do<em>NOT</em>opt into this phase if you don’t do any actual drawing that requires the depth buffer in some way!</p><p><strong>WARNING</strong>: As X-Plane’s scenery evolves, some drawing phases may cease to exist and new ones may be invented. If you need a particularly specific use of these codes, consult Austin and/or be prepared to revise your code as X-Plane evolves.</p><p><div class=\"enumitem\"><table><thead><tr><th>Name</th><th>Value</th><th>Description</th></tr></thead><tr class=\"enumitem XPLM_DEPRECATED\"><td class=\"sdk-api-enum-item\" id=\"xplm_Phase_FirstScene\"><a href=\"/sdk/xplm_Phase_FirstScene/\">xplm_Phase_FirstScene</a></td><td>\"0\"</td><td>Deprecated as of XPLM302. This is the earliest point at which you can draw in 3-d.</td></tr><tr class=\"enumitem XPLM_DEPRECATED\"><td class=\"sdk-api-enum-item\" id=\"xplm_Phase_Terrain\"><a href=\"/sdk/xplm_Phase_Terrain/\">xplm_Phase_Terrain</a></td><td>\"5\"</td><td>Deprecated as of XPLM302. Drawing of land and water.</td></tr><tr class=\"enumitem XPLM_DEPRECATED\"><td class=\"sdk-api-enum-item\" id=\"xplm_Phase_Airports\"><a href=\"/sdk/xplm_Phase_Airports/\">xplm_Phase_Airports</a></td><td>\"10\"</td><td>Deprecated as of XPLM302. Drawing runways and other airport detail.</td></tr><tr class=\"enumitem XPLM_DEPRECATED\"><td class=\"sdk-api-enum-item\" id=\"xplm_Phase_Vectors\"><a href=\"/sdk/xplm_Phase_Vectors/\">xplm_Phase_Vectors</a></td><td>\"15\"</td><td>Deprecated as of XPLM302. Drawing roads, trails, trains, etc.</td></tr><tr class=\"enumitem XPLM_DEPRECATED\"><td class=\"sdk-api-enum-item\" id=\"xplm_Phase_Objects\"><a href=\"/sdk/xplm_Phase_Objects/\">xplm_Phase_Objects</a></td><td>\"20\"</td><td>Deprecated as of XPLM302. 3-d objects (houses, smokestacks, etc.</td></tr><tr class=\"enumitem XPLM_DEPRECATED\"><td class=\"sdk-api-enum-item\" id=\"xplm_Phase_Airplanes\"><a href=\"/sdk/xplm_Phase_Airplanes/\">xplm_Phase_Airplanes</a></td><td>\"25\"</td><td>Deprecated as of XPLM302. External views of airplanes, both yours and the AI aircraft.</td></tr><tr class=\"enumitem XPLM_DEPRECATED\"><td class=\"sdk-api-enum-item\" id=\"xplm_Phase_LastScene\"><a href=\"/sdk/xplm_Phase_LastScene/\">xplm_Phase_LastScene</a></td><td>\"30\"</td><td>Deprecated as of XPLM302. This is the last point at which you can draw in 3-d.</td></tr><tr class=\"enumitem XPLM302\"><td class=\"sdk-api-enum-item\" id=\"xplm_Phase_Modern3D\"><a href=\"/sdk/xplm_Phase_Modern3D/\">xplm_Phase_Modern3D</a></td><td>\"31\"</td><td>A chance to do modern 3D drawing.</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_Phase_FirstCockpit\"><a href=\"/sdk/xplm_Phase_FirstCockpit/\">xplm_Phase_FirstCockpit</a></td><td>\"35\"</td><td>This is the first phase where you can draw in 2-d.</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_Phase_Panel\"><a href=\"/sdk/xplm_Phase_Panel/\">xplm_Phase_Panel</a></td><td>\"40\"</td><td>The non-moving parts of the aircraft panel.</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_Phase_Gauges\"><a href=\"/sdk/xplm_Phase_Gauges/\">xplm_Phase_Gauges</a></td><td>\"45\"</td><td>The moving parts of the aircraft panel.</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_Phase_Window\"><a href=\"/sdk/xplm_Phase_Window/\">xplm_Phase_Window</a></td><td>\"50\"</td><td>Floating windows from plugins.</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_Phase_LastCockpit\"><a href=\"/sdk/xplm_Phase_LastCockpit/\">xplm_Phase_LastCockpit</a></td><td>\"55\"</td><td>The last chance to draw in 2d.</td></tr><tr class=\"enumitem XPLM200\"><td class=\"sdk-api-enum-item\" id=\"xplm_Phase_LocalMap3D\"><a href=\"/sdk/xplm_Phase_LocalMap3D/\">xplm_Phase_LocalMap3D</a></td><td>\"100\"</td><td>Removed as of XPLM300; Use the full-blown<a href=\"/sdk/XPLMMap/\">XPLMMap</a>API instead.</td></tr><tr class=\"enumitem XPLM200\"><td class=\"sdk-api-enum-item\" id=\"xplm_Phase_LocalMap2D\"><a href=\"/sdk/xplm_Phase_LocalMap2D/\">xplm_Phase_LocalMap2D</a></td><td>\"101\"</td><td>Removed as of XPLM300; Use the full-blown<a href=\"/sdk/XPLMMap/\">XPLMMap</a>API instead.</td></tr><tr class=\"enumitem XPLM200\"><td class=\"sdk-api-enum-item\" id=\"xplm_Phase_LocalMapProfile\"><a href=\"/sdk/xplm_Phase_LocalMapProfile/\">xplm_Phase_LocalMapProfile</a></td><td>\"102\"</td><td>Removed as of XPLM300; Use the full-blown<a href=\"/sdk/XPLMMap/\">XPLMMap</a>API instead.</td></tr></table></div></p></div></div></article>",
      "code_examples": [],
      "cross_references": [
        "XPLMMap"
      ],
      "markdown": "### [XPLMDrawingPhase](/sdk/XPLMDrawingPhase/)\n\nThis constant indicates which part of drawing we are in. Drawing is done from\nthe back to the front. We get a callback before or after each item. Metaphases\nprovide access to the beginning and end of the 3d (scene) and 2d (cockpit)\ndrawing in a manner that is independent of new phases added via X-Plane\nimplementation.\n\n**NOTE**: As of XPLM302 the legacy 3D drawing phases\n([xplm_Phase_FirstScene](/sdk/xplm_Phase_FirstScene/)to[xplm_Phase_LastScene](/sdk/xplm_Phase_LastScene/))\nare deprecated. When running under X-Plane 11.50 with the modern Vulkan or Metal\nbackend, X-Plane will no longer call these drawing phases. There is a new\ndrawing phase,[xplm_Phase_Modern3D](/sdk/xplm_Phase_Modern3D/), which is\nsupported under OpenGL and Vulkan which is called out roughly where the old\nbefore[xplm_Phase_Airplanes](/sdk/xplm_Phase_Airplanes/)phase was for blending.\nThis phase is*NOT*supported under Metal and comes with potentially substantial\nperformance overhead. Please do*NOT*opt into this phase if you don’t do any\nactual drawing that requires the depth buffer in some way!\n\n**WARNING**: As X-Plane’s scenery evolves, some drawing phases may cease to\nexist and new ones may be invented. If you need a particularly specific use of\nthese codes, consult Austin and/or be prepared to revise your code as X-Plane\nevolves.\n\n| Name | Value | Description |\n| --- | --- | --- |\n| [xplm_Phase_FirstScene](/sdk/xplm_Phase_FirstScene/) | \"0\" | Deprecated as of\nXPLM302. This is the earliest point at which you can draw in 3-d. |\n| [xplm_Phase_Terrain](/sdk/xplm_Phase_Terrain/) | \"5\" | Deprecated as of\nXPLM302. Drawing of land and water. |\n| [xplm_Phase_Airports](/sdk/xplm_Phase_Airports/) | \"10\" | Deprecated as of\nXPLM302. Drawing runways and other airport detail. |\n| [xplm_Phase_Vectors](/sdk/xplm_Phase_Vectors/) | \"15\" | Deprecated as of\nXPLM302. Drawing roads, trails, trains, etc. |\n| [xplm_Phase_Objects](/sdk/xplm_Phase_Objects/) | \"20\" | Deprecated as of\nXPLM302. 3-d objects (houses, smokestacks, etc. |\n| [xplm_Phase_Airplanes](/sdk/xplm_Phase_Airplanes/) | \"25\" | Deprecated as of\nXPLM302. External views of airplanes, both yours and the AI aircraft. |\n| [xplm_Phase_LastScene](/sdk/xplm_Phase_LastScene/) | \"30\" | Deprecated as of\nXPLM302. This is the last point at which you can draw in 3-d. |\n| [xplm_Phase_Modern3D](/sdk/xplm_Phase_Modern3D/) | \"31\" | A chance to do\nmodern 3D drawing. |\n| [xplm_Phase_FirstCockpit](/sdk/xplm_Phase_FirstCockpit/) | \"35\" | This is the\nfirst phase where you can draw in 2-d. |\n| [xplm_Phase_Panel](/sdk/xplm_Phase_Panel/) | \"40\" | The non-moving parts of\nthe aircraft panel. |\n| [xplm_Phase_Gauges](/sdk/xplm_Phase_Gauges/) | \"45\" | The moving parts of the\naircraft panel. |\n| [xplm_Phase_Window](/sdk/xplm_Phase_Window/) | \"50\" | Floating windows from\nplugins. |\n| [xplm_Phase_LastCockpit](/sdk/xplm_Phase_LastCockpit/) | \"55\" | The last\nchance to draw in 2d. |\n| [xplm_Phase_LocalMap3D](/sdk/xplm_Phase_LocalMap3D/) | \"100\" | Removed as of\nXPLM300; Use the full-blown[XPLMMap](/sdk/XPLMMap/)API instead. |\n| [xplm_Phase_LocalMap2D](/sdk/xplm_Phase_LocalMap2D/) | \"101\" | Removed as of\nXPLM300; Use the full-blown[XPLMMap](/sdk/XPLMMap/)API instead. |\n| [xplm_Phase_LocalMapProfile](/sdk/xplm_Phase_LocalMapProfile/) | \"102\" |\nRemoved as of XPLM300; Use the full-blown[XPLMMap](/sdk/XPLMMap/)API instead. |",
      "own_functions": [
        "XPLMDrawingPhase"
      ],
      "processing_timestamp": "2025-06-25T20:39:23.496000+00:00",
      "title": "XPLMDrawingPhase | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMDrawingPhase/"
    },
    "https://developer.x-plane.com/sdk/XPLMEnableFeature/": {
      "api_signatures": [
        {
          "description": "This routine enables or disables a feature for your plugin. This will change the running behavior of X-Plane and your plugin in some way, depending on the feature.",
          "name": "XPLMEnableFeature",
          "parameters": [
            {
              "full_declaration": "const char *         inFeature",
              "name": "inFeature",
              "type": "const char *"
            },
            {
              "full_declaration": "int                  inEnable",
              "name": "inEnable",
              "type": "int"
            }
          ],
          "signature": "XPLM_API voidXPLMEnableFeature(\n                         const char *         inFeature,\n                         int                  inEnable);"
        },
        {
          "name": "voidXPLMEnableFeature",
          "signature": "XPLM_API voidXPLMEnableFeature(\n                         const char *         inFeature,\n                         int                  inEnable);",
          "source": "code_block_extraction",
          "type": "function"
        }
      ],
      "category": {
        "category": "XPLM_Plugin",
        "module": "Xplm Plugin",
        "url": "https://developer.x-plane.com/sdk/XPLMEnableFeature/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPLMEnableFeature\"><a href=\"/sdk/XPLMEnableFeature/\">XPLMEnableFeature</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API void       <a href=\"/sdk/XPLMEnableFeature/\">XPLMEnableFeature</a>(\n                         const char *         inFeature,\n                         int                  inEnable);\n</code></pre><p>This routine enables or disables a feature for your plugin. This will change the running behavior of X-Plane and your plugin in some way, depending on the feature.</p></div></div></article>",
      "code_examples": [
        {
          "char_count": 145,
          "code": "XPLM_API voidXPLMEnableFeature(\n                         const char *         inFeature,\n                         int                  inEnable);",
          "context": "XPLMEnableFeature",
          "id": "example_0",
          "language": "c",
          "line_count": 3,
          "type": "snippet"
        }
      ],
      "cross_references": [],
      "markdown": "### [XPLMEnableFeature](/sdk/XPLMEnableFeature/)\n\n```cpp\nXPLM_API void       XPLMEnableFeature(\n                         const char *         inFeature,\n                         int                  inEnable);\n\n```\n\nThis routine enables or disables a feature for your plugin. This will change the\nrunning behavior of X-Plane and your plugin in some way, depending on the\nfeature.",
      "own_functions": [
        "XPLMEnableFeature",
        "voidXPLMEnableFeature"
      ],
      "processing_timestamp": "2025-06-25T20:39:24.197262+00:00",
      "title": "XPLMEnableFeature | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMEnableFeature/"
    },
    "https://developer.x-plane.com/sdk/XPLMEnableMenuItem/": {
      "api_signatures": [
        {
          "description": "Sets whether this menu item is enabled. Items start out enabled.",
          "name": "XPLMEnableMenuItem",
          "parameters": [
            {
              "full_declaration": "int                  index",
              "name": "index",
              "type": "int"
            },
            {
              "full_declaration": "int                  enabled",
              "name": "enabled",
              "type": "int"
            }
          ],
          "signature": "XPLM_API voidXPLMEnableMenuItem(XPLMMenuIDinMenu,\n                         int                  index,\n                         int                  enabled);"
        },
        {
          "name": "voidXPLMEnableMenuItem",
          "signature": "XPLM_API voidXPLMEnableMenuItem(XPLMMenuIDinMenu,\n                         int                  index,\n                         int                  enabled);",
          "source": "code_block_extraction",
          "type": "function"
        }
      ],
      "category": {
        "category": "XPLM_Menus",
        "module": "Xplm Menus",
        "url": "https://developer.x-plane.com/sdk/XPLMEnableMenuItem/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPLMEnableMenuItem\"><a href=\"/sdk/XPLMEnableMenuItem/\">XPLMEnableMenuItem</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API void       <a href=\"/sdk/XPLMEnableMenuItem/\">XPLMEnableMenuItem</a>(\n                         <a href=\"/sdk/XPLMMenuID/\">XPLMMenuID</a>           inMenu,\n                         int                  index,\n                         int                  enabled);\n</code></pre><p>Sets whether this menu item is enabled. Items start out enabled.</p></div></div></article>",
      "code_examples": [
        {
          "char_count": 158,
          "code": "XPLM_API voidXPLMEnableMenuItem(XPLMMenuIDinMenu,\n                         int                  index,\n                         int                  enabled);",
          "context": "XPLMEnableMenuItem",
          "id": "example_0",
          "language": "cpp",
          "line_count": 3,
          "type": "snippet"
        }
      ],
      "cross_references": [],
      "markdown": "### [XPLMEnableMenuItem](/sdk/XPLMEnableMenuItem/)\n\n```cpp\nXPLM_API void       XPLMEnableMenuItem(\n                         XPLMMenuID           inMenu,\n                         int                  index,\n                         int                  enabled);\n\n```\n\nSets whether this menu item is enabled. Items start out enabled.",
      "own_functions": [
        "XPLMEnableMenuItem",
        "voidXPLMEnableMenuItem"
      ],
      "processing_timestamp": "2025-06-25T20:39:23.892635+00:00",
      "title": "XPLMEnableMenuItem | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMEnableMenuItem/"
    },
    "https://developer.x-plane.com/sdk/XPLMEnablePlugin/": {
      "api_signatures": [
        {
          "description": "This routine enables a plug-in if it is not already enabled. It returns 1 if the plugin was enabled or successfully enables itself, 0 if it does not. Plugins may fail to enable (for example, if resources cannot be acquired) by returning 0 from their XPluginEnable callback.",
          "name": "XPLMEnablePlugin",
          "parameters": [],
          "signature": "XPLM_API intXPLMEnablePlugin(XPLMPluginIDinPluginID);"
        },
        {
          "name": "intXPLMEnablePlugin",
          "signature": "XPLM_API intXPLMEnablePlugin(XPLMPluginIDinPluginID);",
          "source": "code_block_extraction",
          "type": "function"
        }
      ],
      "category": {
        "category": "XPLM_Plugin",
        "module": "Xplm Plugin",
        "url": "https://developer.x-plane.com/sdk/XPLMEnablePlugin/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPLMEnablePlugin\"><a href=\"/sdk/XPLMEnablePlugin/\">XPLMEnablePlugin</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API int        <a href=\"/sdk/XPLMEnablePlugin/\">XPLMEnablePlugin</a>(\n                         <a href=\"/sdk/XPLMPluginID/\">XPLMPluginID</a>         inPluginID);\n</code></pre><p>This routine enables a plug-in if it is not already enabled. It returns 1 if the plugin was enabled or successfully enables itself, 0 if it does not. Plugins may fail to enable (for example, if resources cannot be acquired) by returning 0 from their XPluginEnable callback.</p></div></div></article>",
      "code_examples": [
        {
          "char_count": 53,
          "code": "XPLM_API intXPLMEnablePlugin(XPLMPluginIDinPluginID);",
          "context": "XPLMEnablePlugin",
          "id": "example_0",
          "language": "c",
          "line_count": 1,
          "type": "snippet"
        }
      ],
      "cross_references": [
        "XPLMPlugin"
      ],
      "markdown": "### [XPLMEnablePlugin](/sdk/XPLMEnablePlugin/)\n\n```cpp\nXPLM_API int        XPLMEnablePlugin(\n                         XPLMPluginID         inPluginID);\n\n```\n\nThis routine enables a plug-in if it is not already enabled. It returns 1 if the\nplugin was enabled or successfully enables itself, 0 if it does not. Plugins may\nfail to enable (for example, if resources cannot be acquired) by returning 0\nfrom their XPluginEnable callback.",
      "own_functions": [
        "XPLMEnablePlugin",
        "intXPLMEnablePlugin"
      ],
      "processing_timestamp": "2025-06-25T20:39:24.199262+00:00",
      "title": "XPLMEnablePlugin | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMEnablePlugin/"
    },
    "https://developer.x-plane.com/sdk/XPLMEnumerateFeatures/": {
      "api_signatures": [
        {
          "description": "This routine calls your enumerator callback once for each feature that this running version of X-Plane supports. Use this routine to determine all of the features that X-Plane can support.",
          "name": "XPLMEnumerateFeatures",
          "parameters": [
            {
              "full_declaration": "void *               inRef",
              "name": "inRef",
              "type": "void *"
            }
          ],
          "signature": "XPLM_API voidXPLMEnumerateFeatures(XPLMFeatureEnumerator_finEnumerator,\n                         void *               inRef);"
        },
        {
          "name": "voidXPLMEnumerateFeatures",
          "signature": "XPLM_API voidXPLMEnumerateFeatures(XPLMFeatureEnumerator_finEnumerator,\n                         void *               inRef);",
          "source": "code_block_extraction",
          "type": "function"
        }
      ],
      "category": {
        "category": "XPLM_Menus",
        "module": "Xplm Menus",
        "url": "https://developer.x-plane.com/sdk/XPLMEnumerateFeatures/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPLMEnumerateFeatures\"><a href=\"/sdk/XPLMEnumerateFeatures/\">XPLMEnumerateFeatures</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API void       <a href=\"/sdk/XPLMEnumerateFeatures/\">XPLMEnumerateFeatures</a>(\n                         <a href=\"/sdk/XPLMFeatureEnumerator_f/\">XPLMFeatureEnumerator_f</a> inEnumerator,\n                         void *               inRef);\n</code></pre><p>This routine calls your enumerator callback once for each feature that this running version of X-Plane supports. Use this routine to determine all of the features that X-Plane can support.</p></div></div></article>",
      "code_examples": [
        {
          "char_count": 125,
          "code": "XPLM_API voidXPLMEnumerateFeatures(XPLMFeatureEnumerator_finEnumerator,\n                         void *               inRef);",
          "context": "XPLMEnumerateFeatures",
          "id": "example_0",
          "language": "c",
          "line_count": 2,
          "type": "snippet"
        }
      ],
      "cross_references": [],
      "markdown": "### [XPLMEnumerateFeatures](/sdk/XPLMEnumerateFeatures/)\n\n```cpp\nXPLM_API void       XPLMEnumerateFeatures(\n                         XPLMFeatureEnumerator_f inEnumerator,\n                         void *               inRef);\n\n```\n\nThis routine calls your enumerator callback once for each feature that this\nrunning version of X-Plane supports. Use this routine to determine all of the\nfeatures that X-Plane can support.",
      "own_functions": [
        "XPLMEnumerateFeatures",
        "voidXPLMEnumerateFeatures"
      ],
      "processing_timestamp": "2025-06-25T20:39:23.894635+00:00",
      "title": "XPLMEnumerateFeatures | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMEnumerateFeatures/"
    },
    "https://developer.x-plane.com/sdk/XPLMError_f/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/XPLMError_f/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"callback XPLM200\"><h3 class=\"sdk-api-callback\" id=\"XPLMError_f\"><a href=\"/sdk/XPLMError_f/\">XPLMError_f</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>typedef void (* <a href=\"/sdk/XPLMError_f/\">XPLMError_f</a>)(\n                         const char *         inMessage);\n</code></pre><p>An XPLM error callback is a function that you provide to receive debugging information from the plugin SDK. See<a href=\"/sdk/XPLMSetErrorCallback/\">XPLMSetErrorCallback</a>for more information. NOTE: for the sake of debugging, your error callback will be called even if your plugin is not enabled, allowing you to receive debug info in your XPluginStart and XPluginStop callbacks. To avoid causing logic errors in the management code, do not call any other plugin routines from your error callback - it is only meant for catching errors in the debugging.</p></div></div></article>",
      "code_examples": [
        {
          "char_count": 86,
          "code": "typedef void (*XPLMError_f)(\n                         const char *         inMessage);",
          "context": "XPLMError_f",
          "id": "example_0",
          "language": "c",
          "line_count": 2,
          "type": "snippet"
        }
      ],
      "cross_references": [
        "XPLMSetErrorCallback"
      ],
      "markdown": "### [XPLMError_f](/sdk/XPLMError_f/)\n\n```cpp\ntypedef void (* XPLMError_f)(\n                         const char *         inMessage);\n\n```\n\nAn XPLM error callback is a function that you provide to receive debugging\ninformation from the plugin SDK.\nSee[XPLMSetErrorCallback](/sdk/XPLMSetErrorCallback/)for more information. NOTE:\nfor the sake of debugging, your error callback will be called even if your\nplugin is not enabled, allowing you to receive debug info in your XPluginStart\nand XPluginStop callbacks. To avoid causing logic errors in the management code,\ndo not call any other plugin routines from your error callback - it is only\nmeant for catching errors in the debugging.",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.250434+00:00",
      "title": "XPLMError_f | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMError_f/"
    },
    "https://developer.x-plane.com/sdk/XPLMExtractFileAndPath/": {
      "api_signatures": [
        {
          "description": "Given a full path to a file, this routine separates the path from the file. If the path is a partial directory (e.g. ends in : or / ) the trailing directory separator is removed. This routine works in-place; a pointer to the file part of the buffer is returned; the original buffer still starts with the path and is null terminated with no trailing separator.",
          "name": "XPLMExtractFileAndPath",
          "parameters": [
            {
              "full_declaration": "char *               inFullPath",
              "name": "inFullPath",
              "type": "char *"
            }
          ],
          "signature": "XPLM_API char *XPLMExtractFileAndPath(\n                         char *               inFullPath);"
        }
      ],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/XPLMExtractFileAndPath/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPLMExtractFileAndPath\"><a href=\"/sdk/XPLMExtractFileAndPath/\">XPLMExtractFileAndPath</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API char *     <a href=\"/sdk/XPLMExtractFileAndPath/\">XPLMExtractFileAndPath</a>(\n                         char *               inFullPath);\n</code></pre><p>Given a full path to a file, this routine separates the path from the file. If the path is a partial directory (e.g. ends in : or / ) the trailing directory separator is removed. This routine works in-place; a pointer to the file part of the buffer is returned; the original buffer still starts with the path and is null terminated with no trailing separator.</p></div></div></article>",
      "code_examples": [
        {
          "char_count": 97,
          "code": "XPLM_API char *XPLMExtractFileAndPath(\n                         char *               inFullPath);",
          "context": "XPLMExtractFileAndPath",
          "id": "example_0",
          "language": "c",
          "line_count": 2,
          "type": "snippet"
        }
      ],
      "cross_references": [],
      "markdown": "### [XPLMExtractFileAndPath](/sdk/XPLMExtractFileAndPath/)\n\n```cpp\nXPLM_API char *     XPLMExtractFileAndPath(\n                         char *               inFullPath);\n\n```\n\nGiven a full path to a file, this routine separates the path from the file. If\nthe path is a partial directory (e.g. ends in : or / ) the trailing directory\nseparator is removed. This routine works in-place; a pointer to the file part of\nthe buffer is returned; the original buffer still starts with the path and is\nnull terminated with no trailing separator.",
      "own_functions": [
        "XPLMExtractFileAndPath"
      ],
      "processing_timestamp": "2025-06-25T20:39:22.271050+00:00",
      "title": "XPLMExtractFileAndPath | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMExtractFileAndPath/"
    },
    "https://developer.x-plane.com/sdk/XPLMFeatureEnumerator_f/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/XPLMFeatureEnumerator_f/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"callback\"><h3 class=\"sdk-api-callback\" id=\"XPLMFeatureEnumerator_f\"><a href=\"/sdk/XPLMFeatureEnumerator_f/\">XPLMFeatureEnumerator_f</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>typedef void (* <a href=\"/sdk/XPLMFeatureEnumerator_f/\">XPLMFeatureEnumerator_f</a>)(\n                         const char *         inFeature,\n                         void *               inRef);\n</code></pre><p>You pass an<a href=\"/sdk/XPLMFeatureEnumerator_f/\">XPLMFeatureEnumerator_f</a>to get a list of all features supported by a given version running version of X-Plane. This routine is called once for each feature.</p></div></div></article>",
      "code_examples": [
        {
          "char_count": 151,
          "code": "typedef void (*XPLMFeatureEnumerator_f)(\n                         const char *         inFeature,\n                         void *               inRef);",
          "context": "XPLMFeatureEnumerator_f",
          "id": "example_0",
          "language": "c",
          "line_count": 3,
          "type": "snippet"
        }
      ],
      "cross_references": [],
      "markdown": "### [XPLMFeatureEnumerator_f](/sdk/XPLMFeatureEnumerator_f/)\n\n```cpp\ntypedef void (* XPLMFeatureEnumerator_f)(\n                         const char *         inFeature,\n                         void *               inRef);\n\n```\n\nYou pass an[XPLMFeatureEnumerator_f](/sdk/XPLMFeatureEnumerator_f/)to get a list\nof all features supported by a given version running version of X-Plane. This\nroutine is called once for each feature.",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.273050+00:00",
      "title": "XPLMFeatureEnumerator_f | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMFeatureEnumerator_f/"
    },
    "https://developer.x-plane.com/sdk/XPLMFindAircraftMenu/": {
      "api_signatures": [
        {
          "description": "This function returns the ID of the menu for the currently-loaded aircraft, used for showing aircraft-specific commands.",
          "name": "XPLMFindAircraftMenu",
          "parameters": [],
          "signature": "XPLM_APIXPLMMenuIDXPLMFindAircraftMenu(void);"
        }
      ],
      "category": {
        "category": "XPLM_Menus",
        "module": "Xplm Menus",
        "url": "https://developer.x-plane.com/sdk/XPLMFindAircraftMenu/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"function XPLM300\"><h3 class=\"sdk-api-function\" id=\"XPLMFindAircraftMenu\"><a href=\"/sdk/XPLMFindAircraftMenu/\">XPLMFindAircraftMenu</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API <a href=\"/sdk/XPLMMenuID/\">XPLMMenuID</a> <a href=\"/sdk/XPLMFindAircraftMenu/\">XPLMFindAircraftMenu</a>(void);\n</code></pre><p>This function returns the ID of the menu for the currently-loaded aircraft, used for showing aircraft-specific commands.</p><p>The aircraft menu is created by X-Plane at startup, but it remains hidden until it is populated via<a href=\"/sdk/XPLMAppendMenuItem/\">XPLMAppendMenuItem</a>() or<a href=\"/sdk/XPLMAppendMenuItemWithCommand/\">XPLMAppendMenuItemWithCommand</a>().</p><p>Only plugins loaded with the user’s current aircraft are allowed to access the aircraft menu. For all other plugins, this will return NULL, and any attempts to add menu items to it will fail.</p></div></div></article>",
      "code_examples": [],
      "cross_references": [
        "XPLMAppendMenuItemWithCommand",
        "XPLMAppendMenuItem"
      ],
      "markdown": "### [XPLMFindAircraftMenu](/sdk/XPLMFindAircraftMenu/)\n\n```cpp\nXPLM_API XPLMMenuID XPLMFindAircraftMenu(void);\n\n```\n\nThis function returns the ID of the menu for the currently-loaded aircraft, used\nfor showing aircraft-specific commands.\n\nThe aircraft menu is created by X-Plane at startup, but it remains hidden until\nit is populated via[XPLMAppendMenuItem](/sdk/XPLMAppendMenuItem/)()\nor[XPLMAppendMenuItemWithCommand](/sdk/XPLMAppendMenuItemWithCommand/)().\n\nOnly plugins loaded with the user’s current aircraft are allowed to access the\naircraft menu. For all other plugins, this will return NULL, and any attempts to\nadd menu items to it will fail.",
      "own_functions": [
        "XPLMFindAircraftMenu"
      ],
      "processing_timestamp": "2025-06-25T20:39:23.897635+00:00",
      "title": "XPLMFindAircraftMenu | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMFindAircraftMenu/"
    },
    "https://developer.x-plane.com/sdk/XPLMFindCommand/": {
      "api_signatures": [
        {
          "description": "XPLMFindCommandlooks up a command by name, and returns its command reference or NULL if the command does not exist.",
          "name": "XPLMFindCommand",
          "parameters": [
            {
              "full_declaration": "const char *         inName",
              "name": "inName",
              "type": "const char *"
            }
          ],
          "signature": "XPLM_APIXPLMCommandRefXPLMFindCommand(\n                         const char *         inName);"
        }
      ],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/XPLMFindCommand/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPLMFindCommand\"><a href=\"/sdk/XPLMFindCommand/\">XPLMFindCommand</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API <a href=\"/sdk/XPLMCommandRef/\">XPLMCommandRef</a> <a href=\"/sdk/XPLMFindCommand/\">XPLMFindCommand</a>(\n                         const char *         inName);\n</code></pre><p><a href=\"/sdk/XPLMFindCommand/\">XPLMFindCommand</a>looks up a command by name, and returns its command reference or NULL if the command does not exist.</p></div></div></article>",
      "code_examples": [
        {
          "char_count": 93,
          "code": "XPLM_APIXPLMCommandRefXPLMFindCommand(\n                         const char *         inName);",
          "context": "XPLMFindCommand",
          "id": "example_0",
          "language": "c",
          "line_count": 2,
          "type": "snippet"
        }
      ],
      "cross_references": [],
      "markdown": "### [XPLMFindCommand](/sdk/XPLMFindCommand/)\n\n```cpp\nXPLM_API XPLMCommandRef XPLMFindCommand(\n                         const char *         inName);\n\n```\n\n[XPLMFindCommand](/sdk/XPLMFindCommand/)looks up a command by name, and returns\nits command reference or NULL if the command does not exist.",
      "own_functions": [
        "XPLMFindCommand"
      ],
      "processing_timestamp": "2025-06-25T20:39:22.281051+00:00",
      "title": "XPLMFindCommand | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMFindCommand/"
    },
    "https://developer.x-plane.com/sdk/XPLMFindDataRef/": {
      "api_signatures": [
        {
          "description": "Given a C-style string that names the dataref, this routine looks up the actual opaqueXPLMDataRefthat you use to read and write the data. The string names for datarefs are published on the X-Plane SDK web site.",
          "name": "XPLMFindDataRef",
          "parameters": [
            {
              "full_declaration": "const char *         inDataRefName",
              "name": "inDataRefName",
              "type": "const char *"
            }
          ],
          "signature": "XPLM_APIXPLMDataRefXPLMFindDataRef(\n                         const char *         inDataRefName);"
        }
      ],
      "category": {
        "category": "XPLM_DataAccess",
        "module": "Xplm Dataaccess",
        "url": "https://developer.x-plane.com/sdk/XPLMFindDataRef/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPLMFindDataRef\"><a href=\"/sdk/XPLMFindDataRef/\">XPLMFindDataRef</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API <a href=\"/sdk/XPLMDataRef/\">XPLMDataRef</a> <a href=\"/sdk/XPLMFindDataRef/\">XPLMFindDataRef</a>(\n                         const char *         inDataRefName);\n</code></pre><p>Given a C-style string that names the dataref, this routine looks up the actual opaque<a href=\"/sdk/XPLMDataRef/\">XPLMDataRef</a>that you use to read and write the data. The string names for datarefs are published on the X-Plane SDK web site.</p><p>This function returns NULL if the dataref cannot be found.</p><p>NOTE: this function is relatively expensive; save the<a href=\"/sdk/XPLMDataRef/\">XPLMDataRef</a>this function returns for future use. Do not look up your dataref by string every time you need to read or write it.</p></div></div></article>",
      "code_examples": [
        {
          "char_count": 97,
          "code": "XPLM_APIXPLMDataRefXPLMFindDataRef(\n                         const char *         inDataRefName);",
          "context": "XPLMFindDataRef",
          "id": "example_0",
          "language": "c",
          "line_count": 2,
          "type": "snippet"
        }
      ],
      "cross_references": [],
      "markdown": "### [XPLMFindDataRef](/sdk/XPLMFindDataRef/)\n\n```cpp\nXPLM_API XPLMDataRef XPLMFindDataRef(\n                         const char *         inDataRefName);\n\n```\n\nGiven a C-style string that names the dataref, this routine looks up the actual\nopaque[XPLMDataRef](/sdk/XPLMDataRef/)that you use to read and write the data.\nThe string names for datarefs are published on the X-Plane SDK web site.\n\nThis function returns NULL if the dataref cannot be found.\n\nNOTE: this function is relatively expensive; save\nthe[XPLMDataRef](/sdk/XPLMDataRef/)this function returns for future use. Do not\nlook up your dataref by string every time you need to read or write it.",
      "own_functions": [
        "XPLMFindDataRef"
      ],
      "processing_timestamp": "2025-06-25T20:39:23.347173+00:00",
      "title": "XPLMFindDataRef | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMFindDataRef/"
    },
    "https://developer.x-plane.com/sdk/XPLMFindFirstNavAidOfType/": {
      "api_signatures": [
        {
          "description": "This routine returns the ref of the first navaid of the given type in the database orXPLM_NAV_NOT_FOUNDif there are no navaids of that type in the database. You must pass exactly one navaid type to this routine.",
          "name": "XPLMFindFirstNavAidOfType",
          "parameters": [],
          "signature": "XPLM_APIXPLMNavRefXPLMFindFirstNavAidOfType(XPLMNavTypeinType);"
        }
      ],
      "category": {
        "category": "XPLM_Navigation",
        "module": "Xplm Navigation",
        "url": "https://developer.x-plane.com/sdk/XPLMFindFirstNavAidOfType/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPLMFindFirstNavAidOfType\"><a href=\"/sdk/XPLMFindFirstNavAidOfType/\">XPLMFindFirstNavAidOfType</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API <a href=\"/sdk/XPLMNavRef/\">XPLMNavRef</a> <a href=\"/sdk/XPLMFindFirstNavAidOfType/\">XPLMFindFirstNavAidOfType</a>(\n                         <a href=\"/sdk/XPLMNavType/\">XPLMNavType</a>          inType);\n</code></pre><p>This routine returns the ref of the first navaid of the given type in the database or<a href=\"/sdk/XPLM_NAV_NOT_FOUND/\">XPLM_NAV_NOT_FOUND</a>if there are no navaids of that type in the database. You must pass exactly one navaid type to this routine.</p></div></div></article>",
      "code_examples": [
        {
          "char_count": 63,
          "code": "XPLM_APIXPLMNavRefXPLMFindFirstNavAidOfType(XPLMNavTypeinType);",
          "context": "XPLMFindFirstNavAidOfType",
          "id": "example_0",
          "language": "c",
          "line_count": 1,
          "type": "snippet"
        }
      ],
      "cross_references": [
        "XPLMNavType"
      ],
      "markdown": "### [XPLMFindFirstNavAidOfType](/sdk/XPLMFindFirstNavAidOfType/)\n\n```cpp\nXPLM_API XPLMNavRef XPLMFindFirstNavAidOfType(\n                         XPLMNavType          inType);\n\n```\n\nThis routine returns the ref of the first navaid of the given type in the\ndatabase or[XPLM_NAV_NOT_FOUND](/sdk/XPLM_NAV_NOT_FOUND/)if there are no navaids\nof that type in the database. You must pass exactly one navaid type to this\nroutine.",
      "own_functions": [
        "XPLMFindFirstNavAidOfType"
      ],
      "processing_timestamp": "2025-06-25T20:39:23.960330+00:00",
      "title": "XPLMFindFirstNavAidOfType | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMFindFirstNavAidOfType/"
    },
    "https://developer.x-plane.com/sdk/XPLMFindLastNavAidOfType/": {
      "api_signatures": [
        {
          "description": "This routine returns the ref of the last navaid of the given type in the database orXPLM_NAV_NOT_FOUNDif there are no navaids of that type in the database. You must pass exactly one navaid type to this routine.",
          "name": "XPLMFindLastNavAidOfType",
          "parameters": [],
          "signature": "XPLM_APIXPLMNavRefXPLMFindLastNavAidOfType(XPLMNavTypeinType);"
        }
      ],
      "category": {
        "category": "XPLM_Navigation",
        "module": "Xplm Navigation",
        "url": "https://developer.x-plane.com/sdk/XPLMFindLastNavAidOfType/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPLMFindLastNavAidOfType\"><a href=\"/sdk/XPLMFindLastNavAidOfType/\">XPLMFindLastNavAidOfType</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API <a href=\"/sdk/XPLMNavRef/\">XPLMNavRef</a> <a href=\"/sdk/XPLMFindLastNavAidOfType/\">XPLMFindLastNavAidOfType</a>(\n                         <a href=\"/sdk/XPLMNavType/\">XPLMNavType</a>          inType);\n</code></pre><p>This routine returns the ref of the last navaid of the given type in the database or<a href=\"/sdk/XPLM_NAV_NOT_FOUND/\">XPLM_NAV_NOT_FOUND</a>if there are no navaids of that type in the database. You must pass exactly one navaid type to this routine.</p></div></div></article>",
      "code_examples": [
        {
          "char_count": 62,
          "code": "XPLM_APIXPLMNavRefXPLMFindLastNavAidOfType(XPLMNavTypeinType);",
          "context": "XPLMFindLastNavAidOfType",
          "id": "example_0",
          "language": "c",
          "line_count": 1,
          "type": "snippet"
        }
      ],
      "cross_references": [
        "XPLMNavType"
      ],
      "markdown": "### [XPLMFindLastNavAidOfType](/sdk/XPLMFindLastNavAidOfType/)\n\n```cpp\nXPLM_API XPLMNavRef XPLMFindLastNavAidOfType(\n                         XPLMNavType          inType);\n\n```\n\nThis routine returns the ref of the last navaid of the given type in the\ndatabase or[XPLM_NAV_NOT_FOUND](/sdk/XPLM_NAV_NOT_FOUND/)if there are no navaids\nof that type in the database. You must pass exactly one navaid type to this\nroutine.",
      "own_functions": [
        "XPLMFindLastNavAidOfType"
      ],
      "processing_timestamp": "2025-06-25T20:39:23.967387+00:00",
      "title": "XPLMFindLastNavAidOfType | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMFindLastNavAidOfType/"
    },
    "https://developer.x-plane.com/sdk/XPLMFindNavAid/": {
      "api_signatures": [
        {
          "description": "This routine provides a number of searching capabilities for the nav database.XPLMFindNavAidwill search through every navaid whose type is within inType (multiple types may be added together) and return any navaids found based on the following rules:",
          "name": "XPLMFindNavAid",
          "parameters": [
            {
              "full_declaration": "const char *         inNameFragment",
              "name": "inNameFragment",
              "type": "const char *"
            },
            {
              "full_declaration": "const char *         inIDFragment",
              "name": "inIDFragment",
              "type": "const char *"
            },
            {
              "full_declaration": "float *              inLat",
              "name": "inLat",
              "type": "float *"
            },
            {
              "full_declaration": "float *              inLon",
              "name": "inLon",
              "type": "float *"
            },
            {
              "full_declaration": "int *                inFrequency",
              "name": "inFrequency",
              "type": "int *"
            }
          ],
          "signature": "XPLM_APIXPLMNavRefXPLMFindNavAid(\n                         const char *         inNameFragment,    /* Can be NULL */\n                         const char *         inIDFragment,    /* Can be NULL */\n                         float *              inLat,    /* Can be NULL */\n                         float *              inLon,    /* Can be NULL */\n                         int *                inFrequency,    /* Can be NULL */XPLMNavTypeinType);"
        }
      ],
      "category": {
        "category": "XPLM_Navigation",
        "module": "Xplm Navigation",
        "url": "https://developer.x-plane.com/sdk/XPLMFindNavAid/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPLMFindNavAid\"><a href=\"/sdk/XPLMFindNavAid/\">XPLMFindNavAid</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API <a href=\"/sdk/XPLMNavRef/\">XPLMNavRef</a> <a href=\"/sdk/XPLMFindNavAid/\">XPLMFindNavAid</a>(\n                         const char *         inNameFragment,    /* Can be NULL */\n                         const char *         inIDFragment,    /* Can be NULL */\n                         float *              inLat,    /* Can be NULL */\n                         float *              inLon,    /* Can be NULL */\n                         int *                inFrequency,    /* Can be NULL */\n                         <a href=\"/sdk/XPLMNavType/\">XPLMNavType</a>          inType);\n</code></pre><p>This routine provides a number of searching capabilities for the nav database.<a href=\"/sdk/XPLMFindNavAid/\">XPLMFindNavAid</a>will search through every navaid whose type is within inType (multiple types may be added together) and return any navaids found based on the following rules:</p><ul><li><p>If inLat and inLon are not NULL, the navaid nearest to that lat/lon will be returned, otherwise the last navaid found will be returned.</p></li><li><p>If inFrequency is not NULL, then any navaids considered must match this frequency. Note that this will screen out radio beacons that do not have frequency data published (like inner markers) but not fixes and airports.</p></li><li><p>If inNameFragment is not NULL, only navaids that contain the fragment in their name will be returned.</p></li><li><p>If inIDFragment is not NULL, only navaids that contain the fragment in their IDs will be returned.</p></li></ul><p>This routine provides a simple way to do a number of useful searches: * Find the nearest navaid on this frequency. * Find the nearest airport. * Find the VOR whose ID is “BOS”. * Find the nearest airport whose name contains “Chicago”.</p></div></div></article>",
      "code_examples": [
        {
          "char_count": 444,
          "code": "XPLM_APIXPLMNavRefXPLMFindNavAid(\n                         const char *         inNameFragment,    /* Can be NULL */\n                         const char *         inIDFragment,    /* Can be NULL */\n                         float *              inLat,    /* Can be NULL */\n                         float *              inLon,    /* Can be NULL */\n                         int *                inFrequency,    /* Can be NULL */XPLMNavTypeinType);",
          "context": "XPLMFindNavAid",
          "id": "example_0",
          "language": "c",
          "line_count": 6,
          "type": "snippet"
        }
      ],
      "cross_references": [
        "XPLMNavType"
      ],
      "markdown": "### [XPLMFindNavAid](/sdk/XPLMFindNavAid/)\n\n```cpp\nXPLM_API XPLMNavRef XPLMFindNavAid(\n                         const char *         inNameFragment,    /* Can be NULL */\n                         const char *         inIDFragment,    /* Can be NULL */\n                         float *              inLat,    /* Can be NULL */\n                         float *              inLon,    /* Can be NULL */\n                         int *                inFrequency,    /* Can be NULL */\n                         XPLMNavType          inType);\n\n```\n\nThis routine provides a number of searching capabilities for the nav\ndatabase.[XPLMFindNavAid](/sdk/XPLMFindNavAid/)will search through every navaid\nwhose type is within inType (multiple types may be added together) and return\nany navaids found based on the following rules:\n\n- If inLat and inLon are not NULL, the navaid nearest to that lat/lon will be\n  returned, otherwise the last navaid found will be returned.\n- If inFrequency is not NULL, then any navaids considered must match this\n  frequency. Note that this will screen out radio beacons that do not have\n  frequency data published (like inner markers) but not fixes and airports.\n- If inNameFragment is not NULL, only navaids that contain the fragment in their\n  name will be returned.\n- If inIDFragment is not NULL, only navaids that contain the fragment in their IDs\n  will be returned.\n\nThis routine provides a simple way to do a number of useful searches: * Find the\nnearest navaid on this frequency. * Find the nearest airport. * Find the VOR\nwhose ID is “BOS”. * Find the nearest airport whose name contains “Chicago”.",
      "own_functions": [
        "XPLMFindNavAid"
      ],
      "processing_timestamp": "2025-06-25T20:39:23.965331+00:00",
      "title": "XPLMFindNavAid | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMFindNavAid/"
    },
    "https://developer.x-plane.com/sdk/XPLMFindPluginByPath/": {
      "api_signatures": [
        {
          "description": "This routine returns the plug-in ID of the plug-in whose file exists at the passed in absolute file system path.XPLM_NO_PLUGIN_IDis returned if the path does not point to a currently loaded plug-in.",
          "name": "XPLMFindPluginByPath",
          "parameters": [
            {
              "full_declaration": "const char *         inPath",
              "name": "inPath",
              "type": "const char *"
            }
          ],
          "signature": "XPLM_APIXPLMPluginIDXPLMFindPluginByPath(\n                         const char *         inPath);"
        }
      ],
      "category": {
        "category": "XPLM_Plugin",
        "module": "Xplm Plugin",
        "url": "https://developer.x-plane.com/sdk/XPLMFindPluginByPath/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPLMFindPluginByPath\"><a href=\"/sdk/XPLMFindPluginByPath/\">XPLMFindPluginByPath</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API <a href=\"/sdk/XPLMPluginID/\">XPLMPluginID</a> <a href=\"/sdk/XPLMFindPluginByPath/\">XPLMFindPluginByPath</a>(\n                         const char *         inPath);\n</code></pre><p>This routine returns the plug-in ID of the plug-in whose file exists at the passed in absolute file system path.<a href=\"/sdk/XPLM_NO_PLUGIN_ID/\">XPLM_NO_PLUGIN_ID</a>is returned if the path does not point to a currently loaded plug-in.</p></div></div></article>",
      "code_examples": [
        {
          "char_count": 96,
          "code": "XPLM_APIXPLMPluginIDXPLMFindPluginByPath(\n                         const char *         inPath);",
          "context": "XPLMFindPluginByPath",
          "id": "example_0",
          "language": "c",
          "line_count": 2,
          "type": "snippet"
        }
      ],
      "cross_references": [
        "XPLMPlugin"
      ],
      "markdown": "### [XPLMFindPluginByPath](/sdk/XPLMFindPluginByPath/)\n\n```cpp\nXPLM_API XPLMPluginID XPLMFindPluginByPath(\n                         const char *         inPath);\n\n```\n\nThis routine returns the plug-in ID of the plug-in whose file exists at the\npassed in absolute file system\npath.[XPLM_NO_PLUGIN_ID](/sdk/XPLM_NO_PLUGIN_ID/)is returned if the path does\nnot point to a currently loaded plug-in.",
      "own_functions": [
        "XPLMFindPluginByPath"
      ],
      "processing_timestamp": "2025-06-25T20:39:24.205263+00:00",
      "title": "XPLMFindPluginByPath | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMFindPluginByPath/"
    },
    "https://developer.x-plane.com/sdk/XPLMFindPluginBySignature/": {
      "api_signatures": [
        {
          "description": "This routine returns the plug-in ID of the plug-in whose signature matches what is passed in orXPLM_NO_PLUGIN_IDif no running plug-in has this signature. Signatures are the best way to identify another plug-in as they are independent of the file system path of a plug-in or the human-readable plug-in name, and should be unique for all plug-ins. Use this routine to locate another plugin that your plugin interoperates with",
          "name": "XPLMFindPluginBySignature",
          "parameters": [
            {
              "full_declaration": "const char *         inSignature",
              "name": "inSignature",
              "type": "const char *"
            }
          ],
          "signature": "XPLM_APIXPLMPluginIDXPLMFindPluginBySignature(\n                         const char *         inSignature);"
        }
      ],
      "category": {
        "category": "XPLM_Plugin",
        "module": "Xplm Plugin",
        "url": "https://developer.x-plane.com/sdk/XPLMFindPluginBySignature/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPLMFindPluginBySignature\"><a href=\"/sdk/XPLMFindPluginBySignature/\">XPLMFindPluginBySignature</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API <a href=\"/sdk/XPLMPluginID/\">XPLMPluginID</a> <a href=\"/sdk/XPLMFindPluginBySignature/\">XPLMFindPluginBySignature</a>(\n                         const char *         inSignature);\n</code></pre><p>This routine returns the plug-in ID of the plug-in whose signature matches what is passed in or<a href=\"/sdk/XPLM_NO_PLUGIN_ID/\">XPLM_NO_PLUGIN_ID</a>if no running plug-in has this signature. Signatures are the best way to identify another plug-in as they are independent of the file system path of a plug-in or the human-readable plug-in name, and should be unique for all plug-ins. Use this routine to locate another plugin that your plugin interoperates with</p></div></div></article>",
      "code_examples": [
        {
          "char_count": 106,
          "code": "XPLM_APIXPLMPluginIDXPLMFindPluginBySignature(\n                         const char *         inSignature);",
          "context": "XPLMFindPluginBySignature",
          "id": "example_0",
          "language": "c",
          "line_count": 2,
          "type": "snippet"
        }
      ],
      "cross_references": [
        "XPLMPlugin"
      ],
      "markdown": "### [XPLMFindPluginBySignature](/sdk/XPLMFindPluginBySignature/)\n\n```cpp\nXPLM_API XPLMPluginID XPLMFindPluginBySignature(\n                         const char *         inSignature);\n\n```\n\nThis routine returns the plug-in ID of the plug-in whose signature matches what\nis passed in or[XPLM_NO_PLUGIN_ID](/sdk/XPLM_NO_PLUGIN_ID/)if no running plug-in\nhas this signature. Signatures are the best way to identify another plug-in as\nthey are independent of the file system path of a plug-in or the human-readable\nplug-in name, and should be unique for all plug-ins. Use this routine to locate\nanother plugin that your plugin interoperates with",
      "own_functions": [
        "XPLMFindPluginBySignature"
      ],
      "processing_timestamp": "2025-06-25T20:39:24.203263+00:00",
      "title": "XPLMFindPluginBySignature | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMFindPluginBySignature/"
    },
    "https://developer.x-plane.com/sdk/XPLMFindPluginsMenu/": {
      "api_signatures": [
        {
          "description": "This function returns the ID of the plug-ins menu, which is created for you at startup.",
          "name": "XPLMFindPluginsMenu",
          "parameters": [],
          "signature": "XPLM_APIXPLMMenuIDXPLMFindPluginsMenu(void);"
        }
      ],
      "category": {
        "category": "XPLM_Menus",
        "module": "Xplm Menus",
        "url": "https://developer.x-plane.com/sdk/XPLMFindPluginsMenu/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPLMFindPluginsMenu\"><a href=\"/sdk/XPLMFindPluginsMenu/\">XPLMFindPluginsMenu</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API <a href=\"/sdk/XPLMMenuID/\">XPLMMenuID</a> <a href=\"/sdk/XPLMFindPluginsMenu/\">XPLMFindPluginsMenu</a>(void);\n</code></pre><p>This function returns the ID of the plug-ins menu, which is created for you at startup.</p></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "### [XPLMFindPluginsMenu](/sdk/XPLMFindPluginsMenu/)\n\n```cpp\nXPLM_API XPLMMenuID XPLMFindPluginsMenu(void);\n\n```\n\nThis function returns the ID of the plug-ins menu, which is created for you at\nstartup.",
      "own_functions": [
        "XPLMFindPluginsMenu"
      ],
      "processing_timestamp": "2025-06-25T20:39:23.901636+00:00",
      "title": "XPLMFindPluginsMenu | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMFindPluginsMenu/"
    },
    "https://developer.x-plane.com/sdk/XPLMFindSymbol/": {
      "api_signatures": [
        {
          "description": "This routine will attempt to find the symbol passed in the inString parameter. If the symbol is found a pointer the function is returned, othewise the function will return NULL.",
          "name": "XPLMFindSymbol",
          "parameters": [
            {
              "full_declaration": "const char *         inString",
              "name": "inString",
              "type": "const char *"
            }
          ],
          "signature": "XPLM_API void *XPLMFindSymbol(\n                         const char *         inString);"
        }
      ],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/XPLMFindSymbol/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"function XPLM200\"><h3 class=\"sdk-api-function\" id=\"XPLMFindSymbol\"><a href=\"/sdk/XPLMFindSymbol/\">XPLMFindSymbol</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API void *     <a href=\"/sdk/XPLMFindSymbol/\">XPLMFindSymbol</a>(\n                         const char *         inString);\n</code></pre><p>This routine will attempt to find the symbol passed in the inString parameter. If the symbol is found a pointer the function is returned, othewise the function will return NULL.</p><p>You can use<a href=\"/sdk/XPLMFindSymbol/\">XPLMFindSymbol</a>to utilize newer SDK API features without requiring newer versions of the SDK (and X-Plane) as your minimum X-Plane version as follows:</p><ul><li><p>Define the XPLMnnn macro to the minimum required XPLM version you will ship with (e.g. XPLM210 for X-Plane 10 compatibility).</p></li><li><p>Use<a href=\"/sdk/XPLMGetVersions/\">XPLMGetVersions</a>and<a href=\"/sdk/XPLMFindSymbol/\">XPLMFindSymbol</a>to detect that the host sim is new enough to use new functions and resolve function pointers.</p></li><li><p>Conditionally use the new functions if and only if<a href=\"/sdk/XPLMFindSymbol/\">XPLMFindSymbol</a>only returns a non- NULL pointer.</p></li></ul><p>Warning: you should always check the XPLM API version as well as the results of<a href=\"/sdk/XPLMFindSymbol/\">XPLMFindSymbol</a>to determine if funtionality is safe to use.</p><p>To use functionality via<a href=\"/sdk/XPLMFindSymbol/\">XPLMFindSymbol</a>you will need to copy your own definitions of the X-Plane API prototypes and cast the returned pointer to the correct type.</p></div></div></article>",
      "code_examples": [
        {
          "char_count": 87,
          "code": "XPLM_API void *XPLMFindSymbol(\n                         const char *         inString);",
          "context": "XPLMFindSymbol",
          "id": "example_0",
          "language": "c",
          "line_count": 2,
          "type": "snippet"
        }
      ],
      "cross_references": [
        "XPLMGetVersions"
      ],
      "markdown": "### [XPLMFindSymbol](/sdk/XPLMFindSymbol/)\n\n```cpp\nXPLM_API void *     XPLMFindSymbol(\n                         const char *         inString);\n\n```\n\nThis routine will attempt to find the symbol passed in the inString parameter.\nIf the symbol is found a pointer the function is returned, othewise the function\nwill return NULL.\n\nYou can use[XPLMFindSymbol](/sdk/XPLMFindSymbol/)to utilize newer SDK API\nfeatures without requiring newer versions of the SDK (and X-Plane) as your\nminimum X-Plane version as follows:\n\n- Define the XPLMnnn macro to the minimum required XPLM version you will ship with\n  (e.g. XPLM210 for X-Plane 10 compatibility).\n- Use[XPLMGetVersions](/sdk/XPLMGetVersions/)and[XPLMFindSymbol](/sdk/XPLMFindSymbol/)to\n  detect that the host sim is new enough to use new functions and resolve function\n  pointers.\n- Conditionally use the new functions if and only\n  if[XPLMFindSymbol](/sdk/XPLMFindSymbol/)only returns a non- NULL pointer.\n\nWarning: you should always check the XPLM API version as well as the results\nof[XPLMFindSymbol](/sdk/XPLMFindSymbol/)to determine if funtionality is safe to\nuse.\n\nTo use functionality via[XPLMFindSymbol](/sdk/XPLMFindSymbol/)you will need to\ncopy your own definitions of the X-Plane API prototypes and cast the returned\npointer to the correct type.",
      "own_functions": [
        "XPLMFindSymbol"
      ],
      "processing_timestamp": "2025-06-25T20:39:22.279051+00:00",
      "title": "XPLMFindSymbol | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMFindSymbol/"
    },
    "https://developer.x-plane.com/sdk/XPLMFixedString150_t/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/XPLMFixedString150_t/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"struct\"><h3 class=\"sdk-api-struct\" id=\"XPLMFixedString150_t\"><a href=\"/sdk/XPLMFixedString150_t/\">XPLMFixedString150_t</a></h3><p>A container for a fixed-size string buffer of 150 characters.</p><pre class=\"language-cpp\" data-manual=\"true\"><code>typedef struct {\n     // The size of the struct.\n     char                      buffer[150];\n} <a href=\"/sdk/XPLMFixedString150_t/\">XPLMFixedString150_t</a>;</code></pre></div></div></article>",
      "code_examples": [
        {
          "char_count": 115,
          "code": "typedef struct {\n     // The size of the struct.\n     char                      buffer[150];\n}XPLMFixedString150_t;",
          "context": "A container for a fixed-size string buffer of 150 characters.",
          "id": "example_0",
          "language": "c",
          "line_count": 4,
          "type": "snippet"
        }
      ],
      "cross_references": [],
      "markdown": "### [XPLMFixedString150_t](/sdk/XPLMFixedString150_t/)\n\nA container for a fixed-size string buffer of 150 characters.\n\n```cpp\ntypedef struct {\n     // The size of the struct.\n     char                      buffer[150];\n} XPLMFixedString150_t;\n```",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.275054+00:00",
      "title": "XPLMFixedString150_t | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMFixedString150_t/"
    },
    "https://developer.x-plane.com/sdk/XPLMFlightLoopID/": {
      "api_signatures": [],
      "category": {
        "category": "XPLM_Processing",
        "module": "Xplm Processing",
        "url": "https://developer.x-plane.com/sdk/XPLMFlightLoopID/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"typedef XPLM210\"><h3 class=\"sdk-api-type\" id=\"XPLMFlightLoopID\"><a href=\"/sdk/XPLMFlightLoopID/\">XPLMFlightLoopID</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>typedef void * <a href=\"/sdk/XPLMFlightLoopID/\">XPLMFlightLoopID</a>;</code></pre><p>This is an opaque identifier for a flight loop callback. You can use this identifier to easily track and remove your callbacks, or to use the new flight loop APIs.</p></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "### [XPLMFlightLoopID](/sdk/XPLMFlightLoopID/)\n\n```cpp\ntypedef void * XPLMFlightLoopID;\n```\n\nThis is an opaque identifier for a flight loop callback. You can use this\nidentifier to easily track and remove your callbacks, or to use the new flight\nloop APIs.",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:24.333160+00:00",
      "title": "XPLMFlightLoopID | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMFlightLoopID/"
    },
    "https://developer.x-plane.com/sdk/XPLMFlightLoopPhaseType/": {
      "api_signatures": [
        {
          "name": "XPLMFlightLoopPhaseType",
          "type": "enum",
          "values": [
            {
              "description": "Your callback runs before X-Plane integrates the flight model.",
              "name": "xplm_FlightLoop_Phase_BeforeFlightModel",
              "value": "\"0\""
            },
            {
              "description": "Your callback runs after X-Plane integrates the flight model.",
              "name": "xplm_FlightLoop_Phase_AfterFlightModel",
              "value": "\"1\""
            }
          ]
        }
      ],
      "category": {
        "category": "XPLM_Processing",
        "module": "Xplm Processing",
        "url": "https://developer.x-plane.com/sdk/XPLMFlightLoopPhaseType/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enum XPLM210\"><h3 class=\"sdk-api-enum\" id=\"XPLMFlightLoopPhaseType\"><a href=\"/sdk/XPLMFlightLoopPhaseType/\">XPLMFlightLoopPhaseType</a></h3><p>You can register a flight loop callback to run either before or after the flight model is integrated by X-Plane.</p><p><div class=\"enumitem XPLM210\"><table><thead><tr><th>Name</th><th>Value</th><th>Description</th></tr></thead><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_FlightLoop_Phase_BeforeFlightModel\"><a href=\"/sdk/xplm_FlightLoop_Phase_BeforeFlightModel/\">xplm_FlightLoop_Phase_BeforeFlightModel</a></td><td>\"0\"</td><td>Your callback runs before X-Plane integrates the flight model.</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_FlightLoop_Phase_AfterFlightModel\"><a href=\"/sdk/xplm_FlightLoop_Phase_AfterFlightModel/\">xplm_FlightLoop_Phase_AfterFlightModel</a></td><td>\"1\"</td><td>Your callback runs after X-Plane integrates the flight model.</td></tr></table></div></p></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "### [XPLMFlightLoopPhaseType](/sdk/XPLMFlightLoopPhaseType/)\n\nYou can register a flight loop callback to run either before or after the flight\nmodel is integrated by X-Plane.\n\n| Name | Value | Description |\n| --- | --- | --- |\n|\n[xplm_FlightLoop_Phase_BeforeFlightModel](/sdk/xplm_FlightLoop_Phase_BeforeFlightModel/)\n| \"0\" | Your callback runs before X-Plane integrates the flight model. |\n|\n[xplm_FlightLoop_Phase_AfterFlightModel](/sdk/xplm_FlightLoop_Phase_AfterFlightModel/)\n| \"1\" | Your callback runs after X-Plane integrates the flight model. |",
      "own_functions": [
        "XPLMFlightLoopPhaseType"
      ],
      "processing_timestamp": "2025-06-25T20:39:24.331165+00:00",
      "title": "XPLMFlightLoopPhaseType | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMFlightLoopPhaseType/"
    },
    "https://developer.x-plane.com/sdk/XPLMFlightLoop_f/": {
      "api_signatures": [],
      "category": {
        "category": "XPLM_Processing",
        "module": "Xplm Processing",
        "url": "https://developer.x-plane.com/sdk/XPLMFlightLoop_f/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"callback\"><h3 class=\"sdk-api-callback\" id=\"XPLMFlightLoop_f\"><a href=\"/sdk/XPLMFlightLoop_f/\">XPLMFlightLoop_f</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>typedef float (* <a href=\"/sdk/XPLMFlightLoop_f/\">XPLMFlightLoop_f</a>)(\n                         float                inElapsedSinceLastCall,\n                         float                inElapsedTimeSinceLastFlightLoop,\n                         int                  inCounter,\n                         void *               inRefcon);\n</code></pre><p>This is your flight loop callback. Each time the flight loop is iterated through, you receive this call at the end.</p><p>Flight loop callbacks receive a number of input timing parameters. These input timing parameters are not particularly useful; you may need to track your own timing data (e.g. by reading datarefs). The input parameters are:</p><ul><li>inElapsedSinceLastCall: the wall time since your last callback.</li><li>inElapsedTimeSinceLastFlightLoop: the wall time since any flight loop was dispatched.</li><li>inCounter: a monotonically increasing counter, bumped once per flight loop dispatch from the sim.</li><li>inRefcon: your own pointer constant provided when you registered yor callback.</li></ul><p>Your return value controls when you will next be called.</p><ul><li>Return 0 to stop receiving callbacks.</li><li>Return a positive number to specify how many seconds until the next callback. (You will be called at or after this time, not before.)</li><li>Return a negative number to specify how many loops must go by until you are called. For example, -1.0 means call me the very next loop.</li></ul><p>Try to run your flight loop as infrequently as is practical, and suspend it (using return value 0) when you do not need it; lots of flight loop callbacks that do nothing lowers X-Plane’s frame rate.</p><p>Your callback will NOT be unregistered if you return 0; it will merely be inactive.</p></div></div></article>",
      "code_examples": [
        {
          "char_count": 298,
          "code": "typedef float (*XPLMFlightLoop_f)(\n                         float                inElapsedSinceLastCall,\n                         float                inElapsedTimeSinceLastFlightLoop,\n                         int                  inCounter,\n                         void *               inRefcon);",
          "context": "XPLMFlightLoop_f",
          "id": "example_0",
          "language": "c",
          "line_count": 5,
          "type": "snippet"
        }
      ],
      "cross_references": [],
      "markdown": "### [XPLMFlightLoop_f](/sdk/XPLMFlightLoop_f/)\n\n```cpp\ntypedef float (* XPLMFlightLoop_f)(\n                         float                inElapsedSinceLastCall,\n                         float                inElapsedTimeSinceLastFlightLoop,\n                         int                  inCounter,\n                         void *               inRefcon);\n\n```\n\nThis is your flight loop callback. Each time the flight loop is iterated\nthrough, you receive this call at the end.\n\nFlight loop callbacks receive a number of input timing parameters. These input\ntiming parameters are not particularly useful; you may need to track your own\ntiming data (e.g. by reading datarefs). The input parameters are:\n\n- inElapsedSinceLastCall: the wall time since your last callback.\n- inElapsedTimeSinceLastFlightLoop: the wall time since any flight loop was dispatched.\n- inCounter: a monotonically increasing counter, bumped once per flight loop dispatch from the sim.\n- inRefcon: your own pointer constant provided when you registered yor callback.\n\nYour return value controls when you will next be called.\n\n- Return 0 to stop receiving callbacks.\n- Return a positive number to specify how many seconds until the next callback. (You will be called at or after this time, not before.)\n- Return a negative number to specify how many loops must go by until you are called. For example, -1.0 means call me the very next loop.\n\nTry to run your flight loop as infrequently as is practical, and suspend it\n(using return value 0) when you do not need it; lots of flight loop callbacks\nthat do nothing lowers X-Plane’s frame rate.\n\nYour callback will NOT be unregistered if you return 0; it will merely be\ninactive.",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:24.328160+00:00",
      "title": "XPLMFlightLoop_f | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMFlightLoop_f/"
    },
    "https://developer.x-plane.com/sdk/XPLMFontID/": {
      "api_signatures": [
        {
          "name": "XPLMFontID",
          "type": "enum",
          "values": [
            {
              "description": "Mono-spaced font for user interface. Available in all versions of the SDK.",
              "name": "xplmFont_Basic",
              "value": "\"0\""
            },
            {
              "description": "Deprecated, do not use.",
              "name": "xplmFont_Menus",
              "value": "\"1\""
            },
            {
              "description": "Deprecated, do not use.",
              "name": "xplmFont_Metal",
              "value": "\"2\""
            },
            {
              "description": "Deprecated, do not use.",
              "name": "xplmFont_Led",
              "value": "\"3\""
            },
            {
              "description": "Deprecated, do not use.",
              "name": "xplmFont_LedWide",
              "value": "\"4\""
            },
            {
              "description": "Deprecated, do not use.",
              "name": "xplmFont_PanelHUD",
              "value": "\"5\""
            },
            {
              "description": "Deprecated, do not use.",
              "name": "xplmFont_PanelEFIS",
              "value": "\"6\""
            },
            {
              "description": "Deprecated, do not use.",
              "name": "xplmFont_PanelGPS",
              "value": "\"7\""
            },
            {
              "description": "Deprecated, do not use.",
              "name": "xplmFont_RadiosGA",
              "value": "\"8\""
            },
            {
              "description": "Deprecated, do not use.",
              "name": "xplmFont_RadiosBC",
              "value": "\"9\""
            },
            {
              "description": "Deprecated, do not use.",
              "name": "xplmFont_RadiosHM",
              "value": "\"10\""
            },
            {
              "description": "Deprecated, do not use.",
              "name": "xplmFont_RadiosGANarrow",
              "value": "\"11\""
            },
            {
              "description": "Deprecated, do not use.",
              "name": "xplmFont_RadiosBCNarrow",
              "value": "\"12\""
            },
            {
              "description": "Deprecated, do not use.",
              "name": "xplmFont_RadiosHMNarrow",
              "value": "\"13\""
            },
            {
              "description": "Deprecated, do not use.",
              "name": "xplmFont_Timer",
              "value": "\"14\""
            },
            {
              "description": "Deprecated, do not use.",
              "name": "xplmFont_FullRound",
              "value": "\"15\""
            },
            {
              "description": "Deprecated, do not use.",
              "name": "xplmFont_SmallRound",
              "value": "\"16\""
            },
            {
              "description": "Deprecated, do not use.",
              "name": "xplmFont_Menus_Localized",
              "value": "\"17\""
            },
            {
              "description": "Proportional UI font.",
              "name": "xplmFont_Proportional",
              "value": "\"18\""
            }
          ]
        }
      ],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/XPLMFontID/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enum\"><h3 class=\"sdk-api-enum\" id=\"XPLMFontID\"><a href=\"/sdk/XPLMFontID/\">XPLMFontID</a></h3><p>X-Plane features some fixed-character fonts. Each font may have its own metrics.</p><p>WARNING: Some of these fonts are no longer supported or may have changed geometries. For maximum copmatibility, see the comments below.</p><p>Note: X-Plane 7 supports proportional-spaced fonts. Since no measuring routine is available yet, the SDK will normally draw using a fixed-width font. You can use a dataref to enable proportional font drawing on XP7 if you want to.</p><p><div class=\"enumitem\"><table><thead><tr><th>Name</th><th>Value</th><th>Description</th></tr></thead><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplmFont_Basic\"><a href=\"/sdk/xplmFont_Basic/\">xplmFont_Basic</a></td><td>\"0\"</td><td>Mono-spaced font for user interface. Available in all versions of the SDK.</td></tr><tr class=\"enumitem XPLM_DEPRECATED\"><td class=\"sdk-api-enum-item\" id=\"xplmFont_Menus\"><a href=\"/sdk/xplmFont_Menus/\">xplmFont_Menus</a></td><td>\"1\"</td><td>Deprecated, do not use.</td></tr><tr class=\"enumitem XPLM_DEPRECATED\"><td class=\"sdk-api-enum-item\" id=\"xplmFont_Metal \"><a href=\"/sdk/xplmFont_Metal /\">xplmFont_Metal</a></td><td>\"2\"</td><td>Deprecated, do not use.</td></tr><tr class=\"enumitem XPLM_DEPRECATED\"><td class=\"sdk-api-enum-item\" id=\"xplmFont_Led\"><a href=\"/sdk/xplmFont_Led/\">xplmFont_Led</a></td><td>\"3\"</td><td>Deprecated, do not use.</td></tr><tr class=\"enumitem XPLM_DEPRECATED\"><td class=\"sdk-api-enum-item\" id=\"xplmFont_LedWide\"><a href=\"/sdk/xplmFont_LedWide/\">xplmFont_LedWide</a></td><td>\"4\"</td><td>Deprecated, do not use.</td></tr><tr class=\"enumitem XPLM_DEPRECATED\"><td class=\"sdk-api-enum-item\" id=\"xplmFont_PanelHUD\"><a href=\"/sdk/xplmFont_PanelHUD/\">xplmFont_PanelHUD</a></td><td>\"5\"</td><td>Deprecated, do not use.</td></tr><tr class=\"enumitem XPLM_DEPRECATED\"><td class=\"sdk-api-enum-item\" id=\"xplmFont_PanelEFIS\"><a href=\"/sdk/xplmFont_PanelEFIS/\">xplmFont_PanelEFIS</a></td><td>\"6\"</td><td>Deprecated, do not use.</td></tr><tr class=\"enumitem XPLM_DEPRECATED\"><td class=\"sdk-api-enum-item\" id=\"xplmFont_PanelGPS\"><a href=\"/sdk/xplmFont_PanelGPS/\">xplmFont_PanelGPS</a></td><td>\"7\"</td><td>Deprecated, do not use.</td></tr><tr class=\"enumitem XPLM_DEPRECATED\"><td class=\"sdk-api-enum-item\" id=\"xplmFont_RadiosGA\"><a href=\"/sdk/xplmFont_RadiosGA/\">xplmFont_RadiosGA</a></td><td>\"8\"</td><td>Deprecated, do not use.</td></tr><tr class=\"enumitem XPLM_DEPRECATED\"><td class=\"sdk-api-enum-item\" id=\"xplmFont_RadiosBC\"><a href=\"/sdk/xplmFont_RadiosBC/\">xplmFont_RadiosBC</a></td><td>\"9\"</td><td>Deprecated, do not use.</td></tr><tr class=\"enumitem XPLM_DEPRECATED\"><td class=\"sdk-api-enum-item\" id=\"xplmFont_RadiosHM\"><a href=\"/sdk/xplmFont_RadiosHM/\">xplmFont_RadiosHM</a></td><td>\"10\"</td><td>Deprecated, do not use.</td></tr><tr class=\"enumitem XPLM_DEPRECATED\"><td class=\"sdk-api-enum-item\" id=\"xplmFont_RadiosGANarrow\"><a href=\"/sdk/xplmFont_RadiosGANarrow/\">xplmFont_RadiosGANarrow</a></td><td>\"11\"</td><td>Deprecated, do not use.</td></tr><tr class=\"enumitem XPLM_DEPRECATED\"><td class=\"sdk-api-enum-item\" id=\"xplmFont_RadiosBCNarrow\"><a href=\"/sdk/xplmFont_RadiosBCNarrow/\">xplmFont_RadiosBCNarrow</a></td><td>\"12\"</td><td>Deprecated, do not use.</td></tr><tr class=\"enumitem XPLM_DEPRECATED\"><td class=\"sdk-api-enum-item\" id=\"xplmFont_RadiosHMNarrow\"><a href=\"/sdk/xplmFont_RadiosHMNarrow/\">xplmFont_RadiosHMNarrow</a></td><td>\"13\"</td><td>Deprecated, do not use.</td></tr><tr class=\"enumitem XPLM_DEPRECATED\"><td class=\"sdk-api-enum-item\" id=\"xplmFont_Timer \"><a href=\"/sdk/xplmFont_Timer /\">xplmFont_Timer</a></td><td>\"14\"</td><td>Deprecated, do not use.</td></tr><tr class=\"enumitem XPLM_DEPRECATED\"><td class=\"sdk-api-enum-item\" id=\"xplmFont_FullRound\"><a href=\"/sdk/xplmFont_FullRound/\">xplmFont_FullRound</a></td><td>\"15\"</td><td>Deprecated, do not use.</td></tr><tr class=\"enumitem XPLM_DEPRECATED\"><td class=\"sdk-api-enum-item\" id=\"xplmFont_SmallRound\"><a href=\"/sdk/xplmFont_SmallRound/\">xplmFont_SmallRound</a></td><td>\"16\"</td><td>Deprecated, do not use.</td></tr><tr class=\"enumitem XPLM_DEPRECATED\"><td class=\"sdk-api-enum-item\" id=\"xplmFont_Menus_Localized \"><a href=\"/sdk/xplmFont_Menus_Localized /\">xplmFont_Menus_Localized</a></td><td>\"17\"</td><td>Deprecated, do not use.</td></tr><tr class=\"enumitem XPLM200\"><td class=\"sdk-api-enum-item\" id=\"xplmFont_Proportional\"><a href=\"/sdk/xplmFont_Proportional/\">xplmFont_Proportional</a></td><td>\"18\"</td><td>Proportional UI font.</td></tr></table></div></p></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "### [XPLMFontID](/sdk/XPLMFontID/)\n\nX-Plane features some fixed-character fonts. Each font may have its own metrics.\n\nWARNING: Some of these fonts are no longer supported or may have changed\ngeometries. For maximum copmatibility, see the comments below.\n\nNote: X-Plane 7 supports proportional-spaced fonts. Since no measuring routine\nis available yet, the SDK will normally draw using a fixed-width font. You can\nuse a dataref to enable proportional font drawing on XP7 if you want to.\n\n| Name | Value | Description |\n| --- | --- | --- |\n| [xplmFont_Basic](/sdk/xplmFont_Basic/) | \"0\" | Mono-spaced font for user\ninterface. Available in all versions of the SDK. |\n| [xplmFont_Menus](/sdk/xplmFont_Menus/) | \"1\" | Deprecated, do not use. |\n| [xplmFont_Metal](/sdk/xplmFont_Metal /) | \"2\" | Deprecated, do not use. |\n| [xplmFont_Led](/sdk/xplmFont_Led/) | \"3\" | Deprecated, do not use. |\n| [xplmFont_LedWide](/sdk/xplmFont_LedWide/) | \"4\" | Deprecated, do not use. |\n| [xplmFont_PanelHUD](/sdk/xplmFont_PanelHUD/) | \"5\" | Deprecated, do not use. |\n| [xplmFont_PanelEFIS](/sdk/xplmFont_PanelEFIS/) | \"6\" | Deprecated, do not use.\n|\n| [xplmFont_PanelGPS](/sdk/xplmFont_PanelGPS/) | \"7\" | Deprecated, do not use. |\n| [xplmFont_RadiosGA](/sdk/xplmFont_RadiosGA/) | \"8\" | Deprecated, do not use. |\n| [xplmFont_RadiosBC](/sdk/xplmFont_RadiosBC/) | \"9\" | Deprecated, do not use. |\n| [xplmFont_RadiosHM](/sdk/xplmFont_RadiosHM/) | \"10\" | Deprecated, do not use.\n|\n| [xplmFont_RadiosGANarrow](/sdk/xplmFont_RadiosGANarrow/) | \"11\" | Deprecated,\ndo not use. |\n| [xplmFont_RadiosBCNarrow](/sdk/xplmFont_RadiosBCNarrow/) | \"12\" | Deprecated,\ndo not use. |\n| [xplmFont_RadiosHMNarrow](/sdk/xplmFont_RadiosHMNarrow/) | \"13\" | Deprecated,\ndo not use. |\n| [xplmFont_Timer](/sdk/xplmFont_Timer /) | \"14\" | Deprecated, do not use. |\n| [xplmFont_FullRound](/sdk/xplmFont_FullRound/) | \"15\" | Deprecated, do not\nuse. |\n| [xplmFont_SmallRound](/sdk/xplmFont_SmallRound/) | \"16\" | Deprecated, do not\nuse. |\n| [xplmFont_Menus_Localized](/sdk/xplmFont_Menus_Localized /) | \"17\" |\nDeprecated, do not use. |\n| [xplmFont_Proportional](/sdk/xplmFont_Proportional/) | \"18\" | Proportional UI\nfont. |",
      "own_functions": [
        "XPLMFontID"
      ],
      "processing_timestamp": "2025-06-25T20:39:22.293049+00:00",
      "title": "XPLMFontID | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMFontID/"
    },
    "https://developer.x-plane.com/sdk/XPLMGenerateTextureNumbers/": {
      "api_signatures": [
        {
          "description": "Use this routine instead of glGenTextures to generate new texture object IDs. This routine historically ensured that plugins don’t use texure IDs that X-Plane is reserving for its own use.",
          "name": "XPLMGenerateTextureNumbers",
          "parameters": [
            {
              "full_declaration": "int *                outTextureIDs",
              "name": "outTextureIDs",
              "type": "int *"
            },
            {
              "full_declaration": "int                  inCount",
              "name": "inCount",
              "type": "int"
            }
          ],
          "signature": "XPLM_API voidXPLMGenerateTextureNumbers(\n                         int *                outTextureIDs,\n                         int                  inCount);"
        },
        {
          "name": "voidXPLMGenerateTextureNumbers",
          "signature": "XPLM_API voidXPLMGenerateTextureNumbers(\n                         int *                outTextureIDs,\n                         int                  inCount);",
          "source": "code_block_extraction",
          "type": "function"
        }
      ],
      "category": {
        "category": "XPLM_Display",
        "module": "Xplm Display",
        "url": "https://developer.x-plane.com/sdk/XPLMGenerateTextureNumbers/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPLMGenerateTextureNumbers\"><a href=\"/sdk/XPLMGenerateTextureNumbers/\">XPLMGenerateTextureNumbers</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API void       <a href=\"/sdk/XPLMGenerateTextureNumbers/\">XPLMGenerateTextureNumbers</a>(\n                         int *                outTextureIDs,\n                         int                  inCount);\n</code></pre><p>Use this routine instead of glGenTextures to generate new texture object IDs. This routine historically ensured that plugins don’t use texure IDs that X-Plane is reserving for its own use.</p></div></div></article>",
      "code_examples": [
        {
          "char_count": 157,
          "code": "XPLM_API voidXPLMGenerateTextureNumbers(\n                         int *                outTextureIDs,\n                         int                  inCount);",
          "context": "XPLMGenerateTextureNumbers",
          "id": "example_0",
          "language": "c",
          "line_count": 3,
          "type": "snippet"
        }
      ],
      "cross_references": [],
      "markdown": "### [XPLMGenerateTextureNumbers](/sdk/XPLMGenerateTextureNumbers/)\n\n```cpp\nXPLM_API void       XPLMGenerateTextureNumbers(\n                         int *                outTextureIDs,\n                         int                  inCount);\n\n```\n\nUse this routine instead of glGenTextures to generate new texture object IDs.\nThis routine historically ensured that plugins don’t use texure IDs that X-Plane\nis reserving for its own use.",
      "own_functions": [
        "XPLMGenerateTextureNumbers",
        "voidXPLMGenerateTextureNumbers"
      ],
      "processing_timestamp": "2025-06-25T20:39:23.499593+00:00",
      "title": "XPLMGenerateTextureNumbers | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMGenerateTextureNumbers/"
    },
    "https://developer.x-plane.com/sdk/XPLMGetAllMonitorBoundsGlobal/": {
      "api_signatures": [
        {
          "description": "This routine immediately calls you back with the bounds (in boxels) of each full-screen X-Plane window within the X-Plane global desktop space. Note that if a monitor isnotcovered by an X-Plane window, you cannot get its bounds this way. Likewise, monitors with only an X-Plane window (not in full-screen mode) will not be included.",
          "name": "XPLMGetAllMonitorBoundsGlobal",
          "parameters": [
            {
              "full_declaration": "void *               inRefcon",
              "name": "inRefcon",
              "type": "void *"
            }
          ],
          "signature": "XPLM_API voidXPLMGetAllMonitorBoundsGlobal(XPLMReceiveMonitorBoundsGlobal_finMonitorBoundsCallback,\n                         void *               inRefcon);"
        },
        {
          "name": "voidXPLMGetAllMonitorBoundsGlobal",
          "signature": "XPLM_API voidXPLMGetAllMonitorBoundsGlobal(XPLMReceiveMonitorBoundsGlobal_finMonitorBoundsCallback,\n                         void *               inRefcon);",
          "source": "code_block_extraction",
          "type": "function"
        }
      ],
      "category": {
        "category": "XPLM_Graphics",
        "module": "Xplm Graphics",
        "url": "https://developer.x-plane.com/sdk/XPLMGetAllMonitorBoundsGlobal/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"function XPLM300\"><h3 class=\"sdk-api-function\" id=\"XPLMGetAllMonitorBoundsGlobal\"><a href=\"/sdk/XPLMGetAllMonitorBoundsGlobal/\">XPLMGetAllMonitorBoundsGlobal</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API void       <a href=\"/sdk/XPLMGetAllMonitorBoundsGlobal/\">XPLMGetAllMonitorBoundsGlobal</a>(\n                         <a href=\"/sdk/XPLMReceiveMonitorBoundsGlobal_f/\">XPLMReceiveMonitorBoundsGlobal_f</a> inMonitorBoundsCallback,\n                         void *               inRefcon);\n</code></pre><p>This routine immediately calls you back with the bounds (in boxels) of each full-screen X-Plane window within the X-Plane global desktop space. Note that if a monitor is<em>not</em>covered by an X-Plane window, you cannot get its bounds this way. Likewise, monitors with only an X-Plane window (not in full-screen mode) will not be included.</p><p>If X-Plane is running in full-screen and your monitors are of the same size and configured contiguously in the OS, then the combined global bounds of all full-screen monitors will match the total global desktop bounds, as returned by<a href=\"/sdk/XPLMGetScreenBoundsGlobal/\">XPLMGetScreenBoundsGlobal</a>(). (Of course, if X-Plane is running in windowed mode, this will not be the case. Likewise, if you have differently sized monitors, the global desktop space will include wasted space.)</p><p>Note that this function’s monitor indices match those provided by<a href=\"/sdk/XPLMGetAllMonitorBoundsOS/\">XPLMGetAllMonitorBoundsOS</a>(), but the coordinates are different (since the X-Plane global desktop may not match the operating system’s global desktop, and one X-Plane boxel may be larger than one pixel due to 150% or 200% scaling).</p></div></div></article>",
      "code_examples": [
        {
          "char_count": 156,
          "code": "XPLM_API voidXPLMGetAllMonitorBoundsGlobal(XPLMReceiveMonitorBoundsGlobal_finMonitorBoundsCallback,\n                         void *               inRefcon);",
          "context": "XPLMGetAllMonitorBoundsGlobal",
          "id": "example_0",
          "language": "c",
          "line_count": 2,
          "type": "snippet"
        }
      ],
      "cross_references": [
        "XPLMGetAllMonitorBoundsOS",
        "XPLMGetScreenBoundsGlobal"
      ],
      "markdown": "### [XPLMGetAllMonitorBoundsGlobal](/sdk/XPLMGetAllMonitorBoundsGlobal/)\n\n```cpp\nXPLM_API void       XPLMGetAllMonitorBoundsGlobal(\n                         XPLMReceiveMonitorBoundsGlobal_f inMonitorBoundsCallback,\n                         void *               inRefcon);\n\n```\n\nThis routine immediately calls you back with the bounds (in boxels) of each\nfull-screen X-Plane window within the X-Plane global desktop space. Note that if\na monitor is*not*covered by an X-Plane window, you cannot get its bounds this\nway. Likewise, monitors with only an X-Plane window (not in full-screen mode)\nwill not be included.\n\nIf X-Plane is running in full-screen and your monitors are of the same size and\nconfigured contiguously in the OS, then the combined global bounds of all\nfull-screen monitors will match the total global desktop bounds, as returned\nby[XPLMGetScreenBoundsGlobal](/sdk/XPLMGetScreenBoundsGlobal/)(). (Of course, if\nX-Plane is running in windowed mode, this will not be the case. Likewise, if you\nhave differently sized monitors, the global desktop space will include wasted\nspace.)\n\nNote that this function’s monitor indices match those provided\nby[XPLMGetAllMonitorBoundsOS](/sdk/XPLMGetAllMonitorBoundsOS/)(), but the\ncoordinates are different (since the X-Plane global desktop may not match the\noperating system’s global desktop, and one X-Plane boxel may be larger than one\npixel due to 150% or 200% scaling).",
      "own_functions": [
        "XPLMGetAllMonitorBoundsGlobal",
        "voidXPLMGetAllMonitorBoundsGlobal"
      ],
      "processing_timestamp": "2025-06-25T20:39:23.649550+00:00",
      "title": "XPLMGetAllMonitorBoundsGlobal | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMGetAllMonitorBoundsGlobal/"
    },
    "https://developer.x-plane.com/sdk/XPLMGetAllMonitorBoundsOS/": {
      "api_signatures": [
        {
          "description": "This routine immediately calls you back with the bounds (in pixels) of each monitor within the operating system’s global desktop space. Note that unlikeXPLMGetAllMonitorBoundsGlobal(), this may include monitors that have no X-Plane window on them.",
          "name": "XPLMGetAllMonitorBoundsOS",
          "parameters": [
            {
              "full_declaration": "void *               inRefcon",
              "name": "inRefcon",
              "type": "void *"
            }
          ],
          "signature": "XPLM_API voidXPLMGetAllMonitorBoundsOS(XPLMReceiveMonitorBoundsOS_finMonitorBoundsCallback,\n                         void *               inRefcon);"
        },
        {
          "name": "voidXPLMGetAllMonitorBoundsOS",
          "signature": "XPLM_API voidXPLMGetAllMonitorBoundsOS(XPLMReceiveMonitorBoundsOS_finMonitorBoundsCallback,\n                         void *               inRefcon);",
          "source": "code_block_extraction",
          "type": "function"
        }
      ],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/XPLMGetAllMonitorBoundsOS/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"function XPLM300\"><h3 class=\"sdk-api-function\" id=\"XPLMGetAllMonitorBoundsOS\"><a href=\"/sdk/XPLMGetAllMonitorBoundsOS/\">XPLMGetAllMonitorBoundsOS</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API void       <a href=\"/sdk/XPLMGetAllMonitorBoundsOS/\">XPLMGetAllMonitorBoundsOS</a>(\n                         <a href=\"/sdk/XPLMReceiveMonitorBoundsOS_f/\">XPLMReceiveMonitorBoundsOS_f</a> inMonitorBoundsCallback,\n                         void *               inRefcon);\n</code></pre><p>This routine immediately calls you back with the bounds (in pixels) of each monitor within the operating system’s global desktop space. Note that unlike<a href=\"/sdk/XPLMGetAllMonitorBoundsGlobal/\">XPLMGetAllMonitorBoundsGlobal</a>(), this may include monitors that have no X-Plane window on them.</p><p>Note that this function’s monitor indices match those provided by<a href=\"/sdk/XPLMGetAllMonitorBoundsGlobal/\">XPLMGetAllMonitorBoundsGlobal</a>(), but the coordinates are different (since the X-Plane global desktop may not match the operating system’s global desktop, and one X-Plane boxel may be larger than one pixel).</p></div></div></article>",
      "code_examples": [
        {
          "char_count": 148,
          "code": "XPLM_API voidXPLMGetAllMonitorBoundsOS(XPLMReceiveMonitorBoundsOS_finMonitorBoundsCallback,\n                         void *               inRefcon);",
          "context": "XPLMGetAllMonitorBoundsOS",
          "id": "example_0",
          "language": "c",
          "line_count": 2,
          "type": "snippet"
        }
      ],
      "cross_references": [
        "XPLMGetAllMonitorBoundsGlobal"
      ],
      "markdown": "### [XPLMGetAllMonitorBoundsOS](/sdk/XPLMGetAllMonitorBoundsOS/)\n\n```cpp\nXPLM_API void       XPLMGetAllMonitorBoundsOS(\n                         XPLMReceiveMonitorBoundsOS_f inMonitorBoundsCallback,\n                         void *               inRefcon);\n\n```\n\nThis routine immediately calls you back with the bounds (in pixels) of each\nmonitor within the operating system’s global desktop space. Note that\nunlike[XPLMGetAllMonitorBoundsGlobal](/sdk/XPLMGetAllMonitorBoundsGlobal/)(),\nthis may include monitors that have no X-Plane window on them.\n\nNote that this function’s monitor indices match those provided\nby[XPLMGetAllMonitorBoundsGlobal](/sdk/XPLMGetAllMonitorBoundsGlobal/)(), but\nthe coordinates are different (since the X-Plane global desktop may not match\nthe operating system’s global desktop, and one X-Plane boxel may be larger than\none pixel).",
      "own_functions": [
        "XPLMGetAllMonitorBoundsOS",
        "voidXPLMGetAllMonitorBoundsOS"
      ],
      "processing_timestamp": "2025-06-25T20:39:22.296050+00:00",
      "title": "XPLMGetAllMonitorBoundsOS | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMGetAllMonitorBoundsOS/"
    },
    "https://developer.x-plane.com/sdk/XPLMGetAvionicsBrightnessRheo/": {
      "api_signatures": [
        {
          "description": "Returns the brightness setting value, between 0 and 1, for the screen of the cockpit device with the given handle.",
          "name": "XPLMGetAvionicsBrightnessRheo",
          "parameters": [],
          "signature": "XPLM_API floatXPLMGetAvionicsBrightnessRheo(XPLMAvionicsIDinHandle);"
        },
        {
          "name": "floatXPLMGetAvionicsBrightnessRheo",
          "signature": "XPLM_API floatXPLMGetAvionicsBrightnessRheo(XPLMAvionicsIDinHandle);",
          "source": "code_block_extraction",
          "type": "function"
        }
      ],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/XPLMGetAvionicsBrightnessRheo/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"function XPLM410\"><h3 class=\"sdk-api-function\" id=\"XPLMGetAvionicsBrightnessRheo\"><a href=\"/sdk/XPLMGetAvionicsBrightnessRheo/\">XPLMGetAvionicsBrightnessRheo</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API float      <a href=\"/sdk/XPLMGetAvionicsBrightnessRheo/\">XPLMGetAvionicsBrightnessRheo</a>(\n                         <a href=\"/sdk/XPLMAvionicsID/\">XPLMAvionicsID</a>       inHandle);\n</code></pre><p>Returns the brightness setting value, between 0 and 1, for the screen of the cockpit device with the given handle.</p><pre><code>    If the device is bound to the current aircraft, this is a shortcut to getting the brightness rheostat value from the `sim/cockpit2/switches/instrument_brightness_ratio[]` dataref; this gets the slot in the `instrument_brightness_ratio` array to which the device is bound.\n\n    If the device is not currently bound, this returns the device's own brightness rheostat value.\n</code></pre></div></div></article>",
      "code_examples": [
        {
          "char_count": 68,
          "code": "XPLM_API floatXPLMGetAvionicsBrightnessRheo(XPLMAvionicsIDinHandle);",
          "context": "XPLMGetAvionicsBrightnessRheo",
          "id": "example_0",
          "language": "c",
          "line_count": 1,
          "type": "snippet"
        },
        {
          "char_count": 371,
          "code": "If the device is bound to the current aircraft, this is a shortcut to getting the brightness rheostat value from the `sim/cockpit2/switches/instrument_brightness_ratio[]` dataref; this gets the slot in the `instrument_brightness_ratio` array to which the device is bound.\n\n    If the device is not currently bound, this returns the device's own brightness rheostat value.",
          "context": "Returns the brightness setting value, between 0 and 1, for the screen of the cockpit device with the given handle.",
          "id": "example_1",
          "language": "c",
          "line_count": 3,
          "type": "snippet"
        }
      ],
      "cross_references": [],
      "markdown": "### [XPLMGetAvionicsBrightnessRheo](/sdk/XPLMGetAvionicsBrightnessRheo/)\n\n```cpp\nXPLM_API float      XPLMGetAvionicsBrightnessRheo(\n                         XPLMAvionicsID       inHandle);\n\n```\n\nReturns the brightness setting value, between 0 and 1, for the screen of the\ncockpit device with the given handle.\n\n```cpp\n    If the device is bound to the current aircraft, this is a shortcut to getting the brightness rheostat value from the `sim/cockpit2/switches/instrument_brightness_ratio[]` dataref; this gets the slot in the `instrument_brightness_ratio` array to which the device is bound.\n\n    If the device is not currently bound, this returns the device's own brightness rheostat value.\n\n```",
      "own_functions": [
        "XPLMGetAvionicsBrightnessRheo",
        "floatXPLMGetAvionicsBrightnessRheo"
      ],
      "processing_timestamp": "2025-06-25T20:39:22.299049+00:00",
      "title": "XPLMGetAvionicsBrightnessRheo | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMGetAvionicsBrightnessRheo/"
    },
    "https://developer.x-plane.com/sdk/XPLMGetAvionicsBusVoltsRatio/": {
      "api_signatures": [
        {
          "description": "Returns the ratio of the nominal voltage (1.0 means full nominal voltage) of the electrical bus to which the given avionics device is bound, or -1 if the device is not bound to the current aircraft.",
          "name": "XPLMGetAvionicsBusVoltsRatio",
          "parameters": [],
          "signature": "XPLM_API floatXPLMGetAvionicsBusVoltsRatio(XPLMAvionicsIDinHandle);"
        },
        {
          "name": "floatXPLMGetAvionicsBusVoltsRatio",
          "signature": "XPLM_API floatXPLMGetAvionicsBusVoltsRatio(XPLMAvionicsIDinHandle);",
          "source": "code_block_extraction",
          "type": "function"
        }
      ],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/XPLMGetAvionicsBusVoltsRatio/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"function XPLM410\"><h3 class=\"sdk-api-function\" id=\"XPLMGetAvionicsBusVoltsRatio\"><a href=\"/sdk/XPLMGetAvionicsBusVoltsRatio/\">XPLMGetAvionicsBusVoltsRatio</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API float      <a href=\"/sdk/XPLMGetAvionicsBusVoltsRatio/\">XPLMGetAvionicsBusVoltsRatio</a>(\n                         <a href=\"/sdk/XPLMAvionicsID/\">XPLMAvionicsID</a>       inHandle);\n</code></pre><p>Returns the ratio of the nominal voltage (1.0 means full nominal voltage) of the electrical bus to which the given avionics device is bound, or -1 if the device is not bound to the current aircraft.</p></div></div></article>",
      "code_examples": [
        {
          "char_count": 67,
          "code": "XPLM_API floatXPLMGetAvionicsBusVoltsRatio(XPLMAvionicsIDinHandle);",
          "context": "XPLMGetAvionicsBusVoltsRatio",
          "id": "example_0",
          "language": "c",
          "line_count": 1,
          "type": "snippet"
        }
      ],
      "cross_references": [],
      "markdown": "### [XPLMGetAvionicsBusVoltsRatio](/sdk/XPLMGetAvionicsBusVoltsRatio/)\n\n```cpp\nXPLM_API float      XPLMGetAvionicsBusVoltsRatio(\n                         XPLMAvionicsID       inHandle);\n\n```\n\nReturns the ratio of the nominal voltage (1.0 means full nominal voltage) of the\nelectrical bus to which the given avionics device is bound, or -1 if the device\nis not bound to the current aircraft.",
      "own_functions": [
        "XPLMGetAvionicsBusVoltsRatio",
        "floatXPLMGetAvionicsBusVoltsRatio"
      ],
      "processing_timestamp": "2025-06-25T20:39:22.306050+00:00",
      "title": "XPLMGetAvionicsBusVoltsRatio | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMGetAvionicsBusVoltsRatio/"
    },
    "https://developer.x-plane.com/sdk/XPLMGetAvionicsGeometry/": {
      "api_signatures": [
        {
          "description": "Returns the bounds of a cockpit device’s popup window in the X-Plane coordinate system.",
          "name": "XPLMGetAvionicsGeometry",
          "parameters": [],
          "signature": "XPLM_API voidXPLMGetAvionicsGeometry(XPLMAvionicsIDinHandle,\n                         int *                outLeft,    /* Can be NULL */\n                         int *                outTop,    /* Can be NULL */\n                         int *                outRight,    /* Can be NULL */\n                         int *                outBottom);    /* Can be NULL */"
        },
        {
          "name": "voidXPLMGetAvionicsGeometry",
          "signature": "XPLM_API voidXPLMGetAvionicsGeometry(XPLMAvionicsIDinHandle,\n                         int *                outLeft,    /* Can be NULL */\n                         int *                outTop,    /* Can be NULL */\n                         int *                outRight,    /* Can be NULL */\n                         int *                outBottom);",
          "source": "code_block_extraction",
          "type": "function"
        }
      ],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/XPLMGetAvionicsGeometry/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"function XPLM410\"><h3 class=\"sdk-api-function\" id=\"XPLMGetAvionicsGeometry\"><a href=\"/sdk/XPLMGetAvionicsGeometry/\">XPLMGetAvionicsGeometry</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API void       <a href=\"/sdk/XPLMGetAvionicsGeometry/\">XPLMGetAvionicsGeometry</a>(\n                         <a href=\"/sdk/XPLMAvionicsID/\">XPLMAvionicsID</a>       inHandle,\n                         int *                outLeft,    /* Can be NULL */\n                         int *                outTop,    /* Can be NULL */\n                         int *                outRight,    /* Can be NULL */\n                         int *                outBottom);    /* Can be NULL */\n</code></pre><p>Returns the bounds of a cockpit device’s popup window in the X-Plane coordinate system.</p></div></div></article>",
      "code_examples": [
        {
          "char_count": 367,
          "code": "XPLM_API voidXPLMGetAvionicsGeometry(XPLMAvionicsIDinHandle,\n                         int *                outLeft,    /* Can be NULL */\n                         int *                outTop,    /* Can be NULL */\n                         int *                outRight,    /* Can be NULL */\n                         int *                outBottom);    /* Can be NULL */",
          "context": "XPLMGetAvionicsGeometry",
          "id": "example_0",
          "language": "c",
          "line_count": 5,
          "type": "snippet"
        }
      ],
      "cross_references": [],
      "markdown": "### [XPLMGetAvionicsGeometry](/sdk/XPLMGetAvionicsGeometry/)\n\n```cpp\nXPLM_API void       XPLMGetAvionicsGeometry(\n                         XPLMAvionicsID       inHandle,\n                         int *                outLeft,    /* Can be NULL */\n                         int *                outTop,    /* Can be NULL */\n                         int *                outRight,    /* Can be NULL */\n                         int *                outBottom);    /* Can be NULL */\n\n```\n\nReturns the bounds of a cockpit device’s popup window in the X-Plane coordinate\nsystem.",
      "own_functions": [
        "XPLMGetAvionicsGeometry",
        "voidXPLMGetAvionicsGeometry"
      ],
      "processing_timestamp": "2025-06-25T20:39:22.309135+00:00",
      "title": "XPLMGetAvionicsGeometry | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMGetAvionicsGeometry/"
    },
    "https://developer.x-plane.com/sdk/XPLMGetAvionicsGeometryOS/": {
      "api_signatures": [
        {
          "description": "Returns the bounds of a cockpit device’s popped-out window.",
          "name": "XPLMGetAvionicsGeometryOS",
          "parameters": [],
          "signature": "XPLM_API voidXPLMGetAvionicsGeometryOS(XPLMAvionicsIDinHandle,\n                         int *                outLeft,    /* Can be NULL */\n                         int *                outTop,    /* Can be NULL */\n                         int *                outRight,    /* Can be NULL */\n                         int *                outBottom);    /* Can be NULL */"
        },
        {
          "name": "voidXPLMGetAvionicsGeometryOS",
          "signature": "XPLM_API voidXPLMGetAvionicsGeometryOS(XPLMAvionicsIDinHandle,\n                         int *                outLeft,    /* Can be NULL */\n                         int *                outTop,    /* Can be NULL */\n                         int *                outRight,    /* Can be NULL */\n                         int *                outBottom);",
          "source": "code_block_extraction",
          "type": "function"
        }
      ],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/XPLMGetAvionicsGeometryOS/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"function XPLM410\"><h3 class=\"sdk-api-function\" id=\"XPLMGetAvionicsGeometryOS\"><a href=\"/sdk/XPLMGetAvionicsGeometryOS/\">XPLMGetAvionicsGeometryOS</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API void       <a href=\"/sdk/XPLMGetAvionicsGeometryOS/\">XPLMGetAvionicsGeometryOS</a>(\n                         <a href=\"/sdk/XPLMAvionicsID/\">XPLMAvionicsID</a>       inHandle,\n                         int *                outLeft,    /* Can be NULL */\n                         int *                outTop,    /* Can be NULL */\n                         int *                outRight,    /* Can be NULL */\n                         int *                outBottom);    /* Can be NULL */\n</code></pre><p>Returns the bounds of a cockpit device’s popped-out window.</p></div></div></article>",
      "code_examples": [
        {
          "char_count": 369,
          "code": "XPLM_API voidXPLMGetAvionicsGeometryOS(XPLMAvionicsIDinHandle,\n                         int *                outLeft,    /* Can be NULL */\n                         int *                outTop,    /* Can be NULL */\n                         int *                outRight,    /* Can be NULL */\n                         int *                outBottom);    /* Can be NULL */",
          "context": "XPLMGetAvionicsGeometryOS",
          "id": "example_0",
          "language": "c",
          "line_count": 5,
          "type": "snippet"
        }
      ],
      "cross_references": [
        "XPLMGetAvionicsGeometry"
      ],
      "markdown": "### [XPLMGetAvionicsGeometryOS](/sdk/XPLMGetAvionicsGeometryOS/)\n\n```cpp\nXPLM_API void       XPLMGetAvionicsGeometryOS(\n                         XPLMAvionicsID       inHandle,\n                         int *                outLeft,    /* Can be NULL */\n                         int *                outTop,    /* Can be NULL */\n                         int *                outRight,    /* Can be NULL */\n                         int *                outBottom);    /* Can be NULL */\n\n```\n\nReturns the bounds of a cockpit device’s popped-out window.",
      "own_functions": [
        "XPLMGetAvionicsGeometryOS",
        "voidXPLMGetAvionicsGeometryOS"
      ],
      "processing_timestamp": "2025-06-25T20:39:22.302055+00:00",
      "title": "XPLMGetAvionicsGeometryOS | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMGetAvionicsGeometryOS/"
    },
    "https://developer.x-plane.com/sdk/XPLMGetAvionicsHandle/": {
      "api_signatures": [
        {
          "description": "This routine registers no callbacks for a built-in cockpit device, but returns a handle which allows you to interact with it using the Avionics Device API. Use this if you do not wish to intercept drawing, clicks and touchscreen calls to a device, but want to interact with its popup programmatically. This is equivalent to calling XPLMRegisterAvionicsCallbackEx() with NULL for all callbacks.",
          "name": "XPLMGetAvionicsHandle",
          "parameters": [],
          "signature": "XPLM_APIXPLMAvionicsIDXPLMGetAvionicsHandle(XPLMDeviceIDinDeviceID);"
        }
      ],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/XPLMGetAvionicsHandle/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPLMGetAvionicsHandle\"><a href=\"/sdk/XPLMGetAvionicsHandle/\">XPLMGetAvionicsHandle</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API <a href=\"/sdk/XPLMAvionicsID/\">XPLMAvionicsID</a> <a href=\"/sdk/XPLMGetAvionicsHandle/\">XPLMGetAvionicsHandle</a>(\n                         <a href=\"/sdk/XPLMDeviceID/\">XPLMDeviceID</a>         inDeviceID);\n</code></pre><p>This routine registers no callbacks for a built-in cockpit device, but returns a handle which allows you to interact with it using the Avionics Device API. Use this if you do not wish to intercept drawing, clicks and touchscreen calls to a device, but want to interact with its popup programmatically. This is equivalent to calling XPLMRegisterAvionicsCallbackEx() with NULL for all callbacks.</p></div></div></article>",
      "code_examples": [
        {
          "char_count": 68,
          "code": "XPLM_APIXPLMAvionicsIDXPLMGetAvionicsHandle(XPLMDeviceIDinDeviceID);",
          "context": "XPLMGetAvionicsHandle",
          "id": "example_0",
          "language": "c",
          "line_count": 1,
          "type": "snippet"
        }
      ],
      "cross_references": [
        "XPLMDeviceID"
      ],
      "markdown": "### [XPLMGetAvionicsHandle](/sdk/XPLMGetAvionicsHandle/)\n\n```cpp\nXPLM_API XPLMAvionicsID XPLMGetAvionicsHandle(\n                         XPLMDeviceID         inDeviceID);\n\n```\n\nThis routine registers no callbacks for a built-in cockpit device, but returns a\nhandle which allows you to interact with it using the Avionics Device API. Use\nthis if you do not wish to intercept drawing, clicks and touchscreen calls to a\ndevice, but want to interact with its popup programmatically. This is equivalent\nto calling XPLMRegisterAvionicsCallbackEx() with NULL for all callbacks.",
      "own_functions": [
        "XPLMGetAvionicsHandle"
      ],
      "processing_timestamp": "2025-06-25T20:39:22.321239+00:00",
      "title": "XPLMGetAvionicsHandle | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMGetAvionicsHandle/"
    },
    "https://developer.x-plane.com/sdk/XPLMGetCycleNumber/": {
      "api_signatures": [
        {
          "description": "This routine returns a counter starting at zero for each sim cycle computed/video frame rendered.",
          "name": "XPLMGetCycleNumber",
          "parameters": [],
          "signature": "XPLM_API intXPLMGetCycleNumber(void);"
        },
        {
          "name": "intXPLMGetCycleNumber",
          "signature": "XPLM_API intXPLMGetCycleNumber(void);",
          "source": "code_block_extraction",
          "type": "function"
        }
      ],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/XPLMGetCycleNumber/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPLMGetCycleNumber\"><a href=\"/sdk/XPLMGetCycleNumber/\">XPLMGetCycleNumber</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API int        <a href=\"/sdk/XPLMGetCycleNumber/\">XPLMGetCycleNumber</a>(void);\n</code></pre><p>This routine returns a counter starting at zero for each sim cycle computed/video frame rendered.</p></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "### [XPLMGetCycleNumber](/sdk/XPLMGetCycleNumber/)\n\n```cpp\nXPLM_API int        XPLMGetCycleNumber(void);\n\n```\n\nThis routine returns a counter starting at zero for each sim cycle\ncomputed/video frame rendered.",
      "own_functions": [
        "XPLMGetCycleNumber",
        "intXPLMGetCycleNumber"
      ],
      "processing_timestamp": "2025-06-25T20:39:22.323242+00:00",
      "title": "XPLMGetCycleNumber | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMGetCycleNumber/"
    },
    "https://developer.x-plane.com/sdk/XPLMGetDataRefInfo/": {
      "api_signatures": [
        {
          "description": "Give a data ref, this routine returns a populated struct containing the available information about the dataref.",
          "name": "XPLMGetDataRefInfo",
          "parameters": [
            {
              "full_declaration": "XPLMDataRefInfo_t*  outInfo",
              "name": "outInfo",
              "type": "XPLMDataRefInfo_t*"
            }
          ],
          "signature": "XPLM_API voidXPLMGetDataRefInfo(XPLMDataRefinDataRef,XPLMDataRefInfo_t*  outInfo);"
        },
        {
          "name": "voidXPLMGetDataRefInfo",
          "signature": "XPLM_API voidXPLMGetDataRefInfo(XPLMDataRefinDataRef,XPLMDataRefInfo_t*  outInfo);",
          "source": "code_block_extraction",
          "type": "function"
        }
      ],
      "category": {
        "category": "XPLM_DataAccess",
        "module": "Xplm Dataaccess",
        "url": "https://developer.x-plane.com/sdk/XPLMGetDataRefInfo/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"function XPLM400\"><h3 class=\"sdk-api-function\" id=\"XPLMGetDataRefInfo\"><a href=\"/sdk/XPLMGetDataRefInfo/\">XPLMGetDataRefInfo</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API void       <a href=\"/sdk/XPLMGetDataRefInfo/\">XPLMGetDataRefInfo</a>(\n                         <a href=\"/sdk/XPLMDataRef/\">XPLMDataRef</a>          inDataRef,\n                         <a href=\"/sdk/XPLMDataRefInfo_t/\">XPLMDataRefInfo_t</a> *  outInfo);\n</code></pre><p>Give a data ref, this routine returns a populated struct containing the available information about the dataref.</p></div></div></article>",
      "code_examples": [
        {
          "char_count": 82,
          "code": "XPLM_API voidXPLMGetDataRefInfo(XPLMDataRefinDataRef,XPLMDataRefInfo_t*  outInfo);",
          "context": "XPLMGetDataRefInfo",
          "id": "example_0",
          "language": "c",
          "line_count": 1,
          "type": "snippet"
        }
      ],
      "cross_references": [],
      "markdown": "### [XPLMGetDataRefInfo](/sdk/XPLMGetDataRefInfo/)\n\n```cpp\nXPLM_API void       XPLMGetDataRefInfo(\n                         XPLMDataRef          inDataRef,\n                         XPLMDataRefInfo_t *  outInfo);\n\n```\n\nGive a data ref, this routine returns a populated struct containing the\navailable information about the dataref.",
      "own_functions": [
        "XPLMGetDataRefInfo",
        "voidXPLMGetDataRefInfo"
      ],
      "processing_timestamp": "2025-06-25T20:39:23.356331+00:00",
      "title": "XPLMGetDataRefInfo | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMGetDataRefInfo/"
    },
    "https://developer.x-plane.com/sdk/XPLMGetDataRefTypes/": {
      "api_signatures": [
        {
          "description": "This routine returns the types of the dataref for accessor use. If a dataref is available in multiple data types, the bit-wise OR of these types will be returned.",
          "name": "XPLMGetDataRefTypes",
          "parameters": [],
          "signature": "XPLM_APIXPLMDataTypeIDXPLMGetDataRefTypes(XPLMDataRefinDataRef);"
        }
      ],
      "category": {
        "category": "XPLM_DataAccess",
        "module": "Xplm Dataaccess",
        "url": "https://developer.x-plane.com/sdk/XPLMGetDataRefTypes/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPLMGetDataRefTypes\"><a href=\"/sdk/XPLMGetDataRefTypes/\">XPLMGetDataRefTypes</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API <a href=\"/sdk/XPLMDataTypeID/\">XPLMDataTypeID</a> <a href=\"/sdk/XPLMGetDataRefTypes/\">XPLMGetDataRefTypes</a>(\n                         <a href=\"/sdk/XPLMDataRef/\">XPLMDataRef</a>          inDataRef);\n</code></pre><p>This routine returns the types of the dataref for accessor use. If a dataref is available in multiple data types, the bit-wise OR of these types will be returned.</p></div></div></article>",
      "code_examples": [
        {
          "char_count": 64,
          "code": "XPLM_APIXPLMDataTypeIDXPLMGetDataRefTypes(XPLMDataRefinDataRef);",
          "context": "XPLMGetDataRefTypes",
          "id": "example_0",
          "language": "c",
          "line_count": 1,
          "type": "snippet"
        }
      ],
      "cross_references": [
        "XPLMDataTypeID"
      ],
      "markdown": "### [XPLMGetDataRefTypes](/sdk/XPLMGetDataRefTypes/)\n\n```cpp\nXPLM_API XPLMDataTypeID XPLMGetDataRefTypes(\n                         XPLMDataRef          inDataRef);\n\n```\n\nThis routine returns the types of the dataref for accessor use. If a dataref is\navailable in multiple data types, the bit-wise OR of these types will be\nreturned.",
      "own_functions": [
        "XPLMGetDataRefTypes"
      ],
      "processing_timestamp": "2025-06-25T20:39:23.357329+00:00",
      "title": "XPLMGetDataRefTypes | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMGetDataRefTypes/"
    },
    "https://developer.x-plane.com/sdk/XPLMGetDataRefsByIndex/": {
      "api_signatures": [
        {
          "description": "Given an offset and count, this function will return an array of XPLMDataRefs in that range. The offset/count idiom is useful for things like pagination.",
          "name": "XPLMGetDataRefsByIndex",
          "parameters": [
            {
              "full_declaration": "int                  offset",
              "name": "offset",
              "type": "int"
            },
            {
              "full_declaration": "int                  count",
              "name": "count",
              "type": "int"
            },
            {
              "full_declaration": "XPLMDataRef*        outDataRefs",
              "name": "outDataRefs",
              "type": "XPLMDataRef*"
            }
          ],
          "signature": "XPLM_API voidXPLMGetDataRefsByIndex(\n                         int                  offset,\n                         int                  count,XPLMDataRef*        outDataRefs);"
        },
        {
          "name": "voidXPLMGetDataRefsByIndex",
          "signature": "XPLM_API voidXPLMGetDataRefsByIndex(\n                         int                  offset,\n                         int                  count,XPLMDataRef*        outDataRefs);",
          "source": "code_block_extraction",
          "type": "function"
        }
      ],
      "category": {
        "category": "XPLM_DataAccess",
        "module": "Xplm Dataaccess",
        "url": "https://developer.x-plane.com/sdk/XPLMGetDataRefsByIndex/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"function XPLM400\"><h3 class=\"sdk-api-function\" id=\"XPLMGetDataRefsByIndex\"><a href=\"/sdk/XPLMGetDataRefsByIndex/\">XPLMGetDataRefsByIndex</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API void       <a href=\"/sdk/XPLMGetDataRefsByIndex/\">XPLMGetDataRefsByIndex</a>(\n                         int                  offset,\n                         int                  count,\n                         <a href=\"/sdk/XPLMDataRef/\">XPLMDataRef</a> *        outDataRefs);\n</code></pre><p>Given an offset and count, this function will return an array of XPLMDataRefs in that range. The offset/count idiom is useful for things like pagination.</p></div></div></article>",
      "code_examples": [
        {
          "char_count": 176,
          "code": "XPLM_API voidXPLMGetDataRefsByIndex(\n                         int                  offset,\n                         int                  count,XPLMDataRef*        outDataRefs);",
          "context": "XPLMGetDataRefsByIndex",
          "id": "example_0",
          "language": "c",
          "line_count": 3,
          "type": "snippet"
        }
      ],
      "cross_references": [],
      "markdown": "### [XPLMGetDataRefsByIndex](/sdk/XPLMGetDataRefsByIndex/)\n\n```cpp\nXPLM_API void       XPLMGetDataRefsByIndex(\n                         int                  offset,\n                         int                  count,\n                         XPLMDataRef *        outDataRefs);\n\n```\n\nGiven an offset and count, this function will return an array of XPLMDataRefs in\nthat range. The offset/count idiom is useful for things like pagination.",
      "own_functions": [
        "XPLMGetDataRefsByIndex",
        "voidXPLMGetDataRefsByIndex"
      ],
      "processing_timestamp": "2025-06-25T20:39:23.365329+00:00",
      "title": "XPLMGetDataRefsByIndex | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMGetDataRefsByIndex/"
    },
    "https://developer.x-plane.com/sdk/XPLMGetDatab/": {
      "api_signatures": [
        {
          "description": "Read a part of a byte array dataref. If you pass NULL for outValues, the routine will return the size of the array, ignoring inOffset and inMax.",
          "name": "XPLMGetDatab",
          "parameters": [
            {
              "full_declaration": "void *               outValue",
              "name": "outValue",
              "type": "void *"
            },
            {
              "full_declaration": "int                  inOffset",
              "name": "inOffset",
              "type": "int"
            },
            {
              "full_declaration": "int                  inMaxBytes",
              "name": "inMaxBytes",
              "type": "int"
            }
          ],
          "signature": "XPLM_API intXPLMGetDatab(XPLMDataRefinDataRef,\n                         void *               outValue,    /* Can be NULL */\n                         int                  inOffset,\n                         int                  inMaxBytes);"
        },
        {
          "name": "intXPLMGetDatab",
          "signature": "XPLM_API intXPLMGetDatab(XPLMDataRefinDataRef,\n                         void *               outValue,    /* Can be NULL */\n                         int                  inOffset,\n                         int                  inMaxBytes);",
          "source": "code_block_extraction",
          "type": "function"
        }
      ],
      "category": {
        "category": "XPLM_DataAccess",
        "module": "Xplm Dataaccess",
        "url": "https://developer.x-plane.com/sdk/XPLMGetDatab/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPLMGetDatab\"><a href=\"/sdk/XPLMGetDatab/\">XPLMGetDatab</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API int        <a href=\"/sdk/XPLMGetDatab/\">XPLMGetDatab</a>(\n                         <a href=\"/sdk/XPLMDataRef/\">XPLMDataRef</a>          inDataRef,\n                         void *               outValue,    /* Can be NULL */\n                         int                  inOffset,\n                         int                  inMaxBytes);\n</code></pre><p>Read a part of a byte array dataref. If you pass NULL for outValues, the routine will return the size of the array, ignoring inOffset and inMax.</p><p>If outValues is not NULL, then up to inMax values are copied from the dataref into outValues, starting at inOffset in the dataref. If inMax + inOffset is larger than the size of the dataref, less than inMax values will be copied. The number of values copied is returned.</p><p>Note: the semantics of array datarefs are entirely implemented by the plugin (or X-Plane) that provides the dataref, not the SDK itself; the above description is how these datarefs are intended to work, but a rogue plugin may have different behavior.</p></div></div></article>",
      "code_examples": [
        {
          "char_count": 238,
          "code": "XPLM_API intXPLMGetDatab(XPLMDataRefinDataRef,\n                         void *               outValue,    /* Can be NULL */\n                         int                  inOffset,\n                         int                  inMaxBytes);",
          "context": "XPLMGetDatab",
          "id": "example_0",
          "language": "c",
          "line_count": 4,
          "type": "snippet"
        }
      ],
      "cross_references": [],
      "markdown": "### [XPLMGetDatab](/sdk/XPLMGetDatab/)\n\n```cpp\nXPLM_API int        XPLMGetDatab(\n                         XPLMDataRef          inDataRef,\n                         void *               outValue,    /* Can be NULL */\n                         int                  inOffset,\n                         int                  inMaxBytes);\n\n```\n\nRead a part of a byte array dataref. If you pass NULL for outValues, the routine\nwill return the size of the array, ignoring inOffset and inMax.\n\nIf outValues is not NULL, then up to inMax values are copied from the dataref\ninto outValues, starting at inOffset in the dataref. If inMax + inOffset is\nlarger than the size of the dataref, less than inMax values will be copied. The\nnumber of values copied is returned.\n\nNote: the semantics of array datarefs are entirely implemented by the plugin (or\nX-Plane) that provides the dataref, not the SDK itself; the above description is\nhow these datarefs are intended to work, but a rogue plugin may have different\nbehavior.",
      "own_functions": [
        "XPLMGetDatab",
        "intXPLMGetDatab"
      ],
      "processing_timestamp": "2025-06-25T20:39:23.360328+00:00",
      "title": "XPLMGetDatab | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMGetDatab/"
    },
    "https://developer.x-plane.com/sdk/XPLMGetDatab_f/": {
      "api_signatures": [],
      "category": {
        "category": "XPLM_DataAccess",
        "module": "Xplm Dataaccess",
        "url": "https://developer.x-plane.com/sdk/XPLMGetDatab_f/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"callback\"><h3 class=\"sdk-api-callback\" id=\"XPLMGetDatab_f\"><a href=\"/sdk/XPLMGetDatab_f/\">XPLMGetDatab_f</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>typedef int (* <a href=\"/sdk/XPLMGetDatab_f/\">XPLMGetDatab_f</a>)(\n                         void *               inRefcon,\n                         void *               outValue,    /* Can be NULL */\n                         int                  inOffset,\n                         int                  inMaxLength);\n</code></pre></div></div></article>",
      "code_examples": [
        {
          "char_count": 279,
          "code": "typedef int (*XPLMGetDatab_f)(\n                         void *               inRefcon,\n                         void *               outValue,    /* Can be NULL */\n                         int                  inOffset,\n                         int                  inMaxLength);",
          "context": "XPLMGetDatab_f",
          "id": "example_0",
          "language": "c",
          "line_count": 5,
          "type": "snippet"
        }
      ],
      "cross_references": [
        "XPLMGetDatab"
      ],
      "markdown": "### [XPLMGetDatab_f](/sdk/XPLMGetDatab_f/)\n\n```cpp\ntypedef int (* XPLMGetDatab_f)(\n                         void *               inRefcon,\n                         void *               outValue,    /* Can be NULL */\n                         int                  inOffset,\n                         int                  inMaxLength);\n\n```",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:23.361332+00:00",
      "title": "XPLMGetDatab_f | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMGetDatab_f/"
    },
    "https://developer.x-plane.com/sdk/XPLMGetDatad/": {
      "api_signatures": [
        {
          "description": "Read a double precision floating point dataref and return its value. The return value is the dataref value or 0.0 if the dataref is NULL or the plugin is disabled.",
          "name": "XPLMGetDatad",
          "parameters": [],
          "signature": "XPLM_API doubleXPLMGetDatad(XPLMDataRefinDataRef);"
        },
        {
          "name": "doubleXPLMGetDatad",
          "signature": "XPLM_API doubleXPLMGetDatad(XPLMDataRefinDataRef);",
          "source": "code_block_extraction",
          "type": "function"
        }
      ],
      "category": {
        "category": "XPLM_DataAccess",
        "module": "Xplm Dataaccess",
        "url": "https://developer.x-plane.com/sdk/XPLMGetDatad/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPLMGetDatad\"><a href=\"/sdk/XPLMGetDatad/\">XPLMGetDatad</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API double     <a href=\"/sdk/XPLMGetDatad/\">XPLMGetDatad</a>(\n                         <a href=\"/sdk/XPLMDataRef/\">XPLMDataRef</a>          inDataRef);\n</code></pre><p>Read a double precision floating point dataref and return its value. The return value is the dataref value or 0.0 if the dataref is NULL or the plugin is disabled.</p></div></div></article>",
      "code_examples": [
        {
          "char_count": 50,
          "code": "XPLM_API doubleXPLMGetDatad(XPLMDataRefinDataRef);",
          "context": "XPLMGetDatad",
          "id": "example_0",
          "language": "c",
          "line_count": 1,
          "type": "snippet"
        }
      ],
      "cross_references": [],
      "markdown": "### [XPLMGetDatad](/sdk/XPLMGetDatad/)\n\n```cpp\nXPLM_API double     XPLMGetDatad(\n                         XPLMDataRef          inDataRef);\n\n```\n\nRead a double precision floating point dataref and return its value. The return\nvalue is the dataref value or 0.0 if the dataref is NULL or the plugin is\ndisabled.",
      "own_functions": [
        "XPLMGetDatad",
        "doubleXPLMGetDatad"
      ],
      "processing_timestamp": "2025-06-25T20:39:23.363328+00:00",
      "title": "XPLMGetDatad | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMGetDatad/"
    },
    "https://developer.x-plane.com/sdk/XPLMGetDatad_f/": {
      "api_signatures": [],
      "category": {
        "category": "XPLM_DataAccess",
        "module": "Xplm Dataaccess",
        "url": "https://developer.x-plane.com/sdk/XPLMGetDatad_f/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"callback\"><h3 class=\"sdk-api-callback\" id=\"XPLMGetDatad_f\"><a href=\"/sdk/XPLMGetDatad_f/\">XPLMGetDatad_f</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>typedef double (* <a href=\"/sdk/XPLMGetDatad_f/\">XPLMGetDatad_f</a>)(\n                         void *               inRefcon);\n</code></pre></div></div></article>",
      "code_examples": [
        {
          "char_count": 90,
          "code": "typedef double (*XPLMGetDatad_f)(\n                         void *               inRefcon);",
          "context": "XPLMGetDatad_f",
          "id": "example_0",
          "language": "c",
          "line_count": 2,
          "type": "snippet"
        }
      ],
      "cross_references": [
        "XPLMGetDatad"
      ],
      "markdown": "### [XPLMGetDatad_f](/sdk/XPLMGetDatad_f/)\n\n```cpp\ntypedef double (* XPLMGetDatad_f)(\n                         void *               inRefcon);\n\n```",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:23.367389+00:00",
      "title": "XPLMGetDatad_f | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMGetDatad_f/"
    },
    "https://developer.x-plane.com/sdk/XPLMGetDataf/": {
      "api_signatures": [
        {
          "description": "Read a single precision floating point dataref and return its value. The return value is the dataref value or 0.0 if the dataref is NULL or the plugin is disabled.",
          "name": "XPLMGetDataf",
          "parameters": [],
          "signature": "XPLM_API floatXPLMGetDataf(XPLMDataRefinDataRef);"
        },
        {
          "name": "floatXPLMGetDataf",
          "signature": "XPLM_API floatXPLMGetDataf(XPLMDataRefinDataRef);",
          "source": "code_block_extraction",
          "type": "function"
        }
      ],
      "category": {
        "category": "XPLM_DataAccess",
        "module": "Xplm Dataaccess",
        "url": "https://developer.x-plane.com/sdk/XPLMGetDataf/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPLMGetDataf\"><a href=\"/sdk/XPLMGetDataf/\">XPLMGetDataf</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API float      <a href=\"/sdk/XPLMGetDataf/\">XPLMGetDataf</a>(\n                         <a href=\"/sdk/XPLMDataRef/\">XPLMDataRef</a>          inDataRef);\n</code></pre><p>Read a single precision floating point dataref and return its value. The return value is the dataref value or 0.0 if the dataref is NULL or the plugin is disabled.</p></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "### [XPLMGetDataf](/sdk/XPLMGetDataf/)\n\n```cpp\nXPLM_API float      XPLMGetDataf(\n                         XPLMDataRef          inDataRef);\n\n```\n\nRead a single precision floating point dataref and return its value. The return\nvalue is the dataref value or 0.0 if the dataref is NULL or the plugin is\ndisabled.",
      "own_functions": [
        "XPLMGetDataf",
        "floatXPLMGetDataf"
      ],
      "processing_timestamp": "2025-06-25T20:39:23.372412+00:00",
      "title": "XPLMGetDataf | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMGetDataf/"
    },
    "https://developer.x-plane.com/sdk/XPLMGetDataf_f/": {
      "api_signatures": [],
      "category": {
        "category": "XPLM_DataAccess",
        "module": "Xplm Dataaccess",
        "url": "https://developer.x-plane.com/sdk/XPLMGetDataf_f/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"callback\"><h3 class=\"sdk-api-callback\" id=\"XPLMGetDataf_f\"><a href=\"/sdk/XPLMGetDataf_f/\">XPLMGetDataf_f</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>typedef float (* <a href=\"/sdk/XPLMGetDataf_f/\">XPLMGetDataf_f</a>)(\n                         void *               inRefcon);\n</code></pre></div></div></article>",
      "code_examples": [
        {
          "char_count": 89,
          "code": "typedef float (*XPLMGetDataf_f)(\n                         void *               inRefcon);",
          "context": "XPLMGetDataf_f",
          "id": "example_0",
          "language": "c",
          "line_count": 2,
          "type": "snippet"
        }
      ],
      "cross_references": [
        "XPLMGetDataf"
      ],
      "markdown": "### [XPLMGetDataf_f](/sdk/XPLMGetDataf_f/)\n\n```cpp\ntypedef float (* XPLMGetDataf_f)(\n                         void *               inRefcon);\n\n```",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:23.368412+00:00",
      "title": "XPLMGetDataf_f | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMGetDataf_f/"
    },
    "https://developer.x-plane.com/sdk/XPLMGetDatai/": {
      "api_signatures": [
        {
          "description": "Read an integer dataref and return its value. The return value is the dataref value or 0 if the dataref is NULL or the plugin is disabled.",
          "name": "XPLMGetDatai",
          "parameters": [],
          "signature": "XPLM_API intXPLMGetDatai(XPLMDataRefinDataRef);"
        },
        {
          "name": "intXPLMGetDatai",
          "signature": "XPLM_API intXPLMGetDatai(XPLMDataRefinDataRef);",
          "source": "code_block_extraction",
          "type": "function"
        }
      ],
      "category": {
        "category": "XPLM_DataAccess",
        "module": "Xplm Dataaccess",
        "url": "https://developer.x-plane.com/sdk/XPLMGetDatai/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPLMGetDatai\"><a href=\"/sdk/XPLMGetDatai/\">XPLMGetDatai</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API int        <a href=\"/sdk/XPLMGetDatai/\">XPLMGetDatai</a>(\n                         <a href=\"/sdk/XPLMDataRef/\">XPLMDataRef</a>          inDataRef);\n</code></pre><p>Read an integer dataref and return its value. The return value is the dataref value or 0 if the dataref is NULL or the plugin is disabled.</p></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "### [XPLMGetDatai](/sdk/XPLMGetDatai/)\n\n```cpp\nXPLM_API int        XPLMGetDatai(\n                         XPLMDataRef          inDataRef);\n\n```\n\nRead an integer dataref and return its value. The return value is the dataref\nvalue or 0 if the dataref is NULL or the plugin is disabled.",
      "own_functions": [
        "XPLMGetDatai",
        "intXPLMGetDatai"
      ],
      "processing_timestamp": "2025-06-25T20:39:23.370413+00:00",
      "title": "XPLMGetDatai | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMGetDatai/"
    },
    "https://developer.x-plane.com/sdk/XPLMGetDatai_f/": {
      "api_signatures": [],
      "category": {
        "category": "XPLM_DataAccess",
        "module": "Xplm Dataaccess",
        "url": "https://developer.x-plane.com/sdk/XPLMGetDatai_f/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"callback\"><h3 class=\"sdk-api-callback\" id=\"XPLMGetDatai_f\"><a href=\"/sdk/XPLMGetDatai_f/\">XPLMGetDatai_f</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>typedef int (* <a href=\"/sdk/XPLMGetDatai_f/\">XPLMGetDatai_f</a>)(\n                         void *               inRefcon);\n</code></pre><p>Data provider function pointers.</p><p>These define the function pointers you provide to get or set data. Note that you are passed a generic pointer for each one. This is the same pointer you pass in your register routine; you can use it to locate plugin variables, etc.</p><p>The semantics of your callbacks are the same as the dataref accessors above - basically routines like<a href=\"/sdk/XPLMGetDatai/\">XPLMGetDatai</a>are just pass-throughs from a caller to your plugin. Be particularly mindful in implementing array dataref read-write accessors; you are responsible for avoiding overruns, supporting offset read/writes, and handling a read with a NULL buffer.</p></div></div></article>",
      "code_examples": [
        {
          "char_count": 87,
          "code": "typedef int (*XPLMGetDatai_f)(\n                         void *               inRefcon);",
          "context": "XPLMGetDatai_f",
          "id": "example_0",
          "language": "c",
          "line_count": 2,
          "type": "snippet"
        }
      ],
      "cross_references": [
        "XPLMGetDatai"
      ],
      "markdown": "### [XPLMGetDatai_f](/sdk/XPLMGetDatai_f/)\n\n```cpp\ntypedef int (* XPLMGetDatai_f)(\n                         void *               inRefcon);\n\n```\n\nData provider function pointers.\n\nThese define the function pointers you provide to get or set data. Note that you\nare passed a generic pointer for each one. This is the same pointer you pass in\nyour register routine; you can use it to locate plugin variables, etc.\n\nThe semantics of your callbacks are the same as the dataref accessors above -\nbasically routines like[XPLMGetDatai](/sdk/XPLMGetDatai/)are just pass-throughs\nfrom a caller to your plugin. Be particularly mindful in implementing array\ndataref read-write accessors; you are responsible for avoiding overruns,\nsupporting offset read/writes, and handling a read with a NULL buffer.",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:23.374412+00:00",
      "title": "XPLMGetDatai_f | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMGetDatai_f/"
    },
    "https://developer.x-plane.com/sdk/XPLMGetDatavf/": {
      "api_signatures": [
        {
          "description": "Read a part of a single precision floating point array dataref. If you pass NULL for outValues, the routine will return the size of the array, ignoring inOffset and inMax.",
          "name": "XPLMGetDatavf",
          "parameters": [
            {
              "full_declaration": "float *              outValues",
              "name": "outValues",
              "type": "float *"
            },
            {
              "full_declaration": "int                  inOffset",
              "name": "inOffset",
              "type": "int"
            },
            {
              "full_declaration": "int                  inMax",
              "name": "inMax",
              "type": "int"
            }
          ],
          "signature": "XPLM_API intXPLMGetDatavf(XPLMDataRefinDataRef,\n                         float *              outValues,    /* Can be NULL */\n                         int                  inOffset,\n                         int                  inMax);"
        },
        {
          "name": "intXPLMGetDatavf",
          "signature": "XPLM_API intXPLMGetDatavf(XPLMDataRefinDataRef,\n                         float *              outValues,    /* Can be NULL */\n                         int                  inOffset,\n                         int                  inMax);",
          "source": "code_block_extraction",
          "type": "function"
        }
      ],
      "category": {
        "category": "XPLM_DataAccess",
        "module": "Xplm Dataaccess",
        "url": "https://developer.x-plane.com/sdk/XPLMGetDatavf/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPLMGetDatavf\"><a href=\"/sdk/XPLMGetDatavf/\">XPLMGetDatavf</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API int        <a href=\"/sdk/XPLMGetDatavf/\">XPLMGetDatavf</a>(\n                         <a href=\"/sdk/XPLMDataRef/\">XPLMDataRef</a>          inDataRef,\n                         float *              outValues,    /* Can be NULL */\n                         int                  inOffset,\n                         int                  inMax);\n</code></pre><p>Read a part of a single precision floating point array dataref. If you pass NULL for outValues, the routine will return the size of the array, ignoring inOffset and inMax.</p><p>If outValues is not NULL, then up to inMax values are copied from the dataref into outValues, starting at inOffset in the dataref. If inMax + inOffset is larger than the size of the dataref, less than inMax values will be copied. The number of values copied is returned.</p><p>Note: the semantics of array datarefs are entirely implemented by the plugin (or X-Plane) that provides the dataref, not the SDK itself; the above description is how these datarefs are intended to work, but a rogue plugin may have different behavior.</p></div></div></article>",
      "code_examples": [
        {
          "char_count": 235,
          "code": "XPLM_API intXPLMGetDatavf(XPLMDataRefinDataRef,\n                         float *              outValues,    /* Can be NULL */\n                         int                  inOffset,\n                         int                  inMax);",
          "context": "XPLMGetDatavf",
          "id": "example_0",
          "language": "c",
          "line_count": 4,
          "type": "snippet"
        }
      ],
      "cross_references": [],
      "markdown": "### [XPLMGetDatavf](/sdk/XPLMGetDatavf/)\n\n```cpp\nXPLM_API int        XPLMGetDatavf(\n                         XPLMDataRef          inDataRef,\n                         float *              outValues,    /* Can be NULL */\n                         int                  inOffset,\n                         int                  inMax);\n\n```\n\nRead a part of a single precision floating point array dataref. If you pass NULL\nfor outValues, the routine will return the size of the array, ignoring inOffset\nand inMax.\n\nIf outValues is not NULL, then up to inMax values are copied from the dataref\ninto outValues, starting at inOffset in the dataref. If inMax + inOffset is\nlarger than the size of the dataref, less than inMax values will be copied. The\nnumber of values copied is returned.\n\nNote: the semantics of array datarefs are entirely implemented by the plugin (or\nX-Plane) that provides the dataref, not the SDK itself; the above description is\nhow these datarefs are intended to work, but a rogue plugin may have different\nbehavior.",
      "own_functions": [
        "XPLMGetDatavf",
        "intXPLMGetDatavf"
      ],
      "processing_timestamp": "2025-06-25T20:39:23.376414+00:00",
      "title": "XPLMGetDatavf | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMGetDatavf/"
    },
    "https://developer.x-plane.com/sdk/XPLMGetDatavf_f/": {
      "api_signatures": [],
      "category": {
        "category": "XPLM_DataAccess",
        "module": "Xplm Dataaccess",
        "url": "https://developer.x-plane.com/sdk/XPLMGetDatavf_f/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"callback\"><h3 class=\"sdk-api-callback\" id=\"XPLMGetDatavf_f\"><a href=\"/sdk/XPLMGetDatavf_f/\">XPLMGetDatavf_f</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>typedef int (* <a href=\"/sdk/XPLMGetDatavf_f/\">XPLMGetDatavf_f</a>)(\n                         void *               inRefcon,\n                         float *              outValues,    /* Can be NULL */\n                         int                  inOffset,\n                         int                  inMax);\n</code></pre></div></div></article>",
      "code_examples": [
        {
          "char_count": 275,
          "code": "typedef int (*XPLMGetDatavf_f)(\n                         void *               inRefcon,\n                         float *              outValues,    /* Can be NULL */\n                         int                  inOffset,\n                         int                  inMax);",
          "context": "XPLMGetDatavf_f",
          "id": "example_0",
          "language": "c",
          "line_count": 5,
          "type": "snippet"
        }
      ],
      "cross_references": [
        "XPLMGetDatavf"
      ],
      "markdown": "### [XPLMGetDatavf_f](/sdk/XPLMGetDatavf_f/)\n\n```cpp\ntypedef int (* XPLMGetDatavf_f)(\n                         void *               inRefcon,\n                         float *              outValues,    /* Can be NULL */\n                         int                  inOffset,\n                         int                  inMax);\n\n```",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:23.378460+00:00",
      "title": "XPLMGetDatavf_f | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMGetDatavf_f/"
    },
    "https://developer.x-plane.com/sdk/XPLMGetDatavi/": {
      "api_signatures": [
        {
          "description": "Read a part of an integer array dataref. If you pass NULL for outValues, the routine will return the size of the array, ignoring inOffset and inMax.",
          "name": "XPLMGetDatavi",
          "parameters": [
            {
              "full_declaration": "int *                outValues",
              "name": "outValues",
              "type": "int *"
            },
            {
              "full_declaration": "int                  inOffset",
              "name": "inOffset",
              "type": "int"
            },
            {
              "full_declaration": "int                  inMax",
              "name": "inMax",
              "type": "int"
            }
          ],
          "signature": "XPLM_API intXPLMGetDatavi(XPLMDataRefinDataRef,\n                         int *                outValues,    /* Can be NULL */\n                         int                  inOffset,\n                         int                  inMax);"
        },
        {
          "name": "intXPLMGetDatavi",
          "signature": "XPLM_API intXPLMGetDatavi(XPLMDataRefinDataRef,\n                         int *                outValues,    /* Can be NULL */\n                         int                  inOffset,\n                         int                  inMax);",
          "source": "code_block_extraction",
          "type": "function"
        }
      ],
      "category": {
        "category": "XPLM_DataAccess",
        "module": "Xplm Dataaccess",
        "url": "https://developer.x-plane.com/sdk/XPLMGetDatavi/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPLMGetDatavi\"><a href=\"/sdk/XPLMGetDatavi/\">XPLMGetDatavi</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API int        <a href=\"/sdk/XPLMGetDatavi/\">XPLMGetDatavi</a>(\n                         <a href=\"/sdk/XPLMDataRef/\">XPLMDataRef</a>          inDataRef,\n                         int *                outValues,    /* Can be NULL */\n                         int                  inOffset,\n                         int                  inMax);\n</code></pre><p>Read a part of an integer array dataref. If you pass NULL for outValues, the routine will return the size of the array, ignoring inOffset and inMax.</p><p>If outValues is not NULL, then up to inMax values are copied from the dataref into outValues, starting at inOffset in the dataref. If inMax + inOffset is larger than the size of the dataref, less than inMax values will be copied. The number of values copied is returned.</p><p>Note: the semantics of array datarefs are entirely implemented by the plugin (or X-Plane) that provides the dataref, not the SDK itself; the above description is how these datarefs are intended to work, but a rogue plugin may have different behavior.</p></div></div></article>",
      "code_examples": [
        {
          "char_count": 235,
          "code": "XPLM_API intXPLMGetDatavi(XPLMDataRefinDataRef,\n                         int *                outValues,    /* Can be NULL */\n                         int                  inOffset,\n                         int                  inMax);",
          "context": "XPLMGetDatavi",
          "id": "example_0",
          "language": "c",
          "line_count": 4,
          "type": "snippet"
        }
      ],
      "cross_references": [],
      "markdown": "### [XPLMGetDatavi](/sdk/XPLMGetDatavi/)\n\n```cpp\nXPLM_API int        XPLMGetDatavi(\n                         XPLMDataRef          inDataRef,\n                         int *                outValues,    /* Can be NULL */\n                         int                  inOffset,\n                         int                  inMax);\n\n```\n\nRead a part of an integer array dataref. If you pass NULL for outValues, the\nroutine will return the size of the array, ignoring inOffset and inMax.\n\nIf outValues is not NULL, then up to inMax values are copied from the dataref\ninto outValues, starting at inOffset in the dataref. If inMax + inOffset is\nlarger than the size of the dataref, less than inMax values will be copied. The\nnumber of values copied is returned.\n\nNote: the semantics of array datarefs are entirely implemented by the plugin (or\nX-Plane) that provides the dataref, not the SDK itself; the above description is\nhow these datarefs are intended to work, but a rogue plugin may have different\nbehavior.",
      "own_functions": [
        "XPLMGetDatavi",
        "intXPLMGetDatavi"
      ],
      "processing_timestamp": "2025-06-25T20:39:23.382460+00:00",
      "title": "XPLMGetDatavi | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMGetDatavi/"
    },
    "https://developer.x-plane.com/sdk/XPLMGetDatavi_f/": {
      "api_signatures": [],
      "category": {
        "category": "XPLM_DataAccess",
        "module": "Xplm Dataaccess",
        "url": "https://developer.x-plane.com/sdk/XPLMGetDatavi_f/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"callback\"><h3 class=\"sdk-api-callback\" id=\"XPLMGetDatavi_f\"><a href=\"/sdk/XPLMGetDatavi_f/\">XPLMGetDatavi_f</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>typedef int (* <a href=\"/sdk/XPLMGetDatavi_f/\">XPLMGetDatavi_f</a>)(\n                         void *               inRefcon,\n                         int *                outValues,    /* Can be NULL */\n                         int                  inOffset,\n                         int                  inMax);\n</code></pre></div></div></article>",
      "code_examples": [
        {
          "char_count": 275,
          "code": "typedef int (*XPLMGetDatavi_f)(\n                         void *               inRefcon,\n                         int *                outValues,    /* Can be NULL */\n                         int                  inOffset,\n                         int                  inMax);",
          "context": "XPLMGetDatavi_f",
          "id": "example_0",
          "language": "c",
          "line_count": 5,
          "type": "snippet"
        }
      ],
      "cross_references": [
        "XPLMGetDatavi"
      ],
      "markdown": "### [XPLMGetDatavi_f](/sdk/XPLMGetDatavi_f/)\n\n```cpp\ntypedef int (* XPLMGetDatavi_f)(\n                         void *               inRefcon,\n                         int *                outValues,    /* Can be NULL */\n                         int                  inOffset,\n                         int                  inMax);\n\n```",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:23.387814+00:00",
      "title": "XPLMGetDatavi_f | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMGetDatavi_f/"
    },
    "https://developer.x-plane.com/sdk/XPLMGetDestinationFMSEntry/": {
      "api_signatures": [
        {
          "description": "This routine returns the index of the entry the FMS is flying to.",
          "name": "XPLMGetDestinationFMSEntry",
          "parameters": [],
          "signature": "XPLM_API intXPLMGetDestinationFMSEntry(void);"
        },
        {
          "name": "intXPLMGetDestinationFMSEntry",
          "signature": "XPLM_API intXPLMGetDestinationFMSEntry(void);",
          "source": "code_block_extraction",
          "type": "function"
        }
      ],
      "category": {
        "category": "XPLM_Navigation",
        "module": "Xplm Navigation",
        "url": "https://developer.x-plane.com/sdk/XPLMGetDestinationFMSEntry/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPLMGetDestinationFMSEntry\"><a href=\"/sdk/XPLMGetDestinationFMSEntry/\">XPLMGetDestinationFMSEntry</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API int        <a href=\"/sdk/XPLMGetDestinationFMSEntry/\">XPLMGetDestinationFMSEntry</a>(void);\n</code></pre><p>This routine returns the index of the entry the FMS is flying to.</p></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "### [XPLMGetDestinationFMSEntry](/sdk/XPLMGetDestinationFMSEntry/)\n\n```cpp\nXPLM_API int        XPLMGetDestinationFMSEntry(void);\n\n```\n\nThis routine returns the index of the entry the FMS is flying to.",
      "own_functions": [
        "XPLMGetDestinationFMSEntry",
        "intXPLMGetDestinationFMSEntry"
      ],
      "processing_timestamp": "2025-06-25T20:39:23.962332+00:00",
      "title": "XPLMGetDestinationFMSEntry | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMGetDestinationFMSEntry/"
    },
    "https://developer.x-plane.com/sdk/XPLMGetDestinationFMSFlightPlanEntry/": {
      "api_signatures": [
        {
          "description": "This routine returns the index of the entry the FMS is flying to.",
          "name": "XPLMGetDestinationFMSFlightPlanEntry",
          "parameters": [],
          "signature": "XPLM_API intXPLMGetDestinationFMSFlightPlanEntry(XPLMNavFlightPlaninFlightPlan);"
        },
        {
          "name": "intXPLMGetDestinationFMSFlightPlanEntry",
          "signature": "XPLM_API intXPLMGetDestinationFMSFlightPlanEntry(XPLMNavFlightPlaninFlightPlan);",
          "source": "code_block_extraction",
          "type": "function"
        }
      ],
      "category": {
        "category": "XPLM_Navigation",
        "module": "Xplm Navigation",
        "url": "https://developer.x-plane.com/sdk/XPLMGetDestinationFMSFlightPlanEntry/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"function XPLM410\"><h3 class=\"sdk-api-function\" id=\"XPLMGetDestinationFMSFlightPlanEntry\"><a href=\"/sdk/XPLMGetDestinationFMSFlightPlanEntry/\">XPLMGetDestinationFMSFlightPlanEntry</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API int        <a href=\"/sdk/XPLMGetDestinationFMSFlightPlanEntry/\">XPLMGetDestinationFMSFlightPlanEntry</a>(\n                         <a href=\"/sdk/XPLMNavFlightPlan/\">XPLMNavFlightPlan</a>    inFlightPlan);\n</code></pre><p>This routine returns the index of the entry the FMS is flying to.</p></div></div></article>",
      "code_examples": [
        {
          "char_count": 80,
          "code": "XPLM_API intXPLMGetDestinationFMSFlightPlanEntry(XPLMNavFlightPlaninFlightPlan);",
          "context": "XPLMGetDestinationFMSFlightPlanEntry",
          "id": "example_0",
          "language": "cpp",
          "line_count": 1,
          "type": "snippet"
        }
      ],
      "cross_references": [
        "XPLMNavFlightPlan"
      ],
      "markdown": "### [XPLMGetDestinationFMSFlightPlanEntry](/sdk/XPLMGetDestinationFMSFlightPlanEntry/)\n\n```cpp\nXPLM_API int        XPLMGetDestinationFMSFlightPlanEntry(\n                         XPLMNavFlightPlan    inFlightPlan);\n\n```\n\nThis routine returns the index of the entry the FMS is flying to.",
      "own_functions": [
        "XPLMGetDestinationFMSFlightPlanEntry",
        "intXPLMGetDestinationFMSFlightPlanEntry"
      ],
      "processing_timestamp": "2025-06-25T20:39:23.969386+00:00",
      "title": "XPLMGetDestinationFMSFlightPlanEntry | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMGetDestinationFMSFlightPlanEntry/"
    },
    "https://developer.x-plane.com/sdk/XPLMGetDirectoryContents/": {
      "api_signatures": [
        {
          "description": "This routine returns a list of files in a directory (specified by a full path, no trailing : or / ). The output is returned as a list of NULL terminated strings. An index array (if specified) is filled with pointers into the strings. The last file is indicated by a zero-length string (and NULL in the indices). This routine will return 1 if you had capacity for all files or 0 if you did not. You can also skip a given number of files.",
          "name": "XPLMGetDirectoryContents",
          "parameters": [],
          "signature": "XPLM_API intXPLMGetDirectoryContents(\n                         const char *         inDirectoryPath,\n                         int                  inFirstReturn,\n                         char *               outFileNames,\n                         int                  inFileNameBufSize,\n                         char **              outIndices,    /* Can be NULL */\n                         int                  inIndexCount,\n                         int *                outTotalFiles,    /* Can be NULL */\n                         int *                outReturnedFiles);    /* Can be NULL */"
        },
        {
          "name": "intXPLMGetDirectoryContents",
          "signature": "XPLM_API intXPLMGetDirectoryContents(\n                         const char *         inDirectoryPath,\n                         int                  inFirstReturn,\n                         char *               outFileNames,\n                         int                  inFileNameBufSize,\n                         char **              outIndices,    /* Can be NULL */\n                         int                  inIndexCount,\n                         int *                outTotalFiles,    /* Can be NULL */\n                         int *                outReturnedFiles);",
          "source": "code_block_extraction",
          "type": "function"
        }
      ],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/XPLMGetDirectoryContents/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPLMGetDirectoryContents\"><a href=\"/sdk/XPLMGetDirectoryContents/\">XPLMGetDirectoryContents</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API int        <a href=\"/sdk/XPLMGetDirectoryContents/\">XPLMGetDirectoryContents</a>(\n                         const char *         inDirectoryPath,\n                         int                  inFirstReturn,\n                         char *               outFileNames,\n                         int                  inFileNameBufSize,\n                         char **              outIndices,    /* Can be NULL */\n                         int                  inIndexCount,\n                         int *                outTotalFiles,    /* Can be NULL */\n                         int *                outReturnedFiles);    /* Can be NULL */\n</code></pre><p>This routine returns a list of files in a directory (specified by a full path, no trailing : or / ). The output is returned as a list of NULL terminated strings. An index array (if specified) is filled with pointers into the strings. The last file is indicated by a zero-length string (and NULL in the indices). This routine will return 1 if you had capacity for all files or 0 if you did not. You can also skip a given number of files.</p><ul><li><p>inDirectoryPath - a null terminated C string containing the full path to the directory with no trailing directory char.</p></li><li><p>inFirstReturn - the zero-based index of the first file in the directory to return. (Usually zero to fetch all in one pass.)</p></li><li><p>outFileNames - a buffer to receive a series of sequential null terminated C-string file names. A zero-length C string will be appended to the very end.</p></li><li><p>inFileNameBufSize - the size of the file name buffer in bytes.</p></li><li><p>outIndices - a pointer to an array of character pointers that will become an index into the directory. The last file will be followed by a NULL value. Pass NULL if you do not want indexing information.</p></li><li><p>inIndexCount - the max size of the index in entries.</p></li><li><p>outTotalFiles - if not NULL, this is filled in with the number of files in the directory.</p></li><li><p>outReturnedFiles - if not NULL, the number of files returned by this iteration.</p></li></ul><p>Return value: 1 if all info could be returned, 0 if there was a buffer overrun.</p><p>WARNING: Before X-Plane 7 this routine did not properly iterate through directories. If X-Plane 6 compatibility is needed, use your own code to iterate directories.</p></div></div></article>",
      "code_examples": [
        {
          "char_count": 593,
          "code": "XPLM_API intXPLMGetDirectoryContents(\n                         const char *         inDirectoryPath,\n                         int                  inFirstReturn,\n                         char *               outFileNames,\n                         int                  inFileNameBufSize,\n                         char **              outIndices,    /* Can be NULL */\n                         int                  inIndexCount,\n                         int *                outTotalFiles,    /* Can be NULL */\n                         int *                outReturnedFiles);    /* Can be NULL */",
          "context": "XPLMGetDirectoryContents",
          "id": "example_0",
          "language": "c",
          "line_count": 9,
          "type": "snippet"
        }
      ],
      "cross_references": [],
      "markdown": "### [XPLMGetDirectoryContents](/sdk/XPLMGetDirectoryContents/)\n\n```cpp\nXPLM_API int        XPLMGetDirectoryContents(\n                         const char *         inDirectoryPath,\n                         int                  inFirstReturn,\n                         char *               outFileNames,\n                         int                  inFileNameBufSize,\n                         char **              outIndices,    /* Can be NULL */\n                         int                  inIndexCount,\n                         int *                outTotalFiles,    /* Can be NULL */\n                         int *                outReturnedFiles);    /* Can be NULL */\n\n```\n\nThis routine returns a list of files in a directory (specified by a full path,\nno trailing : or / ). The output is returned as a list of NULL terminated\nstrings. An index array (if specified) is filled with pointers into the strings.\nThe last file is indicated by a zero-length string (and NULL in the indices).\nThis routine will return 1 if you had capacity for all files or 0 if you did\nnot. You can also skip a given number of files.\n\n- inDirectoryPath - a null terminated C string containing the full path to the\n  directory with no trailing directory char.\n- inFirstReturn - the zero-based index of the first file in the directory to\n  return. (Usually zero to fetch all in one pass.)\n- outFileNames - a buffer to receive a series of sequential null terminated\n  C-string file names. A zero-length C string will be appended to the very end.\n- inFileNameBufSize - the size of the file name buffer in bytes.\n- outIndices - a pointer to an array of character pointers that will become an\n  index into the directory. The last file will be followed by a NULL value. Pass\n  NULL if you do not want indexing information.\n- inIndexCount - the max size of the index in entries.\n- outTotalFiles - if not NULL, this is filled in with the number of files in the\n  directory.\n- outReturnedFiles - if not NULL, the number of files returned by this iteration.\n\nReturn value: 1 if all info could be returned, 0 if there was a buffer overrun.\n\nWARNING: Before X-Plane 7 this routine did not properly iterate through\ndirectories. If X-Plane 6 compatibility is needed, use your own code to iterate\ndirectories.",
      "own_functions": [
        "XPLMGetDirectoryContents",
        "intXPLMGetDirectoryContents"
      ],
      "processing_timestamp": "2025-06-25T20:39:22.329242+00:00",
      "title": "XPLMGetDirectoryContents | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMGetDirectoryContents/"
    },
    "https://developer.x-plane.com/sdk/XPLMGetDirectorySeparator/": {
      "api_signatures": [
        {
          "description": "This routine returns a string with one char and a null terminator that is the directory separator for the current platform. This allows you to write code that concatenates directory paths without having to #ifdef for platform. The character returned will reflect the current file path mode.",
          "name": "XPLMGetDirectorySeparator",
          "parameters": [],
          "signature": "XPLM_API const char *XPLMGetDirectorySeparator(void);"
        }
      ],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/XPLMGetDirectorySeparator/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPLMGetDirectorySeparator\"><a href=\"/sdk/XPLMGetDirectorySeparator/\">XPLMGetDirectorySeparator</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API const char * <a href=\"/sdk/XPLMGetDirectorySeparator/\">XPLMGetDirectorySeparator</a>(void);\n</code></pre><p>This routine returns a string with one char and a null terminator that is the directory separator for the current platform. This allows you to write code that concatenates directory paths without having to #ifdef for platform. The character returned will reflect the current file path mode.</p></div></div></article>",
      "code_examples": [
        {
          "char_count": 53,
          "code": "XPLM_API const char *XPLMGetDirectorySeparator(void);",
          "context": "XPLMGetDirectorySeparator",
          "id": "example_0",
          "language": "c",
          "line_count": 1,
          "type": "snippet"
        }
      ],
      "cross_references": [],
      "markdown": "### [XPLMGetDirectorySeparator](/sdk/XPLMGetDirectorySeparator/)\n\n```cpp\nXPLM_API const char * XPLMGetDirectorySeparator(void);\n\n```\n\nThis routine returns a string with one char and a null terminator that is the\ndirectory separator for the current platform. This allows you to write code that\nconcatenates directory paths without having to #ifdef for platform. The\ncharacter returned will reflect the current file path mode.",
      "own_functions": [
        "XPLMGetDirectorySeparator"
      ],
      "processing_timestamp": "2025-06-25T20:39:22.319240+00:00",
      "title": "XPLMGetDirectorySeparator | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMGetDirectorySeparator/"
    },
    "https://developer.x-plane.com/sdk/XPLMGetDisplayedFMSEntry/": {
      "api_signatures": [
        {
          "description": "This routine returns the index of the entry the pilot is viewing.",
          "name": "XPLMGetDisplayedFMSEntry",
          "parameters": [],
          "signature": "XPLM_API intXPLMGetDisplayedFMSEntry(void);"
        },
        {
          "name": "intXPLMGetDisplayedFMSEntry",
          "signature": "XPLM_API intXPLMGetDisplayedFMSEntry(void);",
          "source": "code_block_extraction",
          "type": "function"
        }
      ],
      "category": {
        "category": "XPLM_Navigation",
        "module": "Xplm Navigation",
        "url": "https://developer.x-plane.com/sdk/XPLMGetDisplayedFMSEntry/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPLMGetDisplayedFMSEntry\"><a href=\"/sdk/XPLMGetDisplayedFMSEntry/\">XPLMGetDisplayedFMSEntry</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API int        <a href=\"/sdk/XPLMGetDisplayedFMSEntry/\">XPLMGetDisplayedFMSEntry</a>(void);\n</code></pre><p>This routine returns the index of the entry the pilot is viewing.</p></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "### [XPLMGetDisplayedFMSEntry](/sdk/XPLMGetDisplayedFMSEntry/)\n\n```cpp\nXPLM_API int        XPLMGetDisplayedFMSEntry(void);\n\n```\n\nThis routine returns the index of the entry the pilot is viewing.",
      "own_functions": [
        "XPLMGetDisplayedFMSEntry",
        "intXPLMGetDisplayedFMSEntry"
      ],
      "processing_timestamp": "2025-06-25T20:39:23.970384+00:00",
      "title": "XPLMGetDisplayedFMSEntry | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMGetDisplayedFMSEntry/"
    },
    "https://developer.x-plane.com/sdk/XPLMGetDisplayedFMSFlightPlanEntry/": {
      "api_signatures": [
        {
          "description": "This routine returns the index of the entry the pilot is viewing.",
          "name": "XPLMGetDisplayedFMSFlightPlanEntry",
          "parameters": [],
          "signature": "XPLM_API intXPLMGetDisplayedFMSFlightPlanEntry(XPLMNavFlightPlaninFlightPlan);"
        },
        {
          "name": "intXPLMGetDisplayedFMSFlightPlanEntry",
          "signature": "XPLM_API intXPLMGetDisplayedFMSFlightPlanEntry(XPLMNavFlightPlaninFlightPlan);",
          "source": "code_block_extraction",
          "type": "function"
        }
      ],
      "category": {
        "category": "XPLM_Navigation",
        "module": "Xplm Navigation",
        "url": "https://developer.x-plane.com/sdk/XPLMGetDisplayedFMSFlightPlanEntry/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"function XPLM410\"><h3 class=\"sdk-api-function\" id=\"XPLMGetDisplayedFMSFlightPlanEntry\"><a href=\"/sdk/XPLMGetDisplayedFMSFlightPlanEntry/\">XPLMGetDisplayedFMSFlightPlanEntry</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API int        <a href=\"/sdk/XPLMGetDisplayedFMSFlightPlanEntry/\">XPLMGetDisplayedFMSFlightPlanEntry</a>(\n                         <a href=\"/sdk/XPLMNavFlightPlan/\">XPLMNavFlightPlan</a>    inFlightPlan);\n</code></pre><p>This routine returns the index of the entry the pilot is viewing.</p></div></div></article>",
      "code_examples": [
        {
          "char_count": 78,
          "code": "XPLM_API intXPLMGetDisplayedFMSFlightPlanEntry(XPLMNavFlightPlaninFlightPlan);",
          "context": "XPLMGetDisplayedFMSFlightPlanEntry",
          "id": "example_0",
          "language": "cpp",
          "line_count": 1,
          "type": "snippet"
        }
      ],
      "cross_references": [
        "XPLMNavFlightPlan"
      ],
      "markdown": "### [XPLMGetDisplayedFMSFlightPlanEntry](/sdk/XPLMGetDisplayedFMSFlightPlanEntry/)\n\n```cpp\nXPLM_API int        XPLMGetDisplayedFMSFlightPlanEntry(\n                         XPLMNavFlightPlan    inFlightPlan);\n\n```\n\nThis routine returns the index of the entry the pilot is viewing.",
      "own_functions": [
        "XPLMGetDisplayedFMSFlightPlanEntry",
        "intXPLMGetDisplayedFMSFlightPlanEntry"
      ],
      "processing_timestamp": "2025-06-25T20:39:23.975384+00:00",
      "title": "XPLMGetDisplayedFMSFlightPlanEntry | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMGetDisplayedFMSFlightPlanEntry/"
    },
    "https://developer.x-plane.com/sdk/XPLMGetElapsedTime/": {
      "api_signatures": [
        {
          "description": "This routine returns the elapsed time since the sim started up in decimal seconds. This is a wall timer; it keeps counting upward even if the sim is pasued.",
          "name": "XPLMGetElapsedTime",
          "parameters": [],
          "signature": "XPLM_API floatXPLMGetElapsedTime(void);"
        },
        {
          "name": "floatXPLMGetElapsedTime",
          "signature": "XPLM_API floatXPLMGetElapsedTime(void);",
          "source": "code_block_extraction",
          "type": "function"
        }
      ],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/XPLMGetElapsedTime/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPLMGetElapsedTime\"><a href=\"/sdk/XPLMGetElapsedTime/\">XPLMGetElapsedTime</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API float      <a href=\"/sdk/XPLMGetElapsedTime/\">XPLMGetElapsedTime</a>(void);\n</code></pre><p>This routine returns the elapsed time since the sim started up in decimal seconds. This is a wall timer; it keeps counting upward even if the sim is pasued.</p><p><strong>WARNING</strong>:<a href=\"/sdk/XPLMGetElapsedTime/\">XPLMGetElapsedTime</a>is not a very good timer! It lacks precision in both its data type and its source. Do not attempt to use it for timing critical applications like network multiplayer.</p></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "### [XPLMGetElapsedTime](/sdk/XPLMGetElapsedTime/)\n\n```cpp\nXPLM_API float      XPLMGetElapsedTime(void);\n\n```\n\nThis routine returns the elapsed time since the sim started up in decimal\nseconds. This is a wall timer; it keeps counting upward even if the sim is\npasued.\n\n**WARNING**:[XPLMGetElapsedTime](/sdk/XPLMGetElapsedTime/)is not a very good\ntimer! It lacks precision in both its data type and its source. Do not attempt\nto use it for timing critical applications like network multiplayer.",
      "own_functions": [
        "XPLMGetElapsedTime",
        "floatXPLMGetElapsedTime"
      ],
      "processing_timestamp": "2025-06-25T20:39:22.326243+00:00",
      "title": "XPLMGetElapsedTime | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMGetElapsedTime/"
    },
    "https://developer.x-plane.com/sdk/XPLMGetFMODChannelGroup/": {
      "api_signatures": [
        {
          "description": "Get a reference to a particular channel group - that is, an output channel. See the table above for values.",
          "name": "XPLMGetFMODChannelGroup",
          "parameters": [],
          "signature": "XPLM_API FMOD_CHANNELGROUP*XPLMGetFMODChannelGroup(XPLMAudioBusaudioType);"
        }
      ],
      "category": {
        "category": "XPLM_Sound",
        "module": "Xplm Sound",
        "url": "https://developer.x-plane.com/sdk/XPLMGetFMODChannelGroup/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPLMGetFMODChannelGroup\"><a href=\"/sdk/XPLMGetFMODChannelGroup/\">XPLMGetFMODChannelGroup</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API FMOD_CHANNELGROUP* <a href=\"/sdk/XPLMGetFMODChannelGroup/\">XPLMGetFMODChannelGroup</a>(\n                         <a href=\"/sdk/XPLMAudioBus/\">XPLMAudioBus</a>         audioType);\n</code></pre><p>Get a reference to a particular channel group - that is, an output channel. See the table above for values.</p></div></div></article>",
      "code_examples": [
        {
          "char_count": 74,
          "code": "XPLM_API FMOD_CHANNELGROUP*XPLMGetFMODChannelGroup(XPLMAudioBusaudioType);",
          "context": "XPLMGetFMODChannelGroup",
          "id": "example_0",
          "language": "c",
          "line_count": 1,
          "type": "snippet"
        }
      ],
      "cross_references": [
        "XPLMAudioBus"
      ],
      "markdown": "### [XPLMGetFMODChannelGroup](/sdk/XPLMGetFMODChannelGroup/)\n\n```cpp\nXPLM_API FMOD_CHANNELGROUP* XPLMGetFMODChannelGroup(\n                         XPLMAudioBus         audioType);\n\n```\n\nGet a reference to a particular channel group - that is, an output channel. See\nthe table above for values.",
      "own_functions": [
        "XPLMGetFMODChannelGroup"
      ],
      "processing_timestamp": "2025-06-25T20:39:24.439934+00:00",
      "title": "XPLMGetFMODChannelGroup | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMGetFMODChannelGroup/"
    },
    "https://developer.x-plane.com/sdk/XPLMGetFMODStudio/": {
      "api_signatures": [
        {
          "description": "Get a handle to the FMOD Studio, allowing you to load/process whatever else you need. This also gives access to the underlying system via FMOD::Studio::System::getCoreSystem() / FMOD_Studio_System_GetCoreSystem() . When a separate output device is being used for the radio, this will always return the FMOD::Studio that is running the environment output, as before. If you want to specifically target the headset output device, you can obtain that FMOD::Studio by getting one of the radio-specific output channelgroups and using the getSystem() call on that.",
          "name": "XPLMGetFMODStudio",
          "parameters": [],
          "signature": "XPLM_API FMOD_STUDIO_SYSTEM*XPLMGetFMODStudio(void);"
        }
      ],
      "category": {
        "category": "XPLM_Sound",
        "module": "Xplm Sound",
        "url": "https://developer.x-plane.com/sdk/XPLMGetFMODStudio/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPLMGetFMODStudio\"><a href=\"/sdk/XPLMGetFMODStudio/\">XPLMGetFMODStudio</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API FMOD_STUDIO_SYSTEM* <a href=\"/sdk/XPLMGetFMODStudio/\">XPLMGetFMODStudio</a>(void);\n</code></pre><p>Get a handle to the FMOD Studio, allowing you to load/process whatever else you need. This also gives access to the underlying system via FMOD::Studio::System::getCoreSystem() / FMOD_Studio_System_GetCoreSystem() . When a separate output device is being used for the radio, this will always return the FMOD::Studio that is running the environment output, as before. If you want to specifically target the headset output device, you can obtain that FMOD::Studio by getting one of the radio-specific output channelgroups and using the getSystem() call on that.</p></div></div></article>",
      "code_examples": [
        {
          "char_count": 52,
          "code": "XPLM_API FMOD_STUDIO_SYSTEM*XPLMGetFMODStudio(void);",
          "context": "XPLMGetFMODStudio",
          "id": "example_0",
          "language": "c",
          "line_count": 1,
          "type": "snippet"
        }
      ],
      "cross_references": [],
      "markdown": "### [XPLMGetFMODStudio](/sdk/XPLMGetFMODStudio/)\n\n```cpp\nXPLM_API FMOD_STUDIO_SYSTEM* XPLMGetFMODStudio(void);\n\n```\n\nGet a handle to the FMOD Studio, allowing you to load/process whatever else you\nneed. This also gives access to the underlying system via\nFMOD::Studio::System::getCoreSystem() / FMOD_Studio_System_GetCoreSystem() .\nWhen a separate output device is being used for the radio, this will always\nreturn the FMOD::Studio that is running the environment output, as before. If\nyou want to specifically target the headset output device, you can obtain that\nFMOD::Studio by getting one of the radio-specific output channelgroups and using\nthe getSystem() call on that.",
      "own_functions": [
        "XPLMGetFMODStudio"
      ],
      "processing_timestamp": "2025-06-25T20:39:24.441934+00:00",
      "title": "XPLMGetFMODStudio | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMGetFMODStudio/"
    },
    "https://developer.x-plane.com/sdk/XPLMGetFMSEntryInfo/": {
      "api_signatures": [
        {
          "description": "This routine returns information about a given FMS entry. If the entry is an airport or navaid, a reference to a nav entry can be returned allowing you to find additional information (such as a frequency, ILS heading, name, etc.). Note that this reference can beXPLM_NAV_NOT_FOUNDuntil the information has been looked up asynchronously, so after flightplan changes, it might take up to a second for this field to become populated. The other information is available immediately. For a lat/lon entry, the lat/lon is returned by this routine but the navaid cannot be looked up (and the reference will beXPLM_NAV_NOT_FOUND). FMS name entry buffers should be at least 256 chars in length.",
          "name": "XPLMGetFMSEntryInfo",
          "parameters": [],
          "signature": "XPLM_API voidXPLMGetFMSEntryInfo(\n                         int                  inIndex,XPLMNavType*        outType,    /* Can be NULL */\n                         char *               outID,    /* Can be NULL */XPLMNavRef*         outRef,    /* Can be NULL */\n                         int *                outAltitude,    /* Can be NULL */\n                         float *              outLat,    /* Can be NULL */\n                         float *              outLon);    /* Can be NULL */"
        },
        {
          "name": "voidXPLMGetFMSEntryInfo",
          "signature": "XPLM_API voidXPLMGetFMSEntryInfo(\n                         int                  inIndex,XPLMNavType*        outType,    /* Can be NULL */\n                         char *               outID,    /* Can be NULL */XPLMNavRef*         outRef,    /* Can be NULL */\n                         int *                outAltitude,    /* Can be NULL */\n                         float *              outLat,    /* Can be NULL */\n                         float *              outLon);",
          "source": "code_block_extraction",
          "type": "function"
        }
      ],
      "category": {
        "category": "XPLM_Navigation",
        "module": "Xplm Navigation",
        "url": "https://developer.x-plane.com/sdk/XPLMGetFMSEntryInfo/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPLMGetFMSEntryInfo\"><a href=\"/sdk/XPLMGetFMSEntryInfo/\">XPLMGetFMSEntryInfo</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API void       <a href=\"/sdk/XPLMGetFMSEntryInfo/\">XPLMGetFMSEntryInfo</a>(\n                         int                  inIndex,\n                         <a href=\"/sdk/XPLMNavType/\">XPLMNavType</a> *        outType,    /* Can be NULL */\n                         char *               outID,    /* Can be NULL */\n                         <a href=\"/sdk/XPLMNavRef/\">XPLMNavRef</a> *         outRef,    /* Can be NULL */\n                         int *                outAltitude,    /* Can be NULL */\n                         float *              outLat,    /* Can be NULL */\n                         float *              outLon);    /* Can be NULL */\n</code></pre><p>This routine returns information about a given FMS entry. If the entry is an airport or navaid, a reference to a nav entry can be returned allowing you to find additional information (such as a frequency, ILS heading, name, etc.). Note that this reference can be<a href=\"/sdk/XPLM_NAV_NOT_FOUND/\">XPLM_NAV_NOT_FOUND</a>until the information has been looked up asynchronously, so after flightplan changes, it might take up to a second for this field to become populated. The other information is available immediately. For a lat/lon entry, the lat/lon is returned by this routine but the navaid cannot be looked up (and the reference will be<a href=\"/sdk/XPLM_NAV_NOT_FOUND/\">XPLM_NAV_NOT_FOUND</a>). FMS name entry buffers should be at least 256 chars in length.</p><p>WARNING: Due to a bug in X-Plane prior to 11.31, the navaid reference will not be set to<a href=\"/sdk/XPLM_NAV_NOT_FOUND/\">XPLM_NAV_NOT_FOUND</a>while no data is available, and instead just remain the value of the variable that you passed the pointer to. Therefore, always initialize the variable to<a href=\"/sdk/XPLM_NAV_NOT_FOUND/\">XPLM_NAV_NOT_FOUND</a>before passing the pointer to this function.</p></div></div></article>",
      "code_examples": [
        {
          "char_count": 490,
          "code": "XPLM_API voidXPLMGetFMSEntryInfo(\n                         int                  inIndex,XPLMNavType*        outType,    /* Can be NULL */\n                         char *               outID,    /* Can be NULL */XPLMNavRef*         outRef,    /* Can be NULL */\n                         int *                outAltitude,    /* Can be NULL */\n                         float *              outLat,    /* Can be NULL */\n                         float *              outLon);    /* Can be NULL */",
          "context": "XPLMGetFMSEntryInfo",
          "id": "example_0",
          "language": "c",
          "line_count": 6,
          "type": "snippet"
        }
      ],
      "cross_references": [
        "XPLMNavType"
      ],
      "markdown": "### [XPLMGetFMSEntryInfo](/sdk/XPLMGetFMSEntryInfo/)\n\n```cpp\nXPLM_API void       XPLMGetFMSEntryInfo(\n                         int                  inIndex,\n                         XPLMNavType *        outType,    /* Can be NULL */\n                         char *               outID,    /* Can be NULL */\n                         XPLMNavRef *         outRef,    /* Can be NULL */\n                         int *                outAltitude,    /* Can be NULL */\n                         float *              outLat,    /* Can be NULL */\n                         float *              outLon);    /* Can be NULL */\n\n```\n\nThis routine returns information about a given FMS entry. If the entry is an\nairport or navaid, a reference to a nav entry can be returned allowing you to\nfind additional information (such as a frequency, ILS heading, name, etc.). Note\nthat this reference can be[XPLM_NAV_NOT_FOUND](/sdk/XPLM_NAV_NOT_FOUND/)until\nthe information has been looked up asynchronously, so after flightplan changes,\nit might take up to a second for this field to become populated. The other\ninformation is available immediately. For a lat/lon entry, the lat/lon is\nreturned by this routine but the navaid cannot be looked up (and the reference\nwill be[XPLM_NAV_NOT_FOUND](/sdk/XPLM_NAV_NOT_FOUND/)). FMS name entry buffers\nshould be at least 256 chars in length.\n\nWARNING: Due to a bug in X-Plane prior to 11.31, the navaid reference will not\nbe set to[XPLM_NAV_NOT_FOUND](/sdk/XPLM_NAV_NOT_FOUND/)while no data is\navailable, and instead just remain the value of the variable that you passed the\npointer to. Therefore, always initialize the variable\nto[XPLM_NAV_NOT_FOUND](/sdk/XPLM_NAV_NOT_FOUND/)before passing the pointer to\nthis function.",
      "own_functions": [
        "XPLMGetFMSEntryInfo",
        "voidXPLMGetFMSEntryInfo"
      ],
      "processing_timestamp": "2025-06-25T20:39:23.973387+00:00",
      "title": "XPLMGetFMSEntryInfo | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMGetFMSEntryInfo/"
    },
    "https://developer.x-plane.com/sdk/XPLMGetFMSFlightPlanEntryInfo/": {
      "api_signatures": [
        {
          "description": "This routine returns information about a given FMS entry. If the entry is an airport or navaid, a reference to a nav entry can be returned allowing you to find additional information (such as a frequency, ILS heading, name, etc.). Note that this reference can beXPLM_NAV_NOT_FOUNDuntil the information has been looked up asynchronously, so after flightplan changes, it might take up to a second for this field to become populated. The other information is available immediately. For a lat/lon entry, the lat/lon is returned by this routine but the navaid cannot be looked up (and the reference will beXPLM_NAV_NOT_FOUND). FMS name entry buffers should be at least 256 chars in length.",
          "name": "XPLMGetFMSFlightPlanEntryInfo",
          "parameters": [],
          "signature": "XPLM_API voidXPLMGetFMSFlightPlanEntryInfo(XPLMNavFlightPlaninFlightPlan,\n                         int                  inIndex,XPLMNavType*        outType,    /* Can be NULL */\n                         char *               outID,    /* Can be NULL */XPLMNavRef*         outRef,    /* Can be NULL */\n                         int *                outAltitude,    /* Can be NULL */\n                         float *              outLat,    /* Can be NULL */\n                         float *              outLon);    /* Can be NULL */"
        },
        {
          "name": "voidXPLMGetFMSFlightPlanEntryInfo",
          "signature": "XPLM_API voidXPLMGetFMSFlightPlanEntryInfo(XPLMNavFlightPlaninFlightPlan,\n                         int                  inIndex,XPLMNavType*        outType,    /* Can be NULL */\n                         char *               outID,    /* Can be NULL */XPLMNavRef*         outRef,    /* Can be NULL */\n                         int *                outAltitude,    /* Can be NULL */\n                         float *              outLat,    /* Can be NULL */\n                         float *              outLon);",
          "source": "code_block_extraction",
          "type": "function"
        }
      ],
      "category": {
        "category": "XPLM_Navigation",
        "module": "Xplm Navigation",
        "url": "https://developer.x-plane.com/sdk/XPLMGetFMSFlightPlanEntryInfo/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"function XPLM410\"><h3 class=\"sdk-api-function\" id=\"XPLMGetFMSFlightPlanEntryInfo\"><a href=\"/sdk/XPLMGetFMSFlightPlanEntryInfo/\">XPLMGetFMSFlightPlanEntryInfo</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API void       <a href=\"/sdk/XPLMGetFMSFlightPlanEntryInfo/\">XPLMGetFMSFlightPlanEntryInfo</a>(\n                         <a href=\"/sdk/XPLMNavFlightPlan/\">XPLMNavFlightPlan</a>    inFlightPlan,\n                         int                  inIndex,\n                         <a href=\"/sdk/XPLMNavType/\">XPLMNavType</a> *        outType,    /* Can be NULL */\n                         char *               outID,    /* Can be NULL */\n                         <a href=\"/sdk/XPLMNavRef/\">XPLMNavRef</a> *         outRef,    /* Can be NULL */\n                         int *                outAltitude,    /* Can be NULL */\n                         float *              outLat,    /* Can be NULL */\n                         float *              outLon);    /* Can be NULL */\n</code></pre><p>This routine returns information about a given FMS entry. If the entry is an airport or navaid, a reference to a nav entry can be returned allowing you to find additional information (such as a frequency, ILS heading, name, etc.). Note that this reference can be<a href=\"/sdk/XPLM_NAV_NOT_FOUND/\">XPLM_NAV_NOT_FOUND</a>until the information has been looked up asynchronously, so after flightplan changes, it might take up to a second for this field to become populated. The other information is available immediately. For a lat/lon entry, the lat/lon is returned by this routine but the navaid cannot be looked up (and the reference will be<a href=\"/sdk/XPLM_NAV_NOT_FOUND/\">XPLM_NAV_NOT_FOUND</a>). FMS name entry buffers should be at least 256 chars in length.</p><p>WARNING: Due to a bug in X-Plane prior to 11.31, the navaid reference will not be set to<a href=\"/sdk/XPLM_NAV_NOT_FOUND/\">XPLM_NAV_NOT_FOUND</a>while no data is available, and instead just remain the value of the variable that you passed the pointer to. Therefore, always initialize the variable to<a href=\"/sdk/XPLM_NAV_NOT_FOUND/\">XPLM_NAV_NOT_FOUND</a>before passing the pointer to this function.</p></div></div></article>",
      "code_examples": [
        {
          "char_count": 530,
          "code": "XPLM_API voidXPLMGetFMSFlightPlanEntryInfo(XPLMNavFlightPlaninFlightPlan,\n                         int                  inIndex,XPLMNavType*        outType,    /* Can be NULL */\n                         char *               outID,    /* Can be NULL */XPLMNavRef*         outRef,    /* Can be NULL */\n                         int *                outAltitude,    /* Can be NULL */\n                         float *              outLat,    /* Can be NULL */\n                         float *              outLon);    /* Can be NULL */",
          "context": "XPLMGetFMSFlightPlanEntryInfo",
          "id": "example_0",
          "language": "c",
          "line_count": 6,
          "type": "snippet"
        }
      ],
      "cross_references": [
        "XPLMNavType",
        "XPLMNavFlightPlan"
      ],
      "markdown": "### [XPLMGetFMSFlightPlanEntryInfo](/sdk/XPLMGetFMSFlightPlanEntryInfo/)\n\n```cpp\nXPLM_API void       XPLMGetFMSFlightPlanEntryInfo(\n                         XPLMNavFlightPlan    inFlightPlan,\n                         int                  inIndex,\n                         XPLMNavType *        outType,    /* Can be NULL */\n                         char *               outID,    /* Can be NULL */\n                         XPLMNavRef *         outRef,    /* Can be NULL */\n                         int *                outAltitude,    /* Can be NULL */\n                         float *              outLat,    /* Can be NULL */\n                         float *              outLon);    /* Can be NULL */\n\n```\n\nThis routine returns information about a given FMS entry. If the entry is an\nairport or navaid, a reference to a nav entry can be returned allowing you to\nfind additional information (such as a frequency, ILS heading, name, etc.). Note\nthat this reference can be[XPLM_NAV_NOT_FOUND](/sdk/XPLM_NAV_NOT_FOUND/)until\nthe information has been looked up asynchronously, so after flightplan changes,\nit might take up to a second for this field to become populated. The other\ninformation is available immediately. For a lat/lon entry, the lat/lon is\nreturned by this routine but the navaid cannot be looked up (and the reference\nwill be[XPLM_NAV_NOT_FOUND](/sdk/XPLM_NAV_NOT_FOUND/)). FMS name entry buffers\nshould be at least 256 chars in length.\n\nWARNING: Due to a bug in X-Plane prior to 11.31, the navaid reference will not\nbe set to[XPLM_NAV_NOT_FOUND](/sdk/XPLM_NAV_NOT_FOUND/)while no data is\navailable, and instead just remain the value of the variable that you passed the\npointer to. Therefore, always initialize the variable\nto[XPLM_NAV_NOT_FOUND](/sdk/XPLM_NAV_NOT_FOUND/)before passing the pointer to\nthis function.",
      "own_functions": [
        "XPLMGetFMSFlightPlanEntryInfo",
        "voidXPLMGetFMSFlightPlanEntryInfo"
      ],
      "processing_timestamp": "2025-06-25T20:39:23.980391+00:00",
      "title": "XPLMGetFMSFlightPlanEntryInfo | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMGetFMSFlightPlanEntryInfo/"
    },
    "https://developer.x-plane.com/sdk/XPLMGetFirstNavAid/": {
      "api_signatures": [
        {
          "description": "This returns the very first navaid in the database. Use this to traverse the entire database. ReturnsXPLM_NAV_NOT_FOUNDif the nav database is empty.",
          "name": "XPLMGetFirstNavAid",
          "parameters": [],
          "signature": "XPLM_APIXPLMNavRefXPLMGetFirstNavAid(void);"
        }
      ],
      "category": {
        "category": "XPLM_Navigation",
        "module": "Xplm Navigation",
        "url": "https://developer.x-plane.com/sdk/XPLMGetFirstNavAid/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPLMGetFirstNavAid\"><a href=\"/sdk/XPLMGetFirstNavAid/\">XPLMGetFirstNavAid</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API <a href=\"/sdk/XPLMNavRef/\">XPLMNavRef</a> <a href=\"/sdk/XPLMGetFirstNavAid/\">XPLMGetFirstNavAid</a>(void);\n</code></pre><p>This returns the very first navaid in the database. Use this to traverse the entire database. Returns<a href=\"/sdk/XPLM_NAV_NOT_FOUND/\">XPLM_NAV_NOT_FOUND</a>if the nav database is empty.</p></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "### [XPLMGetFirstNavAid](/sdk/XPLMGetFirstNavAid/)\n\n```cpp\nXPLM_API XPLMNavRef XPLMGetFirstNavAid(void);\n\n```\n\nThis returns the very first navaid in the database. Use this to traverse the\nentire database. Returns[XPLM_NAV_NOT_FOUND](/sdk/XPLM_NAV_NOT_FOUND/)if the nav\ndatabase is empty.",
      "own_functions": [
        "XPLMGetFirstNavAid"
      ],
      "processing_timestamp": "2025-06-25T20:39:23.977389+00:00",
      "title": "XPLMGetFirstNavAid | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMGetFirstNavAid/"
    },
    "https://developer.x-plane.com/sdk/XPLMGetFontDimensions/": {
      "api_signatures": [
        {
          "description": "This routine returns the width and height of a character in a given font. It also tells you if the font only supports numeric digits. Pass NULL if you don’t need a given field. Note that for a proportional font the width will be an arbitrary, hopefully average width.",
          "name": "XPLMGetFontDimensions",
          "parameters": [],
          "signature": "XPLM_API voidXPLMGetFontDimensions(XPLMFontIDinFontID,\n                         int *                outCharWidth,    /* Can be NULL */\n                         int *                outCharHeight,    /* Can be NULL */\n                         int *                outDigitsOnly);    /* Can be NULL */"
        },
        {
          "name": "voidXPLMGetFontDimensions",
          "signature": "XPLM_API voidXPLMGetFontDimensions(XPLMFontIDinFontID,\n                         int *                outCharWidth,    /* Can be NULL */\n                         int *                outCharHeight,    /* Can be NULL */\n                         int *                outDigitsOnly);",
          "source": "code_block_extraction",
          "type": "function"
        }
      ],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/XPLMGetFontDimensions/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPLMGetFontDimensions\"><a href=\"/sdk/XPLMGetFontDimensions/\">XPLMGetFontDimensions</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API void       <a href=\"/sdk/XPLMGetFontDimensions/\">XPLMGetFontDimensions</a>(\n                         <a href=\"/sdk/XPLMFontID/\">XPLMFontID</a>           inFontID,\n                         int *                outCharWidth,    /* Can be NULL */\n                         int *                outCharHeight,    /* Can be NULL */\n                         int *                outDigitsOnly);    /* Can be NULL */\n</code></pre><p>This routine returns the width and height of a character in a given font. It also tells you if the font only supports numeric digits. Pass NULL if you don’t need a given field. Note that for a proportional font the width will be an arbitrary, hopefully average width.</p></div></div></article>",
      "code_examples": [
        {
          "char_count": 300,
          "code": "XPLM_API voidXPLMGetFontDimensions(XPLMFontIDinFontID,\n                         int *                outCharWidth,    /* Can be NULL */\n                         int *                outCharHeight,    /* Can be NULL */\n                         int *                outDigitsOnly);    /* Can be NULL */",
          "context": "XPLMGetFontDimensions",
          "id": "example_0",
          "language": "c",
          "line_count": 4,
          "type": "snippet"
        }
      ],
      "cross_references": [
        "XPLMFontID"
      ],
      "markdown": "### [XPLMGetFontDimensions](/sdk/XPLMGetFontDimensions/)\n\n```cpp\nXPLM_API void       XPLMGetFontDimensions(\n                         XPLMFontID           inFontID,\n                         int *                outCharWidth,    /* Can be NULL */\n                         int *                outCharHeight,    /* Can be NULL */\n                         int *                outDigitsOnly);    /* Can be NULL */\n\n```\n\nThis routine returns the width and height of a character in a given font. It\nalso tells you if the font only supports numeric digits. Pass NULL if you don’t\nneed a given field. Note that for a proportional font the width will be an\narbitrary, hopefully average width.",
      "own_functions": [
        "XPLMGetFontDimensions",
        "voidXPLMGetFontDimensions"
      ],
      "processing_timestamp": "2025-06-25T20:39:22.335240+00:00",
      "title": "XPLMGetFontDimensions | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMGetFontDimensions/"
    },
    "https://developer.x-plane.com/sdk/XPLMGetGPSDestination/": {
      "api_signatures": [
        {
          "description": "This routine returns the current GPS destination.",
          "name": "XPLMGetGPSDestination",
          "parameters": [],
          "signature": "XPLM_APIXPLMNavRefXPLMGetGPSDestination(void);"
        }
      ],
      "category": {
        "category": "XPLM_Navigation",
        "module": "Xplm Navigation",
        "url": "https://developer.x-plane.com/sdk/XPLMGetGPSDestination/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPLMGetGPSDestination\"><a href=\"/sdk/XPLMGetGPSDestination/\">XPLMGetGPSDestination</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API <a href=\"/sdk/XPLMNavRef/\">XPLMNavRef</a> <a href=\"/sdk/XPLMGetGPSDestination/\">XPLMGetGPSDestination</a>(void);\n</code></pre><p>This routine returns the current GPS destination.</p></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "### [XPLMGetGPSDestination](/sdk/XPLMGetGPSDestination/)\n\n```cpp\nXPLM_API XPLMNavRef XPLMGetGPSDestination(void);\n\n```\n\nThis routine returns the current GPS destination.",
      "own_functions": [
        "XPLMGetGPSDestination"
      ],
      "processing_timestamp": "2025-06-25T20:39:23.982389+00:00",
      "title": "XPLMGetGPSDestination | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMGetGPSDestination/"
    },
    "https://developer.x-plane.com/sdk/XPLMGetGPSDestinationType/": {
      "api_signatures": [
        {
          "description": "This routine returns the type of the currently selected GPS destination, one of fix, airport, VOR or NDB.",
          "name": "XPLMGetGPSDestinationType",
          "parameters": [],
          "signature": "XPLM_APIXPLMNavTypeXPLMGetGPSDestinationType(void);"
        }
      ],
      "category": {
        "category": "XPLM_Navigation",
        "module": "Xplm Navigation",
        "url": "https://developer.x-plane.com/sdk/XPLMGetGPSDestinationType/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPLMGetGPSDestinationType\"><a href=\"/sdk/XPLMGetGPSDestinationType/\">XPLMGetGPSDestinationType</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API <a href=\"/sdk/XPLMNavType/\">XPLMNavType</a> <a href=\"/sdk/XPLMGetGPSDestinationType/\">XPLMGetGPSDestinationType</a>(void);\n</code></pre><p>This routine returns the type of the currently selected GPS destination, one of fix, airport, VOR or NDB.</p></div></div></article>",
      "code_examples": [
        {
          "char_count": 51,
          "code": "XPLM_APIXPLMNavTypeXPLMGetGPSDestinationType(void);",
          "context": "XPLMGetGPSDestinationType",
          "id": "example_0",
          "language": "c",
          "line_count": 1,
          "type": "snippet"
        }
      ],
      "cross_references": [
        "XPLMGetGPSDestination",
        "XPLMNavType"
      ],
      "markdown": "### [XPLMGetGPSDestinationType](/sdk/XPLMGetGPSDestinationType/)\n\n```cpp\nXPLM_API XPLMNavType XPLMGetGPSDestinationType(void);\n\n```\n\nThis routine returns the type of the currently selected GPS destination, one of\nfix, airport, VOR or NDB.",
      "own_functions": [
        "XPLMGetGPSDestinationType"
      ],
      "processing_timestamp": "2025-06-25T20:39:23.984388+00:00",
      "title": "XPLMGetGPSDestinationType | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMGetGPSDestinationType/"
    },
    "https://developer.x-plane.com/sdk/XPLMGetHotKeyInfo/": {
      "api_signatures": [
        {
          "description": "Returns information about the hot key. Return NULL for any parameter you don’t want info about. The description should be at least 512 chars long.",
          "name": "XPLMGetHotKeyInfo",
          "parameters": [],
          "signature": "XPLM_API voidXPLMGetHotKeyInfo(XPLMHotKeyIDinHotKey,\n                         char *               outVirtualKey,    /* Can be NULL */XPLMKeyFlags*       outFlags,    /* Can be NULL */\n                         char *               outDescription,    /* Can be NULL */XPLMPluginID*       outPlugin);    /* Can be NULL */"
        },
        {
          "name": "voidXPLMGetHotKeyInfo",
          "signature": "XPLM_API voidXPLMGetHotKeyInfo(XPLMHotKeyIDinHotKey,\n                         char *               outVirtualKey,    /* Can be NULL */XPLMKeyFlags*       outFlags,    /* Can be NULL */\n                         char *               outDescription,    /* Can be NULL */XPLMPluginID*       outPlugin);",
          "source": "code_block_extraction",
          "type": "function"
        }
      ],
      "category": {
        "category": "XPLM_Utilities",
        "module": "Xplm Utilities",
        "url": "https://developer.x-plane.com/sdk/XPLMGetHotKeyInfo/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPLMGetHotKeyInfo\"><a href=\"/sdk/XPLMGetHotKeyInfo/\">XPLMGetHotKeyInfo</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API void       <a href=\"/sdk/XPLMGetHotKeyInfo/\">XPLMGetHotKeyInfo</a>(\n                         <a href=\"/sdk/XPLMHotKeyID/\">XPLMHotKeyID</a>         inHotKey,\n                         char *               outVirtualKey,    /* Can be NULL */\n                         <a href=\"/sdk/XPLMKeyFlags/\">XPLMKeyFlags</a> *       outFlags,    /* Can be NULL */\n                         char *               outDescription,    /* Can be NULL */\n                         <a href=\"/sdk/XPLMPluginID/\">XPLMPluginID</a> *       outPlugin);    /* Can be NULL */\n</code></pre><p>Returns information about the hot key. Return NULL for any parameter you don’t want info about. The description should be at least 512 chars long.</p></div></div></article>",
      "code_examples": [
        {
          "char_count": 319,
          "code": "XPLM_API voidXPLMGetHotKeyInfo(XPLMHotKeyIDinHotKey,\n                         char *               outVirtualKey,    /* Can be NULL */XPLMKeyFlags*       outFlags,    /* Can be NULL */\n                         char *               outDescription,    /* Can be NULL */XPLMPluginID*       outPlugin);    /* Can be NULL */",
          "context": "XPLMGetHotKeyInfo",
          "id": "example_0",
          "language": "c",
          "line_count": 3,
          "type": "snippet"
        }
      ],
      "cross_references": [
        "XPLMKeyFlags",
        "XPLMPlugin"
      ],
      "markdown": "### [XPLMGetHotKeyInfo](/sdk/XPLMGetHotKeyInfo/)\n\n```cpp\nXPLM_API void       XPLMGetHotKeyInfo(\n                         XPLMHotKeyID         inHotKey,\n                         char *               outVirtualKey,    /* Can be NULL */\n                         XPLMKeyFlags *       outFlags,    /* Can be NULL */\n                         char *               outDescription,    /* Can be NULL */\n                         XPLMPluginID *       outPlugin);    /* Can be NULL */\n\n```\n\nReturns information about the hot key. Return NULL for any parameter you don’t\nwant info about. The description should be at least 512 chars long.",
      "own_functions": [
        "XPLMGetHotKeyInfo",
        "voidXPLMGetHotKeyInfo"
      ],
      "processing_timestamp": "2025-06-25T20:39:24.501620+00:00",
      "title": "XPLMGetHotKeyInfo | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMGetHotKeyInfo/"
    },
    "https://developer.x-plane.com/sdk/XPLMGetLanguage/": {
      "api_signatures": [
        {
          "description": "This routine returns the langauge the sim is running in.",
          "name": "XPLMGetLanguage",
          "parameters": [],
          "signature": "XPLM_APIXPLMLanguageCodeXPLMGetLanguage(void);"
        }
      ],
      "category": {
        "category": "XPLM_Utilities",
        "module": "Xplm Utilities",
        "url": "https://developer.x-plane.com/sdk/XPLMGetLanguage/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPLMGetLanguage\"><a href=\"/sdk/XPLMGetLanguage/\">XPLMGetLanguage</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API <a href=\"/sdk/XPLMLanguageCode/\">XPLMLanguageCode</a> <a href=\"/sdk/XPLMGetLanguage/\">XPLMGetLanguage</a>(void);\n</code></pre><p>This routine returns the langauge the sim is running in.</p></div></div></article>",
      "code_examples": [],
      "cross_references": [
        "XPLMLanguageCode"
      ],
      "markdown": "### [XPLMGetLanguage](/sdk/XPLMGetLanguage/)\n\n```cpp\nXPLM_API XPLMLanguageCode XPLMGetLanguage(void);\n\n```\n\nThis routine returns the langauge the sim is running in.",
      "own_functions": [
        "XPLMGetLanguage"
      ],
      "processing_timestamp": "2025-06-25T20:39:24.506620+00:00",
      "title": "XPLMGetLanguage | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMGetLanguage/"
    },
    "https://developer.x-plane.com/sdk/XPLMGetMETARForAirport/": {
      "api_signatures": [
        {
          "description": "Get the last-downloaded METAR report for an airport by ICAO code. Note that the actual weather at that airport may have evolved significantly since the last downloaded METAR. outMETAR must point to a char buffer of at least 150 characters. This call is not intended to be used per-frame. This call does not return the current weather at the airport, and returns an empty string if the system is not in real-weather mode.",
          "name": "XPLMGetMETARForAirport",
          "parameters": [
            {
              "full_declaration": "const char *         airport_id",
              "name": "airport_id",
              "type": "const char *"
            },
            {
              "full_declaration": "XPLMFixedString150_t* outMETAR",
              "name": "outMETAR",
              "type": "XPLMFixedString150_t*"
            }
          ],
          "signature": "XPLM_API voidXPLMGetMETARForAirport(\n                         const char *         airport_id,XPLMFixedString150_t* outMETAR);"
        },
        {
          "name": "voidXPLMGetMETARForAirport",
          "signature": "XPLM_API voidXPLMGetMETARForAirport(\n                         const char *         airport_id,XPLMFixedString150_t* outMETAR);",
          "source": "code_block_extraction",
          "type": "function"
        }
      ],
      "category": {
        "category": "XPLM_Navigation",
        "module": "Xplm Navigation",
        "url": "https://developer.x-plane.com/sdk/XPLMGetMETARForAirport/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"function XPLM400\"><h3 class=\"sdk-api-function\" id=\"XPLMGetMETARForAirport\"><a href=\"/sdk/XPLMGetMETARForAirport/\">XPLMGetMETARForAirport</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API void       <a href=\"/sdk/XPLMGetMETARForAirport/\">XPLMGetMETARForAirport</a>(\n                         const char *         airport_id,\n                         <a href=\"/sdk/XPLMFixedString150_t/\">XPLMFixedString150_t</a> * outMETAR);\n</code></pre><p>Get the last-downloaded METAR report for an airport by ICAO code. Note that the actual weather at that airport may have evolved significantly since the last downloaded METAR. outMETAR must point to a char buffer of at least 150 characters. This call is not intended to be used per-frame. This call does not return the current weather at the airport, and returns an empty string if the system is not in real-weather mode.</p></div></div></article>",
      "code_examples": [
        {
          "char_count": 126,
          "code": "XPLM_API voidXPLMGetMETARForAirport(\n                         const char *         airport_id,XPLMFixedString150_t* outMETAR);",
          "context": "XPLMGetMETARForAirport",
          "id": "example_0",
          "language": "c",
          "line_count": 2,
          "type": "snippet"
        }
      ],
      "cross_references": [],
      "markdown": "### [XPLMGetMETARForAirport](/sdk/XPLMGetMETARForAirport/)\n\n```cpp\nXPLM_API void       XPLMGetMETARForAirport(\n                         const char *         airport_id,\n                         XPLMFixedString150_t * outMETAR);\n\n```\n\nGet the last-downloaded METAR report for an airport by ICAO code. Note that the\nactual weather at that airport may have evolved significantly since the last\ndownloaded METAR. outMETAR must point to a char buffer of at least 150\ncharacters. This call is not intended to be used per-frame. This call does not\nreturn the current weather at the airport, and returns an empty string if the\nsystem is not in real-weather mode.",
      "own_functions": [
        "XPLMGetMETARForAirport",
        "voidXPLMGetMETARForAirport"
      ],
      "processing_timestamp": "2025-06-25T20:39:23.989390+00:00",
      "title": "XPLMGetMETARForAirport | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMGetMETARForAirport/"
    },
    "https://developer.x-plane.com/sdk/XPLMGetMagneticVariation/": {
      "api_signatures": [
        {
          "description": "Returns X-Plane’s simulated magnetic variation (declination) at the indication latitude and longitude.",
          "name": "XPLMGetMagneticVariation",
          "parameters": [
            {
              "full_declaration": "double               latitude",
              "name": "latitude",
              "type": "double"
            },
            {
              "full_declaration": "double               longitude",
              "name": "longitude",
              "type": "double"
            }
          ],
          "signature": "XPLM_API floatXPLMGetMagneticVariation(\n                         double               latitude,\n                         double               longitude);"
        },
        {
          "name": "floatXPLMGetMagneticVariation",
          "signature": "XPLM_API floatXPLMGetMagneticVariation(\n                         double               latitude,\n                         double               longitude);",
          "source": "code_block_extraction",
          "type": "function"
        }
      ],
      "category": {
        "category": "XPLM_Navigation",
        "module": "Xplm Navigation",
        "url": "https://developer.x-plane.com/sdk/XPLMGetMagneticVariation/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPLMGetMagneticVariation\"><a href=\"/sdk/XPLMGetMagneticVariation/\">XPLMGetMagneticVariation</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API float      <a href=\"/sdk/XPLMGetMagneticVariation/\">XPLMGetMagneticVariation</a>(\n                         double               latitude,\n                         double               longitude);\n</code></pre><p>Returns X-Plane’s simulated magnetic variation (declination) at the indication latitude and longitude.</p></div></div></article>",
      "code_examples": [
        {
          "char_count": 153,
          "code": "XPLM_API floatXPLMGetMagneticVariation(\n                         double               latitude,\n                         double               longitude);",
          "context": "XPLMGetMagneticVariation",
          "id": "example_0",
          "language": "c",
          "line_count": 3,
          "type": "snippet"
        }
      ],
      "cross_references": [],
      "markdown": "### [XPLMGetMagneticVariation](/sdk/XPLMGetMagneticVariation/)\n\n```cpp\nXPLM_API float      XPLMGetMagneticVariation(\n                         double               latitude,\n                         double               longitude);\n\n```\n\nReturns X-Plane’s simulated magnetic variation (declination) at the indication\nlatitude and longitude.",
      "own_functions": [
        "XPLMGetMagneticVariation",
        "floatXPLMGetMagneticVariation"
      ],
      "processing_timestamp": "2025-06-25T20:39:23.985390+00:00",
      "title": "XPLMGetMagneticVariation | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMGetMagneticVariation/"
    },
    "https://developer.x-plane.com/sdk/XPLMGetMouseLocation/": {
      "api_signatures": [
        {
          "description": "Deprecated in XPLM300. Modern windows should useXPLMGetMouseLocationGlobal() instead.",
          "name": "XPLMGetMouseLocation",
          "parameters": [],
          "signature": "XPLM_API voidXPLMGetMouseLocation(\n                         int *                outX,    /* Can be NULL */\n                         int *                outY);    /* Can be NULL */"
        },
        {
          "name": "voidXPLMGetMouseLocation",
          "signature": "XPLM_API voidXPLMGetMouseLocation(\n                         int *                outX,    /* Can be NULL */\n                         int *                outY);",
          "source": "code_block_extraction",
          "type": "function"
        }
      ],
      "category": {
        "category": "XPLM_Utilities",
        "module": "Xplm Utilities",
        "url": "https://developer.x-plane.com/sdk/XPLMGetMouseLocation/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPLMGetMouseLocation\"><a href=\"/sdk/XPLMGetMouseLocation/\">XPLMGetMouseLocation</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API void       <a href=\"/sdk/XPLMGetMouseLocation/\">XPLMGetMouseLocation</a>(\n                         int *                outX,    /* Can be NULL */\n                         int *                outY);    /* Can be NULL */\n</code></pre><p>Deprecated in XPLM300. Modern windows should use<a href=\"/sdk/XPLMGetMouseLocationGlobal/\">XPLMGetMouseLocationGlobal</a>() instead.</p><p>This routine returns the current mouse location in pixels relative to the main X-Plane window. The bottom left corner of the main window is (0, 0). Pass NULL to not receive info about either parameter.</p><p>Because this function gives the mouse position relative to the main X-Plane window (rather than in global bounds), this function should only be used by legacy windows. Modern windows should instead get the mouse position in global desktop coordinates using<a href=\"/sdk/XPLMGetMouseLocationGlobal/\">XPLMGetMouseLocationGlobal</a>().</p><p>Note that unlike<a href=\"/sdk/XPLMGetMouseLocationGlobal/\">XPLMGetMouseLocationGlobal</a>(), if the mouse goes outside the user’s main monitor (for instance, to a pop out window or a secondary monitor), this function will not reflect it.</p></div></div></article>",
      "code_examples": [
        {
          "char_count": 181,
          "code": "XPLM_API voidXPLMGetMouseLocation(\n                         int *                outX,    /* Can be NULL */\n                         int *                outY);    /* Can be NULL */",
          "context": "XPLMGetMouseLocation",
          "id": "example_0",
          "language": "c",
          "line_count": 3,
          "type": "snippet"
        }
      ],
      "cross_references": [
        "XPLMGetMouseLocationGlobal"
      ],
      "markdown": "### [XPLMGetMouseLocation](/sdk/XPLMGetMouseLocation/)\n\n```cpp\nXPLM_API void       XPLMGetMouseLocation(\n                         int *                outX,    /* Can be NULL */\n                         int *                outY);    /* Can be NULL */\n\n```\n\nDeprecated in XPLM300. Modern windows should\nuse[XPLMGetMouseLocationGlobal](/sdk/XPLMGetMouseLocationGlobal/)() instead.\n\nThis routine returns the current mouse location in pixels relative to the main\nX-Plane window. The bottom left corner of the main window is (0, 0). Pass NULL\nto not receive info about either parameter.\n\nBecause this function gives the mouse position relative to the main X-Plane\nwindow (rather than in global bounds), this function should only be used by\nlegacy windows. Modern windows should instead get the mouse position in global\ndesktop coordinates\nusing[XPLMGetMouseLocationGlobal](/sdk/XPLMGetMouseLocationGlobal/)().\n\nNote that\nunlike[XPLMGetMouseLocationGlobal](/sdk/XPLMGetMouseLocationGlobal/)(), if the\nmouse goes outside the user’s main monitor (for instance, to a pop out window or\na secondary monitor), this function will not reflect it.",
      "own_functions": [
        "XPLMGetMouseLocation",
        "voidXPLMGetMouseLocation"
      ],
      "processing_timestamp": "2025-06-25T20:39:24.505619+00:00",
      "title": "XPLMGetMouseLocation | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMGetMouseLocation/"
    },
    "https://developer.x-plane.com/sdk/XPLMGetMouseLocationGlobal/": {
      "api_signatures": [
        {
          "description": "Returns the current mouse location in global desktop boxels. UnlikeXPLMGetMouseLocation(), the bottom left of the main X-Plane window is not guaranteed to be (0, 0)—instead, the origin is the lower left of the entire global desktop space. In addition, this routine gives the real mouse location when the mouse goes to X-Plane windows other than the primary display. Thus, it can be used with both pop-out windows and secondary monitors.",
          "name": "XPLMGetMouseLocationGlobal",
          "parameters": [],
          "signature": "XPLM_API voidXPLMGetMouseLocationGlobal(\n                         int *                outX,    /* Can be NULL */\n                         int *                outY);    /* Can be NULL */"
        },
        {
          "name": "voidXPLMGetMouseLocationGlobal",
          "signature": "XPLM_API voidXPLMGetMouseLocationGlobal(\n                         int *                outX,    /* Can be NULL */\n                         int *                outY);",
          "source": "code_block_extraction",
          "type": "function"
        }
      ],
      "category": {
        "category": "XPLM_Graphics",
        "module": "Xplm Graphics",
        "url": "https://developer.x-plane.com/sdk/XPLMGetMouseLocationGlobal/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"function XPLM300\"><h3 class=\"sdk-api-function\" id=\"XPLMGetMouseLocationGlobal\"><a href=\"/sdk/XPLMGetMouseLocationGlobal/\">XPLMGetMouseLocationGlobal</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API void       <a href=\"/sdk/XPLMGetMouseLocationGlobal/\">XPLMGetMouseLocationGlobal</a>(\n                         int *                outX,    /* Can be NULL */\n                         int *                outY);    /* Can be NULL */\n</code></pre><p>Returns the current mouse location in global desktop boxels. Unlike<a href=\"/sdk/XPLMGetMouseLocation/\">XPLMGetMouseLocation</a>(), the bottom left of the main X-Plane window is not guaranteed to be (0, 0)—instead, the origin is the lower left of the entire global desktop space. In addition, this routine gives the real mouse location when the mouse goes to X-Plane windows other than the primary display. Thus, it can be used with both pop-out windows and secondary monitors.</p><p>This is the mouse location function to use with modern windows (i.e., those created by<a href=\"/sdk/XPLMCreateWindowEx/\">XPLMCreateWindowEx</a>()).</p><p>Pass NULL to not receive info about either parameter.</p></div></div></article>",
      "code_examples": [
        {
          "char_count": 187,
          "code": "XPLM_API voidXPLMGetMouseLocationGlobal(\n                         int *                outX,    /* Can be NULL */\n                         int *                outY);    /* Can be NULL */",
          "context": "XPLMGetMouseLocationGlobal",
          "id": "example_0",
          "language": "c",
          "line_count": 3,
          "type": "snippet"
        }
      ],
      "cross_references": [
        "XPLMCreateWindowEx",
        "XPLMGetMouseLocation",
        "XPLMCreateWindow"
      ],
      "markdown": "### [XPLMGetMouseLocationGlobal](/sdk/XPLMGetMouseLocationGlobal/)\n\n```cpp\nXPLM_API void       XPLMGetMouseLocationGlobal(\n                         int *                outX,    /* Can be NULL */\n                         int *                outY);    /* Can be NULL */\n\n```\n\nReturns the current mouse location in global desktop boxels.\nUnlike[XPLMGetMouseLocation](/sdk/XPLMGetMouseLocation/)(), the bottom left of\nthe main X-Plane window is not guaranteed to be (0, 0)—instead, the origin is\nthe lower left of the entire global desktop space. In addition, this routine\ngives the real mouse location when the mouse goes to X-Plane windows other than\nthe primary display. Thus, it can be used with both pop-out windows and\nsecondary monitors.\n\nThis is the mouse location function to use with modern windows (i.e., those\ncreated by[XPLMCreateWindowEx](/sdk/XPLMCreateWindowEx/)()).\n\nPass NULL to not receive info about either parameter.",
      "own_functions": [
        "XPLMGetMouseLocationGlobal",
        "voidXPLMGetMouseLocationGlobal"
      ],
      "processing_timestamp": "2025-06-25T20:39:23.668170+00:00",
      "title": "XPLMGetMouseLocationGlobal | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMGetMouseLocationGlobal/"
    },
    "https://developer.x-plane.com/sdk/XPLMGetMyID/": {
      "api_signatures": [
        {
          "description": "This routine returns the plugin ID of the calling plug-in. Call this to get your own ID.",
          "name": "XPLMGetMyID",
          "parameters": [],
          "signature": "XPLM_APIXPLMPluginIDXPLMGetMyID(void);"
        }
      ],
      "category": {
        "category": "XPLM_Utilities",
        "module": "Xplm Utilities",
        "url": "https://developer.x-plane.com/sdk/XPLMGetMyID/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPLMGetMyID\"><a href=\"/sdk/XPLMGetMyID/\">XPLMGetMyID</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API <a href=\"/sdk/XPLMPluginID/\">XPLMPluginID</a> <a href=\"/sdk/XPLMGetMyID/\">XPLMGetMyID</a>(void);\n</code></pre><p>This routine returns the plugin ID of the calling plug-in. Call this to get your own ID.</p></div></div></article>",
      "code_examples": [],
      "cross_references": [
        "XPLMPlugin"
      ],
      "markdown": "### [XPLMGetMyID](/sdk/XPLMGetMyID/)\n\n```cpp\nXPLM_API XPLMPluginID XPLMGetMyID(void);\n\n```\n\nThis routine returns the plugin ID of the calling plug-in. Call this to get your\nown ID.",
      "own_functions": [
        "XPLMGetMyID"
      ],
      "processing_timestamp": "2025-06-25T20:39:24.508621+00:00",
      "title": "XPLMGetMyID | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMGetMyID/"
    },
    "https://developer.x-plane.com/sdk/XPLMGetNavAidInfo/": {
      "api_signatures": [
        {
          "description": "This routine returns information about a navaid. Any non-null field is filled out with information if it is available.",
          "name": "XPLMGetNavAidInfo",
          "parameters": [],
          "signature": "XPLM_API voidXPLMGetNavAidInfo(XPLMNavRefinRef,XPLMNavType*        outType,    /* Can be NULL */\n                         float *              outLatitude,    /* Can be NULL */\n                         float *              outLongitude,    /* Can be NULL */\n                         float *              outHeight,    /* Can be NULL */\n                         int *                outFrequency,    /* Can be NULL */\n                         float *              outHeading,    /* Can be NULL */\n                         char *               outID,    /* Can be NULL */\n                         char *               outName,    /* Can be NULL */\n                         char *               outReg);    /* Can be NULL */"
        },
        {
          "name": "voidXPLMGetNavAidInfo",
          "signature": "XPLM_API voidXPLMGetNavAidInfo(XPLMNavRefinRef,XPLMNavType*        outType,    /* Can be NULL */\n                         float *              outLatitude,    /* Can be NULL */\n                         float *              outLongitude,    /* Can be NULL */\n                         float *              outHeight,    /* Can be NULL */\n                         int *                outFrequency,    /* Can be NULL */\n                         float *              outHeading,    /* Can be NULL */\n                         char *               outID,    /* Can be NULL */\n                         char *               outName,    /* Can be NULL */\n                         char *               outReg);",
          "source": "code_block_extraction",
          "type": "function"
        }
      ],
      "category": {
        "category": "XPLM_Navigation",
        "module": "Xplm Navigation",
        "url": "https://developer.x-plane.com/sdk/XPLMGetNavAidInfo/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPLMGetNavAidInfo\"><a href=\"/sdk/XPLMGetNavAidInfo/\">XPLMGetNavAidInfo</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API void       <a href=\"/sdk/XPLMGetNavAidInfo/\">XPLMGetNavAidInfo</a>(\n                         <a href=\"/sdk/XPLMNavRef/\">XPLMNavRef</a>           inRef,\n                         <a href=\"/sdk/XPLMNavType/\">XPLMNavType</a> *        outType,    /* Can be NULL */\n                         float *              outLatitude,    /* Can be NULL */\n                         float *              outLongitude,    /* Can be NULL */\n                         float *              outHeight,    /* Can be NULL */\n                         int *                outFrequency,    /* Can be NULL */\n                         float *              outHeading,    /* Can be NULL */\n                         char *               outID,    /* Can be NULL */\n                         char *               outName,    /* Can be NULL */\n                         char *               outReg);    /* Can be NULL */\n</code></pre><p>This routine returns information about a navaid. Any non-null field is filled out with information if it is available.</p><p>Frequencies are in the nav.dat convention as described in the X-Plane nav database FAQ: NDB frequencies are exact, all others are multiplied by 100.</p><p>The buffer for IDs should be at least 6 chars and the buffer for names should be at least 41 chars, but since these values are likely to go up, I recommend passing at least 32 chars for IDs and 256 chars for names when possible.</p><p>The outReg parameter tells if the navaid is within the local “region” of loaded DSFs. (This information may not be particularly useful to plugins.) The parameter is a single byte value 1 for true or 0 for false, not a C string.</p></div></div></article>",
      "code_examples": [
        {
          "char_count": 721,
          "code": "XPLM_API voidXPLMGetNavAidInfo(XPLMNavRefinRef,XPLMNavType*        outType,    /* Can be NULL */\n                         float *              outLatitude,    /* Can be NULL */\n                         float *              outLongitude,    /* Can be NULL */\n                         float *              outHeight,    /* Can be NULL */\n                         int *                outFrequency,    /* Can be NULL */\n                         float *              outHeading,    /* Can be NULL */\n                         char *               outID,    /* Can be NULL */\n                         char *               outName,    /* Can be NULL */\n                         char *               outReg);    /* Can be NULL */",
          "context": "XPLMGetNavAidInfo",
          "id": "example_0",
          "language": "c",
          "line_count": 9,
          "type": "snippet"
        }
      ],
      "cross_references": [
        "XPLMNavType"
      ],
      "markdown": "### [XPLMGetNavAidInfo](/sdk/XPLMGetNavAidInfo/)\n\n```cpp\nXPLM_API void       XPLMGetNavAidInfo(\n                         XPLMNavRef           inRef,\n                         XPLMNavType *        outType,    /* Can be NULL */\n                         float *              outLatitude,    /* Can be NULL */\n                         float *              outLongitude,    /* Can be NULL */\n                         float *              outHeight,    /* Can be NULL */\n                         int *                outFrequency,    /* Can be NULL */\n                         float *              outHeading,    /* Can be NULL */\n                         char *               outID,    /* Can be NULL */\n                         char *               outName,    /* Can be NULL */\n                         char *               outReg);    /* Can be NULL */\n\n```\n\nThis routine returns information about a navaid. Any non-null field is filled\nout with information if it is available.\n\nFrequencies are in the nav.dat convention as described in the X-Plane nav\ndatabase FAQ: NDB frequencies are exact, all others are multiplied by 100.\n\nThe buffer for IDs should be at least 6 chars and the buffer for names should be\nat least 41 chars, but since these values are likely to go up, I recommend\npassing at least 32 chars for IDs and 256 chars for names when possible.\n\nThe outReg parameter tells if the navaid is within the local “region” of loaded\nDSFs. (This information may not be particularly useful to plugins.) The\nparameter is a single byte value 1 for true or 0 for false, not a C string.",
      "own_functions": [
        "XPLMGetNavAidInfo",
        "voidXPLMGetNavAidInfo"
      ],
      "processing_timestamp": "2025-06-25T20:39:23.988389+00:00",
      "title": "XPLMGetNavAidInfo | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMGetNavAidInfo/"
    },
    "https://developer.x-plane.com/sdk/XPLMGetNextNavAid/": {
      "api_signatures": [
        {
          "description": "Given a valid navaid ref, this routine returns the next navaid. It returnsXPLM_NAV_NOT_FOUNDif the navaid passed in was invalid or if the navaid passed in was the last one in the database. Use this routine to iterate across all like-typed navaids or the entire database.",
          "name": "XPLMGetNextNavAid",
          "parameters": [],
          "signature": "XPLM_APIXPLMNavRefXPLMGetNextNavAid(XPLMNavRefinNavAidRef);"
        }
      ],
      "category": {
        "category": "XPLM_Navigation",
        "module": "Xplm Navigation",
        "url": "https://developer.x-plane.com/sdk/XPLMGetNextNavAid/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPLMGetNextNavAid\"><a href=\"/sdk/XPLMGetNextNavAid/\">XPLMGetNextNavAid</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API <a href=\"/sdk/XPLMNavRef/\">XPLMNavRef</a> <a href=\"/sdk/XPLMGetNextNavAid/\">XPLMGetNextNavAid</a>(\n                         <a href=\"/sdk/XPLMNavRef/\">XPLMNavRef</a>           inNavAidRef);\n</code></pre><p>Given a valid navaid ref, this routine returns the next navaid. It returns<a href=\"/sdk/XPLM_NAV_NOT_FOUND/\">XPLM_NAV_NOT_FOUND</a>if the navaid passed in was invalid or if the navaid passed in was the last one in the database. Use this routine to iterate across all like-typed navaids or the entire database.</p></div></div></article>",
      "code_examples": [
        {
          "char_count": 59,
          "code": "XPLM_APIXPLMNavRefXPLMGetNextNavAid(XPLMNavRefinNavAidRef);",
          "context": "XPLMGetNextNavAid",
          "id": "example_0",
          "language": "c",
          "line_count": 1,
          "type": "snippet"
        }
      ],
      "cross_references": [],
      "markdown": "### [XPLMGetNextNavAid](/sdk/XPLMGetNextNavAid/)\n\n```cpp\nXPLM_API XPLMNavRef XPLMGetNextNavAid(\n                         XPLMNavRef           inNavAidRef);\n\n```\n\nGiven a valid navaid ref, this routine returns the next navaid. It\nreturns[XPLM_NAV_NOT_FOUND](/sdk/XPLM_NAV_NOT_FOUND/)if the navaid passed in was\ninvalid or if the navaid passed in was the last one in the database. Use this\nroutine to iterate across all like-typed navaids or the entire database.",
      "own_functions": [
        "XPLMGetNextNavAid"
      ],
      "processing_timestamp": "2025-06-25T20:39:23.991390+00:00",
      "title": "XPLMGetNextNavAid | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMGetNextNavAid/"
    },
    "https://developer.x-plane.com/sdk/XPLMGetNthAircraftModel/": {
      "api_signatures": [
        {
          "description": "This function returns the aircraft model for the Nth aircraft. Indices are zero based, with zero being the user’s aircraft. The file name should be at least 256 chars in length; the path should be at least 512 chars in length.",
          "name": "XPLMGetNthAircraftModel",
          "parameters": [
            {
              "full_declaration": "int                  inIndex",
              "name": "inIndex",
              "type": "int"
            },
            {
              "full_declaration": "char *               outFileName",
              "name": "outFileName",
              "type": "char *"
            },
            {
              "full_declaration": "char *               outPath",
              "name": "outPath",
              "type": "char *"
            }
          ],
          "signature": "XPLM_API voidXPLMGetNthAircraftModel(\n                         int                  inIndex,\n                         char *               outFileName,\n                         char *               outPath);"
        },
        {
          "name": "voidXPLMGetNthAircraftModel",
          "signature": "XPLM_API voidXPLMGetNthAircraftModel(\n                         int                  inIndex,\n                         char *               outFileName,\n                         char *               outPath);",
          "source": "code_block_extraction",
          "type": "function"
        }
      ],
      "category": {
        "category": "XPLM_Instance",
        "module": "Xplm Instance",
        "url": "https://developer.x-plane.com/sdk/XPLMGetNthAircraftModel/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPLMGetNthAircraftModel\"><a href=\"/sdk/XPLMGetNthAircraftModel/\">XPLMGetNthAircraftModel</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API void       <a href=\"/sdk/XPLMGetNthAircraftModel/\">XPLMGetNthAircraftModel</a>(\n                         int                  inIndex,\n                         char *               outFileName,\n                         char *               outPath);\n</code></pre><p>This function returns the aircraft model for the Nth aircraft. Indices are zero based, with zero being the user’s aircraft. The file name should be at least 256 chars in length; the path should be at least 512 chars in length.</p></div></div></article>",
      "code_examples": [
        {
          "char_count": 207,
          "code": "XPLM_API voidXPLMGetNthAircraftModel(\n                         int                  inIndex,\n                         char *               outFileName,\n                         char *               outPath);",
          "context": "XPLMGetNthAircraftModel",
          "id": "example_0",
          "language": "c",
          "line_count": 4,
          "type": "snippet"
        }
      ],
      "cross_references": [],
      "markdown": "### [XPLMGetNthAircraftModel](/sdk/XPLMGetNthAircraftModel/)\n\n```cpp\nXPLM_API void       XPLMGetNthAircraftModel(\n                         int                  inIndex,\n                         char *               outFileName,\n                         char *               outPath);\n\n```\n\nThis function returns the aircraft model for the Nth aircraft. Indices are zero\nbased, with zero being the user’s aircraft. The file name should be at least 256\nchars in length; the path should be at least 512 chars in length.",
      "own_functions": [
        "XPLMGetNthAircraftModel",
        "voidXPLMGetNthAircraftModel"
      ],
      "processing_timestamp": "2025-06-25T20:39:23.720347+00:00",
      "title": "XPLMGetNthAircraftModel | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMGetNthAircraftModel/"
    },
    "https://developer.x-plane.com/sdk/XPLMGetNthHotKey/": {
      "api_signatures": [
        {
          "description": "Returns a hot key by index, for iteration on all hot keys.",
          "name": "XPLMGetNthHotKey",
          "parameters": [
            {
              "full_declaration": "int                  inIndex",
              "name": "inIndex",
              "type": "int"
            }
          ],
          "signature": "XPLM_APIXPLMHotKeyIDXPLMGetNthHotKey(\n                         int                  inIndex);"
        }
      ],
      "category": {
        "category": "XPLM_Utilities",
        "module": "Xplm Utilities",
        "url": "https://developer.x-plane.com/sdk/XPLMGetNthHotKey/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPLMGetNthHotKey\"><a href=\"/sdk/XPLMGetNthHotKey/\">XPLMGetNthHotKey</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API <a href=\"/sdk/XPLMHotKeyID/\">XPLMHotKeyID</a> <a href=\"/sdk/XPLMGetNthHotKey/\">XPLMGetNthHotKey</a>(\n                         int                  inIndex);\n</code></pre><p>Returns a hot key by index, for iteration on all hot keys.</p></div></div></article>",
      "code_examples": [
        {
          "char_count": 93,
          "code": "XPLM_APIXPLMHotKeyIDXPLMGetNthHotKey(\n                         int                  inIndex);",
          "context": "XPLMGetNthHotKey",
          "id": "example_0",
          "language": "cpp",
          "line_count": 2,
          "type": "snippet"
        }
      ],
      "cross_references": [],
      "markdown": "### [XPLMGetNthHotKey](/sdk/XPLMGetNthHotKey/)\n\n```cpp\nXPLM_API XPLMHotKeyID XPLMGetNthHotKey(\n                         int                  inIndex);\n\n```\n\nReturns a hot key by index, for iteration on all hot keys.",
      "own_functions": [
        "XPLMGetNthHotKey"
      ],
      "processing_timestamp": "2025-06-25T20:39:24.512621+00:00",
      "title": "XPLMGetNthHotKey | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMGetNthHotKey/"
    },
    "https://developer.x-plane.com/sdk/XPLMGetNthPlugin/": {
      "api_signatures": [
        {
          "description": "This routine returns the ID of a plug-in by index. Index is 0 based from 0 toXPLMCountPlugins-1, inclusive. Plugins may be returned in any arbitrary order.",
          "name": "XPLMGetNthPlugin",
          "parameters": [
            {
              "full_declaration": "int                  inIndex",
              "name": "inIndex",
              "type": "int"
            }
          ],
          "signature": "XPLM_APIXPLMPluginIDXPLMGetNthPlugin(\n                         int                  inIndex);"
        }
      ],
      "category": {
        "category": "XPLM_Plugin",
        "module": "Xplm Plugin",
        "url": "https://developer.x-plane.com/sdk/XPLMGetNthPlugin/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPLMGetNthPlugin\"><a href=\"/sdk/XPLMGetNthPlugin/\">XPLMGetNthPlugin</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API <a href=\"/sdk/XPLMPluginID/\">XPLMPluginID</a> <a href=\"/sdk/XPLMGetNthPlugin/\">XPLMGetNthPlugin</a>(\n                         int                  inIndex);\n</code></pre><p>This routine returns the ID of a plug-in by index. Index is 0 based from 0 to<a href=\"/sdk/XPLMCountPlugins/\">XPLMCountPlugins</a>-1, inclusive. Plugins may be returned in any arbitrary order.</p></div></div></article>",
      "code_examples": [
        {
          "char_count": 93,
          "code": "XPLM_APIXPLMPluginIDXPLMGetNthPlugin(\n                         int                  inIndex);",
          "context": "XPLMGetNthPlugin",
          "id": "example_0",
          "language": "c",
          "line_count": 2,
          "type": "snippet"
        }
      ],
      "cross_references": [
        "XPLMPlugin",
        "XPLMCountPlugins"
      ],
      "markdown": "### [XPLMGetNthPlugin](/sdk/XPLMGetNthPlugin/)\n\n```cpp\nXPLM_API XPLMPluginID XPLMGetNthPlugin(\n                         int                  inIndex);\n\n```\n\nThis routine returns the ID of a plug-in by index. Index is 0 based from 0\nto[XPLMCountPlugins](/sdk/XPLMCountPlugins/)-1, inclusive. Plugins may be\nreturned in any arbitrary order.",
      "own_functions": [
        "XPLMGetNthPlugin"
      ],
      "processing_timestamp": "2025-06-25T20:39:24.201262+00:00",
      "title": "XPLMGetNthPlugin | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMGetNthPlugin/"
    },
    "https://developer.x-plane.com/sdk/XPLMGetPluginInfo/": {
      "api_signatures": [
        {
          "description": "This routine returns information about a plug-in. Each parameter should be a pointer to a buffer of at least 256 characters, or NULL to not receive the information.",
          "name": "XPLMGetPluginInfo",
          "parameters": [],
          "signature": "XPLM_API voidXPLMGetPluginInfo(XPLMPluginIDinPlugin,\n                         char *               outName,    /* Can be NULL */\n                         char *               outFilePath,    /* Can be NULL */\n                         char *               outSignature,    /* Can be NULL */\n                         char *               outDescription);    /* Can be NULL */"
        },
        {
          "name": "voidXPLMGetPluginInfo",
          "signature": "XPLM_API voidXPLMGetPluginInfo(XPLMPluginIDinPlugin,\n                         char *               outName,    /* Can be NULL */\n                         char *               outFilePath,    /* Can be NULL */\n                         char *               outSignature,    /* Can be NULL */\n                         char *               outDescription);",
          "source": "code_block_extraction",
          "type": "function"
        }
      ],
      "category": {
        "category": "XPLM_Plugin",
        "module": "Xplm Plugin",
        "url": "https://developer.x-plane.com/sdk/XPLMGetPluginInfo/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPLMGetPluginInfo\"><a href=\"/sdk/XPLMGetPluginInfo/\">XPLMGetPluginInfo</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API void       <a href=\"/sdk/XPLMGetPluginInfo/\">XPLMGetPluginInfo</a>(\n                         <a href=\"/sdk/XPLMPluginID/\">XPLMPluginID</a>         inPlugin,\n                         char *               outName,    /* Can be NULL */\n                         char *               outFilePath,    /* Can be NULL */\n                         char *               outSignature,    /* Can be NULL */\n                         char *               outDescription);    /* Can be NULL */\n</code></pre><p>This routine returns information about a plug-in. Each parameter should be a pointer to a buffer of at least 256 characters, or NULL to not receive the information.</p><p>outName - the human-readable name of the plug-in. outFilePath - the absolute file path to the file that contains this plug-in. outSignature - a unique string that identifies this plug-in. outDescription - a human-readable description of this plug-in.</p></div></div></article>",
      "code_examples": [
        {
          "char_count": 373,
          "code": "XPLM_API voidXPLMGetPluginInfo(XPLMPluginIDinPlugin,\n                         char *               outName,    /* Can be NULL */\n                         char *               outFilePath,    /* Can be NULL */\n                         char *               outSignature,    /* Can be NULL */\n                         char *               outDescription);    /* Can be NULL */",
          "context": "XPLMGetPluginInfo",
          "id": "example_0",
          "language": "c",
          "line_count": 5,
          "type": "snippet"
        }
      ],
      "cross_references": [
        "XPLMPlugin"
      ],
      "markdown": "### [XPLMGetPluginInfo](/sdk/XPLMGetPluginInfo/)\n\n```cpp\nXPLM_API void       XPLMGetPluginInfo(\n                         XPLMPluginID         inPlugin,\n                         char *               outName,    /* Can be NULL */\n                         char *               outFilePath,    /* Can be NULL */\n                         char *               outSignature,    /* Can be NULL */\n                         char *               outDescription);    /* Can be NULL */\n\n```\n\nThis routine returns information about a plug-in. Each parameter should be a\npointer to a buffer of at least 256 characters, or NULL to not receive the\ninformation.\n\noutName - the human-readable name of the plug-in. outFilePath - the absolute\nfile path to the file that contains this plug-in. outSignature - a unique string\nthat identifies this plug-in. outDescription - a human-readable description of\nthis plug-in.",
      "own_functions": [
        "XPLMGetPluginInfo",
        "voidXPLMGetPluginInfo"
      ],
      "processing_timestamp": "2025-06-25T20:39:24.207261+00:00",
      "title": "XPLMGetPluginInfo | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMGetPluginInfo/"
    },
    "https://developer.x-plane.com/sdk/XPLMGetPrefsPath/": {
      "api_signatures": [
        {
          "description": "This routine returns a full path to a file that is within X-Plane’s preferences directory. (You should remove the file name back to the last directory separator to get the preferences directory usingXPLMExtractFileAndPath).",
          "name": "XPLMGetPrefsPath",
          "parameters": [
            {
              "full_declaration": "char *               outPrefsPath",
              "name": "outPrefsPath",
              "type": "char *"
            }
          ],
          "signature": "XPLM_API voidXPLMGetPrefsPath(\n                         char *               outPrefsPath);"
        },
        {
          "name": "voidXPLMGetPrefsPath",
          "signature": "XPLM_API voidXPLMGetPrefsPath(\n                         char *               outPrefsPath);",
          "source": "code_block_extraction",
          "type": "function"
        }
      ],
      "category": {
        "category": "XPLM_Utilities",
        "module": "Xplm Utilities",
        "url": "https://developer.x-plane.com/sdk/XPLMGetPrefsPath/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPLMGetPrefsPath\"><a href=\"/sdk/XPLMGetPrefsPath/\">XPLMGetPrefsPath</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API void       <a href=\"/sdk/XPLMGetPrefsPath/\">XPLMGetPrefsPath</a>(\n                         char *               outPrefsPath);\n</code></pre><p>This routine returns a full path to a file that is within X-Plane’s preferences directory. (You should remove the file name back to the last directory separator to get the preferences directory using<a href=\"/sdk/XPLMExtractFileAndPath/\">XPLMExtractFileAndPath</a>).</p><p>The buffer you pass should be at least 512 characters long. The path is returned using the current native or OS path conventions.</p></div></div></article>",
      "code_examples": [
        {
          "char_count": 91,
          "code": "XPLM_API voidXPLMGetPrefsPath(\n                         char *               outPrefsPath);",
          "context": "XPLMGetPrefsPath",
          "id": "example_0",
          "language": "c",
          "line_count": 2,
          "type": "snippet"
        }
      ],
      "cross_references": [
        "XPLMExtractFileAndPath"
      ],
      "markdown": "### [XPLMGetPrefsPath](/sdk/XPLMGetPrefsPath/)\n\n```cpp\nXPLM_API void       XPLMGetPrefsPath(\n                         char *               outPrefsPath);\n\n```\n\nThis routine returns a full path to a file that is within X-Plane’s preferences\ndirectory. (You should remove the file name back to the last directory separator\nto get the preferences directory\nusing[XPLMExtractFileAndPath](/sdk/XPLMExtractFileAndPath/)).\n\nThe buffer you pass should be at least 512 characters long. The path is returned\nusing the current native or OS path conventions.",
      "own_functions": [
        "XPLMGetPrefsPath",
        "voidXPLMGetPrefsPath"
      ],
      "processing_timestamp": "2025-06-25T20:39:24.510619+00:00",
      "title": "XPLMGetPrefsPath | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMGetPrefsPath/"
    },
    "https://developer.x-plane.com/sdk/XPLMGetScreenBoundsGlobal/": {
      "api_signatures": [
        {
          "description": "This routine returns the bounds of the “global” X-Plane desktop, in boxels. Unlike the non-global versionXPLMGetScreenSize(), this is multi-monitor aware. There are three primary consequences of multimonitor awareness.",
          "name": "XPLMGetScreenBoundsGlobal",
          "parameters": [],
          "signature": "XPLM_API voidXPLMGetScreenBoundsGlobal(\n                         int *                outLeft,    /* Can be NULL */\n                         int *                outTop,    /* Can be NULL */\n                         int *                outRight,    /* Can be NULL */\n                         int *                outBottom);    /* Can be NULL */"
        },
        {
          "name": "voidXPLMGetScreenBoundsGlobal",
          "signature": "XPLM_API voidXPLMGetScreenBoundsGlobal(\n                         int *                outLeft,    /* Can be NULL */\n                         int *                outTop,    /* Can be NULL */\n                         int *                outRight,    /* Can be NULL */\n                         int *                outBottom);",
          "source": "code_block_extraction",
          "type": "function"
        }
      ],
      "category": {
        "category": "XPLM_Display",
        "module": "Xplm Display",
        "url": "https://developer.x-plane.com/sdk/XPLMGetScreenBoundsGlobal/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"function XPLM300\"><h3 class=\"sdk-api-function\" id=\"XPLMGetScreenBoundsGlobal\"><a href=\"/sdk/XPLMGetScreenBoundsGlobal/\">XPLMGetScreenBoundsGlobal</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API void       <a href=\"/sdk/XPLMGetScreenBoundsGlobal/\">XPLMGetScreenBoundsGlobal</a>(\n                         int *                outLeft,    /* Can be NULL */\n                         int *                outTop,    /* Can be NULL */\n                         int *                outRight,    /* Can be NULL */\n                         int *                outBottom);    /* Can be NULL */\n</code></pre><p>This routine returns the bounds of the “global” X-Plane desktop, in boxels. Unlike the non-global version<a href=\"/sdk/XPLMGetScreenSize/\">XPLMGetScreenSize</a>(), this is multi-monitor aware. There are three primary consequences of multimonitor awareness.</p><p>First, if the user is running X-Plane in full-screen on two or more monitors (typically configured using one full-screen window per monitor), the global desktop will be sized to include all X-Plane windows.</p><p>Second, the origin of the screen coordinates is not guaranteed to be (0, 0). Suppose the user has two displays side-by-side, both running at 1080p. Suppose further that they’ve configured their OS to make the left display their “primary” monitor, and that X-Plane is running in full-screen on their right monitor only. In this case, the global desktop bounds would be the rectangle from (1920, 0) to (3840, 1080). If the user later asked X-Plane to draw on their primary monitor as well, the bounds would change to (0, 0) to (3840, 1080).</p><p>Finally, if the usable area of the virtual desktop is not a perfect rectangle (for instance, because the monitors have different resolutions or because one monitor is configured in the operating system to be above and to the right of the other), the global desktop will include any wasted space. Thus, if you have two 1080p monitors, and monitor 2 is configured to have its bottom left touch monitor 1’s upper right, your global desktop area would be the rectangle from (0, 0) to (3840, 2160).</p><p>Note that popped-out windows (windows drawn in their own operating system windows, rather than “floating” within X-Plane) are not included in these bounds.</p></div></div></article>",
      "code_examples": [
        {
          "char_count": 346,
          "code": "XPLM_API voidXPLMGetScreenBoundsGlobal(\n                         int *                outLeft,    /* Can be NULL */\n                         int *                outTop,    /* Can be NULL */\n                         int *                outRight,    /* Can be NULL */\n                         int *                outBottom);    /* Can be NULL */",
          "context": "XPLMGetScreenBoundsGlobal",
          "id": "example_0",
          "language": "c",
          "line_count": 5,
          "type": "snippet"
        }
      ],
      "cross_references": [
        "XPLMGetScreenSize"
      ],
      "markdown": "### [XPLMGetScreenBoundsGlobal](/sdk/XPLMGetScreenBoundsGlobal/)\n\n```cpp\nXPLM_API void       XPLMGetScreenBoundsGlobal(\n                         int *                outLeft,    /* Can be NULL */\n                         int *                outTop,    /* Can be NULL */\n                         int *                outRight,    /* Can be NULL */\n                         int *                outBottom);    /* Can be NULL */\n\n```\n\nThis routine returns the bounds of the “global” X-Plane desktop, in boxels.\nUnlike the non-global version[XPLMGetScreenSize](/sdk/XPLMGetScreenSize/)(),\nthis is multi-monitor aware. There are three primary consequences of\nmultimonitor awareness.\n\nFirst, if the user is running X-Plane in full-screen on two or more monitors\n(typically configured using one full-screen window per monitor), the global\ndesktop will be sized to include all X-Plane windows.\n\nSecond, the origin of the screen coordinates is not guaranteed to be (0, 0).\nSuppose the user has two displays side-by-side, both running at 1080p. Suppose\nfurther that they’ve configured their OS to make the left display their\n“primary” monitor, and that X-Plane is running in full-screen on their right\nmonitor only. In this case, the global desktop bounds would be the rectangle\nfrom (1920, 0) to (3840, 1080). If the user later asked X-Plane to draw on their\nprimary monitor as well, the bounds would change to (0, 0) to (3840, 1080).\n\nFinally, if the usable area of the virtual desktop is not a perfect rectangle\n(for instance, because the monitors have different resolutions or because one\nmonitor is configured in the operating system to be above and to the right of\nthe other), the global desktop will include any wasted space. Thus, if you have\ntwo 1080p monitors, and monitor 2 is configured to have its bottom left touch\nmonitor 1’s upper right, your global desktop area would be the rectangle from\n(0, 0) to (3840, 2160).\n\nNote that popped-out windows (windows drawn in their own operating system\nwindows, rather than “floating” within X-Plane) are not included in these\nbounds.",
      "own_functions": [
        "XPLMGetScreenBoundsGlobal",
        "voidXPLMGetScreenBoundsGlobal"
      ],
      "processing_timestamp": "2025-06-25T20:39:23.504040+00:00",
      "title": "XPLMGetScreenBoundsGlobal | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMGetScreenBoundsGlobal/"
    },
    "https://developer.x-plane.com/sdk/XPLMGetScreenSize/": {
      "api_signatures": [
        {
          "description": "This routine returns the size of the main X-Plane OpenGL window in pixels. This number can be used to get a rough idea of the amount of detail the user will be able to see when drawing in 3-d.",
          "name": "XPLMGetScreenSize",
          "parameters": [],
          "signature": "XPLM_API voidXPLMGetScreenSize(\n                         int *                outWidth,    /* Can be NULL */\n                         int *                outHeight);    /* Can be NULL */"
        },
        {
          "name": "voidXPLMGetScreenSize",
          "signature": "XPLM_API voidXPLMGetScreenSize(\n                         int *                outWidth,    /* Can be NULL */\n                         int *                outHeight);",
          "source": "code_block_extraction",
          "type": "function"
        }
      ],
      "category": {
        "category": "XPLM_Display",
        "module": "Xplm Display",
        "url": "https://developer.x-plane.com/sdk/XPLMGetScreenSize/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPLMGetScreenSize\"><a href=\"/sdk/XPLMGetScreenSize/\">XPLMGetScreenSize</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API void       <a href=\"/sdk/XPLMGetScreenSize/\">XPLMGetScreenSize</a>(\n                         int *                outWidth,    /* Can be NULL */\n                         int *                outHeight);    /* Can be NULL */\n</code></pre><p>This routine returns the size of the main X-Plane OpenGL window in pixels. This number can be used to get a rough idea of the amount of detail the user will be able to see when drawing in 3-d.</p></div></div></article>",
      "code_examples": [
        {
          "char_count": 187,
          "code": "XPLM_API voidXPLMGetScreenSize(\n                         int *                outWidth,    /* Can be NULL */\n                         int *                outHeight);    /* Can be NULL */",
          "context": "XPLMGetScreenSize",
          "id": "example_0",
          "language": "c",
          "line_count": 3,
          "type": "snippet"
        }
      ],
      "cross_references": [],
      "markdown": "### [XPLMGetScreenSize](/sdk/XPLMGetScreenSize/)\n\n```cpp\nXPLM_API void       XPLMGetScreenSize(\n                         int *                outWidth,    /* Can be NULL */\n                         int *                outHeight);    /* Can be NULL */\n\n```\n\nThis routine returns the size of the main X-Plane OpenGL window in pixels. This\nnumber can be used to get a rough idea of the amount of detail the user will be\nable to see when drawing in 3-d.",
      "own_functions": [
        "XPLMGetScreenSize",
        "voidXPLMGetScreenSize"
      ],
      "processing_timestamp": "2025-06-25T20:39:23.498046+00:00",
      "title": "XPLMGetScreenSize | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMGetScreenSize/"
    },
    "https://developer.x-plane.com/sdk/XPLMGetSystemPath/": {
      "api_signatures": [
        {
          "description": "This function returns the full path to the X-System folder. Note that this is a directory path, so it ends in a trailing : or / .",
          "name": "XPLMGetSystemPath",
          "parameters": [
            {
              "full_declaration": "char *               outSystemPath",
              "name": "outSystemPath",
              "type": "char *"
            }
          ],
          "signature": "XPLM_API voidXPLMGetSystemPath(\n                         char *               outSystemPath);"
        },
        {
          "name": "voidXPLMGetSystemPath",
          "signature": "XPLM_API voidXPLMGetSystemPath(\n                         char *               outSystemPath);",
          "source": "code_block_extraction",
          "type": "function"
        }
      ],
      "category": {
        "category": "XPLM_Utilities",
        "module": "Xplm Utilities",
        "url": "https://developer.x-plane.com/sdk/XPLMGetSystemPath/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPLMGetSystemPath\"><a href=\"/sdk/XPLMGetSystemPath/\">XPLMGetSystemPath</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API void       <a href=\"/sdk/XPLMGetSystemPath/\">XPLMGetSystemPath</a>(\n                         char *               outSystemPath);\n</code></pre><p>This function returns the full path to the X-System folder. Note that this is a directory path, so it ends in a trailing : or / .</p><p>The buffer you pass should be at least 512 characters long. The path is returned using the current native or OS path conventions.</p></div></div></article>",
      "code_examples": [
        {
          "char_count": 93,
          "code": "XPLM_API voidXPLMGetSystemPath(\n                         char *               outSystemPath);",
          "context": "XPLMGetSystemPath",
          "id": "example_0",
          "language": "c",
          "line_count": 2,
          "type": "snippet"
        }
      ],
      "cross_references": [],
      "markdown": "### [XPLMGetSystemPath](/sdk/XPLMGetSystemPath/)\n\n```cpp\nXPLM_API void       XPLMGetSystemPath(\n                         char *               outSystemPath);\n\n```\n\nThis function returns the full path to the X-System folder. Note that this is a\ndirectory path, so it ends in a trailing : or / .\n\nThe buffer you pass should be at least 512 characters long. The path is returned\nusing the current native or OS path conventions.",
      "own_functions": [
        "XPLMGetSystemPath",
        "voidXPLMGetSystemPath"
      ],
      "processing_timestamp": "2025-06-25T20:39:24.516619+00:00",
      "title": "XPLMGetSystemPath | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMGetSystemPath/"
    },
    "https://developer.x-plane.com/sdk/XPLMGetTexture/": {
      "api_signatures": [
        {
          "deprecated": true,
          "description": "XPLMGetTexturereturns the OpenGL texture ID of an X-Plane texture based on a generic identifying code. For example, you can get the texture for X-Plane’s UI bitmaps.",
          "name": "XPLMGetTexture",
          "parameters": [],
          "signature": "XPLM_API intXPLMGetTexture(XPLMTextureIDinTexture);"
        },
        {
          "name": "intXPLMGetTexture",
          "signature": "XPLM_API intXPLMGetTexture(XPLMTextureIDinTexture);",
          "source": "code_block_extraction",
          "type": "function"
        }
      ],
      "category": {
        "category": "XPLM_Display",
        "module": "Xplm Display",
        "url": "https://developer.x-plane.com/sdk/XPLMGetTexture/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"function XPLM_DEPRECATED\"><h3 class=\"sdk-api-function\" id=\"XPLMGetTexture\"><a href=\"/sdk/XPLMGetTexture/\">XPLMGetTexture</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API int        <a href=\"/sdk/XPLMGetTexture/\">XPLMGetTexture</a>(\n                         <a href=\"/sdk/XPLMTextureID/\">XPLMTextureID</a>        inTexture);\n</code></pre><p><a href=\"/sdk/XPLMGetTexture/\">XPLMGetTexture</a>returns the OpenGL texture ID of an X-Plane texture based on a generic identifying code. For example, you can get the texture for X-Plane’s UI bitmaps.</p></div></div></article>",
      "code_examples": [
        {
          "char_count": 51,
          "code": "XPLM_API intXPLMGetTexture(XPLMTextureIDinTexture);",
          "context": "XPLMGetTexture",
          "id": "example_0",
          "language": "c",
          "line_count": 1,
          "type": "snippet"
        }
      ],
      "cross_references": [
        "XPLMTextureID"
      ],
      "markdown": "### [XPLMGetTexture](/sdk/XPLMGetTexture/)\n\n```cpp\nXPLM_API int        XPLMGetTexture(\n                         XPLMTextureID        inTexture);\n\n```\n\n[XPLMGetTexture](/sdk/XPLMGetTexture/)returns the OpenGL texture ID of an\nX-Plane texture based on a generic identifying code. For example, you can get\nthe texture for X-Plane’s UI bitmaps.",
      "own_functions": [
        "XPLMGetTexture",
        "intXPLMGetTexture"
      ],
      "processing_timestamp": "2025-06-25T20:39:23.506674+00:00",
      "title": "XPLMGetTexture | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMGetTexture/"
    },
    "https://developer.x-plane.com/sdk/XPLMGetVersions/": {
      "api_signatures": [
        {
          "description": "This routine returns the revision of both X-Plane and the XPLM DLL. All versions are at least three-digit decimal numbers (e.g. 606 for version 6.06 of X-Plane); the current revision of the XPLM is 400 (4.00). This routine also returns the host ID of the app running us.",
          "name": "XPLMGetVersions",
          "parameters": [
            {
              "full_declaration": "int *                outXPlaneVersion",
              "name": "outXPlaneVersion",
              "type": "int *"
            },
            {
              "full_declaration": "int *                outXPLMVersion",
              "name": "outXPLMVersion",
              "type": "int *"
            },
            {
              "full_declaration": "XPLMHostApplicationID* outHostID",
              "name": "outHostID",
              "type": "XPLMHostApplicationID*"
            }
          ],
          "signature": "XPLM_API voidXPLMGetVersions(\n                         int *                outXPlaneVersion,\n                         int *                outXPLMVersion,XPLMHostApplicationID* outHostID);"
        },
        {
          "name": "voidXPLMGetVersions",
          "signature": "XPLM_API voidXPLMGetVersions(\n                         int *                outXPlaneVersion,\n                         int *                outXPLMVersion,XPLMHostApplicationID* outHostID);",
          "source": "code_block_extraction",
          "type": "function"
        }
      ],
      "category": {
        "category": "XPLM_Utilities",
        "module": "Xplm Utilities",
        "url": "https://developer.x-plane.com/sdk/XPLMGetVersions/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPLMGetVersions\"><a href=\"/sdk/XPLMGetVersions/\">XPLMGetVersions</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API void       <a href=\"/sdk/XPLMGetVersions/\">XPLMGetVersions</a>(\n                         int *                outXPlaneVersion,\n                         int *                outXPLMVersion,\n                         <a href=\"/sdk/XPLMHostApplicationID/\">XPLMHostApplicationID</a> * outHostID);\n</code></pre><p>This routine returns the revision of both X-Plane and the XPLM DLL. All versions are at least three-digit decimal numbers (e.g. 606 for version 6.06 of X-Plane); the current revision of the XPLM is 400 (4.00). This routine also returns the host ID of the app running us.</p><p>The most common use of this routine is to special-case around X-Plane version-specific behavior.</p></div></div></article>",
      "code_examples": [
        {
          "char_count": 189,
          "code": "XPLM_API voidXPLMGetVersions(\n                         int *                outXPlaneVersion,\n                         int *                outXPLMVersion,XPLMHostApplicationID* outHostID);",
          "context": "XPLMGetVersions",
          "id": "example_0",
          "language": "c",
          "line_count": 3,
          "type": "snippet"
        }
      ],
      "cross_references": [
        "XPLMHostApplicationID"
      ],
      "markdown": "### [XPLMGetVersions](/sdk/XPLMGetVersions/)\n\n```cpp\nXPLM_API void       XPLMGetVersions(\n                         int *                outXPlaneVersion,\n                         int *                outXPLMVersion,\n                         XPLMHostApplicationID * outHostID);\n\n```\n\nThis routine returns the revision of both X-Plane and the XPLM DLL. All versions\nare at least three-digit decimal numbers (e.g. 606 for version 6.06 of X-Plane);\nthe current revision of the XPLM is 400 (4.00). This routine also returns the\nhost ID of the app running us.\n\nThe most common use of this routine is to special-case around X-Plane\nversion-specific behavior.",
      "own_functions": [
        "XPLMGetVersions",
        "voidXPLMGetVersions"
      ],
      "processing_timestamp": "2025-06-25T20:39:24.514619+00:00",
      "title": "XPLMGetVersions | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMGetVersions/"
    },
    "https://developer.x-plane.com/sdk/XPLMGetVirtualKeyDescription/": {
      "api_signatures": [
        {
          "description": "Given a virtual key code (as defined inXPLMDefs.h) this routine returns a human-readable string describing the character. This routine is provided for showing users what keyboard mappings they have set up. The string may read ‘unknown’ or be a blank or NULL string if the virtual key is unknown.",
          "name": "XPLMGetVirtualKeyDescription",
          "parameters": [
            {
              "full_declaration": "char                 inVirtualKey",
              "name": "inVirtualKey",
              "type": "char"
            }
          ],
          "signature": "XPLM_API const char *XPLMGetVirtualKeyDescription(\n                         char                 inVirtualKey);"
        }
      ],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/XPLMGetVirtualKeyDescription/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPLMGetVirtualKeyDescription\"><a href=\"/sdk/XPLMGetVirtualKeyDescription/\">XPLMGetVirtualKeyDescription</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API const char * <a href=\"/sdk/XPLMGetVirtualKeyDescription/\">XPLMGetVirtualKeyDescription</a>(\n                         char                 inVirtualKey);\n</code></pre><p>Given a virtual key code (as defined in<a href=\"/sdk/XPLMDefs/\">XPLMDefs</a>.h) this routine returns a human-readable string describing the character. This routine is provided for showing users what keyboard mappings they have set up. The string may read ‘unknown’ or be a blank or NULL string if the virtual key is unknown.</p></div></div></article>",
      "code_examples": [
        {
          "char_count": 111,
          "code": "XPLM_API const char *XPLMGetVirtualKeyDescription(\n                         char                 inVirtualKey);",
          "context": "XPLMGetVirtualKeyDescription",
          "id": "example_0",
          "language": "c",
          "line_count": 2,
          "type": "snippet"
        }
      ],
      "cross_references": [],
      "markdown": "### [XPLMGetVirtualKeyDescription](/sdk/XPLMGetVirtualKeyDescription/)\n\n```cpp\nXPLM_API const char * XPLMGetVirtualKeyDescription(\n                         char                 inVirtualKey);\n\n```\n\nGiven a virtual key code (as defined in[XPLMDefs](/sdk/XPLMDefs/).h) this\nroutine returns a human-readable string describing the character. This routine\nis provided for showing users what keyboard mappings they have set up. The\nstring may read ‘unknown’ or be a blank or NULL string if the virtual key is\nunknown.",
      "own_functions": [
        "XPLMGetVirtualKeyDescription"
      ],
      "processing_timestamp": "2025-06-25T20:39:22.340244+00:00",
      "title": "XPLMGetVirtualKeyDescription | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMGetVirtualKeyDescription/"
    },
    "https://developer.x-plane.com/sdk/XPLMGetWeatherAtLocation/": {
      "api_signatures": [
        {
          "description": "Get the current weather conditions at a given location. Note that this does not work world-wide, only within the surrounding region. Return 1 if detailed weather (i.e. an airport-specific METAR) was found, 0 if not. In both cases, the structure will contain the best data available. This call is not intended to be used per-frame.",
          "name": "XPLMGetWeatherAtLocation",
          "parameters": [
            {
              "full_declaration": "double               latitude",
              "name": "latitude",
              "type": "double"
            },
            {
              "full_declaration": "double               longitude",
              "name": "longitude",
              "type": "double"
            },
            {
              "full_declaration": "double               altitude_m",
              "name": "altitude_m",
              "type": "double"
            },
            {
              "full_declaration": "XPLMWeatherInfo_t*  out_info",
              "name": "out_info",
              "type": "XPLMWeatherInfo_t*"
            }
          ],
          "signature": "XPLM_API intXPLMGetWeatherAtLocation(\n                         double               latitude,\n                         double               longitude,\n                         double               altitude_m,XPLMWeatherInfo_t*  out_info);"
        },
        {
          "name": "intXPLMGetWeatherAtLocation",
          "signature": "XPLM_API intXPLMGetWeatherAtLocation(\n                         double               latitude,\n                         double               longitude,\n                         double               altitude_m,XPLMWeatherInfo_t*  out_info);",
          "source": "code_block_extraction",
          "type": "function"
        }
      ],
      "category": {
        "category": "XPLM_Navigation",
        "module": "Xplm Navigation",
        "url": "https://developer.x-plane.com/sdk/XPLMGetWeatherAtLocation/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"function XPLM400\"><h3 class=\"sdk-api-function\" id=\"XPLMGetWeatherAtLocation\"><a href=\"/sdk/XPLMGetWeatherAtLocation/\">XPLMGetWeatherAtLocation</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API int        <a href=\"/sdk/XPLMGetWeatherAtLocation/\">XPLMGetWeatherAtLocation</a>(\n                         double               latitude,\n                         double               longitude,\n                         double               altitude_m,\n                         <a href=\"/sdk/XPLMWeatherInfo_t/\">XPLMWeatherInfo_t</a> *  out_info);\n</code></pre><p>Get the current weather conditions at a given location. Note that this does not work world-wide, only within the surrounding region. Return 1 if detailed weather (i.e. an airport-specific METAR) was found, 0 if not. In both cases, the structure will contain the best data available. This call is not intended to be used per-frame.</p></div></div></article>",
      "code_examples": [
        {
          "char_count": 238,
          "code": "XPLM_API intXPLMGetWeatherAtLocation(\n                         double               latitude,\n                         double               longitude,\n                         double               altitude_m,XPLMWeatherInfo_t*  out_info);",
          "context": "XPLMGetWeatherAtLocation",
          "id": "example_0",
          "language": "c",
          "line_count": 4,
          "type": "snippet"
        }
      ],
      "cross_references": [],
      "markdown": "### [XPLMGetWeatherAtLocation](/sdk/XPLMGetWeatherAtLocation/)\n\n```cpp\nXPLM_API int        XPLMGetWeatherAtLocation(\n                         double               latitude,\n                         double               longitude,\n                         double               altitude_m,\n                         XPLMWeatherInfo_t *  out_info);\n\n```\n\nGet the current weather conditions at a given location. Note that this does not\nwork world-wide, only within the surrounding region. Return 1 if detailed\nweather (i.e. an airport-specific METAR) was found, 0 if not. In both cases, the\nstructure will contain the best data available. This call is not intended to be\nused per-frame.",
      "own_functions": [
        "XPLMGetWeatherAtLocation",
        "intXPLMGetWeatherAtLocation"
      ],
      "processing_timestamp": "2025-06-25T20:39:23.995722+00:00",
      "title": "XPLMGetWeatherAtLocation | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMGetWeatherAtLocation/"
    },
    "https://developer.x-plane.com/sdk/XPLMGetWindowGeometry/": {
      "api_signatures": [
        {
          "description": "This routine returns the position and size of a window. The units and coordinate system vary depending on the type of window you have.",
          "name": "XPLMGetWindowGeometry",
          "parameters": [],
          "signature": "XPLM_API voidXPLMGetWindowGeometry(XPLMWindowIDinWindowID,\n                         int *                outLeft,    /* Can be NULL */\n                         int *                outTop,    /* Can be NULL */\n                         int *                outRight,    /* Can be NULL */\n                         int *                outBottom);    /* Can be NULL */"
        },
        {
          "name": "voidXPLMGetWindowGeometry",
          "signature": "XPLM_API voidXPLMGetWindowGeometry(XPLMWindowIDinWindowID,\n                         int *                outLeft,    /* Can be NULL */\n                         int *                outTop,    /* Can be NULL */\n                         int *                outRight,    /* Can be NULL */\n                         int *                outBottom);",
          "source": "code_block_extraction",
          "type": "function"
        }
      ],
      "category": {
        "category": "XPLM_Display",
        "module": "Xplm Display",
        "url": "https://developer.x-plane.com/sdk/XPLMGetWindowGeometry/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPLMGetWindowGeometry\"><a href=\"/sdk/XPLMGetWindowGeometry/\">XPLMGetWindowGeometry</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API void       <a href=\"/sdk/XPLMGetWindowGeometry/\">XPLMGetWindowGeometry</a>(\n                         <a href=\"/sdk/XPLMWindowID/\">XPLMWindowID</a>         inWindowID,\n                         int *                outLeft,    /* Can be NULL */\n                         int *                outTop,    /* Can be NULL */\n                         int *                outRight,    /* Can be NULL */\n                         int *                outBottom);    /* Can be NULL */\n</code></pre><p>This routine returns the position and size of a window. The units and coordinate system vary depending on the type of window you have.</p><p>If this is a legacy window (one compiled against a pre-XPLM300 version of the SDK, or an XPLM300 window that was not created using<a href=\"/sdk/XPLMCreateWindowEx/\">XPLMCreateWindowEx</a>()), the units are pixels relative to the main X-Plane display.</p><p>If, on the other hand, this is a new X-Plane 11-style window (compiled against the XPLM300 SDK and created using<a href=\"/sdk/XPLMCreateWindowEx/\">XPLMCreateWindowEx</a>()), the units are global desktop boxels.</p><p>Pass NULL to not receive any paramter.</p></div></div></article>",
      "code_examples": [
        {
          "char_count": 365,
          "code": "XPLM_API voidXPLMGetWindowGeometry(XPLMWindowIDinWindowID,\n                         int *                outLeft,    /* Can be NULL */\n                         int *                outTop,    /* Can be NULL */\n                         int *                outRight,    /* Can be NULL */\n                         int *                outBottom);    /* Can be NULL */",
          "context": "XPLMGetWindowGeometry",
          "id": "example_0",
          "language": "c",
          "line_count": 5,
          "type": "snippet"
        }
      ],
      "cross_references": [
        "XPLMCreateWindowEx",
        "XPLMCreateWindow"
      ],
      "markdown": "### [XPLMGetWindowGeometry](/sdk/XPLMGetWindowGeometry/)\n\n```cpp\nXPLM_API void       XPLMGetWindowGeometry(\n                         XPLMWindowID         inWindowID,\n                         int *                outLeft,    /* Can be NULL */\n                         int *                outTop,    /* Can be NULL */\n                         int *                outRight,    /* Can be NULL */\n                         int *                outBottom);    /* Can be NULL */\n\n```\n\nThis routine returns the position and size of a window. The units and coordinate\nsystem vary depending on the type of window you have.\n\nIf this is a legacy window (one compiled against a pre-XPLM300 version of the\nSDK, or an XPLM300 window that was not created\nusing[XPLMCreateWindowEx](/sdk/XPLMCreateWindowEx/)()), the units are pixels\nrelative to the main X-Plane display.\n\nIf, on the other hand, this is a new X-Plane 11-style window (compiled against\nthe XPLM300 SDK and created\nusing[XPLMCreateWindowEx](/sdk/XPLMCreateWindowEx/)()), the units are global\ndesktop boxels.\n\nPass NULL to not receive any paramter.",
      "own_functions": [
        "XPLMGetWindowGeometry",
        "voidXPLMGetWindowGeometry"
      ],
      "processing_timestamp": "2025-06-25T20:39:23.509328+00:00",
      "title": "XPLMGetWindowGeometry | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMGetWindowGeometry/"
    },
    "https://developer.x-plane.com/sdk/XPLMGetWindowGeometryOS/": {
      "api_signatures": [
        {
          "description": "This routine returns the position and size of a “popped out” window (i.e., a window whose positioning mode isxplm_WindowPopOut), in operating system pixels. Pass NULL to not receive any parameter.",
          "name": "XPLMGetWindowGeometryOS",
          "parameters": [],
          "signature": "XPLM_API voidXPLMGetWindowGeometryOS(XPLMWindowIDinWindowID,\n                         int *                outLeft,    /* Can be NULL */\n                         int *                outTop,    /* Can be NULL */\n                         int *                outRight,    /* Can be NULL */\n                         int *                outBottom);    /* Can be NULL */"
        },
        {
          "name": "voidXPLMGetWindowGeometryOS",
          "signature": "XPLM_API voidXPLMGetWindowGeometryOS(XPLMWindowIDinWindowID,\n                         int *                outLeft,    /* Can be NULL */\n                         int *                outTop,    /* Can be NULL */\n                         int *                outRight,    /* Can be NULL */\n                         int *                outBottom);",
          "source": "code_block_extraction",
          "type": "function"
        }
      ],
      "category": {
        "category": "XPLM_Display",
        "module": "Xplm Display",
        "url": "https://developer.x-plane.com/sdk/XPLMGetWindowGeometryOS/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"function XPLM300\"><h3 class=\"sdk-api-function\" id=\"XPLMGetWindowGeometryOS\"><a href=\"/sdk/XPLMGetWindowGeometryOS/\">XPLMGetWindowGeometryOS</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API void       <a href=\"/sdk/XPLMGetWindowGeometryOS/\">XPLMGetWindowGeometryOS</a>(\n                         <a href=\"/sdk/XPLMWindowID/\">XPLMWindowID</a>         inWindowID,\n                         int *                outLeft,    /* Can be NULL */\n                         int *                outTop,    /* Can be NULL */\n                         int *                outRight,    /* Can be NULL */\n                         int *                outBottom);    /* Can be NULL */\n</code></pre><p>This routine returns the position and size of a “popped out” window (i.e., a window whose positioning mode is<a href=\"/sdk/xplm_WindowPopOut/\">xplm_WindowPopOut</a>), in operating system pixels. Pass NULL to not receive any parameter.</p></div></div></article>",
      "code_examples": [
        {
          "char_count": 367,
          "code": "XPLM_API voidXPLMGetWindowGeometryOS(XPLMWindowIDinWindowID,\n                         int *                outLeft,    /* Can be NULL */\n                         int *                outTop,    /* Can be NULL */\n                         int *                outRight,    /* Can be NULL */\n                         int *                outBottom);    /* Can be NULL */",
          "context": "XPLMGetWindowGeometryOS",
          "id": "example_0",
          "language": "c",
          "line_count": 5,
          "type": "snippet"
        }
      ],
      "cross_references": [
        "XPLMGetWindowGeometry"
      ],
      "markdown": "### [XPLMGetWindowGeometryOS](/sdk/XPLMGetWindowGeometryOS/)\n\n```cpp\nXPLM_API void       XPLMGetWindowGeometryOS(\n                         XPLMWindowID         inWindowID,\n                         int *                outLeft,    /* Can be NULL */\n                         int *                outTop,    /* Can be NULL */\n                         int *                outRight,    /* Can be NULL */\n                         int *                outBottom);    /* Can be NULL */\n\n```\n\nThis routine returns the position and size of a “popped out” window (i.e., a\nwindow whose positioning mode is[xplm_WindowPopOut](/sdk/xplm_WindowPopOut/)),\nin operating system pixels. Pass NULL to not receive any parameter.",
      "own_functions": [
        "XPLMGetWindowGeometryOS",
        "voidXPLMGetWindowGeometryOS"
      ],
      "processing_timestamp": "2025-06-25T20:39:23.511391+00:00",
      "title": "XPLMGetWindowGeometryOS | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMGetWindowGeometryOS/"
    },
    "https://developer.x-plane.com/sdk/XPLMGetWindowGeometryVR/": {
      "api_signatures": [
        {
          "description": "Returns the width and height, in boxels, of a window in VR. Note that you are responsible for ensuring your window is in VR (usingXPLMWindowIsInVR()).",
          "name": "XPLMGetWindowGeometryVR",
          "parameters": [],
          "signature": "XPLM_API voidXPLMGetWindowGeometryVR(XPLMWindowIDinWindowID,\n                         int *                outWidthBoxels,    /* Can be NULL */\n                         int *                outHeightBoxels);    /* Can be NULL */"
        },
        {
          "name": "voidXPLMGetWindowGeometryVR",
          "signature": "XPLM_API voidXPLMGetWindowGeometryVR(XPLMWindowIDinWindowID,\n                         int *                outWidthBoxels,    /* Can be NULL */\n                         int *                outHeightBoxels);",
          "source": "code_block_extraction",
          "type": "function"
        }
      ],
      "category": {
        "category": "XPLM_Display",
        "module": "Xplm Display",
        "url": "https://developer.x-plane.com/sdk/XPLMGetWindowGeometryVR/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"function XPLM301\"><h3 class=\"sdk-api-function\" id=\"XPLMGetWindowGeometryVR\"><a href=\"/sdk/XPLMGetWindowGeometryVR/\">XPLMGetWindowGeometryVR</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API void       <a href=\"/sdk/XPLMGetWindowGeometryVR/\">XPLMGetWindowGeometryVR</a>(\n                         <a href=\"/sdk/XPLMWindowID/\">XPLMWindowID</a>         inWindowID,\n                         int *                outWidthBoxels,    /* Can be NULL */\n                         int *                outHeightBoxels);    /* Can be NULL */\n</code></pre><p>Returns the width and height, in boxels, of a window in VR. Note that you are responsible for ensuring your window is in VR (using<a href=\"/sdk/XPLMWindowIsInVR/\">XPLMWindowIsInVR</a>()).</p></div></div></article>",
      "code_examples": [
        {
          "char_count": 228,
          "code": "XPLM_API voidXPLMGetWindowGeometryVR(XPLMWindowIDinWindowID,\n                         int *                outWidthBoxels,    /* Can be NULL */\n                         int *                outHeightBoxels);    /* Can be NULL */",
          "context": "XPLMGetWindowGeometryVR",
          "id": "example_0",
          "language": "c",
          "line_count": 3,
          "type": "snippet"
        }
      ],
      "cross_references": [
        "XPLMWindowIsInVR",
        "XPLMGetWindowGeometry"
      ],
      "markdown": "### [XPLMGetWindowGeometryVR](/sdk/XPLMGetWindowGeometryVR/)\n\n```cpp\nXPLM_API void       XPLMGetWindowGeometryVR(\n                         XPLMWindowID         inWindowID,\n                         int *                outWidthBoxels,    /* Can be NULL */\n                         int *                outHeightBoxels);    /* Can be NULL */\n\n```\n\nReturns the width and height, in boxels, of a window in VR. Note that you are\nresponsible for ensuring your window is in VR\n(using[XPLMWindowIsInVR](/sdk/XPLMWindowIsInVR/)()).",
      "own_functions": [
        "XPLMGetWindowGeometryVR",
        "voidXPLMGetWindowGeometryVR"
      ],
      "processing_timestamp": "2025-06-25T20:39:23.513529+00:00",
      "title": "XPLMGetWindowGeometryVR | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMGetWindowGeometryVR/"
    },
    "https://developer.x-plane.com/sdk/XPLMGetWindowIsVisible/": {
      "api_signatures": [
        {
          "description": "Returns true (1) if the specified window is visible.",
          "name": "XPLMGetWindowIsVisible",
          "parameters": [],
          "signature": "XPLM_API intXPLMGetWindowIsVisible(XPLMWindowIDinWindowID);"
        },
        {
          "name": "intXPLMGetWindowIsVisible",
          "signature": "XPLM_API intXPLMGetWindowIsVisible(XPLMWindowIDinWindowID);",
          "source": "code_block_extraction",
          "type": "function"
        }
      ],
      "category": {
        "category": "XPLM_Display",
        "module": "Xplm Display",
        "url": "https://developer.x-plane.com/sdk/XPLMGetWindowIsVisible/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPLMGetWindowIsVisible\"><a href=\"/sdk/XPLMGetWindowIsVisible/\">XPLMGetWindowIsVisible</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API int        <a href=\"/sdk/XPLMGetWindowIsVisible/\">XPLMGetWindowIsVisible</a>(\n                         <a href=\"/sdk/XPLMWindowID/\">XPLMWindowID</a>         inWindowID);\n</code></pre><p>Returns true (1) if the specified window is visible.</p></div></div></article>",
      "code_examples": [
        {
          "char_count": 59,
          "code": "XPLM_API intXPLMGetWindowIsVisible(XPLMWindowIDinWindowID);",
          "context": "XPLMGetWindowIsVisible",
          "id": "example_0",
          "language": "c",
          "line_count": 1,
          "type": "snippet"
        }
      ],
      "cross_references": [],
      "markdown": "### [XPLMGetWindowIsVisible](/sdk/XPLMGetWindowIsVisible/)\n\n```cpp\nXPLM_API int        XPLMGetWindowIsVisible(\n                         XPLMWindowID         inWindowID);\n\n```\n\nReturns true (1) if the specified window is visible.",
      "own_functions": [
        "XPLMGetWindowIsVisible",
        "intXPLMGetWindowIsVisible"
      ],
      "processing_timestamp": "2025-06-25T20:39:23.515064+00:00",
      "title": "XPLMGetWindowIsVisible | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMGetWindowIsVisible/"
    },
    "https://developer.x-plane.com/sdk/XPLMGetWindowRefCon/": {
      "api_signatures": [
        {
          "description": "Returns a window’s reference constant, the unique value you can use for your own purposes.",
          "name": "XPLMGetWindowRefCon",
          "parameters": [],
          "signature": "XPLM_API void *XPLMGetWindowRefCon(XPLMWindowIDinWindowID);"
        }
      ],
      "category": {
        "category": "XPLM_Display",
        "module": "Xplm Display",
        "url": "https://developer.x-plane.com/sdk/XPLMGetWindowRefCon/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPLMGetWindowRefCon\"><a href=\"/sdk/XPLMGetWindowRefCon/\">XPLMGetWindowRefCon</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API void *     <a href=\"/sdk/XPLMGetWindowRefCon/\">XPLMGetWindowRefCon</a>(\n                         <a href=\"/sdk/XPLMWindowID/\">XPLMWindowID</a>         inWindowID);\n</code></pre><p>Returns a window’s reference constant, the unique value you can use for your own purposes.</p></div></div></article>",
      "code_examples": [
        {
          "char_count": 59,
          "code": "XPLM_API void *XPLMGetWindowRefCon(XPLMWindowIDinWindowID);",
          "context": "XPLMGetWindowRefCon",
          "id": "example_0",
          "language": "c",
          "line_count": 1,
          "type": "snippet"
        }
      ],
      "cross_references": [],
      "markdown": "### [XPLMGetWindowRefCon](/sdk/XPLMGetWindowRefCon/)\n\n```cpp\nXPLM_API void *     XPLMGetWindowRefCon(\n                         XPLMWindowID         inWindowID);\n\n```\n\nReturns a window’s reference constant, the unique value you can use for your own\npurposes.",
      "own_functions": [
        "XPLMGetWindowRefCon"
      ],
      "processing_timestamp": "2025-06-25T20:39:23.520242+00:00",
      "title": "XPLMGetWindowRefCon | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMGetWindowRefCon/"
    },
    "https://developer.x-plane.com/sdk/XPLMHandleCursor_f/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/XPLMHandleCursor_f/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"callback XPLM200\"><h3 class=\"sdk-api-callback\" id=\"XPLMHandleCursor_f\"><a href=\"/sdk/XPLMHandleCursor_f/\">XPLMHandleCursor_f</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>typedef <a href=\"/sdk/XPLMCursorStatus/\">XPLMCursorStatus</a> (* <a href=\"/sdk/XPLMHandleCursor_f/\">XPLMHandleCursor_f</a>)(\n                         <a href=\"/sdk/XPLMWindowID/\">XPLMWindowID</a>         inWindowID,\n                         int                  x,\n                         int                  y,\n                         void *               inRefcon);\n</code></pre><p>The SDK calls your cursor status callback when the mouse is over your plugin window. Return a cursor status code to indicate how you would like X-Plane to manage the cursor. If you return<a href=\"/sdk/xplm_CursorDefault/\">xplm_CursorDefault</a>, the SDK will try lower-Z-order plugin windows, then let the sim manage the cursor.</p><p>Note: you should never show or hide the cursor yourself—these APIs are typically reference-counted and thus cannot safely and predictably be used by the SDK. Instead return one of<a href=\"/sdk/xplm_CursorHidden/\">xplm_CursorHidden</a>to hide the cursor or xplm_CursorArrow/xplm_CursorCustom to show the cursor.</p><p>If you want to implement a custom cursor by drawing a cursor in OpenGL, use<a href=\"/sdk/xplm_CursorHidden/\">xplm_CursorHidden</a>to hide the OS cursor and draw the cursor using a 2-d drawing callback (after<a href=\"/sdk/xplm_Phase_Window/\">xplm_Phase_Window</a>is probably a good choice, but see deprecation warnings on the drawing APIs!). If you want to use a custom OS-based cursor, use<a href=\"/sdk/xplm_CursorCustom/\">xplm_CursorCustom</a>to ask X-Plane to show the cursor but not affect its image. You can then use an OS specific call like SetThemeCursor (Mac) or SetCursor/LoadCursor (Windows).</p><p>The units for x and y values match the units used in your window. Thus, for “modern” windows (those created via<a href=\"/sdk/XPLMCreateWindowEx/\">XPLMCreateWindowEx</a>() and compiled against the XPLM300 library), the units are boxels, while legacy windows will get pixels. Legacy windows have their origin in the lower left of the main X-Plane window, while modern windows have their origin in the lower left of the global desktop space. In both cases, x increases as you move right, and y increases as you move up.</p></div></div></article>",
      "code_examples": [
        {
          "char_count": 223,
          "code": "typedefXPLMCursorStatus(*XPLMHandleCursor_f)(XPLMWindowIDinWindowID,\n                         int                  x,\n                         int                  y,\n                         void *               inRefcon);",
          "context": "XPLMHandleCursor_f",
          "id": "example_0",
          "language": "c",
          "line_count": 4,
          "type": "snippet"
        }
      ],
      "cross_references": [
        "XPLMCursorStatus",
        "XPLMCreateWindowEx",
        "XPLMCreateWindow"
      ],
      "markdown": "### [XPLMHandleCursor_f](/sdk/XPLMHandleCursor_f/)\n\n```cpp\ntypedef XPLMCursorStatus (* XPLMHandleCursor_f)(\n                         XPLMWindowID         inWindowID,\n                         int                  x,\n                         int                  y,\n                         void *               inRefcon);\n\n```\n\nThe SDK calls your cursor status callback when the mouse is over your plugin\nwindow. Return a cursor status code to indicate how you would like X-Plane to\nmanage the cursor. If you return[xplm_CursorDefault](/sdk/xplm_CursorDefault/),\nthe SDK will try lower-Z-order plugin windows, then let the sim manage the\ncursor.\n\nNote: you should never show or hide the cursor yourself—these APIs are typically\nreference-counted and thus cannot safely and predictably be used by the SDK.\nInstead return one of[xplm_CursorHidden](/sdk/xplm_CursorHidden/)to hide the\ncursor or xplm_CursorArrow/xplm_CursorCustom to show the cursor.\n\nIf you want to implement a custom cursor by drawing a cursor in OpenGL,\nuse[xplm_CursorHidden](/sdk/xplm_CursorHidden/)to hide the OS cursor and draw\nthe cursor using a 2-d drawing callback\n(after[xplm_Phase_Window](/sdk/xplm_Phase_Window/)is probably a good choice, but\nsee deprecation warnings on the drawing APIs!). If you want to use a custom\nOS-based cursor, use[xplm_CursorCustom](/sdk/xplm_CursorCustom/)to ask X-Plane\nto show the cursor but not affect its image. You can then use an OS specific\ncall like SetThemeCursor (Mac) or SetCursor/LoadCursor (Windows).\n\nThe units for x and y values match the units used in your window. Thus, for\n“modern” windows (those created\nvia[XPLMCreateWindowEx](/sdk/XPLMCreateWindowEx/)() and compiled against the\nXPLM300 library), the units are boxels, while legacy windows will get pixels.\nLegacy windows have their origin in the lower left of the main X-Plane window,\nwhile modern windows have their origin in the lower left of the global desktop\nspace. In both cases, x increases as you move right, and y increases as you move\nup.",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.333240+00:00",
      "title": "XPLMHandleCursor_f | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMHandleCursor_f/"
    },
    "https://developer.x-plane.com/sdk/XPLMHandleKey_f/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/XPLMHandleKey_f/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"callback\"><h3 class=\"sdk-api-callback\" id=\"XPLMHandleKey_f\"><a href=\"/sdk/XPLMHandleKey_f/\">XPLMHandleKey_f</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>typedef void (* <a href=\"/sdk/XPLMHandleKey_f/\">XPLMHandleKey_f</a>)(\n                         <a href=\"/sdk/XPLMWindowID/\">XPLMWindowID</a>         inWindowID,\n                         char                 inKey,\n                         <a href=\"/sdk/XPLMKeyFlags/\">XPLMKeyFlags</a>         inFlags,\n                         char                 inVirtualKey,\n                         void *               inRefcon,\n                         int                  losingFocus);\n</code></pre><p>This function is called when a key is pressed or keyboard focus is taken away from your window. If losingFocus is 1, you are losing the keyboard focus, otherwise a key was pressed and inKey contains its character.</p><p>The window ID passed in will be your window for key presses, or the other window taking focus when losing focus. Note that in the modern plugin system, often focus is taken by the window manager itself; for this resaon, the window ID may be zero when losing focus, and you should not write code that depends onit.</p><p>The refcon passed in will be the one from registration, for both key presses and losing focus.</p><p>Warning: this API declares virtual keys as a signed character; however the VKEY #define macros in<a href=\"/sdk/XPLMDefs/\">XPLMDefs</a>.h define the vkeys using unsigned values (that is 0x80 instead of -0x80). So you may need to cast the incoming vkey to an unsigned char to get correct comparisons in C.</p></div></div></article>",
      "code_examples": [
        {
          "char_count": 304,
          "code": "typedef void (*XPLMHandleKey_f)(XPLMWindowIDinWindowID,\n                         char                 inKey,XPLMKeyFlagsinFlags,\n                         char                 inVirtualKey,\n                         void *               inRefcon,\n                         int                  losingFocus);",
          "context": "XPLMHandleKey_f",
          "id": "example_0",
          "language": "c",
          "line_count": 5,
          "type": "snippet"
        }
      ],
      "cross_references": [
        "XPLMKeyFlags",
        "unsigned"
      ],
      "markdown": "### [XPLMHandleKey_f](/sdk/XPLMHandleKey_f/)\n\n```cpp\ntypedef void (* XPLMHandleKey_f)(\n                         XPLMWindowID         inWindowID,\n                         char                 inKey,\n                         XPLMKeyFlags         inFlags,\n                         char                 inVirtualKey,\n                         void *               inRefcon,\n                         int                  losingFocus);\n\n```\n\nThis function is called when a key is pressed or keyboard focus is taken away\nfrom your window. If losingFocus is 1, you are losing the keyboard focus,\notherwise a key was pressed and inKey contains its character.\n\nThe window ID passed in will be your window for key presses, or the other window\ntaking focus when losing focus. Note that in the modern plugin system, often\nfocus is taken by the window manager itself; for this resaon, the window ID may\nbe zero when losing focus, and you should not write code that depends onit.\n\nThe refcon passed in will be the one from registration, for both key presses and\nlosing focus.\n\nWarning: this API declares virtual keys as a signed character; however the VKEY\n#define macros in[XPLMDefs](/sdk/XPLMDefs/).h define the vkeys using unsigned\nvalues (that is 0x80 instead of -0x80). So you may need to cast the incoming\nvkey to an unsigned char to get correct comparisons in C.",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.338243+00:00",
      "title": "XPLMHandleKey_f | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMHandleKey_f/"
    },
    "https://developer.x-plane.com/sdk/XPLMHandleMouseClick_f/": {
      "api_signatures": [],
      "category": {
        "category": "XPLM_Utilities",
        "module": "Xplm Utilities",
        "url": "https://developer.x-plane.com/sdk/XPLMHandleMouseClick_f/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"callback\"><h3 class=\"sdk-api-callback\" id=\"XPLMHandleMouseClick_f\"><a href=\"/sdk/XPLMHandleMouseClick_f/\">XPLMHandleMouseClick_f</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>typedef int (* <a href=\"/sdk/XPLMHandleMouseClick_f/\">XPLMHandleMouseClick_f</a>)(\n                         <a href=\"/sdk/XPLMWindowID/\">XPLMWindowID</a>         inWindowID,\n                         int                  x,\n                         int                  y,\n                         <a href=\"/sdk/XPLMMouseStatus/\">XPLMMouseStatus</a>      inMouse,\n                         void *               inRefcon);\n</code></pre><p>You receive this call for one of three events:</p><ul><li>when the user clicks the mouse button down</li><li>(optionally) when the user drags the mouse after a down-click, but before the up-click</li><li>when the user releases the down-clicked mouse button.</li></ul><p>You receive the x and y of the click, your window, and a refcon. Return 1 to consume the click, or 0 to pass it through.</p><p>WARNING: passing clicks through windows (as of this writing) causes mouse tracking problems in X-Plane; do not use this feature!</p><p>The units for x and y values match the units used in your window. Thus, for “modern” windows (those created via<a href=\"/sdk/XPLMCreateWindowEx/\">XPLMCreateWindowEx</a>() and compiled against the XPLM300 library), the units are boxels, while legacy windows will get pixels. Legacy windows have their origin in the lower left of the main X-Plane window, while modern windows have their origin in the lower left of the global desktop space. In both cases, x increases as you move right, and y increases as you move up.</p></div></div></article>",
      "code_examples": [
        {
          "char_count": 239,
          "code": "typedef int (*XPLMHandleMouseClick_f)(XPLMWindowIDinWindowID,\n                         int                  x,\n                         int                  y,XPLMMouseStatusinMouse,\n                         void *               inRefcon);",
          "context": "XPLMHandleMouseClick_f",
          "id": "example_0",
          "language": "c",
          "line_count": 4,
          "type": "snippet"
        }
      ],
      "cross_references": [
        "XPLMMouseStatus",
        "XPLMCreateWindowEx",
        "XPLMCreateWindow"
      ],
      "markdown": "### [XPLMHandleMouseClick_f](/sdk/XPLMHandleMouseClick_f/)\n\n```cpp\ntypedef int (* XPLMHandleMouseClick_f)(\n                         XPLMWindowID         inWindowID,\n                         int                  x,\n                         int                  y,\n                         XPLMMouseStatus      inMouse,\n                         void *               inRefcon);\n\n```\n\nYou receive this call for one of three events:\n\n- when the user clicks the mouse button down\n- (optionally) when the user drags the mouse after a down-click, but before the up-click\n- when the user releases the down-clicked mouse button.\n\nYou receive the x and y of the click, your window, and a refcon. Return 1 to\nconsume the click, or 0 to pass it through.\n\nWARNING: passing clicks through windows (as of this writing) causes mouse\ntracking problems in X-Plane; do not use this feature!\n\nThe units for x and y values match the units used in your window. Thus, for\n“modern” windows (those created\nvia[XPLMCreateWindowEx](/sdk/XPLMCreateWindowEx/)() and compiled against the\nXPLM300 library), the units are boxels, while legacy windows will get pixels.\nLegacy windows have their origin in the lower left of the main X-Plane window,\nwhile modern windows have their origin in the lower left of the global desktop\nspace. In both cases, x increases as you move right, and y increases as you move\nup.",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:24.519702+00:00",
      "title": "XPLMHandleMouseClick_f | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMHandleMouseClick_f/"
    },
    "https://developer.x-plane.com/sdk/XPLMHandleMouseWheel_f/": {
      "api_signatures": [],
      "category": {
        "category": "XPLM_Utilities",
        "module": "Xplm Utilities",
        "url": "https://developer.x-plane.com/sdk/XPLMHandleMouseWheel_f/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"callback XPLM200\"><h3 class=\"sdk-api-callback\" id=\"XPLMHandleMouseWheel_f\"><a href=\"/sdk/XPLMHandleMouseWheel_f/\">XPLMHandleMouseWheel_f</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>typedef int (* <a href=\"/sdk/XPLMHandleMouseWheel_f/\">XPLMHandleMouseWheel_f</a>)(\n                         <a href=\"/sdk/XPLMWindowID/\">XPLMWindowID</a>         inWindowID,\n                         int                  x,\n                         int                  y,\n                         int                  wheel,\n                         int                  clicks,\n                         void *               inRefcon);\n</code></pre><p>The SDK calls your mouse wheel callback when one of the mouse wheels is scrolled within your window. Return 1 to consume the mouse wheel movement or 0 to pass them on to a lower window. (If your window appears opaque to the user, you should consume mouse wheel scrolling even if it does nothing.) The number of “clicks” indicates how far the wheel was turned since the last callback. The wheel is 0 for the vertical axis or 1 for the horizontal axis (for OS/mouse combinations that support this).</p><p>The units for x and y values match the units used in your window. Thus, for “modern” windows (those created via<a href=\"/sdk/XPLMCreateWindowEx/\">XPLMCreateWindowEx</a>() and compiled against the XPLM300 library), the units are boxels, while legacy windows will get pixels. Legacy windows have their origin in the lower left of the main X-Plane window, while modern windows have their origin in the lower left of the global desktop space. In both cases, x increases as you move right, and y increases as you move up.</p></div></div></article>",
      "code_examples": [
        {
          "char_count": 323,
          "code": "typedef int (*XPLMHandleMouseWheel_f)(XPLMWindowIDinWindowID,\n                         int                  x,\n                         int                  y,\n                         int                  wheel,\n                         int                  clicks,\n                         void *               inRefcon);",
          "context": "XPLMHandleMouseWheel_f",
          "id": "example_0",
          "language": "c",
          "line_count": 6,
          "type": "snippet"
        }
      ],
      "cross_references": [
        "XPLMCreateWindowEx",
        "XPLMCreateWindow"
      ],
      "markdown": "### [XPLMHandleMouseWheel_f](/sdk/XPLMHandleMouseWheel_f/)\n\n```cpp\ntypedef int (* XPLMHandleMouseWheel_f)(\n                         XPLMWindowID         inWindowID,\n                         int                  x,\n                         int                  y,\n                         int                  wheel,\n                         int                  clicks,\n                         void *               inRefcon);\n\n```\n\nThe SDK calls your mouse wheel callback when one of the mouse wheels is scrolled\nwithin your window. Return 1 to consume the mouse wheel movement or 0 to pass\nthem on to a lower window. (If your window appears opaque to the user, you\nshould consume mouse wheel scrolling even if it does nothing.) The number of\n“clicks” indicates how far the wheel was turned since the last callback. The\nwheel is 0 for the vertical axis or 1 for the horizontal axis (for OS/mouse\ncombinations that support this).\n\nThe units for x and y values match the units used in your window. Thus, for\n“modern” windows (those created\nvia[XPLMCreateWindowEx](/sdk/XPLMCreateWindowEx/)() and compiled against the\nXPLM300 library), the units are boxels, while legacy windows will get pixels.\nLegacy windows have their origin in the lower left of the main X-Plane window,\nwhile modern windows have their origin in the lower left of the global desktop\nspace. In both cases, x increases as you move right, and y increases as you move\nup.",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:24.523700+00:00",
      "title": "XPLMHandleMouseWheel_f | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMHandleMouseWheel_f/"
    },
    "https://developer.x-plane.com/sdk/XPLMHasAvionicsKeyboardFocus/": {
      "api_signatures": [
        {
          "description": "Returns true (1) if the popup window for a cockpit device has keyboard focus.",
          "name": "XPLMHasAvionicsKeyboardFocus",
          "parameters": [],
          "signature": "XPLM_API intXPLMHasAvionicsKeyboardFocus(XPLMAvionicsIDinHandle);"
        },
        {
          "name": "intXPLMHasAvionicsKeyboardFocus",
          "signature": "XPLM_API intXPLMHasAvionicsKeyboardFocus(XPLMAvionicsIDinHandle);",
          "source": "code_block_extraction",
          "type": "function"
        }
      ],
      "category": {
        "category": "XPLM_Utilities",
        "module": "Xplm Utilities",
        "url": "https://developer.x-plane.com/sdk/XPLMHasAvionicsKeyboardFocus/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"function XPLM410\"><h3 class=\"sdk-api-function\" id=\"XPLMHasAvionicsKeyboardFocus\"><a href=\"/sdk/XPLMHasAvionicsKeyboardFocus/\">XPLMHasAvionicsKeyboardFocus</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API int        <a href=\"/sdk/XPLMHasAvionicsKeyboardFocus/\">XPLMHasAvionicsKeyboardFocus</a>(\n                         <a href=\"/sdk/XPLMAvionicsID/\">XPLMAvionicsID</a>       inHandle);\n</code></pre><p>Returns true (1) if the popup window for a cockpit device has keyboard focus.</p></div></div></article>",
      "code_examples": [
        {
          "char_count": 65,
          "code": "XPLM_API intXPLMHasAvionicsKeyboardFocus(XPLMAvionicsIDinHandle);",
          "context": "XPLMHasAvionicsKeyboardFocus",
          "id": "example_0",
          "language": "c",
          "line_count": 1,
          "type": "snippet"
        }
      ],
      "cross_references": [],
      "markdown": "### [XPLMHasAvionicsKeyboardFocus](/sdk/XPLMHasAvionicsKeyboardFocus/)\n\n```cpp\nXPLM_API int        XPLMHasAvionicsKeyboardFocus(\n                         XPLMAvionicsID       inHandle);\n\n```\n\nReturns true (1) if the popup window for a cockpit device has keyboard focus.",
      "own_functions": [
        "XPLMHasAvionicsKeyboardFocus",
        "intXPLMHasAvionicsKeyboardFocus"
      ],
      "processing_timestamp": "2025-06-25T20:39:24.521701+00:00",
      "title": "XPLMHasAvionicsKeyboardFocus | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMHasAvionicsKeyboardFocus/"
    },
    "https://developer.x-plane.com/sdk/XPLMHasFeature/": {
      "api_signatures": [
        {
          "description": "This returns 1 if the given installation of X-Plane supports a feature, or 0 if it does not.",
          "name": "XPLMHasFeature",
          "parameters": [
            {
              "full_declaration": "const char *         inFeature",
              "name": "inFeature",
              "type": "const char *"
            }
          ],
          "signature": "XPLM_API intXPLMHasFeature(\n                         const char *         inFeature);"
        },
        {
          "name": "intXPLMHasFeature",
          "signature": "XPLM_API intXPLMHasFeature(\n                         const char *         inFeature);",
          "source": "code_block_extraction",
          "type": "function"
        }
      ],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/XPLMHasFeature/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPLMHasFeature\"><a href=\"/sdk/XPLMHasFeature/\">XPLMHasFeature</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API int        <a href=\"/sdk/XPLMHasFeature/\">XPLMHasFeature</a>(\n                         const char *         inFeature);\n</code></pre><p>This returns 1 if the given installation of X-Plane supports a feature, or 0 if it does not.</p></div></div></article>",
      "code_examples": [
        {
          "char_count": 85,
          "code": "XPLM_API intXPLMHasFeature(\n                         const char *         inFeature);",
          "context": "XPLMHasFeature",
          "id": "example_0",
          "language": "c",
          "line_count": 2,
          "type": "snippet"
        }
      ],
      "cross_references": [],
      "markdown": "### [XPLMHasFeature](/sdk/XPLMHasFeature/)\n\n```cpp\nXPLM_API int        XPLMHasFeature(\n                         const char *         inFeature);\n\n```\n\nThis returns 1 if the given installation of X-Plane supports a feature, or 0 if\nit does not.",
      "own_functions": [
        "XPLMHasFeature",
        "intXPLMHasFeature"
      ],
      "processing_timestamp": "2025-06-25T20:39:22.341247+00:00",
      "title": "XPLMHasFeature | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMHasFeature/"
    },
    "https://developer.x-plane.com/sdk/XPLMHasKeyboardFocus/": {
      "api_signatures": [
        {
          "description": "Returns true (1) if the indicated window has keyboard focus. Pass a window ID of 0 to see if no plugin window has focus, and all keystrokes will go directly to X-Plane.",
          "name": "XPLMHasKeyboardFocus",
          "parameters": [],
          "signature": "XPLM_API intXPLMHasKeyboardFocus(XPLMWindowIDinWindow);"
        },
        {
          "name": "intXPLMHasKeyboardFocus",
          "signature": "XPLM_API intXPLMHasKeyboardFocus(XPLMWindowIDinWindow);",
          "source": "code_block_extraction",
          "type": "function"
        }
      ],
      "category": {
        "category": "XPLM_Utilities",
        "module": "Xplm Utilities",
        "url": "https://developer.x-plane.com/sdk/XPLMHasKeyboardFocus/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPLMHasKeyboardFocus\"><a href=\"/sdk/XPLMHasKeyboardFocus/\">XPLMHasKeyboardFocus</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API int        <a href=\"/sdk/XPLMHasKeyboardFocus/\">XPLMHasKeyboardFocus</a>(\n                         <a href=\"/sdk/XPLMWindowID/\">XPLMWindowID</a>         inWindow);\n</code></pre><p>Returns true (1) if the indicated window has keyboard focus. Pass a window ID of 0 to see if no plugin window has focus, and all keystrokes will go directly to X-Plane.</p></div></div></article>",
      "code_examples": [
        {
          "char_count": 55,
          "code": "XPLM_API intXPLMHasKeyboardFocus(XPLMWindowIDinWindow);",
          "context": "XPLMHasKeyboardFocus",
          "id": "example_0",
          "language": "c",
          "line_count": 1,
          "type": "snippet"
        }
      ],
      "cross_references": [],
      "markdown": "### [XPLMHasKeyboardFocus](/sdk/XPLMHasKeyboardFocus/)\n\n```cpp\nXPLM_API int        XPLMHasKeyboardFocus(\n                         XPLMWindowID         inWindow);\n\n```\n\nReturns true (1) if the indicated window has keyboard focus. Pass a window ID of\n0 to see if no plugin window has focus, and all keystrokes will go directly to\nX-Plane.",
      "own_functions": [
        "XPLMHasKeyboardFocus",
        "intXPLMHasKeyboardFocus"
      ],
      "processing_timestamp": "2025-06-25T20:39:24.529746+00:00",
      "title": "XPLMHasKeyboardFocus | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMHasKeyboardFocus/"
    },
    "https://developer.x-plane.com/sdk/XPLMHostApplicationID/": {
      "api_signatures": [
        {
          "name": "XPLMHostApplicationID",
          "type": "enum",
          "values": []
        }
      ],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/XPLMHostApplicationID/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enum\"><h3 class=\"sdk-api-enum\" id=\"XPLMHostApplicationID\"><a href=\"/sdk/XPLMHostApplicationID/\">XPLMHostApplicationID</a></h3><p>While the plug-in SDK is only accessible to plugins running inside X-Plane, the original authors considered extending the API to other applications that shared basic infrastructure with X-Plane. These enumerations are hold-overs from that original roadmap; all values other than X-Plane are deprecated. Your plugin should never need this enumeration.</p><p><div class=\"enumitem\"><table><thead><tr><th>Name</th><th>Value</th><th>Description</th></tr></thead><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_Host_Unknown\"><a href=\"/sdk/xplm_Host_Unknown/\">xplm_Host_Unknown</a></td><td>\"0\"</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_Host_XPlane\"><a href=\"/sdk/xplm_Host_XPlane/\">xplm_Host_XPlane</a></td><td>\"1\"</td></tr><tr class=\"enumitem XPLM_DEPRECATED\"><td class=\"sdk-api-enum-item\" id=\"xplm_Host_PlaneMaker\"><a href=\"/sdk/xplm_Host_PlaneMaker/\">xplm_Host_PlaneMaker</a></td><td>\"2\"</td></tr><tr class=\"enumitem XPLM_DEPRECATED\"><td class=\"sdk-api-enum-item\" id=\"xplm_Host_WorldMaker\"><a href=\"/sdk/xplm_Host_WorldMaker/\">xplm_Host_WorldMaker</a></td><td>\"3\"</td></tr><tr class=\"enumitem XPLM_DEPRECATED\"><td class=\"sdk-api-enum-item\" id=\"xplm_Host_Briefer\"><a href=\"/sdk/xplm_Host_Briefer/\">xplm_Host_Briefer</a></td><td>\"4\"</td></tr><tr class=\"enumitem XPLM_DEPRECATED\"><td class=\"sdk-api-enum-item\" id=\"xplm_Host_PartMaker\"><a href=\"/sdk/xplm_Host_PartMaker/\">xplm_Host_PartMaker</a></td><td>\"5\"</td></tr><tr class=\"enumitem XPLM_DEPRECATED\"><td class=\"sdk-api-enum-item\" id=\"xplm_Host_YoungsMod\"><a href=\"/sdk/xplm_Host_YoungsMod/\">xplm_Host_YoungsMod</a></td><td>\"6\"</td></tr><tr class=\"enumitem XPLM_DEPRECATED\"><td class=\"sdk-api-enum-item\" id=\"xplm_Host_XAuto\"><a href=\"/sdk/xplm_Host_XAuto/\">xplm_Host_XAuto</a></td><td>\"7\"</td></tr><tr class=\"enumitem XPLM_DEPRECATED\"><td class=\"sdk-api-enum-item\" id=\"xplm_Host_Xavion\"><a href=\"/sdk/xplm_Host_Xavion/\">xplm_Host_Xavion</a></td><td>\"8\"</td></tr><tr class=\"enumitem XPLM_DEPRECATED\"><td class=\"sdk-api-enum-item\" id=\"xplm_Host_Control_Pad\"><a href=\"/sdk/xplm_Host_Control_Pad/\">xplm_Host_Control_Pad</a></td><td>\"9\"</td></tr><tr class=\"enumitem XPLM_DEPRECATED\"><td class=\"sdk-api-enum-item\" id=\"xplm_Host_PFD_Map\"><a href=\"/sdk/xplm_Host_PFD_Map/\">xplm_Host_PFD_Map</a></td><td>\"10\"</td></tr><tr class=\"enumitem XPLM_DEPRECATED\"><td class=\"sdk-api-enum-item\" id=\"xplm_Host_RADAR\"><a href=\"/sdk/xplm_Host_RADAR/\">xplm_Host_RADAR</a></td><td>\"11\"</td></tr></table></div></p></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "### [XPLMHostApplicationID](/sdk/XPLMHostApplicationID/)\n\nWhile the plug-in SDK is only accessible to plugins running inside X-Plane, the\noriginal authors considered extending the API to other applications that shared\nbasic infrastructure with X-Plane. These enumerations are hold-overs from that\noriginal roadmap; all values other than X-Plane are deprecated. Your plugin\nshould never need this enumeration.\n\n| Name | Value | Description |\n| --- | --- | --- |\n| [xplm_Host_Unknown](/sdk/xplm_Host_Unknown/) | \"0\" |\n| [xplm_Host_XPlane](/sdk/xplm_Host_XPlane/) | \"1\" |\n| [xplm_Host_PlaneMaker](/sdk/xplm_Host_PlaneMaker/) | \"2\" |\n| [xplm_Host_WorldMaker](/sdk/xplm_Host_WorldMaker/) | \"3\" |\n| [xplm_Host_Briefer](/sdk/xplm_Host_Briefer/) | \"4\" |\n| [xplm_Host_PartMaker](/sdk/xplm_Host_PartMaker/) | \"5\" |\n| [xplm_Host_YoungsMod](/sdk/xplm_Host_YoungsMod/) | \"6\" |\n| [xplm_Host_XAuto](/sdk/xplm_Host_XAuto/) | \"7\" |\n| [xplm_Host_Xavion](/sdk/xplm_Host_Xavion/) | \"8\" |\n| [xplm_Host_Control_Pad](/sdk/xplm_Host_Control_Pad/) | \"9\" |\n| [xplm_Host_PFD_Map](/sdk/xplm_Host_PFD_Map/) | \"10\" |\n| [xplm_Host_RADAR](/sdk/xplm_Host_RADAR/) | \"11\" |",
      "own_functions": [
        "XPLMHostApplicationID"
      ],
      "processing_timestamp": "2025-06-25T20:39:22.350320+00:00",
      "title": "XPLMHostApplicationID | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMHostApplicationID/"
    },
    "https://developer.x-plane.com/sdk/XPLMHotKeyID/": {
      "api_signatures": [],
      "category": {
        "category": "XPLM_Utilities",
        "module": "Xplm Utilities",
        "url": "https://developer.x-plane.com/sdk/XPLMHotKeyID/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"typedef\"><h3 class=\"sdk-api-type\" id=\"XPLMHotKeyID\"><a href=\"/sdk/XPLMHotKeyID/\">XPLMHotKeyID</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>typedef void * <a href=\"/sdk/XPLMHotKeyID/\">XPLMHotKeyID</a>;</code></pre><p>An opaque ID used to identify a hot key.</p></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "### [XPLMHotKeyID](/sdk/XPLMHotKeyID/)\n\n```cpp\ntypedef void * XPLMHotKeyID;\n```\n\nAn opaque ID used to identify a hot key.",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:24.527700+00:00",
      "title": "XPLMHotKeyID | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMHotKeyID/"
    },
    "https://developer.x-plane.com/sdk/XPLMHotKey_f/": {
      "api_signatures": [],
      "category": {
        "category": "XPLM_Utilities",
        "module": "Xplm Utilities",
        "url": "https://developer.x-plane.com/sdk/XPLMHotKey_f/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"callback\"><h3 class=\"sdk-api-callback\" id=\"XPLMHotKey_f\"><a href=\"/sdk/XPLMHotKey_f/\">XPLMHotKey_f</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>typedef void (* <a href=\"/sdk/XPLMHotKey_f/\">XPLMHotKey_f</a>)(\n                         void *               inRefcon);\n</code></pre><p>Your hot key callback simply takes a pointer of your choosing.</p></div></div></article>",
      "code_examples": [
        {
          "char_count": 86,
          "code": "typedef void (*XPLMHotKey_f)(\n                         void *               inRefcon);",
          "context": "XPLMHotKey_f",
          "id": "example_0",
          "language": "c",
          "line_count": 2,
          "type": "snippet"
        }
      ],
      "cross_references": [],
      "markdown": "### [XPLMHotKey_f](/sdk/XPLMHotKey_f/)\n\n```cpp\ntypedef void (* XPLMHotKey_f)(\n                         void *               inRefcon);\n\n```\n\nYour hot key callback simply takes a pointer of your choosing.",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:24.525700+00:00",
      "title": "XPLMHotKey_f | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMHotKey_f/"
    },
    "https://developer.x-plane.com/sdk/XPLMInitialized/": {
      "api_signatures": [
        {
          "deprecated": true,
          "description": "Deprecated: This function returns 1 if X-Plane has properly initialized the plug-in system. If this routine returns 0, many XPLM functions will not work.",
          "name": "XPLMInitialized",
          "parameters": [],
          "signature": "XPLM_API intXPLMInitialized(void);"
        },
        {
          "name": "intXPLMInitialized",
          "signature": "XPLM_API intXPLMInitialized(void);",
          "source": "code_block_extraction",
          "type": "function"
        }
      ],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/XPLMInitialized/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"function XPLM_DEPRECATED\"><h3 class=\"sdk-api-function\" id=\"XPLMInitialized\"><a href=\"/sdk/XPLMInitialized/\">XPLMInitialized</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API int        <a href=\"/sdk/XPLMInitialized/\">XPLMInitialized</a>(void);\n</code></pre><p>Deprecated: This function returns 1 if X-Plane has properly initialized the plug-in system. If this routine returns 0, many XPLM functions will not work.</p><p>NOTE: because plugins are always called from within the XPLM, there is no need to check for initialization; it will always return 1. This routine is deprecated - you do not need to check it before continuing within your plugin.</p></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "### [XPLMInitialized](/sdk/XPLMInitialized/)\n\n```cpp\nXPLM_API int        XPLMInitialized(void);\n\n```\n\nDeprecated: This function returns 1 if X-Plane has properly initialized the\nplug-in system. If this routine returns 0, many XPLM functions will not work.\n\nNOTE: because plugins are always called from within the XPLM, there is no need\nto check for initialization; it will always return 1. This routine is deprecated\n- you do not need to check it before continuing within your plugin.",
      "own_functions": [
        "XPLMInitialized",
        "intXPLMInitialized"
      ],
      "processing_timestamp": "2025-06-25T20:39:22.358825+00:00",
      "title": "XPLMInitialized | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMInitialized/"
    },
    "https://developer.x-plane.com/sdk/XPLMInstance/": {
      "api_signatures": [
        {
          "description": "XPLMCreateInstancecreates a new instance, managed by your plug-in, and returns a handle to the instance. A few important requirements:",
          "name": "XPLMCreateInstance",
          "parameters": [
            {
              "full_declaration": "const char **        datarefs",
              "name": "datarefs",
              "type": "const char **"
            }
          ],
          "signature": "XPLM_APIXPLMInstanceRefXPLMCreateInstance(XPLMObjectRefobj,\n                         const char **        datarefs);"
        },
        {
          "description": "XPLMDestroyInstancedestroys and deallocates your instance; once called, you are still responsible for releasing the OBJ ref.",
          "name": "XPLMDestroyInstance",
          "parameters": [],
          "signature": "XPLM_API voidXPLMDestroyInstance(XPLMInstanceRefinstance);"
        },
        {
          "description": "Updates both the position of the instance and all datarefs you registered for it. Call this from a flight loop callback or UI callback.",
          "name": "XPLMInstanceSetPosition",
          "parameters": [
            {
              "full_declaration": "constXPLMDrawInfo_t* new_position",
              "name": "new_position",
              "type": "constXPLMDrawInfo_t*"
            },
            {
              "full_declaration": "const float *        data",
              "name": "data",
              "type": "const float *"
            }
          ],
          "signature": "XPLM_API voidXPLMInstanceSetPosition(XPLMInstanceRefinstance,\n                         constXPLMDrawInfo_t* new_position,\n                         const float *        data);"
        },
        {
          "name": "voidXPLMDestroyInstance",
          "signature": "XPLM_API voidXPLMDestroyInstance(XPLMInstanceRefinstance);",
          "source": "code_block_extraction",
          "type": "function"
        },
        {
          "name": "voidXPLMInstanceSetPosition",
          "signature": "XPLM_API voidXPLMInstanceSetPosition(XPLMInstanceRefinstance,\n                         constXPLMDrawInfo_t* new_position,\n                         const float *        data);",
          "source": "code_block_extraction",
          "type": "function"
        }
      ],
      "category": {
        "category": "XPLM_Instance",
        "module": "Xplm Instance",
        "url": "https://developer.x-plane.com/sdk/XPLMInstance/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"api\"><h1 class=\"sdk-api-title\" id=\"XPLMInstance\"><a href=\"/sdk/XPLMInstance/\">XPLMInstance</a>API</h1><p>This API provides instanced drawing of X-Plane objects (.obj files). In contrast to old drawing APIs, which required you to draw your own objects per-frame, the instancing API allows you to simply register an OBJ for drawing, then move or manipulate it later (as needed).</p><p>This provides one tremendous benefit: it keeps all dataref operations for your object in one place. Because datarefs access may be done from the main thread only, allowing dataref access anywhere is a serious performance bottleneck for the simulator - the whole simulator has to pause and wait for each dataref access. This performance penalty will only grow worse as X-Plane moves toward an ever more heavily multithreaded engine.</p><p>The instancing API allows X-Plane to isolate all dataref manipulations for all plugin object drawing to one place, potentially providing huge performance gains.</p><p>Here’s how it works:</p><p>When an instance is created, it provides a list of all datarefs you want to manipulate for the OBJ in the future. This list of datarefs replaces the ad-hoc collections of dataref objects previously used by art assets. Then, per-frame, you can manipulate the instance by passing in a “block” of packed floats representing the current values of the datarefs for your instance. (Note that the ordering of this set of packed floats must exactly match the ordering of the datarefs when you created your instance.)</p><div class=\"component\"><h2 id=\"Instance Creation and Destruction\">Instance Creation and Destruction</h2><p>Registers and unregisters instances.</p><div class=\"typedef\"><h3 class=\"sdk-api-type\" id=\"XPLMInstanceRef\"><a href=\"/sdk/XPLMInstanceRef/\">XPLMInstanceRef</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>typedef void * <a href=\"/sdk/XPLMInstanceRef/\">XPLMInstanceRef</a>;</code></pre><p>An opaque handle to an instance.</p></div><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPLMCreateInstance\"><a href=\"/sdk/XPLMCreateInstance/\">XPLMCreateInstance</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API <a href=\"/sdk/XPLMInstanceRef/\">XPLMInstanceRef</a> <a href=\"/sdk/XPLMCreateInstance/\">XPLMCreateInstance</a>(\n                         <a href=\"/sdk/XPLMObjectRef/\">XPLMObjectRef</a>        obj,\n                         const char **        datarefs);\n</code></pre><p><a href=\"/sdk/XPLMCreateInstance/\">XPLMCreateInstance</a>creates a new instance, managed by your plug-in, and returns a handle to the instance. A few important requirements:</p><ul><li><p>The object passed in must be fully loaded and returned from the XPLM before you can create your instance; you cannot pass a null obj ref, nor can you change the ref later.</p></li><li><p>If you use any custom datarefs in your object, they must be registered before the object is loaded. This is true even if their data will be provided via the instance dataref list.</p></li><li><p>The instance dataref array must be a valid pointer to a null-terminated array. That is, if you do not want any datarefs, you must pass a pointer to a one-element array containing a null item. You cannot pass null for the array itself.</p></li></ul></div><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPLMDestroyInstance\"><a href=\"/sdk/XPLMDestroyInstance/\">XPLMDestroyInstance</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API void       <a href=\"/sdk/XPLMDestroyInstance/\">XPLMDestroyInstance</a>(\n                         <a href=\"/sdk/XPLMInstanceRef/\">XPLMInstanceRef</a>      instance);\n</code></pre><p><a href=\"/sdk/XPLMDestroyInstance/\">XPLMDestroyInstance</a>destroys and deallocates your instance; once called, you are still responsible for releasing the OBJ ref.</p><p>Tip: you can release your OBJ ref after you call<a href=\"/sdk/XPLMCreateInstance/\">XPLMCreateInstance</a>as long as you never use it again; the instance will maintain its own reference to the OBJ and the object OBJ be deallocated when the instance is destroyed.</p></div></div><div class=\"component\"><h2 id=\"Instance Manipulation\">Instance Manipulation</h2><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPLMInstanceSetPosition\"><a href=\"/sdk/XPLMInstanceSetPosition/\">XPLMInstanceSetPosition</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API void       <a href=\"/sdk/XPLMInstanceSetPosition/\">XPLMInstanceSetPosition</a>(\n                         <a href=\"/sdk/XPLMInstanceRef/\">XPLMInstanceRef</a>      instance,\n                         const <a href=\"/sdk/XPLMDrawInfo_t/\">XPLMDrawInfo_t</a> * new_position,\n                         const float *        data);\n</code></pre><p>Updates both the position of the instance and all datarefs you registered for it. Call this from a flight loop callback or UI callback.</p><p><strong>DO_NOT</strong>call<a href=\"/sdk/XPLMInstanceSetPosition/\">XPLMInstanceSetPosition</a>from a drawing callback; the whole point of instancing is that you do not need any drawing callbacks. Setting instance data from a drawing callback may have undefined consequences, and the drawing callback hurts FPS unnecessarily.</p><p>The memory pointed to by the data pointer must be large enough to hold one float for every dataref you have registered, and must contain valid floating point data.</p><p>BUG: before X-Plane 11.50, if you have no dataref registered, you must still pass a valid pointer for data and not null.</p></div></div></div></div></article>",
      "code_examples": [
        {
          "char_count": 116,
          "code": "XPLM_APIXPLMInstanceRefXPLMCreateInstance(XPLMObjectRefobj,\n                         const char **        datarefs);",
          "context": "XPLMCreateInstance",
          "id": "example_1",
          "language": "c",
          "line_count": 2,
          "type": "snippet"
        },
        {
          "char_count": 58,
          "code": "XPLM_API voidXPLMDestroyInstance(XPLMInstanceRefinstance);",
          "context": "XPLMDestroyInstance",
          "id": "example_2",
          "language": "c",
          "line_count": 1,
          "type": "snippet"
        },
        {
          "char_count": 174,
          "code": "XPLM_API voidXPLMInstanceSetPosition(XPLMInstanceRefinstance,\n                         constXPLMDrawInfo_t* new_position,\n                         const float *        data);",
          "context": "XPLMInstanceSetPosition",
          "id": "example_3",
          "language": "c",
          "line_count": 3,
          "type": "snippet"
        }
      ],
      "cross_references": [],
      "markdown": "# [XPLMInstance](/sdk/XPLMInstance/)API\n\nThis API provides instanced drawing of X-Plane objects (.obj files). In contrast\nto old drawing APIs, which required you to draw your own objects per-frame, the\ninstancing API allows you to simply register an OBJ for drawing, then move or\nmanipulate it later (as needed).\n\nThis provides one tremendous benefit: it keeps all dataref operations for your\nobject in one place. Because datarefs access may be done from the main thread\nonly, allowing dataref access anywhere is a serious performance bottleneck for\nthe simulator - the whole simulator has to pause and wait for each dataref\naccess. This performance penalty will only grow worse as X-Plane moves toward an\never more heavily multithreaded engine.\n\nThe instancing API allows X-Plane to isolate all dataref manipulations for all\nplugin object drawing to one place, potentially providing huge performance\ngains.\n\nHere’s how it works:\n\nWhen an instance is created, it provides a list of all datarefs you want to\nmanipulate for the OBJ in the future. This list of datarefs replaces the ad-hoc\ncollections of dataref objects previously used by art assets. Then, per-frame,\nyou can manipulate the instance by passing in a “block” of packed floats\nrepresenting the current values of the datarefs for your instance. (Note that\nthe ordering of this set of packed floats must exactly match the ordering of the\ndatarefs when you created your instance.)\n\n## Instance Creation and Destruction\n\nRegisters and unregisters instances.\n\n### [XPLMInstanceRef](/sdk/XPLMInstanceRef/)\n\n```cpp\ntypedef void * XPLMInstanceRef;\n```\n\nAn opaque handle to an instance.\n\n### [XPLMCreateInstance](/sdk/XPLMCreateInstance/)\n\n```cpp\nXPLM_API XPLMInstanceRef XPLMCreateInstance(\n                         XPLMObjectRef        obj,\n                         const char **        datarefs);\n\n```\n\n[XPLMCreateInstance](/sdk/XPLMCreateInstance/)creates a new instance, managed by\nyour plug-in, and returns a handle to the instance. A few important\nrequirements:\n\n- The object passed in must be fully loaded and returned from the XPLM before you\n  can create your instance; you cannot pass a null obj ref, nor can you change the\n  ref later.\n- If you use any custom datarefs in your object, they must be registered before\n  the object is loaded. This is true even if their data will be provided via the\n  instance dataref list.\n- The instance dataref array must be a valid pointer to a null-terminated array.\n  That is, if you do not want any datarefs, you must pass a pointer to a\n  one-element array containing a null item. You cannot pass null for the array\n  itself.\n\n### [XPLMDestroyInstance](/sdk/XPLMDestroyInstance/)\n\n```cpp\nXPLM_API void       XPLMDestroyInstance(\n                         XPLMInstanceRef      instance);\n\n```\n\n[XPLMDestroyInstance](/sdk/XPLMDestroyInstance/)destroys and deallocates your\ninstance; once called, you are still responsible for releasing the OBJ ref.\n\nTip: you can release your OBJ ref after you\ncall[XPLMCreateInstance](/sdk/XPLMCreateInstance/)as long as you never use it\nagain; the instance will maintain its own reference to the OBJ and the object\nOBJ be deallocated when the instance is destroyed.\n\n## Instance Manipulation\n\n### [XPLMInstanceSetPosition](/sdk/XPLMInstanceSetPosition/)\n\n```cpp\nXPLM_API void       XPLMInstanceSetPosition(\n                         XPLMInstanceRef      instance,\n                         const XPLMDrawInfo_t * new_position,\n                         const float *        data);\n\n```\n\nUpdates both the position of the instance and all datarefs you registered for\nit. Call this from a flight loop callback or UI callback.\n\n**DO_NOT**call[XPLMInstanceSetPosition](/sdk/XPLMInstanceSetPosition/)from a\ndrawing callback; the whole point of instancing is that you do not need any\ndrawing callbacks. Setting instance data from a drawing callback may have\nundefined consequences, and the drawing callback hurts FPS unnecessarily.\n\nThe memory pointed to by the data pointer must be large enough to hold one float\nfor every dataref you have registered, and must contain valid floating point\ndata.\n\nBUG: before X-Plane 11.50, if you have no dataref registered, you must still\npass a valid pointer for data and not null.",
      "own_functions": [
        "XPLMCreateInstance",
        "XPLMDestroyInstance",
        "XPLMInstanceSetPosition",
        "voidXPLMDestroyInstance",
        "voidXPLMInstanceSetPosition"
      ],
      "processing_timestamp": "2025-06-25T20:39:23.736407+00:00",
      "title": "XPLMInstance | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMInstance/"
    },
    "https://developer.x-plane.com/sdk/XPLMInstanceRef/": {
      "api_signatures": [],
      "category": {
        "category": "XPLM_Instance",
        "module": "Xplm Instance",
        "url": "https://developer.x-plane.com/sdk/XPLMInstanceRef/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"typedef\"><h3 class=\"sdk-api-type\" id=\"XPLMInstanceRef\"><a href=\"/sdk/XPLMInstanceRef/\">XPLMInstanceRef</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>typedef void * <a href=\"/sdk/XPLMInstanceRef/\">XPLMInstanceRef</a>;</code></pre><p>An opaque handle to an instance.</p></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "### [XPLMInstanceRef](/sdk/XPLMInstanceRef/)\n\n```cpp\ntypedef void * XPLMInstanceRef;\n```\n\nAn opaque handle to an instance.",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:23.737407+00:00",
      "title": "XPLMInstanceRef | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMInstanceRef/"
    },
    "https://developer.x-plane.com/sdk/XPLMInstanceSetPosition/": {
      "api_signatures": [
        {
          "description": "Updates both the position of the instance and all datarefs you registered for it. Call this from a flight loop callback or UI callback.",
          "name": "XPLMInstanceSetPosition",
          "parameters": [
            {
              "full_declaration": "constXPLMDrawInfo_t* new_position",
              "name": "new_position",
              "type": "constXPLMDrawInfo_t*"
            },
            {
              "full_declaration": "const float *        data",
              "name": "data",
              "type": "const float *"
            }
          ],
          "signature": "XPLM_API voidXPLMInstanceSetPosition(XPLMInstanceRefinstance,\n                         constXPLMDrawInfo_t* new_position,\n                         const float *        data);"
        },
        {
          "name": "voidXPLMInstanceSetPosition",
          "signature": "XPLM_API voidXPLMInstanceSetPosition(XPLMInstanceRefinstance,\n                         constXPLMDrawInfo_t* new_position,\n                         const float *        data);",
          "source": "code_block_extraction",
          "type": "function"
        }
      ],
      "category": {
        "category": "XPLM_Instance",
        "module": "Xplm Instance",
        "url": "https://developer.x-plane.com/sdk/XPLMInstanceSetPosition/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPLMInstanceSetPosition\"><a href=\"/sdk/XPLMInstanceSetPosition/\">XPLMInstanceSetPosition</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API void       <a href=\"/sdk/XPLMInstanceSetPosition/\">XPLMInstanceSetPosition</a>(\n                         <a href=\"/sdk/XPLMInstanceRef/\">XPLMInstanceRef</a>      instance,\n                         const <a href=\"/sdk/XPLMDrawInfo_t/\">XPLMDrawInfo_t</a> * new_position,\n                         const float *        data);\n</code></pre><p>Updates both the position of the instance and all datarefs you registered for it. Call this from a flight loop callback or UI callback.</p><p><strong>DO_NOT</strong>call<a href=\"/sdk/XPLMInstanceSetPosition/\">XPLMInstanceSetPosition</a>from a drawing callback; the whole point of instancing is that you do not need any drawing callbacks. Setting instance data from a drawing callback may have undefined consequences, and the drawing callback hurts FPS unnecessarily.</p><p>The memory pointed to by the data pointer must be large enough to hold one float for every dataref you have registered, and must contain valid floating point data.</p><p>BUG: before X-Plane 11.50, if you have no dataref registered, you must still pass a valid pointer for data and not null.</p></div></div></article>",
      "code_examples": [
        {
          "char_count": 174,
          "code": "XPLM_API voidXPLMInstanceSetPosition(XPLMInstanceRefinstance,\n                         constXPLMDrawInfo_t* new_position,\n                         const float *        data);",
          "context": "XPLMInstanceSetPosition",
          "id": "example_0",
          "language": "c",
          "line_count": 3,
          "type": "snippet"
        }
      ],
      "cross_references": [],
      "markdown": "### [XPLMInstanceSetPosition](/sdk/XPLMInstanceSetPosition/)\n\n```cpp\nXPLM_API void       XPLMInstanceSetPosition(\n                         XPLMInstanceRef      instance,\n                         const XPLMDrawInfo_t * new_position,\n                         const float *        data);\n\n```\n\nUpdates both the position of the instance and all datarefs you registered for\nit. Call this from a flight loop callback or UI callback.\n\n**DO_NOT**call[XPLMInstanceSetPosition](/sdk/XPLMInstanceSetPosition/)from a\ndrawing callback; the whole point of instancing is that you do not need any\ndrawing callbacks. Setting instance data from a drawing callback may have\nundefined consequences, and the drawing callback hurts FPS unnecessarily.\n\nThe memory pointed to by the data pointer must be large enough to hold one float\nfor every dataref you have registered, and must contain valid floating point\ndata.\n\nBUG: before X-Plane 11.50, if you have no dataref registered, you must still\npass a valid pointer for data and not null.",
      "own_functions": [
        "XPLMInstanceSetPosition",
        "voidXPLMInstanceSetPosition"
      ],
      "processing_timestamp": "2025-06-25T20:39:23.740410+00:00",
      "title": "XPLMInstanceSetPosition | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMInstanceSetPosition/"
    },
    "https://developer.x-plane.com/sdk/XPLMIsAvionicsBound/": {
      "api_signatures": [
        {
          "description": "Returns true (1) if the cockpit device with the given handle is used by the current aircraft.",
          "name": "XPLMIsAvionicsBound",
          "parameters": [],
          "signature": "XPLM_API intXPLMIsAvionicsBound(XPLMAvionicsIDinHandle);"
        },
        {
          "name": "intXPLMIsAvionicsBound",
          "signature": "XPLM_API intXPLMIsAvionicsBound(XPLMAvionicsIDinHandle);",
          "source": "code_block_extraction",
          "type": "function"
        }
      ],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/XPLMIsAvionicsBound/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"function XPLM410\"><h3 class=\"sdk-api-function\" id=\"XPLMIsAvionicsBound\"><a href=\"/sdk/XPLMIsAvionicsBound/\">XPLMIsAvionicsBound</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API int        <a href=\"/sdk/XPLMIsAvionicsBound/\">XPLMIsAvionicsBound</a>(\n                         <a href=\"/sdk/XPLMAvionicsID/\">XPLMAvionicsID</a>       inHandle);\n</code></pre><p>Returns true (1) if the cockpit device with the given handle is used by the current aircraft.</p></div></div></article>",
      "code_examples": [
        {
          "char_count": 56,
          "code": "XPLM_API intXPLMIsAvionicsBound(XPLMAvionicsIDinHandle);",
          "context": "XPLMIsAvionicsBound",
          "id": "example_0",
          "language": "c",
          "line_count": 1,
          "type": "snippet"
        }
      ],
      "cross_references": [],
      "markdown": "### [XPLMIsAvionicsBound](/sdk/XPLMIsAvionicsBound/)\n\n```cpp\nXPLM_API int        XPLMIsAvionicsBound(\n                         XPLMAvionicsID       inHandle);\n\n```\n\nReturns true (1) if the cockpit device with the given handle is used by the\ncurrent aircraft.",
      "own_functions": [
        "XPLMIsAvionicsBound",
        "intXPLMIsAvionicsBound"
      ],
      "processing_timestamp": "2025-06-25T20:39:22.351318+00:00",
      "title": "XPLMIsAvionicsBound | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMIsAvionicsBound/"
    },
    "https://developer.x-plane.com/sdk/XPLMIsAvionicsPoppedOut/": {
      "api_signatures": [
        {
          "description": "Returns true (1) if the popup window for a cockpit device is popped out.",
          "name": "XPLMIsAvionicsPoppedOut",
          "parameters": [],
          "signature": "XPLM_API intXPLMIsAvionicsPoppedOut(XPLMAvionicsIDinHandle);"
        },
        {
          "name": "intXPLMIsAvionicsPoppedOut",
          "signature": "XPLM_API intXPLMIsAvionicsPoppedOut(XPLMAvionicsIDinHandle);",
          "source": "code_block_extraction",
          "type": "function"
        }
      ],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/XPLMIsAvionicsPoppedOut/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"function XPLM410\"><h3 class=\"sdk-api-function\" id=\"XPLMIsAvionicsPoppedOut\"><a href=\"/sdk/XPLMIsAvionicsPoppedOut/\">XPLMIsAvionicsPoppedOut</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API int        <a href=\"/sdk/XPLMIsAvionicsPoppedOut/\">XPLMIsAvionicsPoppedOut</a>(\n                         <a href=\"/sdk/XPLMAvionicsID/\">XPLMAvionicsID</a>       inHandle);\n</code></pre><p>Returns true (1) if the popup window for a cockpit device is popped out.</p></div></div></article>",
      "code_examples": [
        {
          "char_count": 60,
          "code": "XPLM_API intXPLMIsAvionicsPoppedOut(XPLMAvionicsIDinHandle);",
          "context": "XPLMIsAvionicsPoppedOut",
          "id": "example_0",
          "language": "c",
          "line_count": 1,
          "type": "snippet"
        }
      ],
      "cross_references": [],
      "markdown": "### [XPLMIsAvionicsPoppedOut](/sdk/XPLMIsAvionicsPoppedOut/)\n\n```cpp\nXPLM_API int        XPLMIsAvionicsPoppedOut(\n                         XPLMAvionicsID       inHandle);\n\n```\n\nReturns true (1) if the popup window for a cockpit device is popped out.",
      "own_functions": [
        "XPLMIsAvionicsPoppedOut",
        "intXPLMIsAvionicsPoppedOut"
      ],
      "processing_timestamp": "2025-06-25T20:39:22.356826+00:00",
      "title": "XPLMIsAvionicsPoppedOut | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMIsAvionicsPoppedOut/"
    },
    "https://developer.x-plane.com/sdk/XPLMIsAvionicsPopupVisible/": {
      "api_signatures": [
        {
          "description": "Returns true (1) if the popup window for a cockpit device is visible.",
          "name": "XPLMIsAvionicsPopupVisible",
          "parameters": [],
          "signature": "XPLM_API intXPLMIsAvionicsPopupVisible(XPLMAvionicsIDinHandle);"
        },
        {
          "name": "intXPLMIsAvionicsPopupVisible",
          "signature": "XPLM_API intXPLMIsAvionicsPopupVisible(XPLMAvionicsIDinHandle);",
          "source": "code_block_extraction",
          "type": "function"
        }
      ],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/XPLMIsAvionicsPopupVisible/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"function XPLM410\"><h3 class=\"sdk-api-function\" id=\"XPLMIsAvionicsPopupVisible\"><a href=\"/sdk/XPLMIsAvionicsPopupVisible/\">XPLMIsAvionicsPopupVisible</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API int        <a href=\"/sdk/XPLMIsAvionicsPopupVisible/\">XPLMIsAvionicsPopupVisible</a>(\n                         <a href=\"/sdk/XPLMAvionicsID/\">XPLMAvionicsID</a>       inHandle);\n</code></pre><p>Returns true (1) if the popup window for a cockpit device is visible.</p></div></div></article>",
      "code_examples": [
        {
          "char_count": 63,
          "code": "XPLM_API intXPLMIsAvionicsPopupVisible(XPLMAvionicsIDinHandle);",
          "context": "XPLMIsAvionicsPopupVisible",
          "id": "example_0",
          "language": "c",
          "line_count": 1,
          "type": "snippet"
        }
      ],
      "cross_references": [],
      "markdown": "### [XPLMIsAvionicsPopupVisible](/sdk/XPLMIsAvionicsPopupVisible/)\n\n```cpp\nXPLM_API int        XPLMIsAvionicsPopupVisible(\n                         XPLMAvionicsID       inHandle);\n\n```\n\nReturns true (1) if the popup window for a cockpit device is visible.",
      "own_functions": [
        "XPLMIsAvionicsPopupVisible",
        "intXPLMIsAvionicsPopupVisible"
      ],
      "processing_timestamp": "2025-06-25T20:39:22.354826+00:00",
      "title": "XPLMIsAvionicsPopupVisible | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMIsAvionicsPopupVisible/"
    },
    "https://developer.x-plane.com/sdk/XPLMIsCameraBeingControlled/": {
      "api_signatures": [
        {
          "description": "This routine returns 1 if the camera is being controlled, zero if it is not. If it is and you pass in a pointer to a camera control duration, the current control duration will be returned.",
          "name": "XPLMIsCameraBeingControlled",
          "parameters": [],
          "signature": "XPLM_API intXPLMIsCameraBeingControlled(XPLMCameraControlDuration* outCameraControlDuration);    /* Can be NULL */"
        },
        {
          "name": "intXPLMIsCameraBeingControlled",
          "signature": "XPLM_API intXPLMIsCameraBeingControlled(XPLMCameraControlDuration* outCameraControlDuration);",
          "source": "code_block_extraction",
          "type": "function"
        }
      ],
      "category": {
        "category": "XPLM_Camera",
        "module": "Xplm Camera",
        "url": "https://developer.x-plane.com/sdk/XPLMIsCameraBeingControlled/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPLMIsCameraBeingControlled\"><a href=\"/sdk/XPLMIsCameraBeingControlled/\">XPLMIsCameraBeingControlled</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API int        <a href=\"/sdk/XPLMIsCameraBeingControlled/\">XPLMIsCameraBeingControlled</a>(\n                         <a href=\"/sdk/XPLMCameraControlDuration/\">XPLMCameraControlDuration</a> * outCameraControlDuration);    /* Can be NULL */\n</code></pre><p>This routine returns 1 if the camera is being controlled, zero if it is not. If it is and you pass in a pointer to a camera control duration, the current control duration will be returned.</p></div></div></article>",
      "code_examples": [
        {
          "char_count": 114,
          "code": "XPLM_API intXPLMIsCameraBeingControlled(XPLMCameraControlDuration* outCameraControlDuration);    /* Can be NULL */",
          "context": "XPLMIsCameraBeingControlled",
          "id": "example_0",
          "language": "c",
          "line_count": 1,
          "type": "snippet"
        }
      ],
      "cross_references": [
        "XPLMCameraControlDuration",
        "XPLMCamera"
      ],
      "markdown": "### [XPLMIsCameraBeingControlled](/sdk/XPLMIsCameraBeingControlled/)\n\n```cpp\nXPLM_API int        XPLMIsCameraBeingControlled(\n                         XPLMCameraControlDuration * outCameraControlDuration);    /* Can be NULL */\n\n```\n\nThis routine returns 1 if the camera is being controlled, zero if it is not. If\nit is and you pass in a pointer to a camera control duration, the current\ncontrol duration will be returned.",
      "own_functions": [
        "XPLMIsCameraBeingControlled",
        "intXPLMIsCameraBeingControlled"
      ],
      "processing_timestamp": "2025-06-25T20:39:23.325095+00:00",
      "title": "XPLMIsCameraBeingControlled | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMIsCameraBeingControlled/"
    },
    "https://developer.x-plane.com/sdk/XPLMIsCursorOverAvionics/": {
      "api_signatures": [
        {
          "description": "Returns true (1) if the mouse is currently over the screen of cockpit device with the given handle. If they are not NULL, the optional x and y arguments are filled with the co-ordinates of the mouse cursor in device co-ordinates.",
          "name": "XPLMIsCursorOverAvionics",
          "parameters": [],
          "signature": "XPLM_API intXPLMIsCursorOverAvionics(XPLMAvionicsIDinHandle,\n                         int *                outX,    /* Can be NULL */\n                         int *                outY);    /* Can be NULL */"
        },
        {
          "name": "intXPLMIsCursorOverAvionics",
          "signature": "XPLM_API intXPLMIsCursorOverAvionics(XPLMAvionicsIDinHandle,\n                         int *                outX,    /* Can be NULL */\n                         int *                outY);",
          "source": "code_block_extraction",
          "type": "function"
        }
      ],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/XPLMIsCursorOverAvionics/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"function XPLM410\"><h3 class=\"sdk-api-function\" id=\"XPLMIsCursorOverAvionics\"><a href=\"/sdk/XPLMIsCursorOverAvionics/\">XPLMIsCursorOverAvionics</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API int        <a href=\"/sdk/XPLMIsCursorOverAvionics/\">XPLMIsCursorOverAvionics</a>(\n                         <a href=\"/sdk/XPLMAvionicsID/\">XPLMAvionicsID</a>       inHandle,\n                         int *                outX,    /* Can be NULL */\n                         int *                outY);    /* Can be NULL */\n</code></pre><p>Returns true (1) if the mouse is currently over the screen of cockpit device with the given handle. If they are not NULL, the optional x and y arguments are filled with the co-ordinates of the mouse cursor in device co-ordinates.</p></div></div></article>",
      "code_examples": [
        {
          "char_count": 207,
          "code": "XPLM_API intXPLMIsCursorOverAvionics(XPLMAvionicsIDinHandle,\n                         int *                outX,    /* Can be NULL */\n                         int *                outY);    /* Can be NULL */",
          "context": "XPLMIsCursorOverAvionics",
          "id": "example_0",
          "language": "c",
          "line_count": 3,
          "type": "snippet"
        }
      ],
      "cross_references": [],
      "markdown": "### [XPLMIsCursorOverAvionics](/sdk/XPLMIsCursorOverAvionics/)\n\n```cpp\nXPLM_API int        XPLMIsCursorOverAvionics(\n                         XPLMAvionicsID       inHandle,\n                         int *                outX,    /* Can be NULL */\n                         int *                outY);    /* Can be NULL */\n\n```\n\nReturns true (1) if the mouse is currently over the screen of cockpit device\nwith the given handle. If they are not NULL, the optional x and y arguments are\nfilled with the co-ordinates of the mouse cursor in device co-ordinates.",
      "own_functions": [
        "XPLMIsCursorOverAvionics",
        "intXPLMIsCursorOverAvionics"
      ],
      "processing_timestamp": "2025-06-25T20:39:22.361828+00:00",
      "title": "XPLMIsCursorOverAvionics | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMIsCursorOverAvionics/"
    },
    "https://developer.x-plane.com/sdk/XPLMIsDataRefGood/": {
      "api_signatures": [
        {
          "description": "This function returns true if the passed in handle is a valid dataref that is not orphaned.",
          "name": "XPLMIsDataRefGood",
          "parameters": [],
          "signature": "XPLM_API intXPLMIsDataRefGood(XPLMDataRefinDataRef);"
        },
        {
          "name": "intXPLMIsDataRefGood",
          "signature": "XPLM_API intXPLMIsDataRefGood(XPLMDataRefinDataRef);",
          "source": "code_block_extraction",
          "type": "function"
        }
      ],
      "category": {
        "category": "XPLM_DataAccess",
        "module": "Xplm Dataaccess",
        "url": "https://developer.x-plane.com/sdk/XPLMIsDataRefGood/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPLMIsDataRefGood\"><a href=\"/sdk/XPLMIsDataRefGood/\">XPLMIsDataRefGood</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API int        <a href=\"/sdk/XPLMIsDataRefGood/\">XPLMIsDataRefGood</a>(\n                         <a href=\"/sdk/XPLMDataRef/\">XPLMDataRef</a>          inDataRef);\n</code></pre><p>This function returns true if the passed in handle is a valid dataref that is not orphaned.</p><p>Note: there is normally no need to call this function; datarefs returned by<a href=\"/sdk/XPLMFindDataRef/\">XPLMFindDataRef</a>remain valid (but possibly orphaned) unless there is a complete plugin reload (in which case your plugin is reloaded anyway). Orphaned datarefs can be safely read and return 0. Therefore you never need to call<a href=\"/sdk/XPLMIsDataRefGood/\">XPLMIsDataRefGood</a>to ‘check’ the safety of a dataref. (<a href=\"/sdk/XPLMIsDataRefGood/\">XPLMIsDataRefGood</a>performs some slow checking of the handle validity, so it has a perormance cost.)</p></div></div></article>",
      "code_examples": [
        {
          "char_count": 52,
          "code": "XPLM_API intXPLMIsDataRefGood(XPLMDataRefinDataRef);",
          "context": "XPLMIsDataRefGood",
          "id": "example_0",
          "language": "c",
          "line_count": 1,
          "type": "snippet"
        }
      ],
      "cross_references": [
        "XPLMFindDataRef"
      ],
      "markdown": "### [XPLMIsDataRefGood](/sdk/XPLMIsDataRefGood/)\n\n```cpp\nXPLM_API int        XPLMIsDataRefGood(\n                         XPLMDataRef          inDataRef);\n\n```\n\nThis function returns true if the passed in handle is a valid dataref that is\nnot orphaned.\n\nNote: there is normally no need to call this function; datarefs returned\nby[XPLMFindDataRef](/sdk/XPLMFindDataRef/)remain valid (but possibly orphaned)\nunless there is a complete plugin reload (in which case your plugin is reloaded\nanyway). Orphaned datarefs can be safely read and return 0. Therefore you never\nneed to call[XPLMIsDataRefGood](/sdk/XPLMIsDataRefGood/)to ‘check’ the safety of\na dataref. ([XPLMIsDataRefGood](/sdk/XPLMIsDataRefGood/)performs some slow\nchecking of the handle validity, so it has a perormance cost.)",
      "own_functions": [
        "XPLMIsDataRefGood",
        "intXPLMIsDataRefGood"
      ],
      "processing_timestamp": "2025-06-25T20:39:23.385461+00:00",
      "title": "XPLMIsDataRefGood | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMIsDataRefGood/"
    },
    "https://developer.x-plane.com/sdk/XPLMIsFeatureEnabled/": {
      "api_signatures": [
        {
          "description": "This returns 1 if a feature is currently enabled for your plugin, or 0 if it is not enabled. It is an error to call this routine with an unsupported feature.",
          "name": "XPLMIsFeatureEnabled",
          "parameters": [
            {
              "full_declaration": "const char *         inFeature",
              "name": "inFeature",
              "type": "const char *"
            }
          ],
          "signature": "XPLM_API intXPLMIsFeatureEnabled(\n                         const char *         inFeature);"
        },
        {
          "name": "intXPLMIsFeatureEnabled",
          "signature": "XPLM_API intXPLMIsFeatureEnabled(\n                         const char *         inFeature);",
          "source": "code_block_extraction",
          "type": "function"
        }
      ],
      "category": {
        "category": "XPLM_Plugin",
        "module": "Xplm Plugin",
        "url": "https://developer.x-plane.com/sdk/XPLMIsFeatureEnabled/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPLMIsFeatureEnabled\"><a href=\"/sdk/XPLMIsFeatureEnabled/\">XPLMIsFeatureEnabled</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API int        <a href=\"/sdk/XPLMIsFeatureEnabled/\">XPLMIsFeatureEnabled</a>(\n                         const char *         inFeature);\n</code></pre><p>This returns 1 if a feature is currently enabled for your plugin, or 0 if it is not enabled. It is an error to call this routine with an unsupported feature.</p></div></div></article>",
      "code_examples": [
        {
          "char_count": 91,
          "code": "XPLM_API intXPLMIsFeatureEnabled(\n                         const char *         inFeature);",
          "context": "XPLMIsFeatureEnabled",
          "id": "example_0",
          "language": "c",
          "line_count": 2,
          "type": "snippet"
        }
      ],
      "cross_references": [],
      "markdown": "### [XPLMIsFeatureEnabled](/sdk/XPLMIsFeatureEnabled/)\n\n```cpp\nXPLM_API int        XPLMIsFeatureEnabled(\n                         const char *         inFeature);\n\n```\n\nThis returns 1 if a feature is currently enabled for your plugin, or 0 if it is\nnot enabled. It is an error to call this routine with an unsupported feature.",
      "own_functions": [
        "XPLMIsFeatureEnabled",
        "intXPLMIsFeatureEnabled"
      ],
      "processing_timestamp": "2025-06-25T20:39:24.213260+00:00",
      "title": "XPLMIsFeatureEnabled | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMIsFeatureEnabled/"
    },
    "https://developer.x-plane.com/sdk/XPLMIsPluginEnabled/": {
      "api_signatures": [
        {
          "description": "Returns whether the specified plug-in is enabled for running.",
          "name": "XPLMIsPluginEnabled",
          "parameters": [],
          "signature": "XPLM_API intXPLMIsPluginEnabled(XPLMPluginIDinPluginID);"
        },
        {
          "name": "intXPLMIsPluginEnabled",
          "signature": "XPLM_API intXPLMIsPluginEnabled(XPLMPluginIDinPluginID);",
          "source": "code_block_extraction",
          "type": "function"
        }
      ],
      "category": {
        "category": "XPLM_Plugin",
        "module": "Xplm Plugin",
        "url": "https://developer.x-plane.com/sdk/XPLMIsPluginEnabled/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPLMIsPluginEnabled\"><a href=\"/sdk/XPLMIsPluginEnabled/\">XPLMIsPluginEnabled</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API int        <a href=\"/sdk/XPLMIsPluginEnabled/\">XPLMIsPluginEnabled</a>(\n                         <a href=\"/sdk/XPLMPluginID/\">XPLMPluginID</a>         inPluginID);\n</code></pre><p>Returns whether the specified plug-in is enabled for running.</p></div></div></article>",
      "code_examples": [
        {
          "char_count": 56,
          "code": "XPLM_API intXPLMIsPluginEnabled(XPLMPluginIDinPluginID);",
          "context": "XPLMIsPluginEnabled",
          "id": "example_0",
          "language": "c",
          "line_count": 1,
          "type": "snippet"
        }
      ],
      "cross_references": [
        "XPLMPlugin"
      ],
      "markdown": "### [XPLMIsPluginEnabled](/sdk/XPLMIsPluginEnabled/)\n\n```cpp\nXPLM_API int        XPLMIsPluginEnabled(\n                         XPLMPluginID         inPluginID);\n\n```\n\nReturns whether the specified plug-in is enabled for running.",
      "own_functions": [
        "XPLMIsPluginEnabled",
        "intXPLMIsPluginEnabled"
      ],
      "processing_timestamp": "2025-06-25T20:39:24.209262+00:00",
      "title": "XPLMIsPluginEnabled | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMIsPluginEnabled/"
    },
    "https://developer.x-plane.com/sdk/XPLMIsWindowInFront/": {
      "api_signatures": [
        {
          "description": "This routine returns true if the window you passed in is the frontmost visible window in its layer (XPLMWindowLayer).",
          "name": "XPLMIsWindowInFront",
          "parameters": [],
          "signature": "XPLM_API intXPLMIsWindowInFront(XPLMWindowIDinWindow);"
        },
        {
          "name": "intXPLMIsWindowInFront",
          "signature": "XPLM_API intXPLMIsWindowInFront(XPLMWindowIDinWindow);",
          "source": "code_block_extraction",
          "type": "function"
        }
      ],
      "category": {
        "category": "XPLM_Display",
        "module": "Xplm Display",
        "url": "https://developer.x-plane.com/sdk/XPLMIsWindowInFront/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPLMIsWindowInFront\"><a href=\"/sdk/XPLMIsWindowInFront/\">XPLMIsWindowInFront</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API int        <a href=\"/sdk/XPLMIsWindowInFront/\">XPLMIsWindowInFront</a>(\n                         <a href=\"/sdk/XPLMWindowID/\">XPLMWindowID</a>         inWindow);\n</code></pre><p>This routine returns true if the window you passed in is the frontmost visible window in its layer (<a href=\"/sdk/XPLMWindowLayer/\">XPLMWindowLayer</a>).</p><p>Thus, if you have a window at the front of the floating window layer (<a href=\"/sdk/xplm_WindowLayerFloatingWindows/\">xplm_WindowLayerFloatingWindows</a>), this will return true even if there is a modal window (in layer<a href=\"/sdk/xplm_WindowLayerModal/\">xplm_WindowLayerModal</a>) above you. (Not to worry, though: in such a case, X-Plane will not pass clicks or keyboard input down to your layer until the window above stops “eating” the input.)</p><p>Note that legacy windows are always placed in layer<a href=\"/sdk/xplm_WindowLayerFlightOverlay/\">xplm_WindowLayerFlightOverlay</a>, while modern-style windows default to<a href=\"/sdk/xplm_WindowLayerFloatingWindows/\">xplm_WindowLayerFloatingWindows</a>. This means it’s perfectly consistent to have two different plugin-created windows (one legacy, one modern)<em>both</em>be in the front (of their different layers!) at the same time.</p></div></div></article>",
      "code_examples": [
        {
          "char_count": 54,
          "code": "XPLM_API intXPLMIsWindowInFront(XPLMWindowIDinWindow);",
          "context": "XPLMIsWindowInFront",
          "id": "example_0",
          "language": "c",
          "line_count": 1,
          "type": "snippet"
        }
      ],
      "cross_references": [
        "XPLMWindowLayer"
      ],
      "markdown": "### [XPLMIsWindowInFront](/sdk/XPLMIsWindowInFront/)\n\n```cpp\nXPLM_API int        XPLMIsWindowInFront(\n                         XPLMWindowID         inWindow);\n\n```\n\nThis routine returns true if the window you passed in is the frontmost visible\nwindow in its layer ([XPLMWindowLayer](/sdk/XPLMWindowLayer/)).\n\nThus, if you have a window at the front of the floating window layer\n([xplm_WindowLayerFloatingWindows](/sdk/xplm_WindowLayerFloatingWindows/)), this\nwill return true even if there is a modal window (in\nlayer[xplm_WindowLayerModal](/sdk/xplm_WindowLayerModal/)) above you. (Not to\nworry, though: in such a case, X-Plane will not pass clicks or keyboard input\ndown to your layer until the window above stops “eating” the input.)\n\nNote that legacy windows are always placed in\nlayer[xplm_WindowLayerFlightOverlay](/sdk/xplm_WindowLayerFlightOverlay/), while\nmodern-style windows default\nto[xplm_WindowLayerFloatingWindows](/sdk/xplm_WindowLayerFloatingWindows/). This\nmeans it’s perfectly consistent to have two different plugin-created windows\n(one legacy, one modern)*both*be in the front (of their different layers!) at\nthe same time.",
      "own_functions": [
        "XPLMIsWindowInFront",
        "intXPLMIsWindowInFront"
      ],
      "processing_timestamp": "2025-06-25T20:39:23.518142+00:00",
      "title": "XPLMIsWindowInFront | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMIsWindowInFront/"
    },
    "https://developer.x-plane.com/sdk/XPLMKeyFlags/": {
      "api_signatures": [
        {
          "name": "XPLMKeyFlags",
          "type": "enum",
          "values": [
            {
              "description": "The shift key is down",
              "name": "xplm_ShiftFlag",
              "value": "\"1\""
            },
            {
              "description": "The option or alt key is down",
              "name": "xplm_OptionAltFlag",
              "value": "\"2\""
            },
            {
              "description": "The control key is down",
              "name": "xplm_ControlFlag",
              "value": "\"4\""
            },
            {
              "description": "The key is being pressed down",
              "name": "xplm_DownFlag",
              "value": "\"8\""
            },
            {
              "description": "The key is being released",
              "name": "xplm_UpFlag",
              "value": "\"16\""
            }
          ]
        }
      ],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/XPLMKeyFlags/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enum\"><h3 class=\"sdk-api-enum\" id=\"XPLMKeyFlags\"><a href=\"/sdk/XPLMKeyFlags/\">XPLMKeyFlags</a></h3><p>These bitfields define modifier keys in a platform independent way. When a key is pressed, a series of messages are sent to your plugin. The down flag is set in the first of these messages, and the up flag in the last. While the key is held down, messages are sent with neither flag set to indicate that the key is being held down as a repeated character.</p><p>The control flag is mapped to the control flag on Macintosh and PC. Generally X-Plane uses the control key and not the command key on Macintosh, providing a consistent interface across platforms that does not necessarily match the Macintosh user interface guidelines. There is not yet a way for plugins to access the Macintosh control keys without using #ifdefed code.</p><p><div class=\"enumitem\"><table><thead><tr><th>Name</th><th>Value</th><th>Description</th></tr></thead><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_ShiftFlag\"><a href=\"/sdk/xplm_ShiftFlag/\">xplm_ShiftFlag</a></td><td>\"1\"</td><td>The shift key is down</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_OptionAltFlag\"><a href=\"/sdk/xplm_OptionAltFlag/\">xplm_OptionAltFlag</a></td><td>\"2\"</td><td>The option or alt key is down</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_ControlFlag \"><a href=\"/sdk/xplm_ControlFlag /\">xplm_ControlFlag</a></td><td>\"4\"</td><td>The control key is down</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_DownFlag\"><a href=\"/sdk/xplm_DownFlag/\">xplm_DownFlag</a></td><td>\"8\"</td><td>The key is being pressed down</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_UpFlag\"><a href=\"/sdk/xplm_UpFlag/\">xplm_UpFlag</a></td><td>\"16\"</td><td>The key is being released</td></tr></table></div></p></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "### [XPLMKeyFlags](/sdk/XPLMKeyFlags/)\n\nThese bitfields define modifier keys in a platform independent way. When a key\nis pressed, a series of messages are sent to your plugin. The down flag is set\nin the first of these messages, and the up flag in the last. While the key is\nheld down, messages are sent with neither flag set to indicate that the key is\nbeing held down as a repeated character.\n\nThe control flag is mapped to the control flag on Macintosh and PC. Generally\nX-Plane uses the control key and not the command key on Macintosh, providing a\nconsistent interface across platforms that does not necessarily match the\nMacintosh user interface guidelines. There is not yet a way for plugins to\naccess the Macintosh control keys without using #ifdefed code.\n\n| Name | Value | Description |\n| --- | --- | --- |\n| [xplm_ShiftFlag](/sdk/xplm_ShiftFlag/) | \"1\" | The shift key is down |\n| [xplm_OptionAltFlag](/sdk/xplm_OptionAltFlag/) | \"2\" | The option or alt key\nis down |\n| [xplm_ControlFlag](/sdk/xplm_ControlFlag /) | \"4\" | The control key is down |\n| [xplm_DownFlag](/sdk/xplm_DownFlag/) | \"8\" | The key is being pressed down |\n| [xplm_UpFlag](/sdk/xplm_UpFlag/) | \"16\" | The key is being released |",
      "own_functions": [
        "XPLMKeyFlags"
      ],
      "processing_timestamp": "2025-06-25T20:39:22.380832+00:00",
      "title": "XPLMKeyFlags | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMKeyFlags/"
    },
    "https://developer.x-plane.com/sdk/XPLMKeySniffer_f/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/XPLMKeySniffer_f/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"callback\"><h3 class=\"sdk-api-callback\" id=\"XPLMKeySniffer_f\"><a href=\"/sdk/XPLMKeySniffer_f/\">XPLMKeySniffer_f</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>typedef int (* <a href=\"/sdk/XPLMKeySniffer_f/\">XPLMKeySniffer_f</a>)(\n                         char                 inChar,\n                         <a href=\"/sdk/XPLMKeyFlags/\">XPLMKeyFlags</a>         inFlags,\n                         char                 inVirtualKey,\n                         void *               inRefcon);\n</code></pre><p>This is the prototype for a low level key-sniffing function. Window-based UI<em>should not use this</em>! The windowing system provides high-level mediated keyboard access, via the callbacks you attach to your<a href=\"/sdk/XPLMCreateWindow_t/\">XPLMCreateWindow_t</a>. By comparison, the key sniffer provides low level keyboard access.</p><p>Key sniffers are provided to allow libraries to provide non-windowed user interaction. For example, the MUI library uses a key sniffer to do pop-up text entry.</p><p>Return 1 to pass the key on to the next sniffer, the window manager, X-Plane, or whomever is down stream. Return 0 to consume the key.</p><p>Warning: this API declares virtual keys as a signed character; however the VKEY #define macros in<a href=\"/sdk/XPLMDefs/\">XPLMDefs</a>.h define the vkeys using unsigned values (that is 0x80 instead of -0x80). So you may need to cast the incoming vkey to an unsigned char to get correct comparisons in C.</p></div></div></article>",
      "code_examples": [
        {
          "char_count": 223,
          "code": "typedef int (*XPLMKeySniffer_f)(\n                         char                 inChar,XPLMKeyFlagsinFlags,\n                         char                 inVirtualKey,\n                         void *               inRefcon);",
          "context": "XPLMKeySniffer_f",
          "id": "example_0",
          "language": "c",
          "line_count": 4,
          "type": "snippet"
        }
      ],
      "cross_references": [
        "XPLMKeyFlags",
        "unsigned",
        "XPLMCreateWindow"
      ],
      "markdown": "### [XPLMKeySniffer_f](/sdk/XPLMKeySniffer_f/)\n\n```cpp\ntypedef int (* XPLMKeySniffer_f)(\n                         char                 inChar,\n                         XPLMKeyFlags         inFlags,\n                         char                 inVirtualKey,\n                         void *               inRefcon);\n\n```\n\nThis is the prototype for a low level key-sniffing function. Window-based\nUI*should not use this*! The windowing system provides high-level mediated\nkeyboard access, via the callbacks you attach to\nyour[XPLMCreateWindow_t](/sdk/XPLMCreateWindow_t/). By comparison, the key\nsniffer provides low level keyboard access.\n\nKey sniffers are provided to allow libraries to provide non-windowed user\ninteraction. For example, the MUI library uses a key sniffer to do pop-up text\nentry.\n\nReturn 1 to pass the key on to the next sniffer, the window manager, X-Plane, or\nwhomever is down stream. Return 0 to consume the key.\n\nWarning: this API declares virtual keys as a signed character; however the VKEY\n#define macros in[XPLMDefs](/sdk/XPLMDefs/).h define the vkeys using unsigned\nvalues (that is 0x80 instead of -0x80). So you may need to cast the incoming\nvkey to an unsigned char to get correct comparisons in C.",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.365828+00:00",
      "title": "XPLMKeySniffer_f | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMKeySniffer_f/"
    },
    "https://developer.x-plane.com/sdk/XPLMLanguageCode/": {
      "api_signatures": [
        {
          "name": "XPLMLanguageCode",
          "type": "enum",
          "values": []
        }
      ],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/XPLMLanguageCode/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enum\"><h3 class=\"sdk-api-enum\" id=\"XPLMLanguageCode\"><a href=\"/sdk/XPLMLanguageCode/\">XPLMLanguageCode</a></h3><p>These enums define what language the sim is running in. These enumerations do not imply that the sim can or does run in all of these languages; they simply provide a known encoding in the event that a given sim version is localized to a certain language.</p><p><div class=\"enumitem\"><table><thead><tr><th>Name</th><th>Value</th><th>Description</th></tr></thead><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_Language_Unknown\"><a href=\"/sdk/xplm_Language_Unknown/\">xplm_Language_Unknown</a></td><td>\"0\"</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_Language_English\"><a href=\"/sdk/xplm_Language_English/\">xplm_Language_English</a></td><td>\"1\"</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_Language_French\"><a href=\"/sdk/xplm_Language_French/\">xplm_Language_French</a></td><td>\"2\"</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_Language_German\"><a href=\"/sdk/xplm_Language_German/\">xplm_Language_German</a></td><td>\"3\"</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_Language_Italian\"><a href=\"/sdk/xplm_Language_Italian/\">xplm_Language_Italian</a></td><td>\"4\"</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_Language_Spanish\"><a href=\"/sdk/xplm_Language_Spanish/\">xplm_Language_Spanish</a></td><td>\"5\"</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_Language_Korean\"><a href=\"/sdk/xplm_Language_Korean/\">xplm_Language_Korean</a></td><td>\"6\"</td></tr><tr class=\"enumitem XPLM200\"><td class=\"sdk-api-enum-item\" id=\"xplm_Language_Russian\"><a href=\"/sdk/xplm_Language_Russian/\">xplm_Language_Russian</a></td><td>\"7\"</td></tr><tr class=\"enumitem XPLM200\"><td class=\"sdk-api-enum-item\" id=\"xplm_Language_Greek\"><a href=\"/sdk/xplm_Language_Greek/\">xplm_Language_Greek</a></td><td>\"8\"</td></tr><tr class=\"enumitem XPLM200\"><td class=\"sdk-api-enum-item\" id=\"xplm_Language_Japanese\"><a href=\"/sdk/xplm_Language_Japanese/\">xplm_Language_Japanese</a></td><td>\"9\"</td></tr><tr class=\"enumitem XPLM300\"><td class=\"sdk-api-enum-item\" id=\"xplm_Language_Chinese\"><a href=\"/sdk/xplm_Language_Chinese/\">xplm_Language_Chinese</a></td><td>\"10\"</td></tr><tr class=\"enumitem XPLM400\"><td class=\"sdk-api-enum-item\" id=\"xplm_Language_Ukrainian\"><a href=\"/sdk/xplm_Language_Ukrainian/\">xplm_Language_Ukrainian</a></td><td>\"11\"</td></tr></table></div></p></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "### [XPLMLanguageCode](/sdk/XPLMLanguageCode/)\n\nThese enums define what language the sim is running in. These enumerations do\nnot imply that the sim can or does run in all of these languages; they simply\nprovide a known encoding in the event that a given sim version is localized to a\ncertain language.\n\n| Name | Value | Description |\n| --- | --- | --- |\n| [xplm_Language_Unknown](/sdk/xplm_Language_Unknown/) | \"0\" |\n| [xplm_Language_English](/sdk/xplm_Language_English/) | \"1\" |\n| [xplm_Language_French](/sdk/xplm_Language_French/) | \"2\" |\n| [xplm_Language_German](/sdk/xplm_Language_German/) | \"3\" |\n| [xplm_Language_Italian](/sdk/xplm_Language_Italian/) | \"4\" |\n| [xplm_Language_Spanish](/sdk/xplm_Language_Spanish/) | \"5\" |\n| [xplm_Language_Korean](/sdk/xplm_Language_Korean/) | \"6\" |\n| [xplm_Language_Russian](/sdk/xplm_Language_Russian/) | \"7\" |\n| [xplm_Language_Greek](/sdk/xplm_Language_Greek/) | \"8\" |\n| [xplm_Language_Japanese](/sdk/xplm_Language_Japanese/) | \"9\" |\n| [xplm_Language_Chinese](/sdk/xplm_Language_Chinese/) | \"10\" |\n| [xplm_Language_Ukrainian](/sdk/xplm_Language_Ukrainian/) | \"11\" |",
      "own_functions": [
        "XPLMLanguageCode"
      ],
      "processing_timestamp": "2025-06-25T20:39:22.375833+00:00",
      "title": "XPLMLanguageCode | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMLanguageCode/"
    },
    "https://developer.x-plane.com/sdk/XPLMLibraryEnumerator_f/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/XPLMLibraryEnumerator_f/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"callback\"><h3 class=\"sdk-api-callback\" id=\"XPLMLibraryEnumerator_f\"><a href=\"/sdk/XPLMLibraryEnumerator_f/\">XPLMLibraryEnumerator_f</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>typedef void (* <a href=\"/sdk/XPLMLibraryEnumerator_f/\">XPLMLibraryEnumerator_f</a>)(\n                         const char *         inFilePath,\n                         void *               inRef);\n</code></pre><p>An<a href=\"/sdk/XPLMLibraryEnumerator_f/\">XPLMLibraryEnumerator_f</a>is a callback you provide that is called once for each library element that is located. The returned paths will be relative to the X-System folder.</p></div></div></article>",
      "code_examples": [
        {
          "char_count": 152,
          "code": "typedef void (*XPLMLibraryEnumerator_f)(\n                         const char *         inFilePath,\n                         void *               inRef);",
          "context": "XPLMLibraryEnumerator_f",
          "id": "example_0",
          "language": "c",
          "line_count": 3,
          "type": "snippet"
        }
      ],
      "cross_references": [],
      "markdown": "### [XPLMLibraryEnumerator_f](/sdk/XPLMLibraryEnumerator_f/)\n\n```cpp\ntypedef void (* XPLMLibraryEnumerator_f)(\n                         const char *         inFilePath,\n                         void *               inRef);\n\n```\n\nAn[XPLMLibraryEnumerator_f](/sdk/XPLMLibraryEnumerator_f/)is a callback you\nprovide that is called once for each library element that is located. The\nreturned paths will be relative to the X-System folder.",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.366827+00:00",
      "title": "XPLMLibraryEnumerator_f | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMLibraryEnumerator_f/"
    },
    "https://developer.x-plane.com/sdk/XPLMLoadDataFile/": {
      "api_signatures": [
        {
          "description": "Loads a data file of a given type. Paths must be relative to the X-System folder. To clear the replay, pass a NULL file name (this is only valid with replay movies, not sit files).",
          "name": "XPLMLoadDataFile",
          "parameters": [],
          "signature": "XPLM_API intXPLMLoadDataFile(XPLMDataFileTypeinFileType,\n                         const char *         inFilePath);    /* Can be NULL */"
        },
        {
          "name": "intXPLMLoadDataFile",
          "signature": "XPLM_API intXPLMLoadDataFile(XPLMDataFileTypeinFileType,\n                         const char *         inFilePath);",
          "source": "code_block_extraction",
          "type": "function"
        }
      ],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/XPLMLoadDataFile/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"function XPLM200\"><h3 class=\"sdk-api-function\" id=\"XPLMLoadDataFile\"><a href=\"/sdk/XPLMLoadDataFile/\">XPLMLoadDataFile</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API int        <a href=\"/sdk/XPLMLoadDataFile/\">XPLMLoadDataFile</a>(\n                         <a href=\"/sdk/XPLMDataFileType/\">XPLMDataFileType</a>     inFileType,\n                         const char *         inFilePath);    /* Can be NULL */\n</code></pre><p>Loads a data file of a given type. Paths must be relative to the X-System folder. To clear the replay, pass a NULL file name (this is only valid with replay movies, not sit files).</p></div></div></article>",
      "code_examples": [
        {
          "char_count": 136,
          "code": "XPLM_API intXPLMLoadDataFile(XPLMDataFileTypeinFileType,\n                         const char *         inFilePath);    /* Can be NULL */",
          "context": "XPLMLoadDataFile",
          "id": "example_0",
          "language": "c",
          "line_count": 2,
          "type": "snippet"
        }
      ],
      "cross_references": [
        "XPLMDataFileType"
      ],
      "markdown": "### [XPLMLoadDataFile](/sdk/XPLMLoadDataFile/)\n\n```cpp\nXPLM_API int        XPLMLoadDataFile(\n                         XPLMDataFileType     inFileType,\n                         const char *         inFilePath);    /* Can be NULL */\n\n```\n\nLoads a data file of a given type. Paths must be relative to the X-System\nfolder. To clear the replay, pass a NULL file name (this is only valid with\nreplay movies, not sit files).",
      "own_functions": [
        "XPLMLoadDataFile",
        "intXPLMLoadDataFile"
      ],
      "processing_timestamp": "2025-06-25T20:39:22.381833+00:00",
      "title": "XPLMLoadDataFile | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMLoadDataFile/"
    },
    "https://developer.x-plane.com/sdk/XPLMLoadFMSFlightPlan/": {
      "api_signatures": [
        {
          "description": "Loads an X-Plane 11 and later formatted flightplan from the buffer into the FMS or GPS, including instrument procedures. Use device index 0 for the pilot-side and device index 1 for the co-pilot side unit.",
          "name": "XPLMLoadFMSFlightPlan",
          "parameters": [
            {
              "full_declaration": "int                  inDevice",
              "name": "inDevice",
              "type": "int"
            },
            {
              "full_declaration": "const char *         inBuffer",
              "name": "inBuffer",
              "type": "const char *"
            },
            {
              "full_declaration": "unsigned int         inBufferLen",
              "name": "inBufferLen",
              "type": "unsigned int"
            }
          ],
          "signature": "XPLM_API voidXPLMLoadFMSFlightPlan(\n                         int                  inDevice,\n                         const char *         inBuffer,\n                         unsigned int         inBufferLen);"
        },
        {
          "name": "voidXPLMLoadFMSFlightPlan",
          "signature": "XPLM_API voidXPLMLoadFMSFlightPlan(\n                         int                  inDevice,\n                         const char *         inBuffer,\n                         unsigned int         inBufferLen);",
          "source": "code_block_extraction",
          "type": "function"
        }
      ],
      "category": {
        "category": "XPLM_Navigation",
        "module": "Xplm Navigation",
        "url": "https://developer.x-plane.com/sdk/XPLMLoadFMSFlightPlan/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"function XPLM410\"><h3 class=\"sdk-api-function\" id=\"XPLMLoadFMSFlightPlan\"><a href=\"/sdk/XPLMLoadFMSFlightPlan/\">XPLMLoadFMSFlightPlan</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API void       <a href=\"/sdk/XPLMLoadFMSFlightPlan/\">XPLMLoadFMSFlightPlan</a>(\n                         int                  inDevice,\n                         const char *         inBuffer,\n                         unsigned int         inBufferLen);\n</code></pre><p>Loads an X-Plane 11 and later formatted flightplan from the buffer into the FMS or GPS, including instrument procedures. Use device index 0 for the pilot-side and device index 1 for the co-pilot side unit.</p></div></div></article>",
      "code_examples": [
        {
          "char_count": 207,
          "code": "XPLM_API voidXPLMLoadFMSFlightPlan(\n                         int                  inDevice,\n                         const char *         inBuffer,\n                         unsigned int         inBufferLen);",
          "context": "XPLMLoadFMSFlightPlan",
          "id": "example_0",
          "language": "c",
          "line_count": 4,
          "type": "snippet"
        }
      ],
      "cross_references": [
        "unsigned"
      ],
      "markdown": "### [XPLMLoadFMSFlightPlan](/sdk/XPLMLoadFMSFlightPlan/)\n\n```cpp\nXPLM_API void       XPLMLoadFMSFlightPlan(\n                         int                  inDevice,\n                         const char *         inBuffer,\n                         unsigned int         inBufferLen);\n\n```\n\nLoads an X-Plane 11 and later formatted flightplan from the buffer into the FMS\nor GPS, including instrument procedures. Use device index 0 for the pilot-side\nand device index 1 for the co-pilot side unit.",
      "own_functions": [
        "XPLMLoadFMSFlightPlan",
        "voidXPLMLoadFMSFlightPlan"
      ],
      "processing_timestamp": "2025-06-25T20:39:23.993724+00:00",
      "title": "XPLMLoadFMSFlightPlan | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMLoadFMSFlightPlan/"
    },
    "https://developer.x-plane.com/sdk/XPLMLoadObject/": {
      "api_signatures": [
        {
          "description": "This routine loads an OBJ file and returns a handle to it. If X-Plane has already loaded the object, the handle to the existing object is returned. Do not assume you will get the same handle back twice, but do make sure to call unload once for every load to avoid “leaking” objects. The object will be purged from memory when no plugins and no scenery are using it.",
          "name": "XPLMLoadObject",
          "parameters": [
            {
              "full_declaration": "const char *         inPath",
              "name": "inPath",
              "type": "const char *"
            }
          ],
          "signature": "XPLM_APIXPLMObjectRefXPLMLoadObject(\n                         const char *         inPath);"
        }
      ],
      "category": {
        "category": "XPLM_Instance",
        "module": "Xplm Instance",
        "url": "https://developer.x-plane.com/sdk/XPLMLoadObject/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"function XPLM200\"><h3 class=\"sdk-api-function\" id=\"XPLMLoadObject\"><a href=\"/sdk/XPLMLoadObject/\">XPLMLoadObject</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API <a href=\"/sdk/XPLMObjectRef/\">XPLMObjectRef</a> <a href=\"/sdk/XPLMLoadObject/\">XPLMLoadObject</a>(\n                         const char *         inPath);\n</code></pre><p>This routine loads an OBJ file and returns a handle to it. If X-Plane has already loaded the object, the handle to the existing object is returned. Do not assume you will get the same handle back twice, but do make sure to call unload once for every load to avoid “leaking” objects. The object will be purged from memory when no plugins and no scenery are using it.</p><p>The path for the object must be relative to the X-System base folder. If the path is in the root of the X-System folder you may need to prepend ./ to it; loading objects in the root of the X-System folder is STRONGLY discouraged - your plugin should not dump art resources in the root folder!</p><p><a href=\"/sdk/XPLMLoadObject/\">XPLMLoadObject</a>will return NULL if the object cannot be loaded (either because it is not found or the file is misformatted). This routine will load any object that can be used in the X-Plane scenery system.</p><p>It is important that the datarefs an object uses for animation already be registered before you load the object. For this reason it may be necessary to defer object loading until the sim has fully started.</p></div></div></article>",
      "code_examples": [
        {
          "char_count": 91,
          "code": "XPLM_APIXPLMObjectRefXPLMLoadObject(\n                         const char *         inPath);",
          "context": "XPLMLoadObject",
          "id": "example_0",
          "language": "c",
          "line_count": 2,
          "type": "snippet"
        }
      ],
      "cross_references": [],
      "markdown": "### [XPLMLoadObject](/sdk/XPLMLoadObject/)\n\n```cpp\nXPLM_API XPLMObjectRef XPLMLoadObject(\n                         const char *         inPath);\n\n```\n\nThis routine loads an OBJ file and returns a handle to it. If X-Plane has\nalready loaded the object, the handle to the existing object is returned. Do not\nassume you will get the same handle back twice, but do make sure to call unload\nonce for every load to avoid “leaking” objects. The object will be purged from\nmemory when no plugins and no scenery are using it.\n\nThe path for the object must be relative to the X-System base folder. If the\npath is in the root of the X-System folder you may need to prepend ./ to it;\nloading objects in the root of the X-System folder is STRONGLY discouraged -\nyour plugin should not dump art resources in the root folder!\n\n[XPLMLoadObject](/sdk/XPLMLoadObject/)will return NULL if the object cannot be\nloaded (either because it is not found or the file is misformatted). This\nroutine will load any object that can be used in the X-Plane scenery system.\n\nIt is important that the datarefs an object uses for animation already be\nregistered before you load the object. For this reason it may be necessary to\ndefer object loading until the sim has fully started.",
      "own_functions": [
        "XPLMLoadObject"
      ],
      "processing_timestamp": "2025-06-25T20:39:23.745412+00:00",
      "title": "XPLMLoadObject | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMLoadObject/"
    },
    "https://developer.x-plane.com/sdk/XPLMLoadObjectAsync/": {
      "api_signatures": [
        {
          "description": "This routine loads an object asynchronously; control is returned to you immediately while X-Plane loads the object. The sim will not stop flying while the object loads. For large objects, it may be several seconds before the load finishes.",
          "name": "XPLMLoadObjectAsync",
          "parameters": [
            {
              "full_declaration": "const char *         inPath",
              "name": "inPath",
              "type": "const char *"
            },
            {
              "full_declaration": "void *               inRefcon",
              "name": "inRefcon",
              "type": "void *"
            }
          ],
          "signature": "XPLM_API voidXPLMLoadObjectAsync(\n                         const char *         inPath,XPLMObjectLoaded_finCallback,\n                         void *               inRefcon);"
        },
        {
          "name": "voidXPLMLoadObjectAsync",
          "signature": "XPLM_API voidXPLMLoadObjectAsync(\n                         const char *         inPath,XPLMObjectLoaded_finCallback,\n                         void *               inRefcon);",
          "source": "code_block_extraction",
          "type": "function"
        }
      ],
      "category": {
        "category": "XPLM_Instance",
        "module": "Xplm Instance",
        "url": "https://developer.x-plane.com/sdk/XPLMLoadObjectAsync/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"function XPLM210\"><h3 class=\"sdk-api-function\" id=\"XPLMLoadObjectAsync\"><a href=\"/sdk/XPLMLoadObjectAsync/\">XPLMLoadObjectAsync</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API void       <a href=\"/sdk/XPLMLoadObjectAsync/\">XPLMLoadObjectAsync</a>(\n                         const char *         inPath,\n                         <a href=\"/sdk/XPLMObjectLoaded_f/\">XPLMObjectLoaded_f</a>   inCallback,\n                         void *               inRefcon);\n</code></pre><p>This routine loads an object asynchronously; control is returned to you immediately while X-Plane loads the object. The sim will not stop flying while the object loads. For large objects, it may be several seconds before the load finishes.</p><p>You provide a callback function that is called once the load has completed. Note that if the object cannot be loaded, you will not find out until the callback function is called with a NULL object handle.</p><p>There is no way to cancel an asynchronous object load; you must wait for the load to complete and then release the object if it is no longer desired.</p></div></div></article>",
      "code_examples": [
        {
          "char_count": 173,
          "code": "XPLM_API voidXPLMLoadObjectAsync(\n                         const char *         inPath,XPLMObjectLoaded_finCallback,\n                         void *               inRefcon);",
          "context": "XPLMLoadObjectAsync",
          "id": "example_0",
          "language": "c",
          "line_count": 3,
          "type": "snippet"
        }
      ],
      "cross_references": [
        "XPLMLoadObject"
      ],
      "markdown": "### [XPLMLoadObjectAsync](/sdk/XPLMLoadObjectAsync/)\n\n```cpp\nXPLM_API void       XPLMLoadObjectAsync(\n                         const char *         inPath,\n                         XPLMObjectLoaded_f   inCallback,\n                         void *               inRefcon);\n\n```\n\nThis routine loads an object asynchronously; control is returned to you\nimmediately while X-Plane loads the object. The sim will not stop flying while\nthe object loads. For large objects, it may be several seconds before the load\nfinishes.\n\nYou provide a callback function that is called once the load has completed. Note\nthat if the object cannot be loaded, you will not find out until the callback\nfunction is called with a NULL object handle.\n\nThere is no way to cancel an asynchronous object load; you must wait for the\nload to complete and then release the object if it is no longer desired.",
      "own_functions": [
        "XPLMLoadObjectAsync",
        "voidXPLMLoadObjectAsync"
      ],
      "processing_timestamp": "2025-06-25T20:39:23.742411+00:00",
      "title": "XPLMLoadObjectAsync | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMLoadObjectAsync/"
    },
    "https://developer.x-plane.com/sdk/XPLMLocalToWorld/": {
      "api_signatures": [
        {
          "description": "This routine translates a local coordinate triplet back into latitude, longitude, and altitude. Latitude and longitude are in decimal degrees, and altitude is in meters MSL (mean sea level). The XYZ coordinates are in meters in the local OpenGL coordinate system.",
          "name": "XPLMLocalToWorld",
          "parameters": [
            {
              "full_declaration": "double               inX",
              "name": "inX",
              "type": "double"
            },
            {
              "full_declaration": "double               inY",
              "name": "inY",
              "type": "double"
            },
            {
              "full_declaration": "double               inZ",
              "name": "inZ",
              "type": "double"
            },
            {
              "full_declaration": "double *             outLatitude",
              "name": "outLatitude",
              "type": "double *"
            },
            {
              "full_declaration": "double *             outLongitude",
              "name": "outLongitude",
              "type": "double *"
            },
            {
              "full_declaration": "double *             outAltitude",
              "name": "outAltitude",
              "type": "double *"
            }
          ],
          "signature": "XPLM_API voidXPLMLocalToWorld(\n                         double               inX,\n                         double               inY,\n                         double               inZ,\n                         double *             outLatitude,\n                         double *             outLongitude,\n                         double *             outAltitude);"
        },
        {
          "name": "voidXPLMLocalToWorld",
          "signature": "XPLM_API voidXPLMLocalToWorld(\n                         double               inX,\n                         double               inY,\n                         double               inZ,\n                         double *             outLatitude,\n                         double *             outLongitude,\n                         double *             outAltitude);",
          "source": "code_block_extraction",
          "type": "function"
        }
      ],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/XPLMLocalToWorld/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPLMLocalToWorld\"><a href=\"/sdk/XPLMLocalToWorld/\">XPLMLocalToWorld</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API void       <a href=\"/sdk/XPLMLocalToWorld/\">XPLMLocalToWorld</a>(\n                         double               inX,\n                         double               inY,\n                         double               inZ,\n                         double *             outLatitude,\n                         double *             outLongitude,\n                         double *             outAltitude);\n</code></pre><p>This routine translates a local coordinate triplet back into latitude, longitude, and altitude. Latitude and longitude are in decimal degrees, and altitude is in meters MSL (mean sea level). The XYZ coordinates are in meters in the local OpenGL coordinate system.</p><p>NOTE: world coordinates are less precise than local coordinates; you should try to avoid round tripping from local to world and back.</p></div></div></article>",
      "code_examples": [
        {
          "char_count": 362,
          "code": "XPLM_API voidXPLMLocalToWorld(\n                         double               inX,\n                         double               inY,\n                         double               inZ,\n                         double *             outLatitude,\n                         double *             outLongitude,\n                         double *             outAltitude);",
          "context": "XPLMLocalToWorld",
          "id": "example_0",
          "language": "c",
          "line_count": 7,
          "type": "snippet"
        }
      ],
      "cross_references": [],
      "markdown": "### [XPLMLocalToWorld](/sdk/XPLMLocalToWorld/)\n\n```cpp\nXPLM_API void       XPLMLocalToWorld(\n                         double               inX,\n                         double               inY,\n                         double               inZ,\n                         double *             outLatitude,\n                         double *             outLongitude,\n                         double *             outAltitude);\n\n```\n\nThis routine translates a local coordinate triplet back into latitude,\nlongitude, and altitude. Latitude and longitude are in decimal degrees, and\naltitude is in meters MSL (mean sea level). The XYZ coordinates are in meters in\nthe local OpenGL coordinate system.\n\nNOTE: world coordinates are less precise than local coordinates; you should try\nto avoid round tripping from local to world and back.",
      "own_functions": [
        "XPLMLocalToWorld",
        "voidXPLMLocalToWorld"
      ],
      "processing_timestamp": "2025-06-25T20:39:22.383832+00:00",
      "title": "XPLMLocalToWorld | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMLocalToWorld/"
    },
    "https://developer.x-plane.com/sdk/XPLMLookupObjects/": {
      "api_signatures": [
        {
          "description": "This routine looks up a virtual path in the library system and returns all matching elements. You provide a callback - one virtual path may match many objects in the library.XPLMLookupObjectsreturns the number of objects found.",
          "name": "XPLMLookupObjects",
          "parameters": [
            {
              "full_declaration": "const char *         inPath",
              "name": "inPath",
              "type": "const char *"
            },
            {
              "full_declaration": "float                inLatitude",
              "name": "inLatitude",
              "type": "float"
            },
            {
              "full_declaration": "float                inLongitude",
              "name": "inLongitude",
              "type": "float"
            },
            {
              "full_declaration": "void *               ref",
              "name": "ref",
              "type": "void *"
            }
          ],
          "signature": "XPLM_API intXPLMLookupObjects(\n                         const char *         inPath,\n                         float                inLatitude,\n                         float                inLongitude,XPLMLibraryEnumerator_fenumerator,\n                         void *               ref);"
        },
        {
          "name": "intXPLMLookupObjects",
          "signature": "XPLM_API intXPLMLookupObjects(\n                         const char *         inPath,\n                         float                inLatitude,\n                         float                inLongitude,XPLMLibraryEnumerator_fenumerator,\n                         void *               ref);",
          "source": "code_block_extraction",
          "type": "function"
        }
      ],
      "category": {
        "category": "XPLM_Instance",
        "module": "Xplm Instance",
        "url": "https://developer.x-plane.com/sdk/XPLMLookupObjects/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPLMLookupObjects\"><a href=\"/sdk/XPLMLookupObjects/\">XPLMLookupObjects</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API int        <a href=\"/sdk/XPLMLookupObjects/\">XPLMLookupObjects</a>(\n                         const char *         inPath,\n                         float                inLatitude,\n                         float                inLongitude,\n                         <a href=\"/sdk/XPLMLibraryEnumerator_f/\">XPLMLibraryEnumerator_f</a> enumerator,\n                         void *               ref);\n</code></pre><p>This routine looks up a virtual path in the library system and returns all matching elements. You provide a callback - one virtual path may match many objects in the library.<a href=\"/sdk/XPLMLookupObjects/\">XPLMLookupObjects</a>returns the number of objects found.</p><p>The latitude and longitude parameters specify the location the object will be used. The library system allows for scenery packages to only provide objects to certain local locations. Only objects that are allowed at the latitude/longitude you provide will be returned.</p></div></div></article>",
      "code_examples": [
        {
          "char_count": 287,
          "code": "XPLM_API intXPLMLookupObjects(\n                         const char *         inPath,\n                         float                inLatitude,\n                         float                inLongitude,XPLMLibraryEnumerator_fenumerator,\n                         void *               ref);",
          "context": "XPLMLookupObjects",
          "id": "example_0",
          "language": "c",
          "line_count": 5,
          "type": "snippet"
        }
      ],
      "cross_references": [],
      "markdown": "### [XPLMLookupObjects](/sdk/XPLMLookupObjects/)\n\n```cpp\nXPLM_API int        XPLMLookupObjects(\n                         const char *         inPath,\n                         float                inLatitude,\n                         float                inLongitude,\n                         XPLMLibraryEnumerator_f enumerator,\n                         void *               ref);\n\n```\n\nThis routine looks up a virtual path in the library system and returns all\nmatching elements. You provide a callback - one virtual path may match many\nobjects in the library.[XPLMLookupObjects](/sdk/XPLMLookupObjects/)returns the\nnumber of objects found.\n\nThe latitude and longitude parameters specify the location the object will be\nused. The library system allows for scenery packages to only provide objects to\ncertain local locations. Only objects that are allowed at the latitude/longitude\nyou provide will be returned.",
      "own_functions": [
        "XPLMLookupObjects",
        "intXPLMLookupObjects"
      ],
      "processing_timestamp": "2025-06-25T20:39:23.749410+00:00",
      "title": "XPLMLookupObjects | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMLookupObjects/"
    },
    "https://developer.x-plane.com/sdk/XPLMMap/": {
      "api_signatures": [
        {
          "description": "This routine creates a new map layer. You pass in anXPLMCreateMapLayer_tstructure with all of the fields defined. You must set the structSize of the structure to the size of the actual structure you used.",
          "name": "XPLMCreateMapLayer",
          "parameters": [
            {
              "full_declaration": "XPLMCreateMapLayer_t* inParams",
              "name": "inParams",
              "type": "XPLMCreateMapLayer_t*"
            }
          ],
          "signature": "XPLM_APIXPLMMapLayerIDXPLMCreateMapLayer(XPLMCreateMapLayer_t* inParams);"
        },
        {
          "description": "Destroys a map layer you created (calling yourXPLMMapWillBeDeletedCallback_fif applicable). Returns true if a deletion took place.",
          "name": "XPLMDestroyMapLayer",
          "parameters": [],
          "signature": "XPLM_API intXPLMDestroyMapLayer(XPLMMapLayerIDinLayer);"
        },
        {
          "description": "Registers your callback to receive a notification each time a new map is constructed in X-Plane. This callback is the best time to add your custom map layer usingXPLMCreateMapLayer().",
          "name": "XPLMRegisterMapCreationHook",
          "parameters": [
            {
              "full_declaration": "void *               refcon",
              "name": "refcon",
              "type": "void *"
            }
          ],
          "signature": "XPLM_API voidXPLMRegisterMapCreationHook(XPLMMapCreatedCallback_fcallback,\n                         void *               refcon);"
        },
        {
          "description": "Returns 1 if the map with the specified identifier already exists in X-Plane. In that case, you can safely callXPLMCreateMapLayer() specifying that your layer should be added to that map.",
          "name": "XPLMMapExists",
          "parameters": [
            {
              "full_declaration": "const char *         mapIdentifier",
              "name": "mapIdentifier",
              "type": "const char *"
            }
          ],
          "signature": "XPLM_API intXPLMMapExists(\n                         const char *         mapIdentifier);"
        },
        {
          "description": "Enables plugin-created map layers to draw PNG icons using X-Plane’s built-in icon drawing functionality. Only valid from within an XPLMIconDrawingCallback_t (but you can request an arbitrary number of icons to be drawn from within your callback).",
          "name": "XPLMDrawMapIconFromSheet",
          "parameters": [
            {
              "full_declaration": "const char *         inPngPath",
              "name": "inPngPath",
              "type": "const char *"
            },
            {
              "full_declaration": "int                  s",
              "name": "s",
              "type": "int"
            },
            {
              "full_declaration": "int                  t",
              "name": "t",
              "type": "int"
            },
            {
              "full_declaration": "int                  ds",
              "name": "ds",
              "type": "int"
            },
            {
              "full_declaration": "int                  dt",
              "name": "dt",
              "type": "int"
            },
            {
              "full_declaration": "float                mapX",
              "name": "mapX",
              "type": "float"
            },
            {
              "full_declaration": "float                mapY",
              "name": "mapY",
              "type": "float"
            },
            {
              "full_declaration": "float                rotationDegrees",
              "name": "rotationDegrees",
              "type": "float"
            },
            {
              "full_declaration": "float                mapWidth",
              "name": "mapWidth",
              "type": "float"
            }
          ],
          "signature": "XPLM_API voidXPLMDrawMapIconFromSheet(XPLMMapLayerIDlayer,\n                         const char *         inPngPath,\n                         int                  s,\n                         int                  t,\n                         int                  ds,\n                         int                  dt,\n                         float                mapX,\n                         float                mapY,XPLMMapOrientationorientation,\n                         float                rotationDegrees,\n                         float                mapWidth);"
        },
        {
          "description": "Enables plugin-created map layers to draw text labels using X-Plane’s built-in labeling functionality. Only valid from within anXPLMMapLabelDrawingCallback_f(but you can request an arbitrary number of text labels to be drawn from within your callback).",
          "name": "XPLMDrawMapLabel",
          "parameters": [
            {
              "full_declaration": "const char *         inText",
              "name": "inText",
              "type": "const char *"
            },
            {
              "full_declaration": "float                mapX",
              "name": "mapX",
              "type": "float"
            },
            {
              "full_declaration": "float                mapY",
              "name": "mapY",
              "type": "float"
            },
            {
              "full_declaration": "float                rotationDegrees",
              "name": "rotationDegrees",
              "type": "float"
            }
          ],
          "signature": "XPLM_API voidXPLMDrawMapLabel(XPLMMapLayerIDlayer,\n                         const char *         inText,\n                         float                mapX,\n                         float                mapY,XPLMMapOrientationorientation,\n                         float                rotationDegrees);"
        },
        {
          "description": "Projects a latitude/longitude into map coordinates. This is the inverse ofXPLMMapUnproject().",
          "name": "XPLMMapProject",
          "parameters": [
            {
              "full_declaration": "double               latitude",
              "name": "latitude",
              "type": "double"
            },
            {
              "full_declaration": "double               longitude",
              "name": "longitude",
              "type": "double"
            },
            {
              "full_declaration": "float *              outX",
              "name": "outX",
              "type": "float *"
            },
            {
              "full_declaration": "float *              outY",
              "name": "outY",
              "type": "float *"
            }
          ],
          "signature": "XPLM_API voidXPLMMapProject(XPLMMapProjectionIDprojection,\n                         double               latitude,\n                         double               longitude,\n                         float *              outX,\n                         float *              outY);"
        },
        {
          "description": "Transforms map coordinates back into a latitude and longitude. This is the inverse ofXPLMMapProject().",
          "name": "XPLMMapUnproject",
          "parameters": [
            {
              "full_declaration": "float                mapX",
              "name": "mapX",
              "type": "float"
            },
            {
              "full_declaration": "float                mapY",
              "name": "mapY",
              "type": "float"
            },
            {
              "full_declaration": "double *             outLatitude",
              "name": "outLatitude",
              "type": "double *"
            },
            {
              "full_declaration": "double *             outLongitude",
              "name": "outLongitude",
              "type": "double *"
            }
          ],
          "signature": "XPLM_API voidXPLMMapUnproject(XPLMMapProjectionIDprojection,\n                         float                mapX,\n                         float                mapY,\n                         double *             outLatitude,\n                         double *             outLongitude);"
        },
        {
          "description": "Returns the number of map units that correspond to a distance of one meter at a given set of map coordinates.",
          "name": "XPLMMapScaleMeter",
          "parameters": [
            {
              "full_declaration": "float                mapX",
              "name": "mapX",
              "type": "float"
            },
            {
              "full_declaration": "float                mapY",
              "name": "mapY",
              "type": "float"
            }
          ],
          "signature": "XPLM_API floatXPLMMapScaleMeter(XPLMMapProjectionIDprojection,\n                         float                mapX,\n                         float                mapY);"
        },
        {
          "description": "Returns the heading (in degrees clockwise) from the positive Y axis in the cartesian mapping coordinate system to true north at the point passed in. You can use it as a clockwise rotational offset to align icons and other 2-d drawing with true north on the map, compensating for rotations in the map due to projection.",
          "name": "XPLMMapGetNorthHeading",
          "parameters": [
            {
              "full_declaration": "float                mapX",
              "name": "mapX",
              "type": "float"
            },
            {
              "full_declaration": "float                mapY",
              "name": "mapY",
              "type": "float"
            }
          ],
          "signature": "XPLM_API floatXPLMMapGetNorthHeading(XPLMMapProjectionIDprojection,\n                         float                mapX,\n                         float                mapY);"
        },
        {
          "name": "XPLMMapStyle",
          "type": "enum",
          "values": []
        },
        {
          "name": "XPLMMapLayerType",
          "type": "enum",
          "values": [
            {
              "description": "A layer that draws \"fill\" graphics, like weather patterns, terrain, etc. Fill layers frequently cover a large portion of the visible map area.",
              "name": "xplm_MapLayer_Fill",
              "value": "\"0\""
            },
            {
              "description": "A layer that provides markings for particular map features, like NAVAIDs, airports, etc. Even dense markings layers cover a small portion of the total map area.",
              "name": "xplm_MapLayer_Markings",
              "value": "\"1\""
            }
          ]
        },
        {
          "name": "XPLMMapOrientation",
          "type": "enum",
          "values": [
            {
              "description": "Orient such that a 0 degree rotation matches the map's north",
              "name": "xplm_MapOrientation_Map",
              "value": "\"0\""
            },
            {
              "description": "Orient such that a 0 degree rotation is \"up\" relative to the user interface",
              "name": "xplm_MapOrientation_UI",
              "value": "\"1\""
            }
          ]
        },
        {
          "name": "intXPLMDestroyMapLayer",
          "signature": "XPLM_API intXPLMDestroyMapLayer(XPLMMapLayerIDinLayer);",
          "source": "code_block_extraction",
          "type": "function"
        },
        {
          "name": "voidXPLMRegisterMapCreationHook",
          "signature": "XPLM_API voidXPLMRegisterMapCreationHook(XPLMMapCreatedCallback_fcallback,\n                         void *               refcon);",
          "source": "code_block_extraction",
          "type": "function"
        },
        {
          "name": "intXPLMMapExists",
          "signature": "XPLM_API intXPLMMapExists(\n                         const char *         mapIdentifier);",
          "source": "code_block_extraction",
          "type": "function"
        },
        {
          "name": "voidXPLMDrawMapIconFromSheet",
          "signature": "XPLM_API voidXPLMDrawMapIconFromSheet(XPLMMapLayerIDlayer,\n                         const char *         inPngPath,\n                         int                  s,\n                         int                  t,\n                         int                  ds,\n                         int                  dt,\n                         float                mapX,\n                         float                mapY,XPLMMapOrientationorientation,\n                         float                rotationDegrees,\n                         float                mapWidth);",
          "source": "code_block_extraction",
          "type": "function"
        },
        {
          "name": "voidXPLMDrawMapLabel",
          "signature": "XPLM_API voidXPLMDrawMapLabel(XPLMMapLayerIDlayer,\n                         const char *         inText,\n                         float                mapX,\n                         float                mapY,XPLMMapOrientationorientation,\n                         float                rotationDegrees);",
          "source": "code_block_extraction",
          "type": "function"
        },
        {
          "name": "voidXPLMMapProject",
          "signature": "XPLM_API voidXPLMMapProject(XPLMMapProjectionIDprojection,\n                         double               latitude,\n                         double               longitude,\n                         float *              outX,\n                         float *              outY);",
          "source": "code_block_extraction",
          "type": "function"
        },
        {
          "name": "voidXPLMMapUnproject",
          "signature": "XPLM_API voidXPLMMapUnproject(XPLMMapProjectionIDprojection,\n                         float                mapX,\n                         float                mapY,\n                         double *             outLatitude,\n                         double *             outLongitude);",
          "source": "code_block_extraction",
          "type": "function"
        },
        {
          "name": "floatXPLMMapScaleMeter",
          "signature": "XPLM_API floatXPLMMapScaleMeter(XPLMMapProjectionIDprojection,\n                         float                mapX,\n                         float                mapY);",
          "source": "code_block_extraction",
          "type": "function"
        },
        {
          "name": "floatXPLMMapGetNorthHeading",
          "signature": "XPLM_API floatXPLMMapGetNorthHeading(XPLMMapProjectionIDprojection,\n                         float                mapX,\n                         float                mapY);",
          "source": "code_block_extraction",
          "type": "function"
        }
      ],
      "category": {
        "category": "XPLM_Map",
        "module": "Xplm Map",
        "url": "https://developer.x-plane.com/sdk/XPLMMap/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"api\"><h1 class=\"sdk-api-title\" id=\"XPLMMap\"><a href=\"/sdk/XPLMMap/\">XPLMMap</a>API</h1><p>This API allows you to create new layers within X-Plane maps. Your layers can draw arbitrary OpenGL, but they conveniently also have access to X-Plane’s built-in icon and label drawing functions.</p><p>As of X-Plane 11, map drawing happens in three stages:</p><ol><li>backgrounds and “fill”,</li><li>icons, and</li><li>labels.</li></ol><p>Thus, all background drawing gets layered beneath all icons, which likewise get layered beneath all labels. Within each stage, the map obeys a consistent layer ordering, such that “fill” layers (layers that cover a large amount of map area, like the terrain and clouds) appear beneath “markings” layers (like airport icons). This ensures that layers with fine details don’t get obscured by layers with larger details.</p><p>The XPLM map API reflects both aspects of this draw layering: you can register a layer as providing either markings or fill, and X-Plane will draw your fill layers beneath your markings layers (regardless of registration order). Likewise, you are guaranteed that your layer’s icons (added from within an icon callback) will go above your layer’s OpenGL drawing, and your labels will go above your icons.</p><p>The XPLM guarantees that all plugin-created fill layers go on top of all native X-Plane fill layers, and all plugin-created markings layers go on top of all X-Plane markings layers (with the exception of the aircraft icons). It also guarantees that the draw order of your own plugin’s layers will be consistent. But, for layers created by different plugins, the only guarantee is that we will draw all of one plugin’s layers of each type (fill, then markings), then all of the others'; we don’t guarantee which plugin’s fill and markings layers go on top of the other’s.</p><p>As of X-Plane 11, maps use true cartographic projections for their drawing, and different maps may use different projections. For that reason, all drawing calls include an opaque handle for the projection you should use to do the drawing. Any time you would draw at a particular latitude/longitude, you’ll need to ask the projection to translate that position into “map coordinates.” (Note that the projection is guaranteed not to change between calls to your prepare-cache hook, so if you cache your map coordinates ahead of time, there’s no need to re-project them when you actually draw.)</p><p>In addition to mapping normal latitude/longitude locations into map coordinates, the projection APIs also let you know the current heading for north. (Since X-Plane 11 maps can rotate to match the heading of the user’s aircraft, it’s not safe to assume that north is at zero degrees rotation.)</p><div class=\"component XPLM300\"><h2 id=\"DRAWING CALLBACKS\">DRAWING CALLBACKS</h2><p>When you create a new map layer (using<a href=\"/sdk/XPLMCreateMapLayer/\">XPLMCreateMapLayer</a>), you can provide any or all of these callbacks. They allow you to insert your own OpenGL drawing, text labels, and icons into the X-Plane map at the appropriate places, allowing your layer to behave as similarly to X-Plane’s built-in layers as possible.</p><div class=\"typedef\"><h3 class=\"sdk-api-type\" id=\"XPLMMapLayerID\"><a href=\"/sdk/XPLMMapLayerID/\">XPLMMapLayerID</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>typedef void * <a href=\"/sdk/XPLMMapLayerID/\">XPLMMapLayerID</a>;</code></pre><p>This is an opaque handle for a plugin-created map layer. Pass it to the map drawing APIs from an appropriate callback to draw in the layer you created.</p></div><div class=\"typedef\"><h3 class=\"sdk-api-type\" id=\"XPLMMapProjectionID\"><a href=\"/sdk/XPLMMapProjectionID/\">XPLMMapProjectionID</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>typedef void * <a href=\"/sdk/XPLMMapProjectionID/\">XPLMMapProjectionID</a>;</code></pre><p>This is an opaque handle for a map projection. Pass it to the projection APIs to translate between map coordinates and latitude/longitudes.</p></div><div class=\"enum\"><h3 class=\"sdk-api-enum\" id=\"XPLMMapStyle\"><a href=\"/sdk/XPLMMapStyle/\">XPLMMapStyle</a></h3><p>Indicates the visual style being drawn by the map. In X-Plane, the user can choose between a number of map types, and different map types may have use a different visual representation for the same elements (for instance, the visual style of the terrain layer changes drastically between the VFR and IFR layers), or certain layers may be disabled entirely in some map types (e.g., localizers are only visible in the IFR low-enroute style).</p><p><div class=\"enumitem\"><table><thead><tr><th>Name</th><th>Value</th><th>Description</th></tr></thead><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_MapStyle_VFR_Sectional\"><a href=\"/sdk/xplm_MapStyle_VFR_Sectional/\">xplm_MapStyle_VFR_Sectional</a></td><td>\"0\"</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_MapStyle_IFR_LowEnroute\"><a href=\"/sdk/xplm_MapStyle_IFR_LowEnroute/\">xplm_MapStyle_IFR_LowEnroute</a></td><td>\"1\"</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_MapStyle_IFR_HighEnroute\"><a href=\"/sdk/xplm_MapStyle_IFR_HighEnroute/\">xplm_MapStyle_IFR_HighEnroute</a></td><td>\"2\"</td></tr></table></div></p></div><div class=\"callback\"><h3 class=\"sdk-api-callback\" id=\"XPLMMapDrawingCallback_f\"><a href=\"/sdk/XPLMMapDrawingCallback_f/\">XPLMMapDrawingCallback_f</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>typedef void (* <a href=\"/sdk/XPLMMapDrawingCallback_f/\">XPLMMapDrawingCallback_f</a>)(\n                         <a href=\"/sdk/XPLMMapLayerID/\">XPLMMapLayerID</a>       inLayer,\n                         const float *        inMapBoundsLeftTopRightBottom,\n                         float                zoomRatio,\n                         float                mapUnitsPerUserInterfaceUnit,\n                         <a href=\"/sdk/XPLMMapStyle/\">XPLMMapStyle</a>         mapStyle,\n                         <a href=\"/sdk/XPLMMapProjectionID/\">XPLMMapProjectionID</a>  projection,\n                         void *               inRefcon);\n</code></pre><p>This is the OpenGL map drawing callback for plugin-created map layers. You can perform arbitrary OpenGL drawing from this callback, with one exception: changes to the Z-buffer are not permitted, and will result in map drawing errors.</p><p>All drawing done from within this callback appears beneath all built-in X-Plane icons and labels, but above the built-in “fill” layers (layers providing major details, like terrain and water). Note, however, that the relative ordering between the drawing callbacks of different plugins is not guaranteed.</p></div><div class=\"callback\"><h3 class=\"sdk-api-callback\" id=\"XPLMMapIconDrawingCallback_f\"><a href=\"/sdk/XPLMMapIconDrawingCallback_f/\">XPLMMapIconDrawingCallback_f</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>typedef void (* <a href=\"/sdk/XPLMMapIconDrawingCallback_f/\">XPLMMapIconDrawingCallback_f</a>)(\n                         <a href=\"/sdk/XPLMMapLayerID/\">XPLMMapLayerID</a>       inLayer,\n                         const float *        inMapBoundsLeftTopRightBottom,\n                         float                zoomRatio,\n                         float                mapUnitsPerUserInterfaceUnit,\n                         <a href=\"/sdk/XPLMMapStyle/\">XPLMMapStyle</a>         mapStyle,\n                         <a href=\"/sdk/XPLMMapProjectionID/\">XPLMMapProjectionID</a>  projection,\n                         void *               inRefcon);\n</code></pre><p>This is the icon drawing callback that enables plugin-created map layers to draw icons using X-Plane’s built-in icon drawing functionality. You can request an arbitrary number of PNG icons to be drawn via<a href=\"/sdk/XPLMDrawMapIconFromSheet/\">XPLMDrawMapIconFromSheet</a>() from within this callback, but you may not perform any OpenGL drawing here.</p><p>Icons enqueued by this function will appear above all OpenGL drawing (performed by your optional<a href=\"/sdk/XPLMMapDrawingCallback_f/\">XPLMMapDrawingCallback_f</a>), and above all built-in X-Plane map icons of the same layer type (“fill” or “markings,” as determined by the<a href=\"/sdk/XPLMMapLayerType/\">XPLMMapLayerType</a>in your<a href=\"/sdk/XPLMCreateMapLayer_t/\">XPLMCreateMapLayer_t</a>). Note, however, that the relative ordering between the drawing callbacks of different plugins is not guaranteed.</p></div><div class=\"callback\"><h3 class=\"sdk-api-callback\" id=\"XPLMMapLabelDrawingCallback_f\"><a href=\"/sdk/XPLMMapLabelDrawingCallback_f/\">XPLMMapLabelDrawingCallback_f</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>typedef void (* <a href=\"/sdk/XPLMMapLabelDrawingCallback_f/\">XPLMMapLabelDrawingCallback_f</a>)(\n                         <a href=\"/sdk/XPLMMapLayerID/\">XPLMMapLayerID</a>       inLayer,\n                         const float *        inMapBoundsLeftTopRightBottom,\n                         float                zoomRatio,\n                         float                mapUnitsPerUserInterfaceUnit,\n                         <a href=\"/sdk/XPLMMapStyle/\">XPLMMapStyle</a>         mapStyle,\n                         <a href=\"/sdk/XPLMMapProjectionID/\">XPLMMapProjectionID</a>  projection,\n                         void *               inRefcon);\n</code></pre><p>This is the label drawing callback that enables plugin-created map layers to draw text labels using X-Plane’s built-in labeling functionality. You can request an arbitrary number of text labels to be drawn via<a href=\"/sdk/XPLMDrawMapLabel/\">XPLMDrawMapLabel</a>() from within this callback, but you may not perform any OpenGL drawing here.</p><p>Labels enqueued by this function will appear above all OpenGL drawing (performed by your optional<a href=\"/sdk/XPLMMapDrawingCallback_f/\">XPLMMapDrawingCallback_f</a>), and above all built-in map icons and labels of the same layer type (“fill” or “markings,” as determined by the<a href=\"/sdk/XPLMMapLayerType/\">XPLMMapLayerType</a>in your<a href=\"/sdk/XPLMCreateMapLayer_t/\">XPLMCreateMapLayer_t</a>). Note, however, that the relative ordering between the drawing callbacks of different plugins is not guaranteed.</p></div></div><div class=\"component XPLM300\"><h2 id=\"LAYER MANAGEMENT CALLBACKS\">LAYER MANAGEMENT CALLBACKS</h2><p>These are various “bookkeeping” callbacks that your map layer can receive (if you provide the callback in your<a href=\"/sdk/XPLMCreateMapLayer_t/\">XPLMCreateMapLayer_t</a>). They allow you to manage the lifecycle of your layer, as well as cache any computationally-intensive preparation you might need for drawing.</p><div class=\"callback\"><h3 class=\"sdk-api-callback\" id=\"XPLMMapPrepareCacheCallback_f\"><a href=\"/sdk/XPLMMapPrepareCacheCallback_f/\">XPLMMapPrepareCacheCallback_f</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>typedef void (* <a href=\"/sdk/XPLMMapPrepareCacheCallback_f/\">XPLMMapPrepareCacheCallback_f</a>)(\n                         <a href=\"/sdk/XPLMMapLayerID/\">XPLMMapLayerID</a>       inLayer,\n                         const float *        inTotalMapBoundsLeftTopRightBottom,\n                         <a href=\"/sdk/XPLMMapProjectionID/\">XPLMMapProjectionID</a>  projection,\n                         void *               inRefcon);\n</code></pre><p>A callback used to allow you to cache whatever information your layer needs to draw in the current map area.</p><p>This is called each time the map’s total bounds change. This is typically triggered by new DSFs being loaded, such that X-Plane discards old, now-distant DSFs and pulls in new ones. At that point, the available bounds of the map also change to match the new DSF area.</p><p>By caching just the information you need to draw in this area, your future draw calls can be made faster, since you’ll be able to simply “splat” your precomputed information each frame.</p><p>We guarantee that the map projection will not change between successive prepare cache calls, nor will any draw call give you bounds outside these total map bounds. So, if you cache the projected map coordinates of all the items you might want to draw in the total map area, you can be guaranteed that no draw call will be asked to do any new work.</p></div><div class=\"callback\"><h3 class=\"sdk-api-callback\" id=\"XPLMMapWillBeDeletedCallback_f\"><a href=\"/sdk/XPLMMapWillBeDeletedCallback_f/\">XPLMMapWillBeDeletedCallback_f</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>typedef void (* <a href=\"/sdk/XPLMMapWillBeDeletedCallback_f/\">XPLMMapWillBeDeletedCallback_f</a>)(\n                         <a href=\"/sdk/XPLMMapLayerID/\">XPLMMapLayerID</a>       inLayer,\n                         void *               inRefcon);\n</code></pre><p>Called just before your map layer gets deleted. Because SDK-created map layers have the same lifetime as the X-Plane map that contains them, if the map gets unloaded from memory, your layer will too.</p></div></div><div class=\"component XPLM300\"><h2 id=\"MAP LAYER CREATION AND DESTRUCTION\">MAP LAYER CREATION AND DESTRUCTION</h2><p>Enables the creation of new map layers. Layers are created for a particular instance of the X-Plane map. For instance, if you want your layer to appear in both the normal map interface and the Instructor Operator Station (IOS), you would need two separate calls to<a href=\"/sdk/XPLMCreateMapLayer/\">XPLMCreateMapLayer</a>(), with two different values for your<a href=\"/sdk/XPLMCreateMapLayer_t/\">XPLMCreateMapLayer_t</a>::layer_name.</p><p>Your layer’s lifetime will be determined by the lifetime of the map it is created in. If the map is destroyed (on the X-Plane side), your layer will be too, and you’ll receive a callback to your<a href=\"/sdk/XPLMMapWillBeDeletedCallback_f/\">XPLMMapWillBeDeletedCallback_f</a>.</p><div class=\"enum\"><h3 class=\"sdk-api-enum\" id=\"XPLMMapLayerType\"><a href=\"/sdk/XPLMMapLayerType/\">XPLMMapLayerType</a></h3><p>Indicates the type of map layer you are creating. Fill layers will always be drawn beneath markings layers.</p><p><div class=\"enumitem\"><table><thead><tr><th>Name</th><th>Value</th><th>Description</th></tr></thead><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_MapLayer_Fill\"><a href=\"/sdk/xplm_MapLayer_Fill/\">xplm_MapLayer_Fill</a></td><td>\"0\"</td><td>A layer that draws \"fill\" graphics, like weather patterns, terrain, etc. Fill layers frequently cover a large portion of the visible map area.</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_MapLayer_Markings\"><a href=\"/sdk/xplm_MapLayer_Markings/\">xplm_MapLayer_Markings</a></td><td>\"1\"</td><td>A layer that provides markings for particular map features, like NAVAIDs, airports, etc. Even dense markings layers cover a small portion of the total map area.</td></tr></table></div></p></div><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"XPLM_MAP_USER_INTERFACE\"><a href=\"/sdk/XPLM_MAP_USER_INTERFACE/\">XPLM_MAP_USER_INTERFACE</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_MAP_USER_INTERFACE/\">XPLM_MAP_USER_INTERFACE</a> \"XPLM_MAP_USER_INTERFACE\"</code></pre><p>Globally unique identifier for X-Plane’s Map window, used as the mapToCreateLayerIn parameter in<a href=\"/sdk/XPLMCreateMapLayer_t/\">XPLMCreateMapLayer_t</a></p></div><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"XPLM_MAP_IOS\"><a href=\"/sdk/XPLM_MAP_IOS/\">XPLM_MAP_IOS</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_MAP_IOS/\">XPLM_MAP_IOS</a>         \"XPLM_MAP_IOS\"</code></pre><p>Globally unique identifier for X-Plane’s Instructor Operator Station window, used as the mapToCreateLayerIn parameter in<a href=\"/sdk/XPLMCreateMapLayer_t/\">XPLMCreateMapLayer_t</a></p></div><div class=\"struct\"><h3 class=\"sdk-api-struct\" id=\"XPLMCreateMapLayer_t\"><a href=\"/sdk/XPLMCreateMapLayer_t/\">XPLMCreateMapLayer_t</a></h3><p>This structure defines all of the parameters used to create a map layer using<a href=\"/sdk/XPLMCreateMapLayer/\">XPLMCreateMapLayer</a>. The structure will be expanded in future SDK APIs to include more features. Always set the structSize member to the size of your struct in bytes!</p><p>Each layer must be associated with exactly one map instance in X-Plane. That map, and that map alone, will call your callbacks. Likewise, when that map is deleted, your layer will be as well.</p><pre class=\"language-cpp\" data-manual=\"true\"><code>typedef struct {\n     // Used to inform <a href=\"/sdk/XPLMCreateMapLayer/\">XPLMCreateMapLayer</a>() of the SDK version you compiled against; should always be set to sizeof(<a href=\"/sdk/XPLMCreateMapLayer_t/\">XPLMCreateMapLayer_t</a>)\n     int                       structSize;\n     // Globally unique string identifying the map you want this layer to appear in. As of XPLM300, this is limited to one of <a href=\"/sdk/XPLM_MAP_USER_INTERFACE/\">XPLM_MAP_USER_INTERFACE</a> or <a href=\"/sdk/XPLM_MAP_IOS/\">XPLM_MAP_IOS</a>\n     const char *              mapToCreateLayerIn;\n     // The type of layer you are creating, used to determine draw order (all plugin-created markings layers are drawn above all plugin-created fill layers)\n     <a href=\"/sdk/XPLMMapLayerType/\">XPLMMapLayerType</a>          layerType;\n     // Optional callback to inform you this layer is being deleted (due to its owning map being destroyed)\n     <a href=\"/sdk/XPLMMapWillBeDeletedCallback_f/\">XPLMMapWillBeDeletedCallback_f</a> willBeDeletedCallback;\n     // Optional callback you want to use to prepare your draw cache when the map bounds change (set to NULL if you don't want this callback)\n     <a href=\"/sdk/XPLMMapPrepareCacheCallback_f/\">XPLMMapPrepareCacheCallback_f</a> prepCacheCallback;\n     // Optional callback you want to use for arbitrary OpenGL drawing, which goes beneath all icons in the map's layering system (set to NULL if you don't want this callback)\n     <a href=\"/sdk/XPLMMapDrawingCallback_f/\">XPLMMapDrawingCallback_f</a>  drawCallback;\n     // Optional callback you want to use for drawing icons, which go above all built-in X-Plane icons (except the aircraft) in the map's layering system (set to NULL if you don't want this callback)\n     <a href=\"/sdk/XPLMMapIconDrawingCallback_f/\">XPLMMapIconDrawingCallback_f</a> iconCallback;\n     // Optional callback you want to use for drawing map labels, which go above all built-in X-Plane icons and labels (except those of aircraft) in the map's layering system (set to NULL if you don't want this callback)\n     <a href=\"/sdk/XPLMMapLabelDrawingCallback_f/\">XPLMMapLabelDrawingCallback_f</a> labelCallback;\n     // True if you want a checkbox to be created in the map UI to toggle this layer on and off; false if the layer should simply always be enabled\n     int                       showUiToggle;\n     // Short label to use for this layer in the user interface\n     const char *              layerName;\n     // A reference to arbitrary data that will be passed to your callbacks\n     void *                    refcon;\n} <a href=\"/sdk/XPLMCreateMapLayer_t/\">XPLMCreateMapLayer_t</a>;</code></pre></div><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPLMCreateMapLayer\"><a href=\"/sdk/XPLMCreateMapLayer/\">XPLMCreateMapLayer</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API <a href=\"/sdk/XPLMMapLayerID/\">XPLMMapLayerID</a> <a href=\"/sdk/XPLMCreateMapLayer/\">XPLMCreateMapLayer</a>(\n                         <a href=\"/sdk/XPLMCreateMapLayer_t/\">XPLMCreateMapLayer_t</a> * inParams);\n</code></pre><p>This routine creates a new map layer. You pass in an<a href=\"/sdk/XPLMCreateMapLayer_t/\">XPLMCreateMapLayer_t</a>structure with all of the fields defined. You must set the structSize of the structure to the size of the actual structure you used.</p><p>Returns NULL if the layer creation failed. This happens most frequently because the map you specified in your<a href=\"/sdk/XPLMCreateMapLayer_t/\">XPLMCreateMapLayer_t</a>::mapToCreateLayerIn field doesn’t exist (that is, if<a href=\"/sdk/XPLMMapExists/\">XPLMMapExists</a>() returns 0 for the specified map). You can use<a href=\"/sdk/XPLMRegisterMapCreationHook/\">XPLMRegisterMapCreationHook</a>() to get a notification each time a new map is opened in X-Plane, at which time you can create layers in it.</p></div><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPLMDestroyMapLayer\"><a href=\"/sdk/XPLMDestroyMapLayer/\">XPLMDestroyMapLayer</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API int        <a href=\"/sdk/XPLMDestroyMapLayer/\">XPLMDestroyMapLayer</a>(\n                         <a href=\"/sdk/XPLMMapLayerID/\">XPLMMapLayerID</a>       inLayer);\n</code></pre><p>Destroys a map layer you created (calling your<a href=\"/sdk/XPLMMapWillBeDeletedCallback_f/\">XPLMMapWillBeDeletedCallback_f</a>if applicable). Returns true if a deletion took place.</p></div><div class=\"callback\"><h3 class=\"sdk-api-callback\" id=\"XPLMMapCreatedCallback_f\"><a href=\"/sdk/XPLMMapCreatedCallback_f/\">XPLMMapCreatedCallback_f</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>typedef void (* <a href=\"/sdk/XPLMMapCreatedCallback_f/\">XPLMMapCreatedCallback_f</a>)(\n                         const char *         mapIdentifier,\n                         void *               refcon);\n</code></pre><p>A callback to notify your plugin that a new map has been created in X-Plane. This is the best time to add a custom map layer using<a href=\"/sdk/XPLMCreateMapLayer/\">XPLMCreateMapLayer</a>().</p><p>No OpenGL drawing is permitted within this callback.</p></div><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPLMRegisterMapCreationHook\"><a href=\"/sdk/XPLMRegisterMapCreationHook/\">XPLMRegisterMapCreationHook</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API void       <a href=\"/sdk/XPLMRegisterMapCreationHook/\">XPLMRegisterMapCreationHook</a>(\n                         <a href=\"/sdk/XPLMMapCreatedCallback_f/\">XPLMMapCreatedCallback_f</a> callback,\n                         void *               refcon);\n</code></pre><p>Registers your callback to receive a notification each time a new map is constructed in X-Plane. This callback is the best time to add your custom map layer using<a href=\"/sdk/XPLMCreateMapLayer/\">XPLMCreateMapLayer</a>().</p><p>Note that you will not be notified about any maps that already exist—you can use<a href=\"/sdk/XPLMMapExists/\">XPLMMapExists</a>() to check for maps that were created previously.</p></div><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPLMMapExists\"><a href=\"/sdk/XPLMMapExists/\">XPLMMapExists</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API int        <a href=\"/sdk/XPLMMapExists/\">XPLMMapExists</a>(\n                         const char *         mapIdentifier);\n</code></pre><p>Returns 1 if the map with the specified identifier already exists in X-Plane. In that case, you can safely call<a href=\"/sdk/XPLMCreateMapLayer/\">XPLMCreateMapLayer</a>() specifying that your layer should be added to that map.</p></div></div><div class=\"component XPLM300\"><h2 id=\"MAP DRAWING\">MAP DRAWING</h2><p>These APIs are only valid from within a map drawing callback (one of XPLMIconDrawingCallback_t or<a href=\"/sdk/XPLMMapLabelDrawingCallback_f/\">XPLMMapLabelDrawingCallback_f</a>). Your drawing callbacks are registered when you create a new map layer as part of your<a href=\"/sdk/XPLMCreateMapLayer_t/\">XPLMCreateMapLayer_t</a>. The functions here hook into X-Plane’s built-in map drawing functionality for icons and labels, so that you get a consistent style with the rest of the X-Plane map.</p><p>Note that the X-Plane 11 map introduces a strict ordering: layers of type<a href=\"/sdk/xplm_MapLayer_Fill/\">xplm_MapLayer_Fill</a>get drawn beneath all<a href=\"/sdk/xplm_MapLayer_Markings/\">xplm_MapLayer_Markings</a>layers. Likewise, all OpenGL drawing (performed in your layer’s<a href=\"/sdk/XPLMMapDrawingCallback_f/\">XPLMMapDrawingCallback_f</a>) will appear beneath any icons and labels you draw.</p><div class=\"enum\"><h3 class=\"sdk-api-enum\" id=\"XPLMMapOrientation\"><a href=\"/sdk/XPLMMapOrientation/\">XPLMMapOrientation</a></h3><p>Indicates whether a map element should be match its rotation to the map itself, or to the user interface. For instance, the map itself may be rotated such that “up” matches the user’s aircraft, but you may want to draw a text label such that it is always rotated zero degrees relative to the user’s perspective. In that case, you would have it draw with UI orientation.</p><p><div class=\"enumitem\"><table><thead><tr><th>Name</th><th>Value</th><th>Description</th></tr></thead><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_MapOrientation_Map\"><a href=\"/sdk/xplm_MapOrientation_Map/\">xplm_MapOrientation_Map</a></td><td>\"0\"</td><td>Orient such that a 0 degree rotation matches the map's north</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_MapOrientation_UI\"><a href=\"/sdk/xplm_MapOrientation_UI/\">xplm_MapOrientation_UI</a></td><td>\"1\"</td><td>Orient such that a 0 degree rotation is \"up\" relative to the user interface</td></tr></table></div></p></div><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPLMDrawMapIconFromSheet\"><a href=\"/sdk/XPLMDrawMapIconFromSheet/\">XPLMDrawMapIconFromSheet</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API void       <a href=\"/sdk/XPLMDrawMapIconFromSheet/\">XPLMDrawMapIconFromSheet</a>(\n                         <a href=\"/sdk/XPLMMapLayerID/\">XPLMMapLayerID</a>       layer,\n                         const char *         inPngPath,\n                         int                  s,\n                         int                  t,\n                         int                  ds,\n                         int                  dt,\n                         float                mapX,\n                         float                mapY,\n                         <a href=\"/sdk/XPLMMapOrientation/\">XPLMMapOrientation</a>   orientation,\n                         float                rotationDegrees,\n                         float                mapWidth);\n</code></pre><p>Enables plugin-created map layers to draw PNG icons using X-Plane’s built-in icon drawing functionality. Only valid from within an XPLMIconDrawingCallback_t (but you can request an arbitrary number of icons to be drawn from within your callback).</p><p>X-Plane will automatically manage the memory for your texture so that it only has to be loaded from disk once as long as you continue drawing it per-frame. (When you stop drawing it, the memory may purged in a “garbage collection” pass, require a load from disk in the future.)</p><p>Instead of having X-Plane draw a full PNG, this method allows you to use UV coordinates to request a portion of the image to be drawn. This allows you to use a single texture load (of an icon sheet, for example) to draw many icons. Doing so is much more efficient than drawing a dozen different small PNGs.</p><p>The UV coordinates used here treat the texture you load as being comprised of a number of identically sized “cells”. You specify the width and height in cells (ds and dt, respectively), as well as the coordinates within the cell grid for the sub-image you’d like to draw.</p><p>Note that you can use different ds and dt values in subsequent calls with the same texture sheet. This enables you to use icons of different sizes in the same sheet if you arrange them properly in the PNG.</p><p>This function is only valid from within an XPLMIconDrawingCallback_t (but you can request an arbitrary number of icons to be drawn from within your callback).</p></div><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPLMDrawMapLabel\"><a href=\"/sdk/XPLMDrawMapLabel/\">XPLMDrawMapLabel</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API void       <a href=\"/sdk/XPLMDrawMapLabel/\">XPLMDrawMapLabel</a>(\n                         <a href=\"/sdk/XPLMMapLayerID/\">XPLMMapLayerID</a>       layer,\n                         const char *         inText,\n                         float                mapX,\n                         float                mapY,\n                         <a href=\"/sdk/XPLMMapOrientation/\">XPLMMapOrientation</a>   orientation,\n                         float                rotationDegrees);\n</code></pre><p>Enables plugin-created map layers to draw text labels using X-Plane’s built-in labeling functionality. Only valid from within an<a href=\"/sdk/XPLMMapLabelDrawingCallback_f/\">XPLMMapLabelDrawingCallback_f</a>(but you can request an arbitrary number of text labels to be drawn from within your callback).</p></div></div><div class=\"component XPLM300\"><h2 id=\"MAP PROJECTIONS\">MAP PROJECTIONS</h2><p>As of X-Plane 11, the map draws using true cartographic projections, and different maps may use different projections. Thus, to draw at a particular latitude and longitude, you must first transform your real-world coordinates into map coordinates.</p><p>The map projection is also responsible for giving you the current scale of the map. That is, the projection can tell you how many map units correspond to 1 meter at a given point.</p><p>Finally, the map projection can give you the current rotation of the map. Since X-Plane 11 maps can rotate to match the heading of the aircraft, the map’s rotation can potentially change every frame.</p><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPLMMapProject\"><a href=\"/sdk/XPLMMapProject/\">XPLMMapProject</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API void       <a href=\"/sdk/XPLMMapProject/\">XPLMMapProject</a>(\n                         <a href=\"/sdk/XPLMMapProjectionID/\">XPLMMapProjectionID</a>  projection,\n                         double               latitude,\n                         double               longitude,\n                         float *              outX,\n                         float *              outY);\n</code></pre><p>Projects a latitude/longitude into map coordinates. This is the inverse of<a href=\"/sdk/XPLMMapUnproject/\">XPLMMapUnproject</a>().</p><p>Only valid from within a map layer callback (one of<a href=\"/sdk/XPLMMapPrepareCacheCallback_f/\">XPLMMapPrepareCacheCallback_f</a>,<a href=\"/sdk/XPLMMapDrawingCallback_f/\">XPLMMapDrawingCallback_f</a>,<a href=\"/sdk/XPLMMapIconDrawingCallback_f/\">XPLMMapIconDrawingCallback_f</a>, or<a href=\"/sdk/XPLMMapLabelDrawingCallback_f/\">XPLMMapLabelDrawingCallback_f</a>.)</p></div><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPLMMapUnproject\"><a href=\"/sdk/XPLMMapUnproject/\">XPLMMapUnproject</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API void       <a href=\"/sdk/XPLMMapUnproject/\">XPLMMapUnproject</a>(\n                         <a href=\"/sdk/XPLMMapProjectionID/\">XPLMMapProjectionID</a>  projection,\n                         float                mapX,\n                         float                mapY,\n                         double *             outLatitude,\n                         double *             outLongitude);\n</code></pre><p>Transforms map coordinates back into a latitude and longitude. This is the inverse of<a href=\"/sdk/XPLMMapProject/\">XPLMMapProject</a>().</p><p>Only valid from within a map layer callback (one of<a href=\"/sdk/XPLMMapPrepareCacheCallback_f/\">XPLMMapPrepareCacheCallback_f</a>,<a href=\"/sdk/XPLMMapDrawingCallback_f/\">XPLMMapDrawingCallback_f</a>,<a href=\"/sdk/XPLMMapIconDrawingCallback_f/\">XPLMMapIconDrawingCallback_f</a>, or<a href=\"/sdk/XPLMMapLabelDrawingCallback_f/\">XPLMMapLabelDrawingCallback_f</a>.)</p></div><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPLMMapScaleMeter\"><a href=\"/sdk/XPLMMapScaleMeter/\">XPLMMapScaleMeter</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API float      <a href=\"/sdk/XPLMMapScaleMeter/\">XPLMMapScaleMeter</a>(\n                         <a href=\"/sdk/XPLMMapProjectionID/\">XPLMMapProjectionID</a>  projection,\n                         float                mapX,\n                         float                mapY);\n</code></pre><p>Returns the number of map units that correspond to a distance of one meter at a given set of map coordinates.</p><p>Only valid from within a map layer callback (one of<a href=\"/sdk/XPLMMapPrepareCacheCallback_f/\">XPLMMapPrepareCacheCallback_f</a>,<a href=\"/sdk/XPLMMapDrawingCallback_f/\">XPLMMapDrawingCallback_f</a>,<a href=\"/sdk/XPLMMapIconDrawingCallback_f/\">XPLMMapIconDrawingCallback_f</a>, or<a href=\"/sdk/XPLMMapLabelDrawingCallback_f/\">XPLMMapLabelDrawingCallback_f</a>.)</p></div><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPLMMapGetNorthHeading\"><a href=\"/sdk/XPLMMapGetNorthHeading/\">XPLMMapGetNorthHeading</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API float      <a href=\"/sdk/XPLMMapGetNorthHeading/\">XPLMMapGetNorthHeading</a>(\n                         <a href=\"/sdk/XPLMMapProjectionID/\">XPLMMapProjectionID</a>  projection,\n                         float                mapX,\n                         float                mapY);\n</code></pre><p>Returns the heading (in degrees clockwise) from the positive Y axis in the cartesian mapping coordinate system to true north at the point passed in. You can use it as a clockwise rotational offset to align icons and other 2-d drawing with true north on the map, compensating for rotations in the map due to projection.</p><p>Only valid from within a map layer callback (one of<a href=\"/sdk/XPLMMapPrepareCacheCallback_f/\">XPLMMapPrepareCacheCallback_f</a>,<a href=\"/sdk/XPLMMapDrawingCallback_f/\">XPLMMapDrawingCallback_f</a>,<a href=\"/sdk/XPLMMapIconDrawingCallback_f/\">XPLMMapIconDrawingCallback_f</a>, or<a href=\"/sdk/XPLMMapLabelDrawingCallback_f/\">XPLMMapLabelDrawingCallback_f</a>.)</p></div></div></div></div></article>",
      "code_examples": [
        {
          "char_count": 381,
          "code": "typedef void (*XPLMMapDrawingCallback_f)(XPLMMapLayerIDinLayer,\n                         const float *        inMapBoundsLeftTopRightBottom,\n                         float                zoomRatio,\n                         float                mapUnitsPerUserInterfaceUnit,XPLMMapStylemapStyle,XPLMMapProjectionIDprojection,\n                         void *               inRefcon);",
          "context": "XPLMMapDrawingCallback_f",
          "id": "example_2",
          "language": "c",
          "line_count": 5,
          "type": "snippet"
        },
        {
          "char_count": 385,
          "code": "typedef void (*XPLMMapIconDrawingCallback_f)(XPLMMapLayerIDinLayer,\n                         const float *        inMapBoundsLeftTopRightBottom,\n                         float                zoomRatio,\n                         float                mapUnitsPerUserInterfaceUnit,XPLMMapStylemapStyle,XPLMMapProjectionIDprojection,\n                         void *               inRefcon);",
          "context": "XPLMMapIconDrawingCallback_f",
          "id": "example_3",
          "language": "c",
          "line_count": 5,
          "type": "snippet"
        },
        {
          "char_count": 386,
          "code": "typedef void (*XPLMMapLabelDrawingCallback_f)(XPLMMapLayerIDinLayer,\n                         const float *        inMapBoundsLeftTopRightBottom,\n                         float                zoomRatio,\n                         float                mapUnitsPerUserInterfaceUnit,XPLMMapStylemapStyle,XPLMMapProjectionIDprojection,\n                         void *               inRefcon);",
          "context": "XPLMMapLabelDrawingCallback_f",
          "id": "example_4",
          "language": "c",
          "line_count": 5,
          "type": "snippet"
        },
        {
          "char_count": 237,
          "code": "typedef void (*XPLMMapPrepareCacheCallback_f)(XPLMMapLayerIDinLayer,\n                         const float *        inTotalMapBoundsLeftTopRightBottom,XPLMMapProjectionIDprojection,\n                         void *               inRefcon);",
          "context": "XPLMMapPrepareCacheCallback_f",
          "id": "example_5",
          "language": "c",
          "line_count": 3,
          "type": "snippet"
        },
        {
          "char_count": 126,
          "code": "typedef void (*XPLMMapWillBeDeletedCallback_f)(XPLMMapLayerIDinLayer,\n                         void *               inRefcon);",
          "context": "XPLMMapWillBeDeletedCallback_f",
          "id": "example_6",
          "language": "c",
          "line_count": 2,
          "type": "snippet"
        },
        {
          "char_count": 55,
          "code": "#defineXPLM_MAP_USER_INTERFACE\"XPLM_MAP_USER_INTERFACE\"",
          "context": "XPLM_MAP_USER_INTERFACE",
          "id": "example_7",
          "language": "c",
          "line_count": 1,
          "type": "snippet"
        },
        {
          "char_count": 2091,
          "code": "typedef struct {\n     // Used to informXPLMCreateMapLayer() of the SDK version you compiled against; should always be set to sizeof(XPLMCreateMapLayer_t)\n     int                       structSize;\n     // Globally unique string identifying the map you want this layer to appear in. As of XPLM300, this is limited to one ofXPLM_MAP_USER_INTERFACEorXPLM_MAP_IOSconst char *              mapToCreateLayerIn;\n     // The type of layer you are creating, used to determine draw order (all plugin-created markings layers are drawn above all plugin-created fill layers)XPLMMapLayerTypelayerType;\n     // Optional callback to inform you this layer is being deleted (due to its owning map being destroyed)XPLMMapWillBeDeletedCallback_fwillBeDeletedCallback;\n     // Optional callback you want to use to prepare your draw cache when the map bounds change (set to NULL if you don't want this callback)XPLMMapPrepareCacheCallback_fprepCacheCallback;\n     // Optional callback you want to use for arbitrary OpenGL drawing, which goes beneath all icons in the map's layering system (set to NULL if you don't want this callback)XPLMMapDrawingCallback_fdrawCallback;\n     // Optional callback you want to use for drawing icons, which go above all built-in X-Plane icons (except the aircraft) in the map's layering system (set to NULL if you don't want this callback)XPLMMapIconDrawingCallback_ficonCallback;\n     // Optional callback you want to use for drawing map labels, which go above all built-in X-Plane icons and labels (except those of aircraft) in the map's layering system (set to NULL if you don't want this callback)XPLMMapLabelDrawingCallback_flabelCallback;\n     // True if you want a checkbox to be created in the map UI to toggle this layer on and off; false if the layer should simply always be enabled\n     int                       showUiToggle;\n     // Short label to use for this layer in the user interface\n     const char *              layerName;\n     // A reference to arbitrary data that will be passed to your callbacks\n     void *                    refcon;\n}XPLMCreateMapLayer_t;",
          "context": "Each layer must be associated with exactly one map instance in X-Plane. That map, and that map alone, will call your callbacks. Likewise, when that map is deleted, your layer will be as well.",
          "id": "example_9",
          "language": "c",
          "line_count": 17,
          "type": "example"
        },
        {
          "char_count": 73,
          "code": "XPLM_APIXPLMMapLayerIDXPLMCreateMapLayer(XPLMCreateMapLayer_t* inParams);",
          "context": "XPLMCreateMapLayer",
          "id": "example_10",
          "language": "c",
          "line_count": 1,
          "type": "snippet"
        },
        {
          "char_count": 55,
          "code": "XPLM_API intXPLMDestroyMapLayer(XPLMMapLayerIDinLayer);",
          "context": "XPLMDestroyMapLayer",
          "id": "example_11",
          "language": "c",
          "line_count": 1,
          "type": "snippet"
        },
        {
          "char_count": 157,
          "code": "typedef void (*XPLMMapCreatedCallback_f)(\n                         const char *         mapIdentifier,\n                         void *               refcon);",
          "context": "XPLMMapCreatedCallback_f",
          "id": "example_12",
          "language": "c",
          "line_count": 3,
          "type": "snippet"
        },
        {
          "char_count": 129,
          "code": "XPLM_API voidXPLMRegisterMapCreationHook(XPLMMapCreatedCallback_fcallback,\n                         void *               refcon);",
          "context": "XPLMRegisterMapCreationHook",
          "id": "example_13",
          "language": "c",
          "line_count": 2,
          "type": "snippet"
        },
        {
          "char_count": 88,
          "code": "XPLM_API intXPLMMapExists(\n                         const char *         mapIdentifier);",
          "context": "XPLMMapExists",
          "id": "example_14",
          "language": "c",
          "line_count": 2,
          "type": "snippet"
        },
        {
          "char_count": 567,
          "code": "XPLM_API voidXPLMDrawMapIconFromSheet(XPLMMapLayerIDlayer,\n                         const char *         inPngPath,\n                         int                  s,\n                         int                  t,\n                         int                  ds,\n                         int                  dt,\n                         float                mapX,\n                         float                mapY,XPLMMapOrientationorientation,\n                         float                rotationDegrees,\n                         float                mapWidth);",
          "context": "XPLMDrawMapIconFromSheet",
          "id": "example_15",
          "language": "c",
          "line_count": 10,
          "type": "snippet"
        },
        {
          "char_count": 302,
          "code": "XPLM_API voidXPLMDrawMapLabel(XPLMMapLayerIDlayer,\n                         const char *         inText,\n                         float                mapX,\n                         float                mapY,XPLMMapOrientationorientation,\n                         float                rotationDegrees);",
          "context": "XPLMDrawMapLabel",
          "id": "example_16",
          "language": "c",
          "line_count": 5,
          "type": "snippet"
        },
        {
          "char_count": 276,
          "code": "XPLM_API voidXPLMMapProject(XPLMMapProjectionIDprojection,\n                         double               latitude,\n                         double               longitude,\n                         float *              outX,\n                         float *              outY);",
          "context": "XPLMMapProject",
          "id": "example_17",
          "language": "c",
          "line_count": 5,
          "type": "snippet"
        },
        {
          "char_count": 284,
          "code": "XPLM_API voidXPLMMapUnproject(XPLMMapProjectionIDprojection,\n                         float                mapX,\n                         float                mapY,\n                         double *             outLatitude,\n                         double *             outLongitude);",
          "context": "XPLMMapUnproject",
          "id": "example_18",
          "language": "c",
          "line_count": 5,
          "type": "snippet"
        },
        {
          "char_count": 167,
          "code": "XPLM_API floatXPLMMapScaleMeter(XPLMMapProjectionIDprojection,\n                         float                mapX,\n                         float                mapY);",
          "context": "XPLMMapScaleMeter",
          "id": "example_19",
          "language": "c",
          "line_count": 3,
          "type": "snippet"
        },
        {
          "char_count": 172,
          "code": "XPLM_API floatXPLMMapGetNorthHeading(XPLMMapProjectionIDprojection,\n                         float                mapX,\n                         float                mapY);",
          "context": "XPLMMapGetNorthHeading",
          "id": "example_20",
          "language": "c",
          "line_count": 3,
          "type": "snippet"
        }
      ],
      "cross_references": [],
      "markdown": "# [XPLMMap](/sdk/XPLMMap/)API\n\nThis API allows you to create new layers within X-Plane maps. Your layers can\ndraw arbitrary OpenGL, but they conveniently also have access to X-Plane’s\nbuilt-in icon and label drawing functions.\n\nAs of X-Plane 11, map drawing happens in three stages:\n\n1. backgrounds and “fill”,\n2. icons, and\n3. labels.\n\nThus, all background drawing gets layered beneath all icons, which likewise get\nlayered beneath all labels. Within each stage, the map obeys a consistent layer\nordering, such that “fill” layers (layers that cover a large amount of map area,\nlike the terrain and clouds) appear beneath “markings” layers (like airport\nicons). This ensures that layers with fine details don’t get obscured by layers\nwith larger details.\n\nThe XPLM map API reflects both aspects of this draw layering: you can register a\nlayer as providing either markings or fill, and X-Plane will draw your fill\nlayers beneath your markings layers (regardless of registration order).\nLikewise, you are guaranteed that your layer’s icons (added from within an icon\ncallback) will go above your layer’s OpenGL drawing, and your labels will go\nabove your icons.\n\nThe XPLM guarantees that all plugin-created fill layers go on top of all native\nX-Plane fill layers, and all plugin-created markings layers go on top of all\nX-Plane markings layers (with the exception of the aircraft icons). It also\nguarantees that the draw order of your own plugin’s layers will be consistent.\nBut, for layers created by different plugins, the only guarantee is that we will\ndraw all of one plugin’s layers of each type (fill, then markings), then all of\nthe others'; we don’t guarantee which plugin’s fill and markings layers go on\ntop of the other’s.\n\nAs of X-Plane 11, maps use true cartographic projections for their drawing, and\ndifferent maps may use different projections. For that reason, all drawing calls\ninclude an opaque handle for the projection you should use to do the drawing.\nAny time you would draw at a particular latitude/longitude, you’ll need to ask\nthe projection to translate that position into “map coordinates.” (Note that the\nprojection is guaranteed not to change between calls to your prepare-cache hook,\nso if you cache your map coordinates ahead of time, there’s no need to\nre-project them when you actually draw.)\n\nIn addition to mapping normal latitude/longitude locations into map coordinates,\nthe projection APIs also let you know the current heading for north. (Since\nX-Plane 11 maps can rotate to match the heading of the user’s aircraft, it’s not\nsafe to assume that north is at zero degrees rotation.)\n\n## DRAWING CALLBACKS\n\nWhen you create a new map layer\n(using[XPLMCreateMapLayer](/sdk/XPLMCreateMapLayer/)), you can provide any or\nall of these callbacks. They allow you to insert your own OpenGL drawing, text\nlabels, and icons into the X-Plane map at the appropriate places, allowing your\nlayer to behave as similarly to X-Plane’s built-in layers as possible.\n\n### [XPLMMapLayerID](/sdk/XPLMMapLayerID/)\n\n```cpp\ntypedef void * XPLMMapLayerID;\n```\n\nThis is an opaque handle for a plugin-created map layer. Pass it to the map\ndrawing APIs from an appropriate callback to draw in the layer you created.\n\n### [XPLMMapProjectionID](/sdk/XPLMMapProjectionID/)\n\n```cpp\ntypedef void * XPLMMapProjectionID;\n```\n\nThis is an opaque handle for a map projection. Pass it to the projection APIs to\ntranslate between map coordinates and latitude/longitudes.\n\n### [XPLMMapStyle](/sdk/XPLMMapStyle/)\n\nIndicates the visual style being drawn by the map. In X-Plane, the user can\nchoose between a number of map types, and different map types may have use a\ndifferent visual representation for the same elements (for instance, the visual\nstyle of the terrain layer changes drastically between the VFR and IFR layers),\nor certain layers may be disabled entirely in some map types (e.g., localizers\nare only visible in the IFR low-enroute style).\n\n| Name | Value | Description |\n| --- | --- | --- |\n| [xplm_MapStyle_VFR_Sectional](/sdk/xplm_MapStyle_VFR_Sectional/) | \"0\" |\n| [xplm_MapStyle_IFR_LowEnroute](/sdk/xplm_MapStyle_IFR_LowEnroute/) | \"1\" |\n| [xplm_MapStyle_IFR_HighEnroute](/sdk/xplm_MapStyle_IFR_HighEnroute/) | \"2\" |\n\n### [XPLMMapDrawingCallback_f](/sdk/XPLMMapDrawingCallback_f/)\n\n```cpp\ntypedef void (* XPLMMapDrawingCallback_f)(\n                         XPLMMapLayerID       inLayer,\n                         const float *        inMapBoundsLeftTopRightBottom,\n                         float                zoomRatio,\n                         float                mapUnitsPerUserInterfaceUnit,\n                         XPLMMapStyle         mapStyle,\n                         XPLMMapProjectionID  projection,\n                         void *               inRefcon);\n\n```\n\nThis is the OpenGL map drawing callback for plugin-created map layers. You can\nperform arbitrary OpenGL drawing from this callback, with one exception: changes\nto the Z-buffer are not permitted, and will result in map drawing errors.\n\nAll drawing done from within this callback appears beneath all built-in X-Plane\nicons and labels, but above the built-in “fill” layers (layers providing major\ndetails, like terrain and water). Note, however, that the relative ordering\nbetween the drawing callbacks of different plugins is not guaranteed.\n\n### [XPLMMapIconDrawingCallback_f](/sdk/XPLMMapIconDrawingCallback_f/)\n\n```cpp\ntypedef void (* XPLMMapIconDrawingCallback_f)(\n                         XPLMMapLayerID       inLayer,\n                         const float *        inMapBoundsLeftTopRightBottom,\n                         float                zoomRatio,\n                         float                mapUnitsPerUserInterfaceUnit,\n                         XPLMMapStyle         mapStyle,\n                         XPLMMapProjectionID  projection,\n                         void *               inRefcon);\n\n```\n\nThis is the icon drawing callback that enables plugin-created map layers to draw\nicons using X-Plane’s built-in icon drawing functionality. You can request an\narbitrary number of PNG icons to be drawn\nvia[XPLMDrawMapIconFromSheet](/sdk/XPLMDrawMapIconFromSheet/)() from within this\ncallback, but you may not perform any OpenGL drawing here.\n\nIcons enqueued by this function will appear above all OpenGL drawing (performed\nby your optional[XPLMMapDrawingCallback_f](/sdk/XPLMMapDrawingCallback_f/)), and\nabove all built-in X-Plane map icons of the same layer type (“fill” or\n“markings,” as determined by the[XPLMMapLayerType](/sdk/XPLMMapLayerType/)in\nyour[XPLMCreateMapLayer_t](/sdk/XPLMCreateMapLayer_t/)). Note, however, that the\nrelative ordering between the drawing callbacks of different plugins is not\nguaranteed.\n\n### [XPLMMapLabelDrawingCallback_f](/sdk/XPLMMapLabelDrawingCallback_f/)\n\n```cpp\ntypedef void (* XPLMMapLabelDrawingCallback_f)(\n                         XPLMMapLayerID       inLayer,\n                         const float *        inMapBoundsLeftTopRightBottom,\n                         float                zoomRatio,\n                         float                mapUnitsPerUserInterfaceUnit,\n                         XPLMMapStyle         mapStyle,\n                         XPLMMapProjectionID  projection,\n                         void *               inRefcon);\n\n```\n\nThis is the label drawing callback that enables plugin-created map layers to\ndraw text labels using X-Plane’s built-in labeling functionality. You can\nrequest an arbitrary number of text labels to be drawn\nvia[XPLMDrawMapLabel](/sdk/XPLMDrawMapLabel/)() from within this callback, but\nyou may not perform any OpenGL drawing here.\n\nLabels enqueued by this function will appear above all OpenGL drawing (performed\nby your optional[XPLMMapDrawingCallback_f](/sdk/XPLMMapDrawingCallback_f/)), and\nabove all built-in map icons and labels of the same layer type (“fill” or\n“markings,” as determined by the[XPLMMapLayerType](/sdk/XPLMMapLayerType/)in\nyour[XPLMCreateMapLayer_t](/sdk/XPLMCreateMapLayer_t/)). Note, however, that the\nrelative ordering between the drawing callbacks of different plugins is not\nguaranteed.\n\n## LAYER MANAGEMENT CALLBACKS\n\nThese are various “bookkeeping” callbacks that your map layer can receive (if\nyou provide the callback in\nyour[XPLMCreateMapLayer_t](/sdk/XPLMCreateMapLayer_t/)). They allow you to\nmanage the lifecycle of your layer, as well as cache any\ncomputationally-intensive preparation you might need for drawing.\n\n### [XPLMMapPrepareCacheCallback_f](/sdk/XPLMMapPrepareCacheCallback_f/)\n\n```cpp\ntypedef void (* XPLMMapPrepareCacheCallback_f)(\n                         XPLMMapLayerID       inLayer,\n                         const float *        inTotalMapBoundsLeftTopRightBottom,\n                         XPLMMapProjectionID  projection,\n                         void *               inRefcon);\n\n```\n\nA callback used to allow you to cache whatever information your layer needs to\ndraw in the current map area.\n\nThis is called each time the map’s total bounds change. This is typically\ntriggered by new DSFs being loaded, such that X-Plane discards old, now-distant\nDSFs and pulls in new ones. At that point, the available bounds of the map also\nchange to match the new DSF area.\n\nBy caching just the information you need to draw in this area, your future draw\ncalls can be made faster, since you’ll be able to simply “splat” your\nprecomputed information each frame.\n\nWe guarantee that the map projection will not change between successive prepare\ncache calls, nor will any draw call give you bounds outside these total map\nbounds. So, if you cache the projected map coordinates of all the items you\nmight want to draw in the total map area, you can be guaranteed that no draw\ncall will be asked to do any new work.\n\n### [XPLMMapWillBeDeletedCallback_f](/sdk/XPLMMapWillBeDeletedCallback_f/)\n\n```cpp\ntypedef void (* XPLMMapWillBeDeletedCallback_f)(\n                         XPLMMapLayerID       inLayer,\n                         void *               inRefcon);\n\n```\n\nCalled just before your map layer gets deleted. Because SDK-created map layers\nhave the same lifetime as the X-Plane map that contains them, if the map gets\nunloaded from memory, your layer will too.\n\n## MAP LAYER CREATION AND DESTRUCTION\n\nEnables the creation of new map layers. Layers are created for a particular\ninstance of the X-Plane map. For instance, if you want your layer to appear in\nboth the normal map interface and the Instructor Operator Station (IOS), you\nwould need two separate calls\nto[XPLMCreateMapLayer](/sdk/XPLMCreateMapLayer/)(), with two different values\nfor your[XPLMCreateMapLayer_t](/sdk/XPLMCreateMapLayer_t/)::layer_name.\n\nYour layer’s lifetime will be determined by the lifetime of the map it is\ncreated in. If the map is destroyed (on the X-Plane side), your layer will be\ntoo, and you’ll receive a callback to\nyour[XPLMMapWillBeDeletedCallback_f](/sdk/XPLMMapWillBeDeletedCallback_f/).\n\n### [XPLMMapLayerType](/sdk/XPLMMapLayerType/)\n\nIndicates the type of map layer you are creating. Fill layers will always be\ndrawn beneath markings layers.\n\n| Name | Value | Description |\n| --- | --- | --- |\n| [xplm_MapLayer_Fill](/sdk/xplm_MapLayer_Fill/) | \"0\" | A layer that draws\n\"fill\" graphics, like weather patterns, terrain, etc. Fill layers frequently\ncover a large portion of the visible map area. |\n| [xplm_MapLayer_Markings](/sdk/xplm_MapLayer_Markings/) | \"1\" | A layer that\nprovides markings for particular map features, like NAVAIDs, airports, etc. Even\ndense markings layers cover a small portion of the total map area. |\n\n### [XPLM_MAP_USER_INTERFACE](/sdk/XPLM_MAP_USER_INTERFACE/)\n\n```cpp\n#define XPLM_MAP_USER_INTERFACE \"XPLM_MAP_USER_INTERFACE\"\n```\n\nGlobally unique identifier for X-Plane’s Map window, used as the\nmapToCreateLayerIn parameter\nin[XPLMCreateMapLayer_t](/sdk/XPLMCreateMapLayer_t/)\n\n### [XPLM_MAP_IOS](/sdk/XPLM_MAP_IOS/)\n\n```cpp\n#define XPLM_MAP_IOS         \"XPLM_MAP_IOS\"\n```\n\nGlobally unique identifier for X-Plane’s Instructor Operator Station window,\nused as the mapToCreateLayerIn parameter\nin[XPLMCreateMapLayer_t](/sdk/XPLMCreateMapLayer_t/)\n\n### [XPLMCreateMapLayer_t](/sdk/XPLMCreateMapLayer_t/)\n\nThis structure defines all of the parameters used to create a map layer\nusing[XPLMCreateMapLayer](/sdk/XPLMCreateMapLayer/). The structure will be\nexpanded in future SDK APIs to include more features. Always set the structSize\nmember to the size of your struct in bytes!\n\nEach layer must be associated with exactly one map instance in X-Plane. That\nmap, and that map alone, will call your callbacks. Likewise, when that map is\ndeleted, your layer will be as well.\n\n```cpp\ntypedef struct {\n     // Used to inform XPLMCreateMapLayer() of the SDK version you compiled against; should always be set to sizeof(XPLMCreateMapLayer_t)\n     int                       structSize;\n     // Globally unique string identifying the map you want this layer to appear in. As of XPLM300, this is limited to one of XPLM_MAP_USER_INTERFACE or XPLM_MAP_IOS\n     const char *              mapToCreateLayerIn;\n     // The type of layer you are creating, used to determine draw order (all plugin-created markings layers are drawn above all plugin-created fill layers)\n     XPLMMapLayerType          layerType;\n     // Optional callback to inform you this layer is being deleted (due to its owning map being destroyed)\n     XPLMMapWillBeDeletedCallback_f willBeDeletedCallback;\n     // Optional callback you want to use to prepare your draw cache when the map bounds change (set to NULL if you don't want this callback)\n     XPLMMapPrepareCacheCallback_f prepCacheCallback;\n     // Optional callback you want to use for arbitrary OpenGL drawing, which goes beneath all icons in the map's layering system (set to NULL if you don't want this callback)\n     XPLMMapDrawingCallback_f  drawCallback;\n     // Optional callback you want to use for drawing icons, which go above all built-in X-Plane icons (except the aircraft) in the map's layering system (set to NULL if you don't want this callback)\n     XPLMMapIconDrawingCallback_f iconCallback;\n     // Optional callback you want to use for drawing map labels, which go above all built-in X-Plane icons and labels (except those of aircraft) in the map's layering system (set to NULL if you don't want this callback)\n     XPLMMapLabelDrawingCallback_f labelCallback;\n     // True if you want a checkbox to be created in the map UI to toggle this layer on and off; false if the layer should simply always be enabled\n     int                       showUiToggle;\n     // Short label to use for this layer in the user interface\n     const char *              layerName;\n     // A reference to arbitrary data that will be passed to your callbacks\n     void *                    refcon;\n} XPLMCreateMapLayer_t;\n```\n\n### [XPLMCreateMapLayer](/sdk/XPLMCreateMapLayer/)\n\n```cpp\nXPLM_API XPLMMapLayerID XPLMCreateMapLayer(\n                         XPLMCreateMapLayer_t * inParams);\n\n```\n\nThis routine creates a new map layer. You pass in\nan[XPLMCreateMapLayer_t](/sdk/XPLMCreateMapLayer_t/)structure with all of the\nfields defined. You must set the structSize of the structure to the size of the\nactual structure you used.\n\nReturns NULL if the layer creation failed. This happens most frequently because\nthe map you specified in\nyour[XPLMCreateMapLayer_t](/sdk/XPLMCreateMapLayer_t/)::mapToCreateLayerIn field\ndoesn’t exist (that is, if[XPLMMapExists](/sdk/XPLMMapExists/)() returns 0 for\nthe specified map). You can\nuse[XPLMRegisterMapCreationHook](/sdk/XPLMRegisterMapCreationHook/)() to get a\nnotification each time a new map is opened in X-Plane, at which time you can\ncreate layers in it.\n\n### [XPLMDestroyMapLayer](/sdk/XPLMDestroyMapLayer/)\n\n```cpp\nXPLM_API int        XPLMDestroyMapLayer(\n                         XPLMMapLayerID       inLayer);\n\n```\n\nDestroys a map layer you created (calling\nyour[XPLMMapWillBeDeletedCallback_f](/sdk/XPLMMapWillBeDeletedCallback_f/)if\napplicable). Returns true if a deletion took place.\n\n### [XPLMMapCreatedCallback_f](/sdk/XPLMMapCreatedCallback_f/)\n\n```cpp\ntypedef void (* XPLMMapCreatedCallback_f)(\n                         const char *         mapIdentifier,\n                         void *               refcon);\n\n```\n\nA callback to notify your plugin that a new map has been created in X-Plane.\nThis is the best time to add a custom map layer\nusing[XPLMCreateMapLayer](/sdk/XPLMCreateMapLayer/)().\n\nNo OpenGL drawing is permitted within this callback.\n\n### [XPLMRegisterMapCreationHook](/sdk/XPLMRegisterMapCreationHook/)\n\n```cpp\nXPLM_API void       XPLMRegisterMapCreationHook(\n                         XPLMMapCreatedCallback_f callback,\n                         void *               refcon);\n\n```\n\nRegisters your callback to receive a notification each time a new map is\nconstructed in X-Plane. This callback is the best time to add your custom map\nlayer using[XPLMCreateMapLayer](/sdk/XPLMCreateMapLayer/)().\n\nNote that you will not be notified about any maps that already exist—you can\nuse[XPLMMapExists](/sdk/XPLMMapExists/)() to check for maps that were created\npreviously.\n\n### [XPLMMapExists](/sdk/XPLMMapExists/)\n\n```cpp\nXPLM_API int        XPLMMapExists(\n                         const char *         mapIdentifier);\n\n```\n\nReturns 1 if the map with the specified identifier already exists in X-Plane. In\nthat case, you can safely call[XPLMCreateMapLayer](/sdk/XPLMCreateMapLayer/)()\nspecifying that your layer should be added to that map.\n\n## MAP DRAWING\n\nThese APIs are only valid from within a map drawing callback (one of\nXPLMIconDrawingCallback_t\nor[XPLMMapLabelDrawingCallback_f](/sdk/XPLMMapLabelDrawingCallback_f/)). Your\ndrawing callbacks are registered when you create a new map layer as part of\nyour[XPLMCreateMapLayer_t](/sdk/XPLMCreateMapLayer_t/). The functions here hook\ninto X-Plane’s built-in map drawing functionality for icons and labels, so that\nyou get a consistent style with the rest of the X-Plane map.\n\nNote that the X-Plane 11 map introduces a strict ordering: layers of\ntype[xplm_MapLayer_Fill](/sdk/xplm_MapLayer_Fill/)get drawn beneath\nall[xplm_MapLayer_Markings](/sdk/xplm_MapLayer_Markings/)layers. Likewise, all\nOpenGL drawing (performed in your\nlayer’s[XPLMMapDrawingCallback_f](/sdk/XPLMMapDrawingCallback_f/)) will appear\nbeneath any icons and labels you draw.\n\n### [XPLMMapOrientation](/sdk/XPLMMapOrientation/)\n\nIndicates whether a map element should be match its rotation to the map itself,\nor to the user interface. For instance, the map itself may be rotated such that\n“up” matches the user’s aircraft, but you may want to draw a text label such\nthat it is always rotated zero degrees relative to the user’s perspective. In\nthat case, you would have it draw with UI orientation.\n\n| Name | Value | Description |\n| --- | --- | --- |\n| [xplm_MapOrientation_Map](/sdk/xplm_MapOrientation_Map/) | \"0\" | Orient such\nthat a 0 degree rotation matches the map's north |\n| [xplm_MapOrientation_UI](/sdk/xplm_MapOrientation_UI/) | \"1\" | Orient such\nthat a 0 degree rotation is \"up\" relative to the user interface |\n\n### [XPLMDrawMapIconFromSheet](/sdk/XPLMDrawMapIconFromSheet/)\n\n```cpp\nXPLM_API void       XPLMDrawMapIconFromSheet(\n                         XPLMMapLayerID       layer,\n                         const char *         inPngPath,\n                         int                  s,\n                         int                  t,\n                         int                  ds,\n                         int                  dt,\n                         float                mapX,\n                         float                mapY,\n                         XPLMMapOrientation   orientation,\n                         float                rotationDegrees,\n                         float                mapWidth);\n\n```\n\nEnables plugin-created map layers to draw PNG icons using X-Plane’s built-in\nicon drawing functionality. Only valid from within an XPLMIconDrawingCallback_t\n(but you can request an arbitrary number of icons to be drawn from within your\ncallback).\n\nX-Plane will automatically manage the memory for your texture so that it only\nhas to be loaded from disk once as long as you continue drawing it per-frame.\n(When you stop drawing it, the memory may purged in a “garbage collection” pass,\nrequire a load from disk in the future.)\n\nInstead of having X-Plane draw a full PNG, this method allows you to use UV\ncoordinates to request a portion of the image to be drawn. This allows you to\nuse a single texture load (of an icon sheet, for example) to draw many icons.\nDoing so is much more efficient than drawing a dozen different small PNGs.\n\nThe UV coordinates used here treat the texture you load as being comprised of a\nnumber of identically sized “cells”. You specify the width and height in cells\n(ds and dt, respectively), as well as the coordinates within the cell grid for\nthe sub-image you’d like to draw.\n\nNote that you can use different ds and dt values in subsequent calls with the\nsame texture sheet. This enables you to use icons of different sizes in the same\nsheet if you arrange them properly in the PNG.\n\nThis function is only valid from within an XPLMIconDrawingCallback_t (but you\ncan request an arbitrary number of icons to be drawn from within your callback).\n\n### [XPLMDrawMapLabel](/sdk/XPLMDrawMapLabel/)\n\n```cpp\nXPLM_API void       XPLMDrawMapLabel(\n                         XPLMMapLayerID       layer,\n                         const char *         inText,\n                         float                mapX,\n                         float                mapY,\n                         XPLMMapOrientation   orientation,\n                         float                rotationDegrees);\n\n```\n\nEnables plugin-created map layers to draw text labels using X-Plane’s built-in\nlabeling functionality. Only valid from within\nan[XPLMMapLabelDrawingCallback_f](/sdk/XPLMMapLabelDrawingCallback_f/)(but you\ncan request an arbitrary number of text labels to be drawn from within your\ncallback).\n\n## MAP PROJECTIONS\n\nAs of X-Plane 11, the map draws using true cartographic projections, and\ndifferent maps may use different projections. Thus, to draw at a particular\nlatitude and longitude, you must first transform your real-world coordinates\ninto map coordinates.\n\nThe map projection is also responsible for giving you the current scale of the\nmap. That is, the projection can tell you how many map units correspond to 1\nmeter at a given point.\n\nFinally, the map projection can give you the current rotation of the map. Since\nX-Plane 11 maps can rotate to match the heading of the aircraft, the map’s\nrotation can potentially change every frame.\n\n### [XPLMMapProject](/sdk/XPLMMapProject/)\n\n```cpp\nXPLM_API void       XPLMMapProject(\n                         XPLMMapProjectionID  projection,\n                         double               latitude,\n                         double               longitude,\n                         float *              outX,\n                         float *              outY);\n\n```\n\nProjects a latitude/longitude into map coordinates. This is the inverse\nof[XPLMMapUnproject](/sdk/XPLMMapUnproject/)().\n\nOnly valid from within a map layer callback (one\nof[XPLMMapPrepareCacheCallback_f](/sdk/XPLMMapPrepareCacheCallback_f/),[XPLMMapDrawingCallback_f](/sdk/XPLMMapDrawingCallback_f/),[XPLMMapIconDrawingCallback_f](/sdk/XPLMMapIconDrawingCallback_f/),\nor[XPLMMapLabelDrawingCallback_f](/sdk/XPLMMapLabelDrawingCallback_f/).)\n\n### [XPLMMapUnproject](/sdk/XPLMMapUnproject/)\n\n```cpp\nXPLM_API void       XPLMMapUnproject(\n                         XPLMMapProjectionID  projection,\n                         float                mapX,\n                         float                mapY,\n                         double *             outLatitude,\n                         double *             outLongitude);\n\n```\n\nTransforms map coordinates back into a latitude and longitude. This is the\ninverse of[XPLMMapProject](/sdk/XPLMMapProject/)().\n\nOnly valid from within a map layer callback (one\nof[XPLMMapPrepareCacheCallback_f](/sdk/XPLMMapPrepareCacheCallback_f/),[XPLMMapDrawingCallback_f](/sdk/XPLMMapDrawingCallback_f/),[XPLMMapIconDrawingCallback_f](/sdk/XPLMMapIconDrawingCallback_f/),\nor[XPLMMapLabelDrawingCallback_f](/sdk/XPLMMapLabelDrawingCallback_f/).)\n\n### [XPLMMapScaleMeter](/sdk/XPLMMapScaleMeter/)\n\n```cpp\nXPLM_API float      XPLMMapScaleMeter(\n                         XPLMMapProjectionID  projection,\n                         float                mapX,\n                         float                mapY);\n\n```\n\nReturns the number of map units that correspond to a distance of one meter at a\ngiven set of map coordinates.\n\nOnly valid from within a map layer callback (one\nof[XPLMMapPrepareCacheCallback_f](/sdk/XPLMMapPrepareCacheCallback_f/),[XPLMMapDrawingCallback_f](/sdk/XPLMMapDrawingCallback_f/),[XPLMMapIconDrawingCallback_f](/sdk/XPLMMapIconDrawingCallback_f/),\nor[XPLMMapLabelDrawingCallback_f](/sdk/XPLMMapLabelDrawingCallback_f/).)\n\n### [XPLMMapGetNorthHeading](/sdk/XPLMMapGetNorthHeading/)\n\n```cpp\nXPLM_API float      XPLMMapGetNorthHeading(\n                         XPLMMapProjectionID  projection,\n                         float                mapX,\n                         float                mapY);\n\n```\n\nReturns the heading (in degrees clockwise) from the positive Y axis in the\ncartesian mapping coordinate system to true north at the point passed in. You\ncan use it as a clockwise rotational offset to align icons and other 2-d drawing\nwith true north on the map, compensating for rotations in the map due to\nprojection.\n\nOnly valid from within a map layer callback (one\nof[XPLMMapPrepareCacheCallback_f](/sdk/XPLMMapPrepareCacheCallback_f/),[XPLMMapDrawingCallback_f](/sdk/XPLMMapDrawingCallback_f/),[XPLMMapIconDrawingCallback_f](/sdk/XPLMMapIconDrawingCallback_f/),\nor[XPLMMapLabelDrawingCallback_f](/sdk/XPLMMapLabelDrawingCallback_f/).)",
      "own_functions": [
        "XPLMCreateMapLayer",
        "XPLMDestroyMapLayer",
        "XPLMRegisterMapCreationHook",
        "XPLMMapExists",
        "XPLMDrawMapIconFromSheet",
        "XPLMDrawMapLabel",
        "XPLMMapProject",
        "XPLMMapUnproject",
        "XPLMMapScaleMeter",
        "XPLMMapGetNorthHeading",
        "XPLMMapStyle",
        "XPLMMapLayerType",
        "XPLMMapOrientation",
        "intXPLMDestroyMapLayer",
        "voidXPLMRegisterMapCreationHook",
        "intXPLMMapExists",
        "voidXPLMDrawMapIconFromSheet",
        "voidXPLMDrawMapLabel",
        "voidXPLMMapProject",
        "voidXPLMMapUnproject",
        "floatXPLMMapScaleMeter",
        "floatXPLMMapGetNorthHeading"
      ],
      "processing_timestamp": "2025-06-25T20:39:23.822003+00:00",
      "title": "XPLMMap | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMMap/"
    },
    "https://developer.x-plane.com/sdk/XPLMMapCreatedCallback_f/": {
      "api_signatures": [],
      "category": {
        "category": "XPLM_Map",
        "module": "Xplm Map",
        "url": "https://developer.x-plane.com/sdk/XPLMMapCreatedCallback_f/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"callback\"><h3 class=\"sdk-api-callback\" id=\"XPLMMapCreatedCallback_f\"><a href=\"/sdk/XPLMMapCreatedCallback_f/\">XPLMMapCreatedCallback_f</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>typedef void (* <a href=\"/sdk/XPLMMapCreatedCallback_f/\">XPLMMapCreatedCallback_f</a>)(\n                         const char *         mapIdentifier,\n                         void *               refcon);\n</code></pre><p>A callback to notify your plugin that a new map has been created in X-Plane. This is the best time to add a custom map layer using<a href=\"/sdk/XPLMCreateMapLayer/\">XPLMCreateMapLayer</a>().</p><p>No OpenGL drawing is permitted within this callback.</p></div></div></article>",
      "code_examples": [
        {
          "char_count": 157,
          "code": "typedef void (*XPLMMapCreatedCallback_f)(\n                         const char *         mapIdentifier,\n                         void *               refcon);",
          "context": "XPLMMapCreatedCallback_f",
          "id": "example_0",
          "language": "c",
          "line_count": 3,
          "type": "snippet"
        }
      ],
      "cross_references": [
        "XPLMCreateMapLayer"
      ],
      "markdown": "### [XPLMMapCreatedCallback_f](/sdk/XPLMMapCreatedCallback_f/)\n\n```cpp\ntypedef void (* XPLMMapCreatedCallback_f)(\n                         const char *         mapIdentifier,\n                         void *               refcon);\n\n```\n\nA callback to notify your plugin that a new map has been created in X-Plane.\nThis is the best time to add a custom map layer\nusing[XPLMCreateMapLayer](/sdk/XPLMCreateMapLayer/)().\n\nNo OpenGL drawing is permitted within this callback.",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:23.826001+00:00",
      "title": "XPLMMapCreatedCallback_f | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMMapCreatedCallback_f/"
    },
    "https://developer.x-plane.com/sdk/XPLMMapDrawingCallback_f/": {
      "api_signatures": [],
      "category": {
        "category": "XPLM_Display",
        "module": "Xplm Display",
        "url": "https://developer.x-plane.com/sdk/XPLMMapDrawingCallback_f/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"callback\"><h3 class=\"sdk-api-callback\" id=\"XPLMMapDrawingCallback_f\"><a href=\"/sdk/XPLMMapDrawingCallback_f/\">XPLMMapDrawingCallback_f</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>typedef void (* <a href=\"/sdk/XPLMMapDrawingCallback_f/\">XPLMMapDrawingCallback_f</a>)(\n                         <a href=\"/sdk/XPLMMapLayerID/\">XPLMMapLayerID</a>       inLayer,\n                         const float *        inMapBoundsLeftTopRightBottom,\n                         float                zoomRatio,\n                         float                mapUnitsPerUserInterfaceUnit,\n                         <a href=\"/sdk/XPLMMapStyle/\">XPLMMapStyle</a>         mapStyle,\n                         <a href=\"/sdk/XPLMMapProjectionID/\">XPLMMapProjectionID</a>  projection,\n                         void *               inRefcon);\n</code></pre><p>This is the OpenGL map drawing callback for plugin-created map layers. You can perform arbitrary OpenGL drawing from this callback, with one exception: changes to the Z-buffer are not permitted, and will result in map drawing errors.</p><p>All drawing done from within this callback appears beneath all built-in X-Plane icons and labels, but above the built-in “fill” layers (layers providing major details, like terrain and water). Note, however, that the relative ordering between the drawing callbacks of different plugins is not guaranteed.</p></div></div></article>",
      "code_examples": [
        {
          "char_count": 381,
          "code": "typedef void (*XPLMMapDrawingCallback_f)(XPLMMapLayerIDinLayer,\n                         const float *        inMapBoundsLeftTopRightBottom,\n                         float                zoomRatio,\n                         float                mapUnitsPerUserInterfaceUnit,XPLMMapStylemapStyle,XPLMMapProjectionIDprojection,\n                         void *               inRefcon);",
          "context": "XPLMMapDrawingCallback_f",
          "id": "example_0",
          "language": "c",
          "line_count": 5,
          "type": "snippet"
        }
      ],
      "cross_references": [
        "XPLMMapStyle",
        "XPLMMapProject"
      ],
      "markdown": "### [XPLMMapDrawingCallback_f](/sdk/XPLMMapDrawingCallback_f/)\n\n```cpp\ntypedef void (* XPLMMapDrawingCallback_f)(\n                         XPLMMapLayerID       inLayer,\n                         const float *        inMapBoundsLeftTopRightBottom,\n                         float                zoomRatio,\n                         float                mapUnitsPerUserInterfaceUnit,\n                         XPLMMapStyle         mapStyle,\n                         XPLMMapProjectionID  projection,\n                         void *               inRefcon);\n\n```\n\nThis is the OpenGL map drawing callback for plugin-created map layers. You can\nperform arbitrary OpenGL drawing from this callback, with one exception: changes\nto the Z-buffer are not permitted, and will result in map drawing errors.\n\nAll drawing done from within this callback appears beneath all built-in X-Plane\nicons and labels, but above the built-in “fill” layers (layers providing major\ndetails, like terrain and water). Note, however, that the relative ordering\nbetween the drawing callbacks of different plugins is not guaranteed.",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:23.528279+00:00",
      "title": "XPLMMapDrawingCallback_f | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMMapDrawingCallback_f/"
    },
    "https://developer.x-plane.com/sdk/XPLMMapExists/": {
      "api_signatures": [
        {
          "description": "Returns 1 if the map with the specified identifier already exists in X-Plane. In that case, you can safely callXPLMCreateMapLayer() specifying that your layer should be added to that map.",
          "name": "XPLMMapExists",
          "parameters": [
            {
              "full_declaration": "const char *         mapIdentifier",
              "name": "mapIdentifier",
              "type": "const char *"
            }
          ],
          "signature": "XPLM_API intXPLMMapExists(\n                         const char *         mapIdentifier);"
        },
        {
          "name": "intXPLMMapExists",
          "signature": "XPLM_API intXPLMMapExists(\n                         const char *         mapIdentifier);",
          "source": "code_block_extraction",
          "type": "function"
        }
      ],
      "category": {
        "category": "XPLM_Map",
        "module": "Xplm Map",
        "url": "https://developer.x-plane.com/sdk/XPLMMapExists/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPLMMapExists\"><a href=\"/sdk/XPLMMapExists/\">XPLMMapExists</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API int        <a href=\"/sdk/XPLMMapExists/\">XPLMMapExists</a>(\n                         const char *         mapIdentifier);\n</code></pre><p>Returns 1 if the map with the specified identifier already exists in X-Plane. In that case, you can safely call<a href=\"/sdk/XPLMCreateMapLayer/\">XPLMCreateMapLayer</a>() specifying that your layer should be added to that map.</p></div></div></article>",
      "code_examples": [
        {
          "char_count": 88,
          "code": "XPLM_API intXPLMMapExists(\n                         const char *         mapIdentifier);",
          "context": "XPLMMapExists",
          "id": "example_0",
          "language": "c",
          "line_count": 2,
          "type": "snippet"
        }
      ],
      "cross_references": [
        "XPLMCreateMapLayer"
      ],
      "markdown": "### [XPLMMapExists](/sdk/XPLMMapExists/)\n\n```cpp\nXPLM_API int        XPLMMapExists(\n                         const char *         mapIdentifier);\n\n```\n\nReturns 1 if the map with the specified identifier already exists in X-Plane. In\nthat case, you can safely call[XPLMCreateMapLayer](/sdk/XPLMCreateMapLayer/)()\nspecifying that your layer should be added to that map.",
      "own_functions": [
        "XPLMMapExists",
        "intXPLMMapExists"
      ],
      "processing_timestamp": "2025-06-25T20:39:23.824001+00:00",
      "title": "XPLMMapExists | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMMapExists/"
    },
    "https://developer.x-plane.com/sdk/XPLMMapGetNorthHeading/": {
      "api_signatures": [
        {
          "description": "Returns the heading (in degrees clockwise) from the positive Y axis in the cartesian mapping coordinate system to true north at the point passed in. You can use it as a clockwise rotational offset to align icons and other 2-d drawing with true north on the map, compensating for rotations in the map due to projection.",
          "name": "XPLMMapGetNorthHeading",
          "parameters": [
            {
              "full_declaration": "float                mapX",
              "name": "mapX",
              "type": "float"
            },
            {
              "full_declaration": "float                mapY",
              "name": "mapY",
              "type": "float"
            }
          ],
          "signature": "XPLM_API floatXPLMMapGetNorthHeading(XPLMMapProjectionIDprojection,\n                         float                mapX,\n                         float                mapY);"
        },
        {
          "name": "floatXPLMMapGetNorthHeading",
          "signature": "XPLM_API floatXPLMMapGetNorthHeading(XPLMMapProjectionIDprojection,\n                         float                mapX,\n                         float                mapY);",
          "source": "code_block_extraction",
          "type": "function"
        }
      ],
      "category": {
        "category": "XPLM_Map",
        "module": "Xplm Map",
        "url": "https://developer.x-plane.com/sdk/XPLMMapGetNorthHeading/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPLMMapGetNorthHeading\"><a href=\"/sdk/XPLMMapGetNorthHeading/\">XPLMMapGetNorthHeading</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API float      <a href=\"/sdk/XPLMMapGetNorthHeading/\">XPLMMapGetNorthHeading</a>(\n                         <a href=\"/sdk/XPLMMapProjectionID/\">XPLMMapProjectionID</a>  projection,\n                         float                mapX,\n                         float                mapY);\n</code></pre><p>Returns the heading (in degrees clockwise) from the positive Y axis in the cartesian mapping coordinate system to true north at the point passed in. You can use it as a clockwise rotational offset to align icons and other 2-d drawing with true north on the map, compensating for rotations in the map due to projection.</p><p>Only valid from within a map layer callback (one of<a href=\"/sdk/XPLMMapPrepareCacheCallback_f/\">XPLMMapPrepareCacheCallback_f</a>,<a href=\"/sdk/XPLMMapDrawingCallback_f/\">XPLMMapDrawingCallback_f</a>,<a href=\"/sdk/XPLMMapIconDrawingCallback_f/\">XPLMMapIconDrawingCallback_f</a>, or<a href=\"/sdk/XPLMMapLabelDrawingCallback_f/\">XPLMMapLabelDrawingCallback_f</a>.)</p></div></div></article>",
      "code_examples": [
        {
          "char_count": 172,
          "code": "XPLM_API floatXPLMMapGetNorthHeading(XPLMMapProjectionIDprojection,\n                         float                mapX,\n                         float                mapY);",
          "context": "XPLMMapGetNorthHeading",
          "id": "example_0",
          "language": "c",
          "line_count": 3,
          "type": "snippet"
        }
      ],
      "cross_references": [
        "XPLMMapProject"
      ],
      "markdown": "### [XPLMMapGetNorthHeading](/sdk/XPLMMapGetNorthHeading/)\n\n```cpp\nXPLM_API float      XPLMMapGetNorthHeading(\n                         XPLMMapProjectionID  projection,\n                         float                mapX,\n                         float                mapY);\n\n```\n\nReturns the heading (in degrees clockwise) from the positive Y axis in the\ncartesian mapping coordinate system to true north at the point passed in. You\ncan use it as a clockwise rotational offset to align icons and other 2-d drawing\nwith true north on the map, compensating for rotations in the map due to\nprojection.\n\nOnly valid from within a map layer callback (one\nof[XPLMMapPrepareCacheCallback_f](/sdk/XPLMMapPrepareCacheCallback_f/),[XPLMMapDrawingCallback_f](/sdk/XPLMMapDrawingCallback_f/),[XPLMMapIconDrawingCallback_f](/sdk/XPLMMapIconDrawingCallback_f/),\nor[XPLMMapLabelDrawingCallback_f](/sdk/XPLMMapLabelDrawingCallback_f/).)",
      "own_functions": [
        "XPLMMapGetNorthHeading",
        "floatXPLMMapGetNorthHeading"
      ],
      "processing_timestamp": "2025-06-25T20:39:23.831042+00:00",
      "title": "XPLMMapGetNorthHeading | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMMapGetNorthHeading/"
    },
    "https://developer.x-plane.com/sdk/XPLMMapIconDrawingCallback_f/": {
      "api_signatures": [],
      "category": {
        "category": "XPLM_Display",
        "module": "Xplm Display",
        "url": "https://developer.x-plane.com/sdk/XPLMMapIconDrawingCallback_f/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"callback\"><h3 class=\"sdk-api-callback\" id=\"XPLMMapIconDrawingCallback_f\"><a href=\"/sdk/XPLMMapIconDrawingCallback_f/\">XPLMMapIconDrawingCallback_f</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>typedef void (* <a href=\"/sdk/XPLMMapIconDrawingCallback_f/\">XPLMMapIconDrawingCallback_f</a>)(\n                         <a href=\"/sdk/XPLMMapLayerID/\">XPLMMapLayerID</a>       inLayer,\n                         const float *        inMapBoundsLeftTopRightBottom,\n                         float                zoomRatio,\n                         float                mapUnitsPerUserInterfaceUnit,\n                         <a href=\"/sdk/XPLMMapStyle/\">XPLMMapStyle</a>         mapStyle,\n                         <a href=\"/sdk/XPLMMapProjectionID/\">XPLMMapProjectionID</a>  projection,\n                         void *               inRefcon);\n</code></pre><p>This is the icon drawing callback that enables plugin-created map layers to draw icons using X-Plane’s built-in icon drawing functionality. You can request an arbitrary number of PNG icons to be drawn via<a href=\"/sdk/XPLMDrawMapIconFromSheet/\">XPLMDrawMapIconFromSheet</a>() from within this callback, but you may not perform any OpenGL drawing here.</p><p>Icons enqueued by this function will appear above all OpenGL drawing (performed by your optional<a href=\"/sdk/XPLMMapDrawingCallback_f/\">XPLMMapDrawingCallback_f</a>), and above all built-in X-Plane map icons of the same layer type (“fill” or “markings,” as determined by the<a href=\"/sdk/XPLMMapLayerType/\">XPLMMapLayerType</a>in your<a href=\"/sdk/XPLMCreateMapLayer_t/\">XPLMCreateMapLayer_t</a>). Note, however, that the relative ordering between the drawing callbacks of different plugins is not guaranteed.</p></div></div></article>",
      "code_examples": [
        {
          "char_count": 385,
          "code": "typedef void (*XPLMMapIconDrawingCallback_f)(XPLMMapLayerIDinLayer,\n                         const float *        inMapBoundsLeftTopRightBottom,\n                         float                zoomRatio,\n                         float                mapUnitsPerUserInterfaceUnit,XPLMMapStylemapStyle,XPLMMapProjectionIDprojection,\n                         void *               inRefcon);",
          "context": "XPLMMapIconDrawingCallback_f",
          "id": "example_0",
          "language": "c",
          "line_count": 5,
          "type": "snippet"
        }
      ],
      "cross_references": [
        "XPLMDrawMapIconFromSheet",
        "XPLMCreateMapLayer",
        "XPLMMapStyle",
        "XPLMMapProject",
        "XPLMMapLayerType"
      ],
      "markdown": "### [XPLMMapIconDrawingCallback_f](/sdk/XPLMMapIconDrawingCallback_f/)\n\n```cpp\ntypedef void (* XPLMMapIconDrawingCallback_f)(\n                         XPLMMapLayerID       inLayer,\n                         const float *        inMapBoundsLeftTopRightBottom,\n                         float                zoomRatio,\n                         float                mapUnitsPerUserInterfaceUnit,\n                         XPLMMapStyle         mapStyle,\n                         XPLMMapProjectionID  projection,\n                         void *               inRefcon);\n\n```\n\nThis is the icon drawing callback that enables plugin-created map layers to draw\nicons using X-Plane’s built-in icon drawing functionality. You can request an\narbitrary number of PNG icons to be drawn\nvia[XPLMDrawMapIconFromSheet](/sdk/XPLMDrawMapIconFromSheet/)() from within this\ncallback, but you may not perform any OpenGL drawing here.\n\nIcons enqueued by this function will appear above all OpenGL drawing (performed\nby your optional[XPLMMapDrawingCallback_f](/sdk/XPLMMapDrawingCallback_f/)), and\nabove all built-in X-Plane map icons of the same layer type (“fill” or\n“markings,” as determined by the[XPLMMapLayerType](/sdk/XPLMMapLayerType/)in\nyour[XPLMCreateMapLayer_t](/sdk/XPLMCreateMapLayer_t/)). Note, however, that the\nrelative ordering between the drawing callbacks of different plugins is not\nguaranteed.",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:23.526281+00:00",
      "title": "XPLMMapIconDrawingCallback_f | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMMapIconDrawingCallback_f/"
    },
    "https://developer.x-plane.com/sdk/XPLMMapLabelDrawingCallback_f/": {
      "api_signatures": [],
      "category": {
        "category": "XPLM_Display",
        "module": "Xplm Display",
        "url": "https://developer.x-plane.com/sdk/XPLMMapLabelDrawingCallback_f/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"callback\"><h3 class=\"sdk-api-callback\" id=\"XPLMMapLabelDrawingCallback_f\"><a href=\"/sdk/XPLMMapLabelDrawingCallback_f/\">XPLMMapLabelDrawingCallback_f</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>typedef void (* <a href=\"/sdk/XPLMMapLabelDrawingCallback_f/\">XPLMMapLabelDrawingCallback_f</a>)(\n                         <a href=\"/sdk/XPLMMapLayerID/\">XPLMMapLayerID</a>       inLayer,\n                         const float *        inMapBoundsLeftTopRightBottom,\n                         float                zoomRatio,\n                         float                mapUnitsPerUserInterfaceUnit,\n                         <a href=\"/sdk/XPLMMapStyle/\">XPLMMapStyle</a>         mapStyle,\n                         <a href=\"/sdk/XPLMMapProjectionID/\">XPLMMapProjectionID</a>  projection,\n                         void *               inRefcon);\n</code></pre><p>This is the label drawing callback that enables plugin-created map layers to draw text labels using X-Plane’s built-in labeling functionality. You can request an arbitrary number of text labels to be drawn via<a href=\"/sdk/XPLMDrawMapLabel/\">XPLMDrawMapLabel</a>() from within this callback, but you may not perform any OpenGL drawing here.</p><p>Labels enqueued by this function will appear above all OpenGL drawing (performed by your optional<a href=\"/sdk/XPLMMapDrawingCallback_f/\">XPLMMapDrawingCallback_f</a>), and above all built-in map icons and labels of the same layer type (“fill” or “markings,” as determined by the<a href=\"/sdk/XPLMMapLayerType/\">XPLMMapLayerType</a>in your<a href=\"/sdk/XPLMCreateMapLayer_t/\">XPLMCreateMapLayer_t</a>). Note, however, that the relative ordering between the drawing callbacks of different plugins is not guaranteed.</p></div></div></article>",
      "code_examples": [
        {
          "char_count": 386,
          "code": "typedef void (*XPLMMapLabelDrawingCallback_f)(XPLMMapLayerIDinLayer,\n                         const float *        inMapBoundsLeftTopRightBottom,\n                         float                zoomRatio,\n                         float                mapUnitsPerUserInterfaceUnit,XPLMMapStylemapStyle,XPLMMapProjectionIDprojection,\n                         void *               inRefcon);",
          "context": "XPLMMapLabelDrawingCallback_f",
          "id": "example_0",
          "language": "c",
          "line_count": 5,
          "type": "snippet"
        }
      ],
      "cross_references": [
        "XPLMCreateMapLayer",
        "XPLMMapStyle",
        "XPLMMapProject",
        "XPLMMapLayerType",
        "XPLMDrawMapLabel"
      ],
      "markdown": "### [XPLMMapLabelDrawingCallback_f](/sdk/XPLMMapLabelDrawingCallback_f/)\n\n```cpp\ntypedef void (* XPLMMapLabelDrawingCallback_f)(\n                         XPLMMapLayerID       inLayer,\n                         const float *        inMapBoundsLeftTopRightBottom,\n                         float                zoomRatio,\n                         float                mapUnitsPerUserInterfaceUnit,\n                         XPLMMapStyle         mapStyle,\n                         XPLMMapProjectionID  projection,\n                         void *               inRefcon);\n\n```\n\nThis is the label drawing callback that enables plugin-created map layers to\ndraw text labels using X-Plane’s built-in labeling functionality. You can\nrequest an arbitrary number of text labels to be drawn\nvia[XPLMDrawMapLabel](/sdk/XPLMDrawMapLabel/)() from within this callback, but\nyou may not perform any OpenGL drawing here.\n\nLabels enqueued by this function will appear above all OpenGL drawing (performed\nby your optional[XPLMMapDrawingCallback_f](/sdk/XPLMMapDrawingCallback_f/)), and\nabove all built-in map icons and labels of the same layer type (“fill” or\n“markings,” as determined by the[XPLMMapLayerType](/sdk/XPLMMapLayerType/)in\nyour[XPLMCreateMapLayer_t](/sdk/XPLMCreateMapLayer_t/)). Note, however, that the\nrelative ordering between the drawing callbacks of different plugins is not\nguaranteed.",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:23.523279+00:00",
      "title": "XPLMMapLabelDrawingCallback_f | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMMapLabelDrawingCallback_f/"
    },
    "https://developer.x-plane.com/sdk/XPLMMapLayerID/": {
      "api_signatures": [],
      "category": {
        "category": "XPLM_Map",
        "module": "Xplm Map",
        "url": "https://developer.x-plane.com/sdk/XPLMMapLayerID/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"typedef\"><h3 class=\"sdk-api-type\" id=\"XPLMMapLayerID\"><a href=\"/sdk/XPLMMapLayerID/\">XPLMMapLayerID</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>typedef void * <a href=\"/sdk/XPLMMapLayerID/\">XPLMMapLayerID</a>;</code></pre><p>This is an opaque handle for a plugin-created map layer. Pass it to the map drawing APIs from an appropriate callback to draw in the layer you created.</p></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "### [XPLMMapLayerID](/sdk/XPLMMapLayerID/)\n\n```cpp\ntypedef void * XPLMMapLayerID;\n```\n\nThis is an opaque handle for a plugin-created map layer. Pass it to the map\ndrawing APIs from an appropriate callback to draw in the layer you created.",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:23.828044+00:00",
      "title": "XPLMMapLayerID | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMMapLayerID/"
    },
    "https://developer.x-plane.com/sdk/XPLMMapLayerType/": {
      "api_signatures": [
        {
          "name": "XPLMMapLayerType",
          "type": "enum",
          "values": [
            {
              "description": "A layer that draws \"fill\" graphics, like weather patterns, terrain, etc. Fill layers frequently cover a large portion of the visible map area.",
              "name": "xplm_MapLayer_Fill",
              "value": "\"0\""
            },
            {
              "description": "A layer that provides markings for particular map features, like NAVAIDs, airports, etc. Even dense markings layers cover a small portion of the total map area.",
              "name": "xplm_MapLayer_Markings",
              "value": "\"1\""
            }
          ]
        }
      ],
      "category": {
        "category": "XPLM_Map",
        "module": "Xplm Map",
        "url": "https://developer.x-plane.com/sdk/XPLMMapLayerType/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enum\"><h3 class=\"sdk-api-enum\" id=\"XPLMMapLayerType\"><a href=\"/sdk/XPLMMapLayerType/\">XPLMMapLayerType</a></h3><p>Indicates the type of map layer you are creating. Fill layers will always be drawn beneath markings layers.</p><p><div class=\"enumitem\"><table><thead><tr><th>Name</th><th>Value</th><th>Description</th></tr></thead><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_MapLayer_Fill\"><a href=\"/sdk/xplm_MapLayer_Fill/\">xplm_MapLayer_Fill</a></td><td>\"0\"</td><td>A layer that draws \"fill\" graphics, like weather patterns, terrain, etc. Fill layers frequently cover a large portion of the visible map area.</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_MapLayer_Markings\"><a href=\"/sdk/xplm_MapLayer_Markings/\">xplm_MapLayer_Markings</a></td><td>\"1\"</td><td>A layer that provides markings for particular map features, like NAVAIDs, airports, etc. Even dense markings layers cover a small portion of the total map area.</td></tr></table></div></p></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "### [XPLMMapLayerType](/sdk/XPLMMapLayerType/)\n\nIndicates the type of map layer you are creating. Fill layers will always be\ndrawn beneath markings layers.\n\n| Name | Value | Description |\n| --- | --- | --- |\n| [xplm_MapLayer_Fill](/sdk/xplm_MapLayer_Fill/) | \"0\" | A layer that draws\n\"fill\" graphics, like weather patterns, terrain, etc. Fill layers frequently\ncover a large portion of the visible map area. |\n| [xplm_MapLayer_Markings](/sdk/xplm_MapLayer_Markings/) | \"1\" | A layer that\nprovides markings for particular map features, like NAVAIDs, airports, etc. Even\ndense markings layers cover a small portion of the total map area. |",
      "own_functions": [
        "XPLMMapLayerType"
      ],
      "processing_timestamp": "2025-06-25T20:39:23.834043+00:00",
      "title": "XPLMMapLayerType | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMMapLayerType/"
    },
    "https://developer.x-plane.com/sdk/XPLMMapOrientation/": {
      "api_signatures": [
        {
          "name": "XPLMMapOrientation",
          "type": "enum",
          "values": [
            {
              "description": "Orient such that a 0 degree rotation matches the map's north",
              "name": "xplm_MapOrientation_Map",
              "value": "\"0\""
            },
            {
              "description": "Orient such that a 0 degree rotation is \"up\" relative to the user interface",
              "name": "xplm_MapOrientation_UI",
              "value": "\"1\""
            }
          ]
        }
      ],
      "category": {
        "category": "XPLM_Map",
        "module": "Xplm Map",
        "url": "https://developer.x-plane.com/sdk/XPLMMapOrientation/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enum\"><h3 class=\"sdk-api-enum\" id=\"XPLMMapOrientation\"><a href=\"/sdk/XPLMMapOrientation/\">XPLMMapOrientation</a></h3><p>Indicates whether a map element should be match its rotation to the map itself, or to the user interface. For instance, the map itself may be rotated such that “up” matches the user’s aircraft, but you may want to draw a text label such that it is always rotated zero degrees relative to the user’s perspective. In that case, you would have it draw with UI orientation.</p><p><div class=\"enumitem\"><table><thead><tr><th>Name</th><th>Value</th><th>Description</th></tr></thead><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_MapOrientation_Map\"><a href=\"/sdk/xplm_MapOrientation_Map/\">xplm_MapOrientation_Map</a></td><td>\"0\"</td><td>Orient such that a 0 degree rotation matches the map's north</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_MapOrientation_UI\"><a href=\"/sdk/xplm_MapOrientation_UI/\">xplm_MapOrientation_UI</a></td><td>\"1\"</td><td>Orient such that a 0 degree rotation is \"up\" relative to the user interface</td></tr></table></div></p></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "### [XPLMMapOrientation](/sdk/XPLMMapOrientation/)\n\nIndicates whether a map element should be match its rotation to the map itself,\nor to the user interface. For instance, the map itself may be rotated such that\n“up” matches the user’s aircraft, but you may want to draw a text label such\nthat it is always rotated zero degrees relative to the user’s perspective. In\nthat case, you would have it draw with UI orientation.\n\n| Name | Value | Description |\n| --- | --- | --- |\n| [xplm_MapOrientation_Map](/sdk/xplm_MapOrientation_Map/) | \"0\" | Orient such\nthat a 0 degree rotation matches the map's north |\n| [xplm_MapOrientation_UI](/sdk/xplm_MapOrientation_UI/) | \"1\" | Orient such\nthat a 0 degree rotation is \"up\" relative to the user interface |",
      "own_functions": [
        "XPLMMapOrientation"
      ],
      "processing_timestamp": "2025-06-25T20:39:23.837044+00:00",
      "title": "XPLMMapOrientation | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMMapOrientation/"
    },
    "https://developer.x-plane.com/sdk/XPLMMapPrepareCacheCallback_f/": {
      "api_signatures": [],
      "category": {
        "category": "XPLM_Map",
        "module": "Xplm Map",
        "url": "https://developer.x-plane.com/sdk/XPLMMapPrepareCacheCallback_f/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"callback\"><h3 class=\"sdk-api-callback\" id=\"XPLMMapPrepareCacheCallback_f\"><a href=\"/sdk/XPLMMapPrepareCacheCallback_f/\">XPLMMapPrepareCacheCallback_f</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>typedef void (* <a href=\"/sdk/XPLMMapPrepareCacheCallback_f/\">XPLMMapPrepareCacheCallback_f</a>)(\n                         <a href=\"/sdk/XPLMMapLayerID/\">XPLMMapLayerID</a>       inLayer,\n                         const float *        inTotalMapBoundsLeftTopRightBottom,\n                         <a href=\"/sdk/XPLMMapProjectionID/\">XPLMMapProjectionID</a>  projection,\n                         void *               inRefcon);\n</code></pre><p>A callback used to allow you to cache whatever information your layer needs to draw in the current map area.</p><p>This is called each time the map’s total bounds change. This is typically triggered by new DSFs being loaded, such that X-Plane discards old, now-distant DSFs and pulls in new ones. At that point, the available bounds of the map also change to match the new DSF area.</p><p>By caching just the information you need to draw in this area, your future draw calls can be made faster, since you’ll be able to simply “splat” your precomputed information each frame.</p><p>We guarantee that the map projection will not change between successive prepare cache calls, nor will any draw call give you bounds outside these total map bounds. So, if you cache the projected map coordinates of all the items you might want to draw in the total map area, you can be guaranteed that no draw call will be asked to do any new work.</p></div></div></article>",
      "code_examples": [
        {
          "char_count": 237,
          "code": "typedef void (*XPLMMapPrepareCacheCallback_f)(XPLMMapLayerIDinLayer,\n                         const float *        inTotalMapBoundsLeftTopRightBottom,XPLMMapProjectionIDprojection,\n                         void *               inRefcon);",
          "context": "XPLMMapPrepareCacheCallback_f",
          "id": "example_0",
          "language": "c",
          "line_count": 3,
          "type": "snippet"
        }
      ],
      "cross_references": [
        "XPLMMapProject"
      ],
      "markdown": "### [XPLMMapPrepareCacheCallback_f](/sdk/XPLMMapPrepareCacheCallback_f/)\n\n```cpp\ntypedef void (* XPLMMapPrepareCacheCallback_f)(\n                         XPLMMapLayerID       inLayer,\n                         const float *        inTotalMapBoundsLeftTopRightBottom,\n                         XPLMMapProjectionID  projection,\n                         void *               inRefcon);\n\n```\n\nA callback used to allow you to cache whatever information your layer needs to\ndraw in the current map area.\n\nThis is called each time the map’s total bounds change. This is typically\ntriggered by new DSFs being loaded, such that X-Plane discards old, now-distant\nDSFs and pulls in new ones. At that point, the available bounds of the map also\nchange to match the new DSF area.\n\nBy caching just the information you need to draw in this area, your future draw\ncalls can be made faster, since you’ll be able to simply “splat” your\nprecomputed information each frame.\n\nWe guarantee that the map projection will not change between successive prepare\ncache calls, nor will any draw call give you bounds outside these total map\nbounds. So, if you cache the projected map coordinates of all the items you\nmight want to draw in the total map area, you can be guaranteed that no draw\ncall will be asked to do any new work.",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:23.841046+00:00",
      "title": "XPLMMapPrepareCacheCallback_f | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMMapPrepareCacheCallback_f/"
    },
    "https://developer.x-plane.com/sdk/XPLMMapProject/": {
      "api_signatures": [
        {
          "description": "Projects a latitude/longitude into map coordinates. This is the inverse ofXPLMMapUnproject().",
          "name": "XPLMMapProject",
          "parameters": [
            {
              "full_declaration": "double               latitude",
              "name": "latitude",
              "type": "double"
            },
            {
              "full_declaration": "double               longitude",
              "name": "longitude",
              "type": "double"
            },
            {
              "full_declaration": "float *              outX",
              "name": "outX",
              "type": "float *"
            },
            {
              "full_declaration": "float *              outY",
              "name": "outY",
              "type": "float *"
            }
          ],
          "signature": "XPLM_API voidXPLMMapProject(XPLMMapProjectionIDprojection,\n                         double               latitude,\n                         double               longitude,\n                         float *              outX,\n                         float *              outY);"
        },
        {
          "name": "voidXPLMMapProject",
          "signature": "XPLM_API voidXPLMMapProject(XPLMMapProjectionIDprojection,\n                         double               latitude,\n                         double               longitude,\n                         float *              outX,\n                         float *              outY);",
          "source": "code_block_extraction",
          "type": "function"
        }
      ],
      "category": {
        "category": "XPLM_Map",
        "module": "Xplm Map",
        "url": "https://developer.x-plane.com/sdk/XPLMMapProject/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPLMMapProject\"><a href=\"/sdk/XPLMMapProject/\">XPLMMapProject</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API void       <a href=\"/sdk/XPLMMapProject/\">XPLMMapProject</a>(\n                         <a href=\"/sdk/XPLMMapProjectionID/\">XPLMMapProjectionID</a>  projection,\n                         double               latitude,\n                         double               longitude,\n                         float *              outX,\n                         float *              outY);\n</code></pre><p>Projects a latitude/longitude into map coordinates. This is the inverse of<a href=\"/sdk/XPLMMapUnproject/\">XPLMMapUnproject</a>().</p><p>Only valid from within a map layer callback (one of<a href=\"/sdk/XPLMMapPrepareCacheCallback_f/\">XPLMMapPrepareCacheCallback_f</a>,<a href=\"/sdk/XPLMMapDrawingCallback_f/\">XPLMMapDrawingCallback_f</a>,<a href=\"/sdk/XPLMMapIconDrawingCallback_f/\">XPLMMapIconDrawingCallback_f</a>, or<a href=\"/sdk/XPLMMapLabelDrawingCallback_f/\">XPLMMapLabelDrawingCallback_f</a>.)</p></div></div></article>",
      "code_examples": [
        {
          "char_count": 276,
          "code": "XPLM_API voidXPLMMapProject(XPLMMapProjectionIDprojection,\n                         double               latitude,\n                         double               longitude,\n                         float *              outX,\n                         float *              outY);",
          "context": "XPLMMapProject",
          "id": "example_0",
          "language": "c",
          "line_count": 5,
          "type": "snippet"
        }
      ],
      "cross_references": [
        "XPLMMapUnproject"
      ],
      "markdown": "### [XPLMMapProject](/sdk/XPLMMapProject/)\n\n```cpp\nXPLM_API void       XPLMMapProject(\n                         XPLMMapProjectionID  projection,\n                         double               latitude,\n                         double               longitude,\n                         float *              outX,\n                         float *              outY);\n\n```\n\nProjects a latitude/longitude into map coordinates. This is the inverse\nof[XPLMMapUnproject](/sdk/XPLMMapUnproject/)().\n\nOnly valid from within a map layer callback (one\nof[XPLMMapPrepareCacheCallback_f](/sdk/XPLMMapPrepareCacheCallback_f/),[XPLMMapDrawingCallback_f](/sdk/XPLMMapDrawingCallback_f/),[XPLMMapIconDrawingCallback_f](/sdk/XPLMMapIconDrawingCallback_f/),\nor[XPLMMapLabelDrawingCallback_f](/sdk/XPLMMapLabelDrawingCallback_f/).)",
      "own_functions": [
        "XPLMMapProject",
        "voidXPLMMapProject"
      ],
      "processing_timestamp": "2025-06-25T20:39:23.843046+00:00",
      "title": "XPLMMapProject | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMMapProject/"
    },
    "https://developer.x-plane.com/sdk/XPLMMapProjectionID/": {
      "api_signatures": [],
      "category": {
        "category": "XPLM_Map",
        "module": "Xplm Map",
        "url": "https://developer.x-plane.com/sdk/XPLMMapProjectionID/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"typedef\"><h3 class=\"sdk-api-type\" id=\"XPLMMapProjectionID\"><a href=\"/sdk/XPLMMapProjectionID/\">XPLMMapProjectionID</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>typedef void * <a href=\"/sdk/XPLMMapProjectionID/\">XPLMMapProjectionID</a>;</code></pre><p>This is an opaque handle for a map projection. Pass it to the projection APIs to translate between map coordinates and latitude/longitudes.</p></div></div></article>",
      "code_examples": [],
      "cross_references": [
        "XPLMMapProject"
      ],
      "markdown": "### [XPLMMapProjectionID](/sdk/XPLMMapProjectionID/)\n\n```cpp\ntypedef void * XPLMMapProjectionID;\n```\n\nThis is an opaque handle for a map projection. Pass it to the projection APIs to\ntranslate between map coordinates and latitude/longitudes.",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:23.845046+00:00",
      "title": "XPLMMapProjectionID | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMMapProjectionID/"
    },
    "https://developer.x-plane.com/sdk/XPLMMapScaleMeter/": {
      "api_signatures": [
        {
          "description": "Returns the number of map units that correspond to a distance of one meter at a given set of map coordinates.",
          "name": "XPLMMapScaleMeter",
          "parameters": [
            {
              "full_declaration": "float                mapX",
              "name": "mapX",
              "type": "float"
            },
            {
              "full_declaration": "float                mapY",
              "name": "mapY",
              "type": "float"
            }
          ],
          "signature": "XPLM_API floatXPLMMapScaleMeter(XPLMMapProjectionIDprojection,\n                         float                mapX,\n                         float                mapY);"
        },
        {
          "name": "floatXPLMMapScaleMeter",
          "signature": "XPLM_API floatXPLMMapScaleMeter(XPLMMapProjectionIDprojection,\n                         float                mapX,\n                         float                mapY);",
          "source": "code_block_extraction",
          "type": "function"
        }
      ],
      "category": {
        "category": "XPLM_Map",
        "module": "Xplm Map",
        "url": "https://developer.x-plane.com/sdk/XPLMMapScaleMeter/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPLMMapScaleMeter\"><a href=\"/sdk/XPLMMapScaleMeter/\">XPLMMapScaleMeter</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API float      <a href=\"/sdk/XPLMMapScaleMeter/\">XPLMMapScaleMeter</a>(\n                         <a href=\"/sdk/XPLMMapProjectionID/\">XPLMMapProjectionID</a>  projection,\n                         float                mapX,\n                         float                mapY);\n</code></pre><p>Returns the number of map units that correspond to a distance of one meter at a given set of map coordinates.</p><p>Only valid from within a map layer callback (one of<a href=\"/sdk/XPLMMapPrepareCacheCallback_f/\">XPLMMapPrepareCacheCallback_f</a>,<a href=\"/sdk/XPLMMapDrawingCallback_f/\">XPLMMapDrawingCallback_f</a>,<a href=\"/sdk/XPLMMapIconDrawingCallback_f/\">XPLMMapIconDrawingCallback_f</a>, or<a href=\"/sdk/XPLMMapLabelDrawingCallback_f/\">XPLMMapLabelDrawingCallback_f</a>.)</p></div></div></article>",
      "code_examples": [
        {
          "char_count": 167,
          "code": "XPLM_API floatXPLMMapScaleMeter(XPLMMapProjectionIDprojection,\n                         float                mapX,\n                         float                mapY);",
          "context": "XPLMMapScaleMeter",
          "id": "example_0",
          "language": "c",
          "line_count": 3,
          "type": "snippet"
        }
      ],
      "cross_references": [
        "XPLMMapProject"
      ],
      "markdown": "### [XPLMMapScaleMeter](/sdk/XPLMMapScaleMeter/)\n\n```cpp\nXPLM_API float      XPLMMapScaleMeter(\n                         XPLMMapProjectionID  projection,\n                         float                mapX,\n                         float                mapY);\n\n```\n\nReturns the number of map units that correspond to a distance of one meter at a\ngiven set of map coordinates.\n\nOnly valid from within a map layer callback (one\nof[XPLMMapPrepareCacheCallback_f](/sdk/XPLMMapPrepareCacheCallback_f/),[XPLMMapDrawingCallback_f](/sdk/XPLMMapDrawingCallback_f/),[XPLMMapIconDrawingCallback_f](/sdk/XPLMMapIconDrawingCallback_f/),\nor[XPLMMapLabelDrawingCallback_f](/sdk/XPLMMapLabelDrawingCallback_f/).)",
      "own_functions": [
        "XPLMMapScaleMeter",
        "floatXPLMMapScaleMeter"
      ],
      "processing_timestamp": "2025-06-25T20:39:23.848046+00:00",
      "title": "XPLMMapScaleMeter | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMMapScaleMeter/"
    },
    "https://developer.x-plane.com/sdk/XPLMMapStyle/": {
      "api_signatures": [
        {
          "name": "XPLMMapStyle",
          "type": "enum",
          "values": []
        }
      ],
      "category": {
        "category": "XPLM_Map",
        "module": "Xplm Map",
        "url": "https://developer.x-plane.com/sdk/XPLMMapStyle/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enum\"><h3 class=\"sdk-api-enum\" id=\"XPLMMapStyle\"><a href=\"/sdk/XPLMMapStyle/\">XPLMMapStyle</a></h3><p>Indicates the visual style being drawn by the map. In X-Plane, the user can choose between a number of map types, and different map types may have use a different visual representation for the same elements (for instance, the visual style of the terrain layer changes drastically between the VFR and IFR layers), or certain layers may be disabled entirely in some map types (e.g., localizers are only visible in the IFR low-enroute style).</p><p><div class=\"enumitem\"><table><thead><tr><th>Name</th><th>Value</th><th>Description</th></tr></thead><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_MapStyle_VFR_Sectional\"><a href=\"/sdk/xplm_MapStyle_VFR_Sectional/\">xplm_MapStyle_VFR_Sectional</a></td><td>\"0\"</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_MapStyle_IFR_LowEnroute\"><a href=\"/sdk/xplm_MapStyle_IFR_LowEnroute/\">xplm_MapStyle_IFR_LowEnroute</a></td><td>\"1\"</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_MapStyle_IFR_HighEnroute\"><a href=\"/sdk/xplm_MapStyle_IFR_HighEnroute/\">xplm_MapStyle_IFR_HighEnroute</a></td><td>\"2\"</td></tr></table></div></p></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "### [XPLMMapStyle](/sdk/XPLMMapStyle/)\n\nIndicates the visual style being drawn by the map. In X-Plane, the user can\nchoose between a number of map types, and different map types may have use a\ndifferent visual representation for the same elements (for instance, the visual\nstyle of the terrain layer changes drastically between the VFR and IFR layers),\nor certain layers may be disabled entirely in some map types (e.g., localizers\nare only visible in the IFR low-enroute style).\n\n| Name | Value | Description |\n| --- | --- | --- |\n| [xplm_MapStyle_VFR_Sectional](/sdk/xplm_MapStyle_VFR_Sectional/) | \"0\" |\n| [xplm_MapStyle_IFR_LowEnroute](/sdk/xplm_MapStyle_IFR_LowEnroute/) | \"1\" |\n| [xplm_MapStyle_IFR_HighEnroute](/sdk/xplm_MapStyle_IFR_HighEnroute/) | \"2\" |",
      "own_functions": [
        "XPLMMapStyle"
      ],
      "processing_timestamp": "2025-06-25T20:39:23.851046+00:00",
      "title": "XPLMMapStyle | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMMapStyle/"
    },
    "https://developer.x-plane.com/sdk/XPLMMapUnproject/": {
      "api_signatures": [
        {
          "description": "Transforms map coordinates back into a latitude and longitude. This is the inverse ofXPLMMapProject().",
          "name": "XPLMMapUnproject",
          "parameters": [
            {
              "full_declaration": "float                mapX",
              "name": "mapX",
              "type": "float"
            },
            {
              "full_declaration": "float                mapY",
              "name": "mapY",
              "type": "float"
            },
            {
              "full_declaration": "double *             outLatitude",
              "name": "outLatitude",
              "type": "double *"
            },
            {
              "full_declaration": "double *             outLongitude",
              "name": "outLongitude",
              "type": "double *"
            }
          ],
          "signature": "XPLM_API voidXPLMMapUnproject(XPLMMapProjectionIDprojection,\n                         float                mapX,\n                         float                mapY,\n                         double *             outLatitude,\n                         double *             outLongitude);"
        },
        {
          "name": "voidXPLMMapUnproject",
          "signature": "XPLM_API voidXPLMMapUnproject(XPLMMapProjectionIDprojection,\n                         float                mapX,\n                         float                mapY,\n                         double *             outLatitude,\n                         double *             outLongitude);",
          "source": "code_block_extraction",
          "type": "function"
        }
      ],
      "category": {
        "category": "XPLM_Map",
        "module": "Xplm Map",
        "url": "https://developer.x-plane.com/sdk/XPLMMapUnproject/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPLMMapUnproject\"><a href=\"/sdk/XPLMMapUnproject/\">XPLMMapUnproject</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API void       <a href=\"/sdk/XPLMMapUnproject/\">XPLMMapUnproject</a>(\n                         <a href=\"/sdk/XPLMMapProjectionID/\">XPLMMapProjectionID</a>  projection,\n                         float                mapX,\n                         float                mapY,\n                         double *             outLatitude,\n                         double *             outLongitude);\n</code></pre><p>Transforms map coordinates back into a latitude and longitude. This is the inverse of<a href=\"/sdk/XPLMMapProject/\">XPLMMapProject</a>().</p><p>Only valid from within a map layer callback (one of<a href=\"/sdk/XPLMMapPrepareCacheCallback_f/\">XPLMMapPrepareCacheCallback_f</a>,<a href=\"/sdk/XPLMMapDrawingCallback_f/\">XPLMMapDrawingCallback_f</a>,<a href=\"/sdk/XPLMMapIconDrawingCallback_f/\">XPLMMapIconDrawingCallback_f</a>, or<a href=\"/sdk/XPLMMapLabelDrawingCallback_f/\">XPLMMapLabelDrawingCallback_f</a>.)</p></div></div></article>",
      "code_examples": [
        {
          "char_count": 284,
          "code": "XPLM_API voidXPLMMapUnproject(XPLMMapProjectionIDprojection,\n                         float                mapX,\n                         float                mapY,\n                         double *             outLatitude,\n                         double *             outLongitude);",
          "context": "XPLMMapUnproject",
          "id": "example_0",
          "language": "c",
          "line_count": 5,
          "type": "snippet"
        }
      ],
      "cross_references": [
        "XPLMMapProject"
      ],
      "markdown": "### [XPLMMapUnproject](/sdk/XPLMMapUnproject/)\n\n```cpp\nXPLM_API void       XPLMMapUnproject(\n                         XPLMMapProjectionID  projection,\n                         float                mapX,\n                         float                mapY,\n                         double *             outLatitude,\n                         double *             outLongitude);\n\n```\n\nTransforms map coordinates back into a latitude and longitude. This is the\ninverse of[XPLMMapProject](/sdk/XPLMMapProject/)().\n\nOnly valid from within a map layer callback (one\nof[XPLMMapPrepareCacheCallback_f](/sdk/XPLMMapPrepareCacheCallback_f/),[XPLMMapDrawingCallback_f](/sdk/XPLMMapDrawingCallback_f/),[XPLMMapIconDrawingCallback_f](/sdk/XPLMMapIconDrawingCallback_f/),\nor[XPLMMapLabelDrawingCallback_f](/sdk/XPLMMapLabelDrawingCallback_f/).)",
      "own_functions": [
        "XPLMMapUnproject",
        "voidXPLMMapUnproject"
      ],
      "processing_timestamp": "2025-06-25T20:39:23.853553+00:00",
      "title": "XPLMMapUnproject | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMMapUnproject/"
    },
    "https://developer.x-plane.com/sdk/XPLMMapWillBeDeletedCallback_f/": {
      "api_signatures": [],
      "category": {
        "category": "XPLM_Map",
        "module": "Xplm Map",
        "url": "https://developer.x-plane.com/sdk/XPLMMapWillBeDeletedCallback_f/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"callback\"><h3 class=\"sdk-api-callback\" id=\"XPLMMapWillBeDeletedCallback_f\"><a href=\"/sdk/XPLMMapWillBeDeletedCallback_f/\">XPLMMapWillBeDeletedCallback_f</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>typedef void (* <a href=\"/sdk/XPLMMapWillBeDeletedCallback_f/\">XPLMMapWillBeDeletedCallback_f</a>)(\n                         <a href=\"/sdk/XPLMMapLayerID/\">XPLMMapLayerID</a>       inLayer,\n                         void *               inRefcon);\n</code></pre><p>Called just before your map layer gets deleted. Because SDK-created map layers have the same lifetime as the X-Plane map that contains them, if the map gets unloaded from memory, your layer will too.</p></div></div></article>",
      "code_examples": [
        {
          "char_count": 126,
          "code": "typedef void (*XPLMMapWillBeDeletedCallback_f)(XPLMMapLayerIDinLayer,\n                         void *               inRefcon);",
          "context": "XPLMMapWillBeDeletedCallback_f",
          "id": "example_0",
          "language": "c",
          "line_count": 2,
          "type": "snippet"
        }
      ],
      "cross_references": [],
      "markdown": "### [XPLMMapWillBeDeletedCallback_f](/sdk/XPLMMapWillBeDeletedCallback_f/)\n\n```cpp\ntypedef void (* XPLMMapWillBeDeletedCallback_f)(\n                         XPLMMapLayerID       inLayer,\n                         void *               inRefcon);\n\n```\n\nCalled just before your map layer gets deleted. Because SDK-created map layers\nhave the same lifetime as the X-Plane map that contains them, if the map gets\nunloaded from memory, your layer will too.",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:23.856556+00:00",
      "title": "XPLMMapWillBeDeletedCallback_f | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMMapWillBeDeletedCallback_f/"
    },
    "https://developer.x-plane.com/sdk/XPLMMeasureString/": {
      "api_signatures": [
        {
          "description": "This routine returns the width in pixels of a string using a given font. The string is passed as a pointer plus length (and does not need to be null terminated); this is used to allow for measuring substrings. The return value is floating point; it is possible that future font drawing may allow for fractional pixels.",
          "name": "XPLMMeasureString",
          "parameters": [
            {
              "full_declaration": "const char *         inChar",
              "name": "inChar",
              "type": "const char *"
            },
            {
              "full_declaration": "int                  inNumChars",
              "name": "inNumChars",
              "type": "int"
            }
          ],
          "signature": "XPLM_API floatXPLMMeasureString(XPLMFontIDinFontID,\n                         const char *         inChar,\n                         int                  inNumChars);"
        },
        {
          "name": "floatXPLMMeasureString",
          "signature": "XPLM_API floatXPLMMeasureString(XPLMFontIDinFontID,\n                         const char *         inChar,\n                         int                  inNumChars);",
          "source": "code_block_extraction",
          "type": "function"
        }
      ],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/XPLMMeasureString/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"function XPLM200\"><h3 class=\"sdk-api-function\" id=\"XPLMMeasureString\"><a href=\"/sdk/XPLMMeasureString/\">XPLMMeasureString</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API float      <a href=\"/sdk/XPLMMeasureString/\">XPLMMeasureString</a>(\n                         <a href=\"/sdk/XPLMFontID/\">XPLMFontID</a>           inFontID,\n                         const char *         inChar,\n                         int                  inNumChars);\n</code></pre><p>This routine returns the width in pixels of a string using a given font. The string is passed as a pointer plus length (and does not need to be null terminated); this is used to allow for measuring substrings. The return value is floating point; it is possible that future font drawing may allow for fractional pixels.</p></div></div></article>",
      "code_examples": [
        {
          "char_count": 164,
          "code": "XPLM_API floatXPLMMeasureString(XPLMFontIDinFontID,\n                         const char *         inChar,\n                         int                  inNumChars);",
          "context": "XPLMMeasureString",
          "id": "example_0",
          "language": "c",
          "line_count": 3,
          "type": "snippet"
        }
      ],
      "cross_references": [
        "XPLMFontID"
      ],
      "markdown": "### [XPLMMeasureString](/sdk/XPLMMeasureString/)\n\n```cpp\nXPLM_API float      XPLMMeasureString(\n                         XPLMFontID           inFontID,\n                         const char *         inChar,\n                         int                  inNumChars);\n\n```\n\nThis routine returns the width in pixels of a string using a given font. The\nstring is passed as a pointer plus length (and does not need to be null\nterminated); this is used to allow for measuring substrings. The return value is\nfloating point; it is possible that future font drawing may allow for fractional\npixels.",
      "own_functions": [
        "XPLMMeasureString",
        "floatXPLMMeasureString"
      ],
      "processing_timestamp": "2025-06-25T20:39:22.389884+00:00",
      "title": "XPLMMeasureString | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMMeasureString/"
    },
    "https://developer.x-plane.com/sdk/XPLMMenuCheck/": {
      "api_signatures": [
        {
          "name": "XPLMMenuCheck",
          "type": "enum",
          "values": [
            {
              "description": "There is no symbol to the left of the menu item.",
              "name": "xplm_Menu_NoCheck",
              "value": "\"0\""
            },
            {
              "description": "The menu has a mark next to it that is unmarked (not lit).",
              "name": "xplm_Menu_Unchecked",
              "value": "\"1\""
            },
            {
              "description": "The menu has a mark next to it that is checked (lit).",
              "name": "xplm_Menu_Checked",
              "value": "\"2\""
            }
          ]
        }
      ],
      "category": {
        "category": "XPLM_Menus",
        "module": "Xplm Menus",
        "url": "https://developer.x-plane.com/sdk/XPLMMenuCheck/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enum\"><h3 class=\"sdk-api-enum\" id=\"XPLMMenuCheck\"><a href=\"/sdk/XPLMMenuCheck/\">XPLMMenuCheck</a></h3><p>These enumerations define the various ‘check’ states for an X-Plane menu. ‘Checking’ in X-Plane actually appears as a light which may or may not be lit. So there are three possible states.</p><p><div class=\"enumitem\"><table><thead><tr><th>Name</th><th>Value</th><th>Description</th></tr></thead><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_Menu_NoCheck\"><a href=\"/sdk/xplm_Menu_NoCheck/\">xplm_Menu_NoCheck</a></td><td>\"0\"</td><td>There is no symbol to the left of the menu item.</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_Menu_Unchecked\"><a href=\"/sdk/xplm_Menu_Unchecked/\">xplm_Menu_Unchecked</a></td><td>\"1\"</td><td>The menu has a mark next to it that is unmarked (not lit).</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_Menu_Checked\"><a href=\"/sdk/xplm_Menu_Checked/\">xplm_Menu_Checked</a></td><td>\"2\"</td><td>The menu has a mark next to it that is checked (lit).</td></tr></table></div></p></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "### [XPLMMenuCheck](/sdk/XPLMMenuCheck/)\n\nThese enumerations define the various ‘check’ states for an X-Plane menu.\n‘Checking’ in X-Plane actually appears as a light which may or may not be lit.\nSo there are three possible states.\n\n| Name | Value | Description |\n| --- | --- | --- |\n| [xplm_Menu_NoCheck](/sdk/xplm_Menu_NoCheck/) | \"0\" | There is no symbol to the\nleft of the menu item. |\n| [xplm_Menu_Unchecked](/sdk/xplm_Menu_Unchecked/) | \"1\" | The menu has a mark\nnext to it that is unmarked (not lit). |\n| [xplm_Menu_Checked](/sdk/xplm_Menu_Checked/) | \"2\" | The menu has a mark next\nto it that is checked (lit). |",
      "own_functions": [
        "XPLMMenuCheck"
      ],
      "processing_timestamp": "2025-06-25T20:39:23.905638+00:00",
      "title": "XPLMMenuCheck | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMMenuCheck/"
    },
    "https://developer.x-plane.com/sdk/XPLMMenuHandler_f/": {
      "api_signatures": [],
      "category": {
        "category": "XPLM_Menus",
        "module": "Xplm Menus",
        "url": "https://developer.x-plane.com/sdk/XPLMMenuHandler_f/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"callback\"><h3 class=\"sdk-api-callback\" id=\"XPLMMenuHandler_f\"><a href=\"/sdk/XPLMMenuHandler_f/\">XPLMMenuHandler_f</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>typedef void (* <a href=\"/sdk/XPLMMenuHandler_f/\">XPLMMenuHandler_f</a>)(\n                         void *               inMenuRef,\n                         void *               inItemRef);\n</code></pre><p>A menu handler function takes two reference pointers, one for the menu (specified when the menu was created) and one for the item (specified when the item was created).</p></div></div></article>",
      "code_examples": [
        {
          "char_count": 149,
          "code": "typedef void (*XPLMMenuHandler_f)(\n                         void *               inMenuRef,\n                         void *               inItemRef);",
          "context": "XPLMMenuHandler_f",
          "id": "example_0",
          "language": "c",
          "line_count": 3,
          "type": "snippet"
        }
      ],
      "cross_references": [],
      "markdown": "### [XPLMMenuHandler_f](/sdk/XPLMMenuHandler_f/)\n\n```cpp\ntypedef void (* XPLMMenuHandler_f)(\n                         void *               inMenuRef,\n                         void *               inItemRef);\n\n```\n\nA menu handler function takes two reference pointers, one for the menu\n(specified when the menu was created) and one for the item (specified when the\nitem was created).",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:23.930821+00:00",
      "title": "XPLMMenuHandler_f | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMMenuHandler_f/"
    },
    "https://developer.x-plane.com/sdk/XPLMMenuID/": {
      "api_signatures": [],
      "category": {
        "category": "XPLM_Menus",
        "module": "Xplm Menus",
        "url": "https://developer.x-plane.com/sdk/XPLMMenuID/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"typedef\"><h3 class=\"sdk-api-type\" id=\"XPLMMenuID\"><a href=\"/sdk/XPLMMenuID/\">XPLMMenuID</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>typedef void * <a href=\"/sdk/XPLMMenuID/\">XPLMMenuID</a>;</code></pre><p>This is a unique ID for each menu you create.</p></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "### [XPLMMenuID](/sdk/XPLMMenuID/)\n\n```cpp\ntypedef void * XPLMMenuID;\n```\n\nThis is a unique ID for each menu you create.",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:23.907700+00:00",
      "title": "XPLMMenuID | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMMenuID/"
    },
    "https://developer.x-plane.com/sdk/XPLMMenus/": {
      "api_signatures": [
        {
          "description": "This function returns the ID of the plug-ins menu, which is created for you at startup.",
          "name": "XPLMFindPluginsMenu",
          "parameters": [],
          "signature": "XPLM_APIXPLMMenuIDXPLMFindPluginsMenu(void);"
        },
        {
          "description": "This function returns the ID of the menu for the currently-loaded aircraft, used for showing aircraft-specific commands.",
          "name": "XPLMFindAircraftMenu",
          "parameters": [],
          "signature": "XPLM_APIXPLMMenuIDXPLMFindAircraftMenu(void);"
        },
        {
          "description": "This function creates a new menu and returns its ID. It returns NULL if the menu cannot be created. Pass in a parent menu ID and an item index to create a submenu, or NULL for the parent menu to put the menu in the menu bar. The menu’s name is only used if the menu is in the menubar. You also pass a handler function and a menu reference value. Pass NULL for the handler if you do not need callbacks from the menu (for example, if it only contains submenus).",
          "name": "XPLMCreateMenu",
          "parameters": [
            {
              "full_declaration": "const char *         inName",
              "name": "inName",
              "type": "const char *"
            },
            {
              "full_declaration": "int                  inParentItem",
              "name": "inParentItem",
              "type": "int"
            },
            {
              "full_declaration": "void *               inMenuRef",
              "name": "inMenuRef",
              "type": "void *"
            }
          ],
          "signature": "XPLM_APIXPLMMenuIDXPLMCreateMenu(\n                         const char *         inName,XPLMMenuIDinParentMenu,\n                         int                  inParentItem,XPLMMenuHandler_finHandler,\n                         void *               inMenuRef);"
        },
        {
          "description": "This function destroys a menu that you have created. Use this to remove a submenu if necessary. (Normally this function will not be necessary.)",
          "name": "XPLMDestroyMenu",
          "parameters": [],
          "signature": "XPLM_API voidXPLMDestroyMenu(XPLMMenuIDinMenuID);"
        },
        {
          "description": "This function removes all menu items from a menu, allowing you to rebuild it. Use this function if you need to change the number of items on a menu.",
          "name": "XPLMClearAllMenuItems",
          "parameters": [],
          "signature": "XPLM_API voidXPLMClearAllMenuItems(XPLMMenuIDinMenuID);"
        },
        {
          "description": "This routine appends a new menu item to the bottom of a menu and returns its index. Pass in the menu to add the item to, the items name, and a void * ref for this item.",
          "name": "XPLMAppendMenuItem",
          "parameters": [
            {
              "full_declaration": "const char *         inItemName",
              "name": "inItemName",
              "type": "const char *"
            },
            {
              "full_declaration": "void *               inItemRef",
              "name": "inItemRef",
              "type": "void *"
            },
            {
              "full_declaration": "int                  inDeprecatedAndIgnored",
              "name": "inDeprecatedAndIgnored",
              "type": "int"
            }
          ],
          "signature": "XPLM_API intXPLMAppendMenuItem(XPLMMenuIDinMenu,\n                         const char *         inItemName,\n                         void *               inItemRef,\n                         int                  inDeprecatedAndIgnored);"
        },
        {
          "description": "LikeXPLMAppendMenuItem(), but instead of the new menu item triggering theXPLMMenuHandler_fof the containiner menu, it will simply execute the command you pass in. Using a command for your menu item allows the user to bind a keyboard shortcut to the command and see that shortcut represented in the menu.",
          "name": "XPLMAppendMenuItemWithCommand",
          "parameters": [
            {
              "full_declaration": "const char *         inItemName",
              "name": "inItemName",
              "type": "const char *"
            }
          ],
          "signature": "XPLM_API intXPLMAppendMenuItemWithCommand(XPLMMenuIDinMenu,\n                         const char *         inItemName,XPLMCommandRefinCommandToExecute);"
        },
        {
          "description": "This routine adds a separator to the end of a menu.",
          "name": "XPLMAppendMenuSeparator",
          "parameters": [],
          "signature": "XPLM_API voidXPLMAppendMenuSeparator(XPLMMenuIDinMenu);"
        },
        {
          "description": "This routine changes the name of an existing menu item. Pass in the menu ID and the index of the menu item.",
          "name": "XPLMSetMenuItemName",
          "parameters": [
            {
              "full_declaration": "int                  inIndex",
              "name": "inIndex",
              "type": "int"
            },
            {
              "full_declaration": "const char *         inItemName",
              "name": "inItemName",
              "type": "const char *"
            },
            {
              "full_declaration": "int                  inDeprecatedAndIgnored",
              "name": "inDeprecatedAndIgnored",
              "type": "int"
            }
          ],
          "signature": "XPLM_API voidXPLMSetMenuItemName(XPLMMenuIDinMenu,\n                         int                  inIndex,\n                         const char *         inItemName,\n                         int                  inDeprecatedAndIgnored);"
        },
        {
          "description": "Set whether a menu item is checked. Pass in the menu ID and item index.",
          "name": "XPLMCheckMenuItem",
          "parameters": [
            {
              "full_declaration": "int                  index",
              "name": "index",
              "type": "int"
            }
          ],
          "signature": "XPLM_API voidXPLMCheckMenuItem(XPLMMenuIDinMenu,\n                         int                  index,XPLMMenuCheckinCheck);"
        },
        {
          "description": "This routine returns whether a menu item is checked or not. A menu item’s check mark may be on or off, or a menu may not have an icon at all.",
          "name": "XPLMCheckMenuItemState",
          "parameters": [
            {
              "full_declaration": "int                  index",
              "name": "index",
              "type": "int"
            },
            {
              "full_declaration": "XPLMMenuCheck*      outCheck",
              "name": "outCheck",
              "type": "XPLMMenuCheck*"
            }
          ],
          "signature": "XPLM_API voidXPLMCheckMenuItemState(XPLMMenuIDinMenu,\n                         int                  index,XPLMMenuCheck*      outCheck);"
        },
        {
          "description": "Sets whether this menu item is enabled. Items start out enabled.",
          "name": "XPLMEnableMenuItem",
          "parameters": [
            {
              "full_declaration": "int                  index",
              "name": "index",
              "type": "int"
            },
            {
              "full_declaration": "int                  enabled",
              "name": "enabled",
              "type": "int"
            }
          ],
          "signature": "XPLM_API voidXPLMEnableMenuItem(XPLMMenuIDinMenu,\n                         int                  index,\n                         int                  enabled);"
        },
        {
          "description": "Removes one item from a menu. Note that all menu items below are moved up one; your plugin must track the change in index numbers.",
          "name": "XPLMRemoveMenuItem",
          "parameters": [
            {
              "full_declaration": "int                  inIndex",
              "name": "inIndex",
              "type": "int"
            }
          ],
          "signature": "XPLM_API voidXPLMRemoveMenuItem(XPLMMenuIDinMenu,\n                         int                  inIndex);"
        },
        {
          "name": "XPLMMenuCheck",
          "type": "enum",
          "values": [
            {
              "description": "There is no symbol to the left of the menu item.",
              "name": "xplm_Menu_NoCheck",
              "value": "\"0\""
            },
            {
              "description": "The menu has a mark next to it that is unmarked (not lit).",
              "name": "xplm_Menu_Unchecked",
              "value": "\"1\""
            },
            {
              "description": "The menu has a mark next to it that is checked (lit).",
              "name": "xplm_Menu_Checked",
              "value": "\"2\""
            }
          ]
        },
        {
          "name": "voidXPLMDestroyMenu",
          "signature": "XPLM_API voidXPLMDestroyMenu(XPLMMenuIDinMenuID);",
          "source": "code_block_extraction",
          "type": "function"
        },
        {
          "name": "voidXPLMClearAllMenuItems",
          "signature": "XPLM_API voidXPLMClearAllMenuItems(XPLMMenuIDinMenuID);",
          "source": "code_block_extraction",
          "type": "function"
        },
        {
          "name": "intXPLMAppendMenuItem",
          "signature": "XPLM_API intXPLMAppendMenuItem(XPLMMenuIDinMenu,\n                         const char *         inItemName,\n                         void *               inItemRef,\n                         int                  inDeprecatedAndIgnored);",
          "source": "code_block_extraction",
          "type": "function"
        },
        {
          "name": "intXPLMAppendMenuItemWithCommand",
          "signature": "XPLM_API intXPLMAppendMenuItemWithCommand(XPLMMenuIDinMenu,\n                         const char *         inItemName,XPLMCommandRefinCommandToExecute);",
          "source": "code_block_extraction",
          "type": "function"
        },
        {
          "name": "voidXPLMAppendMenuSeparator",
          "signature": "XPLM_API voidXPLMAppendMenuSeparator(XPLMMenuIDinMenu);",
          "source": "code_block_extraction",
          "type": "function"
        },
        {
          "name": "voidXPLMSetMenuItemName",
          "signature": "XPLM_API voidXPLMSetMenuItemName(XPLMMenuIDinMenu,\n                         int                  inIndex,\n                         const char *         inItemName,\n                         int                  inDeprecatedAndIgnored);",
          "source": "code_block_extraction",
          "type": "function"
        },
        {
          "name": "voidXPLMCheckMenuItem",
          "signature": "XPLM_API voidXPLMCheckMenuItem(XPLMMenuIDinMenu,\n                         int                  index,XPLMMenuCheckinCheck);",
          "source": "code_block_extraction",
          "type": "function"
        },
        {
          "name": "voidXPLMCheckMenuItemState",
          "signature": "XPLM_API voidXPLMCheckMenuItemState(XPLMMenuIDinMenu,\n                         int                  index,XPLMMenuCheck*      outCheck);",
          "source": "code_block_extraction",
          "type": "function"
        },
        {
          "name": "voidXPLMEnableMenuItem",
          "signature": "XPLM_API voidXPLMEnableMenuItem(XPLMMenuIDinMenu,\n                         int                  index,\n                         int                  enabled);",
          "source": "code_block_extraction",
          "type": "function"
        },
        {
          "name": "voidXPLMRemoveMenuItem",
          "signature": "XPLM_API voidXPLMRemoveMenuItem(XPLMMenuIDinMenu,\n                         int                  inIndex);",
          "source": "code_block_extraction",
          "type": "function"
        }
      ],
      "category": {
        "category": "XPLM_Menus",
        "module": "Xplm Menus",
        "url": "https://developer.x-plane.com/sdk/XPLMMenus/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"api\"><h1 class=\"sdk-api-title\" id=\"XPLMMenus\"><a href=\"/sdk/XPLMMenus/\">XPLMMenus</a>API</h1><p>Plug-ins can create menus in the menu bar of X-Plane. This is done by creating a menu and then creating items. Menus are referred to by an opaque ID. Items are referred to by (zero-based) index number.</p><p>Menus are “sandboxed” between plugins - no plugin can access the menus of any other plugin. Furthermore, all menu indices are relative to your plugin’s menus only; if your plugin creates two sub-menus in the Plugins menu at different times, it doesn’t matter how many other plugins also create sub-menus of Plugins in the intervening time: your sub-menus will be given menu indices 0 and 1. (The SDK does some work in the back-end to filter out menus that are irrelevant to your plugin in order to deliver this consistency for each plugin.)</p><p>When you create a menu item, you specify how we should handle clicks on that menu item. You can either have the XPLM trigger a callback (the<a href=\"/sdk/XPLMMenuHandler_f/\">XPLMMenuHandler_f</a>associated with the menu that contains the item), or you can simply have a command be triggered (with no associated call to your menu handler). The advantage of the latter method is that X-Plane will display any keyboard shortcuts associated with the command. (In contrast, there are no keyboard shortcuts associated with menu handler callbacks with specific parameters.)</p><p>Menu text in X-Plane is UTF8; X-Plane’s character set covers latin, greek and cyrillic characters, Katakana, as well as some Japanese symbols. Some APIs have a inDeprecatedAndIgnored parameter that used to select a character set; since X-Plane 9 all localization is done via UTF-8 only.</p><div class=\"component\"><h2 id=\"XPLM MENUS\">XPLM MENUS</h2><div class=\"enum\"><h3 class=\"sdk-api-enum\" id=\"XPLMMenuCheck\"><a href=\"/sdk/XPLMMenuCheck/\">XPLMMenuCheck</a></h3><p>These enumerations define the various ‘check’ states for an X-Plane menu. ‘Checking’ in X-Plane actually appears as a light which may or may not be lit. So there are three possible states.</p><p><div class=\"enumitem\"><table><thead><tr><th>Name</th><th>Value</th><th>Description</th></tr></thead><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_Menu_NoCheck\"><a href=\"/sdk/xplm_Menu_NoCheck/\">xplm_Menu_NoCheck</a></td><td>\"0\"</td><td>There is no symbol to the left of the menu item.</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_Menu_Unchecked\"><a href=\"/sdk/xplm_Menu_Unchecked/\">xplm_Menu_Unchecked</a></td><td>\"1\"</td><td>The menu has a mark next to it that is unmarked (not lit).</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_Menu_Checked\"><a href=\"/sdk/xplm_Menu_Checked/\">xplm_Menu_Checked</a></td><td>\"2\"</td><td>The menu has a mark next to it that is checked (lit).</td></tr></table></div></p></div><div class=\"typedef\"><h3 class=\"sdk-api-type\" id=\"XPLMMenuID\"><a href=\"/sdk/XPLMMenuID/\">XPLMMenuID</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>typedef void * <a href=\"/sdk/XPLMMenuID/\">XPLMMenuID</a>;</code></pre><p>This is a unique ID for each menu you create.</p></div><div class=\"callback\"><h3 class=\"sdk-api-callback\" id=\"XPLMMenuHandler_f\"><a href=\"/sdk/XPLMMenuHandler_f/\">XPLMMenuHandler_f</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>typedef void (* <a href=\"/sdk/XPLMMenuHandler_f/\">XPLMMenuHandler_f</a>)(\n                         void *               inMenuRef,\n                         void *               inItemRef);\n</code></pre><p>A menu handler function takes two reference pointers, one for the menu (specified when the menu was created) and one for the item (specified when the item was created).</p></div><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPLMFindPluginsMenu\"><a href=\"/sdk/XPLMFindPluginsMenu/\">XPLMFindPluginsMenu</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API <a href=\"/sdk/XPLMMenuID/\">XPLMMenuID</a> <a href=\"/sdk/XPLMFindPluginsMenu/\">XPLMFindPluginsMenu</a>(void);\n</code></pre><p>This function returns the ID of the plug-ins menu, which is created for you at startup.</p></div><div class=\"function XPLM300\"><h3 class=\"sdk-api-function\" id=\"XPLMFindAircraftMenu\"><a href=\"/sdk/XPLMFindAircraftMenu/\">XPLMFindAircraftMenu</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API <a href=\"/sdk/XPLMMenuID/\">XPLMMenuID</a> <a href=\"/sdk/XPLMFindAircraftMenu/\">XPLMFindAircraftMenu</a>(void);\n</code></pre><p>This function returns the ID of the menu for the currently-loaded aircraft, used for showing aircraft-specific commands.</p><p>The aircraft menu is created by X-Plane at startup, but it remains hidden until it is populated via<a href=\"/sdk/XPLMAppendMenuItem/\">XPLMAppendMenuItem</a>() or<a href=\"/sdk/XPLMAppendMenuItemWithCommand/\">XPLMAppendMenuItemWithCommand</a>().</p><p>Only plugins loaded with the user’s current aircraft are allowed to access the aircraft menu. For all other plugins, this will return NULL, and any attempts to add menu items to it will fail.</p></div><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPLMCreateMenu\"><a href=\"/sdk/XPLMCreateMenu/\">XPLMCreateMenu</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API <a href=\"/sdk/XPLMMenuID/\">XPLMMenuID</a> <a href=\"/sdk/XPLMCreateMenu/\">XPLMCreateMenu</a>(\n                         const char *         inName,\n                         <a href=\"/sdk/XPLMMenuID/\">XPLMMenuID</a>           inParentMenu,\n                         int                  inParentItem,\n                         <a href=\"/sdk/XPLMMenuHandler_f/\">XPLMMenuHandler_f</a>    inHandler,\n                         void *               inMenuRef);\n</code></pre><p>This function creates a new menu and returns its ID. It returns NULL if the menu cannot be created. Pass in a parent menu ID and an item index to create a submenu, or NULL for the parent menu to put the menu in the menu bar. The menu’s name is only used if the menu is in the menubar. You also pass a handler function and a menu reference value. Pass NULL for the handler if you do not need callbacks from the menu (for example, if it only contains submenus).</p><p>Important: you must pass a valid, non-empty menu title even if the menu is a submenu where the title is not visible.</p></div><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPLMDestroyMenu\"><a href=\"/sdk/XPLMDestroyMenu/\">XPLMDestroyMenu</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API void       <a href=\"/sdk/XPLMDestroyMenu/\">XPLMDestroyMenu</a>(\n                         <a href=\"/sdk/XPLMMenuID/\">XPLMMenuID</a>           inMenuID);\n</code></pre><p>This function destroys a menu that you have created. Use this to remove a submenu if necessary. (Normally this function will not be necessary.)</p></div><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPLMClearAllMenuItems\"><a href=\"/sdk/XPLMClearAllMenuItems/\">XPLMClearAllMenuItems</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API void       <a href=\"/sdk/XPLMClearAllMenuItems/\">XPLMClearAllMenuItems</a>(\n                         <a href=\"/sdk/XPLMMenuID/\">XPLMMenuID</a>           inMenuID);\n</code></pre><p>This function removes all menu items from a menu, allowing you to rebuild it. Use this function if you need to change the number of items on a menu.</p></div><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPLMAppendMenuItem\"><a href=\"/sdk/XPLMAppendMenuItem/\">XPLMAppendMenuItem</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API int        <a href=\"/sdk/XPLMAppendMenuItem/\">XPLMAppendMenuItem</a>(\n                         <a href=\"/sdk/XPLMMenuID/\">XPLMMenuID</a>           inMenu,\n                         const char *         inItemName,\n                         void *               inItemRef,\n                         int                  inDeprecatedAndIgnored);\n</code></pre><p>This routine appends a new menu item to the bottom of a menu and returns its index. Pass in the menu to add the item to, the items name, and a void * ref for this item.</p><p>Returns a negative index if the append failed (due to an invalid parent menu argument).</p><p>Note that all menu indices returned are relative to your plugin’s menus only; if your plugin creates two sub-menus in the Plugins menu at different times, it doesn’t matter how many other plugins also create sub-menus of Plugins in the intervening time: your sub-menus will be given menu indices 0 and 1. (The SDK does some work in the back-end to filter out menus that are irrelevant to your plugin in order to deliver this consistency for each plugin.)</p></div><div class=\"function XPLM300\"><h3 class=\"sdk-api-function\" id=\"XPLMAppendMenuItemWithCommand\"><a href=\"/sdk/XPLMAppendMenuItemWithCommand/\">XPLMAppendMenuItemWithCommand</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API int        <a href=\"/sdk/XPLMAppendMenuItemWithCommand/\">XPLMAppendMenuItemWithCommand</a>(\n                         <a href=\"/sdk/XPLMMenuID/\">XPLMMenuID</a>           inMenu,\n                         const char *         inItemName,\n                         <a href=\"/sdk/XPLMCommandRef/\">XPLMCommandRef</a>       inCommandToExecute);\n</code></pre><p>Like<a href=\"/sdk/XPLMAppendMenuItem/\">XPLMAppendMenuItem</a>(), but instead of the new menu item triggering the<a href=\"/sdk/XPLMMenuHandler_f/\">XPLMMenuHandler_f</a>of the containiner menu, it will simply execute the command you pass in. Using a command for your menu item allows the user to bind a keyboard shortcut to the command and see that shortcut represented in the menu.</p><p>Returns a negative index if the append failed (due to an invalid parent menu argument).</p><p>Like<a href=\"/sdk/XPLMAppendMenuItem/\">XPLMAppendMenuItem</a>(), all menu indices are relative to your plugin’s menus only.</p></div><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPLMAppendMenuSeparator\"><a href=\"/sdk/XPLMAppendMenuSeparator/\">XPLMAppendMenuSeparator</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API void       <a href=\"/sdk/XPLMAppendMenuSeparator/\">XPLMAppendMenuSeparator</a>(\n                         <a href=\"/sdk/XPLMMenuID/\">XPLMMenuID</a>           inMenu);\n</code></pre><p>This routine adds a separator to the end of a menu.</p><p>Returns a negative index if the append failed (due to an invalid parent menu argument).</p></div><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPLMSetMenuItemName\"><a href=\"/sdk/XPLMSetMenuItemName/\">XPLMSetMenuItemName</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API void       <a href=\"/sdk/XPLMSetMenuItemName/\">XPLMSetMenuItemName</a>(\n                         <a href=\"/sdk/XPLMMenuID/\">XPLMMenuID</a>           inMenu,\n                         int                  inIndex,\n                         const char *         inItemName,\n                         int                  inDeprecatedAndIgnored);\n</code></pre><p>This routine changes the name of an existing menu item. Pass in the menu ID and the index of the menu item.</p></div><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPLMCheckMenuItem\"><a href=\"/sdk/XPLMCheckMenuItem/\">XPLMCheckMenuItem</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API void       <a href=\"/sdk/XPLMCheckMenuItem/\">XPLMCheckMenuItem</a>(\n                         <a href=\"/sdk/XPLMMenuID/\">XPLMMenuID</a>           inMenu,\n                         int                  index,\n                         <a href=\"/sdk/XPLMMenuCheck/\">XPLMMenuCheck</a>        inCheck);\n</code></pre><p>Set whether a menu item is checked. Pass in the menu ID and item index.</p></div><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPLMCheckMenuItemState\"><a href=\"/sdk/XPLMCheckMenuItemState/\">XPLMCheckMenuItemState</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API void       <a href=\"/sdk/XPLMCheckMenuItemState/\">XPLMCheckMenuItemState</a>(\n                         <a href=\"/sdk/XPLMMenuID/\">XPLMMenuID</a>           inMenu,\n                         int                  index,\n                         <a href=\"/sdk/XPLMMenuCheck/\">XPLMMenuCheck</a> *      outCheck);\n</code></pre><p>This routine returns whether a menu item is checked or not. A menu item’s check mark may be on or off, or a menu may not have an icon at all.</p></div><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPLMEnableMenuItem\"><a href=\"/sdk/XPLMEnableMenuItem/\">XPLMEnableMenuItem</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API void       <a href=\"/sdk/XPLMEnableMenuItem/\">XPLMEnableMenuItem</a>(\n                         <a href=\"/sdk/XPLMMenuID/\">XPLMMenuID</a>           inMenu,\n                         int                  index,\n                         int                  enabled);\n</code></pre><p>Sets whether this menu item is enabled. Items start out enabled.</p></div><div class=\"function XPLM210\"><h3 class=\"sdk-api-function\" id=\"XPLMRemoveMenuItem\"><a href=\"/sdk/XPLMRemoveMenuItem/\">XPLMRemoveMenuItem</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API void       <a href=\"/sdk/XPLMRemoveMenuItem/\">XPLMRemoveMenuItem</a>(\n                         <a href=\"/sdk/XPLMMenuID/\">XPLMMenuID</a>           inMenu,\n                         int                  inIndex);\n</code></pre><p>Removes one item from a menu. Note that all menu items below are moved up one; your plugin must track the change in index numbers.</p></div></div></div></div></article>",
      "code_examples": [
        {
          "char_count": 149,
          "code": "typedef void (*XPLMMenuHandler_f)(\n                         void *               inMenuRef,\n                         void *               inItemRef);",
          "context": "XPLMMenuHandler_f",
          "id": "example_1",
          "language": "c",
          "line_count": 3,
          "type": "snippet"
        },
        {
          "char_count": 255,
          "code": "XPLM_APIXPLMMenuIDXPLMCreateMenu(\n                         const char *         inName,XPLMMenuIDinParentMenu,\n                         int                  inParentItem,XPLMMenuHandler_finHandler,\n                         void *               inMenuRef);",
          "context": "XPLMCreateMenu",
          "id": "example_4",
          "language": "c",
          "line_count": 4,
          "type": "snippet"
        },
        {
          "char_count": 55,
          "code": "XPLM_API voidXPLMClearAllMenuItems(XPLMMenuIDinMenuID);",
          "context": "XPLMClearAllMenuItems",
          "id": "example_6",
          "language": "c",
          "line_count": 1,
          "type": "snippet"
        },
        {
          "char_count": 234,
          "code": "XPLM_API intXPLMAppendMenuItem(XPLMMenuIDinMenu,\n                         const char *         inItemName,\n                         void *               inItemRef,\n                         int                  inDeprecatedAndIgnored);",
          "context": "XPLMAppendMenuItem",
          "id": "example_7",
          "language": "c",
          "line_count": 4,
          "type": "snippet"
        },
        {
          "char_count": 151,
          "code": "XPLM_API intXPLMAppendMenuItemWithCommand(XPLMMenuIDinMenu,\n                         const char *         inItemName,XPLMCommandRefinCommandToExecute);",
          "context": "XPLMAppendMenuItemWithCommand",
          "id": "example_8",
          "language": "c",
          "line_count": 2,
          "type": "snippet"
        },
        {
          "char_count": 55,
          "code": "XPLM_API voidXPLMAppendMenuSeparator(XPLMMenuIDinMenu);",
          "context": "XPLMAppendMenuSeparator",
          "id": "example_9",
          "language": "cpp",
          "line_count": 1,
          "type": "snippet"
        },
        {
          "char_count": 234,
          "code": "XPLM_API voidXPLMSetMenuItemName(XPLMMenuIDinMenu,\n                         int                  inIndex,\n                         const char *         inItemName,\n                         int                  inDeprecatedAndIgnored);",
          "context": "XPLMSetMenuItemName",
          "id": "example_10",
          "language": "c",
          "line_count": 4,
          "type": "snippet"
        },
        {
          "char_count": 123,
          "code": "XPLM_API voidXPLMCheckMenuItem(XPLMMenuIDinMenu,\n                         int                  index,XPLMMenuCheckinCheck);",
          "context": "XPLMCheckMenuItem",
          "id": "example_11",
          "language": "c",
          "line_count": 2,
          "type": "snippet"
        },
        {
          "char_count": 136,
          "code": "XPLM_API voidXPLMCheckMenuItemState(XPLMMenuIDinMenu,\n                         int                  index,XPLMMenuCheck*      outCheck);",
          "context": "XPLMCheckMenuItemState",
          "id": "example_12",
          "language": "c",
          "line_count": 2,
          "type": "snippet"
        },
        {
          "char_count": 158,
          "code": "XPLM_API voidXPLMEnableMenuItem(XPLMMenuIDinMenu,\n                         int                  index,\n                         int                  enabled);",
          "context": "XPLMEnableMenuItem",
          "id": "example_13",
          "language": "cpp",
          "line_count": 3,
          "type": "snippet"
        },
        {
          "char_count": 105,
          "code": "XPLM_API voidXPLMRemoveMenuItem(XPLMMenuIDinMenu,\n                         int                  inIndex);",
          "context": "XPLMRemoveMenuItem",
          "id": "example_14",
          "language": "c",
          "line_count": 2,
          "type": "snippet"
        }
      ],
      "cross_references": [],
      "markdown": "# [XPLMMenus](/sdk/XPLMMenus/)API\n\nPlug-ins can create menus in the menu bar of X-Plane. This is done by creating a\nmenu and then creating items. Menus are referred to by an opaque ID. Items are\nreferred to by (zero-based) index number.\n\nMenus are “sandboxed” between plugins - no plugin can access the menus of any\nother plugin. Furthermore, all menu indices are relative to your plugin’s menus\nonly; if your plugin creates two sub-menus in the Plugins menu at different\ntimes, it doesn’t matter how many other plugins also create sub-menus of Plugins\nin the intervening time: your sub-menus will be given menu indices 0 and 1. (The\nSDK does some work in the back-end to filter out menus that are irrelevant to\nyour plugin in order to deliver this consistency for each plugin.)\n\nWhen you create a menu item, you specify how we should handle clicks on that\nmenu item. You can either have the XPLM trigger a callback\n(the[XPLMMenuHandler_f](/sdk/XPLMMenuHandler_f/)associated with the menu that\ncontains the item), or you can simply have a command be triggered (with no\nassociated call to your menu handler). The advantage of the latter method is\nthat X-Plane will display any keyboard shortcuts associated with the command.\n(In contrast, there are no keyboard shortcuts associated with menu handler\ncallbacks with specific parameters.)\n\nMenu text in X-Plane is UTF8; X-Plane’s character set covers latin, greek and\ncyrillic characters, Katakana, as well as some Japanese symbols. Some APIs have\na inDeprecatedAndIgnored parameter that used to select a character set; since\nX-Plane 9 all localization is done via UTF-8 only.\n\n## XPLM MENUS\n\n### [XPLMMenuCheck](/sdk/XPLMMenuCheck/)\n\nThese enumerations define the various ‘check’ states for an X-Plane menu.\n‘Checking’ in X-Plane actually appears as a light which may or may not be lit.\nSo there are three possible states.\n\n| Name | Value | Description |\n| --- | --- | --- |\n| [xplm_Menu_NoCheck](/sdk/xplm_Menu_NoCheck/) | \"0\" | There is no symbol to the\nleft of the menu item. |\n| [xplm_Menu_Unchecked](/sdk/xplm_Menu_Unchecked/) | \"1\" | The menu has a mark\nnext to it that is unmarked (not lit). |\n| [xplm_Menu_Checked](/sdk/xplm_Menu_Checked/) | \"2\" | The menu has a mark next\nto it that is checked (lit). |\n\n### [XPLMMenuID](/sdk/XPLMMenuID/)\n\n```cpp\ntypedef void * XPLMMenuID;\n```\n\nThis is a unique ID for each menu you create.\n\n### [XPLMMenuHandler_f](/sdk/XPLMMenuHandler_f/)\n\n```cpp\ntypedef void (* XPLMMenuHandler_f)(\n                         void *               inMenuRef,\n                         void *               inItemRef);\n\n```\n\nA menu handler function takes two reference pointers, one for the menu\n(specified when the menu was created) and one for the item (specified when the\nitem was created).\n\n### [XPLMFindPluginsMenu](/sdk/XPLMFindPluginsMenu/)\n\n```cpp\nXPLM_API XPLMMenuID XPLMFindPluginsMenu(void);\n\n```\n\nThis function returns the ID of the plug-ins menu, which is created for you at\nstartup.\n\n### [XPLMFindAircraftMenu](/sdk/XPLMFindAircraftMenu/)\n\n```cpp\nXPLM_API XPLMMenuID XPLMFindAircraftMenu(void);\n\n```\n\nThis function returns the ID of the menu for the currently-loaded aircraft, used\nfor showing aircraft-specific commands.\n\nThe aircraft menu is created by X-Plane at startup, but it remains hidden until\nit is populated via[XPLMAppendMenuItem](/sdk/XPLMAppendMenuItem/)()\nor[XPLMAppendMenuItemWithCommand](/sdk/XPLMAppendMenuItemWithCommand/)().\n\nOnly plugins loaded with the user’s current aircraft are allowed to access the\naircraft menu. For all other plugins, this will return NULL, and any attempts to\nadd menu items to it will fail.\n\n### [XPLMCreateMenu](/sdk/XPLMCreateMenu/)\n\n```cpp\nXPLM_API XPLMMenuID XPLMCreateMenu(\n                         const char *         inName,\n                         XPLMMenuID           inParentMenu,\n                         int                  inParentItem,\n                         XPLMMenuHandler_f    inHandler,\n                         void *               inMenuRef);\n\n```\n\nThis function creates a new menu and returns its ID. It returns NULL if the menu\ncannot be created. Pass in a parent menu ID and an item index to create a\nsubmenu, or NULL for the parent menu to put the menu in the menu bar. The menu’s\nname is only used if the menu is in the menubar. You also pass a handler\nfunction and a menu reference value. Pass NULL for the handler if you do not\nneed callbacks from the menu (for example, if it only contains submenus).\n\nImportant: you must pass a valid, non-empty menu title even if the menu is a\nsubmenu where the title is not visible.\n\n### [XPLMDestroyMenu](/sdk/XPLMDestroyMenu/)\n\n```cpp\nXPLM_API void       XPLMDestroyMenu(\n                         XPLMMenuID           inMenuID);\n\n```\n\nThis function destroys a menu that you have created. Use this to remove a\nsubmenu if necessary. (Normally this function will not be necessary.)\n\n### [XPLMClearAllMenuItems](/sdk/XPLMClearAllMenuItems/)\n\n```cpp\nXPLM_API void       XPLMClearAllMenuItems(\n                         XPLMMenuID           inMenuID);\n\n```\n\nThis function removes all menu items from a menu, allowing you to rebuild it.\nUse this function if you need to change the number of items on a menu.\n\n### [XPLMAppendMenuItem](/sdk/XPLMAppendMenuItem/)\n\n```cpp\nXPLM_API int        XPLMAppendMenuItem(\n                         XPLMMenuID           inMenu,\n                         const char *         inItemName,\n                         void *               inItemRef,\n                         int                  inDeprecatedAndIgnored);\n\n```\n\nThis routine appends a new menu item to the bottom of a menu and returns its\nindex. Pass in the menu to add the item to, the items name, and a void * ref for\nthis item.\n\nReturns a negative index if the append failed (due to an invalid parent menu\nargument).\n\nNote that all menu indices returned are relative to your plugin’s menus only; if\nyour plugin creates two sub-menus in the Plugins menu at different times, it\ndoesn’t matter how many other plugins also create sub-menus of Plugins in the\nintervening time: your sub-menus will be given menu indices 0 and 1. (The SDK\ndoes some work in the back-end to filter out menus that are irrelevant to your\nplugin in order to deliver this consistency for each plugin.)\n\n### [XPLMAppendMenuItemWithCommand](/sdk/XPLMAppendMenuItemWithCommand/)\n\n```cpp\nXPLM_API int        XPLMAppendMenuItemWithCommand(\n                         XPLMMenuID           inMenu,\n                         const char *         inItemName,\n                         XPLMCommandRef       inCommandToExecute);\n\n```\n\nLike[XPLMAppendMenuItem](/sdk/XPLMAppendMenuItem/)(), but instead of the new\nmenu item triggering the[XPLMMenuHandler_f](/sdk/XPLMMenuHandler_f/)of the\ncontaininer menu, it will simply execute the command you pass in. Using a\ncommand for your menu item allows the user to bind a keyboard shortcut to the\ncommand and see that shortcut represented in the menu.\n\nReturns a negative index if the append failed (due to an invalid parent menu\nargument).\n\nLike[XPLMAppendMenuItem](/sdk/XPLMAppendMenuItem/)(), all menu indices are\nrelative to your plugin’s menus only.\n\n### [XPLMAppendMenuSeparator](/sdk/XPLMAppendMenuSeparator/)\n\n```cpp\nXPLM_API void       XPLMAppendMenuSeparator(\n                         XPLMMenuID           inMenu);\n\n```\n\nThis routine adds a separator to the end of a menu.\n\nReturns a negative index if the append failed (due to an invalid parent menu\nargument).\n\n### [XPLMSetMenuItemName](/sdk/XPLMSetMenuItemName/)\n\n```cpp\nXPLM_API void       XPLMSetMenuItemName(\n                         XPLMMenuID           inMenu,\n                         int                  inIndex,\n                         const char *         inItemName,\n                         int                  inDeprecatedAndIgnored);\n\n```\n\nThis routine changes the name of an existing menu item. Pass in the menu ID and\nthe index of the menu item.\n\n### [XPLMCheckMenuItem](/sdk/XPLMCheckMenuItem/)\n\n```cpp\nXPLM_API void       XPLMCheckMenuItem(\n                         XPLMMenuID           inMenu,\n                         int                  index,\n                         XPLMMenuCheck        inCheck);\n\n```\n\nSet whether a menu item is checked. Pass in the menu ID and item index.\n\n### [XPLMCheckMenuItemState](/sdk/XPLMCheckMenuItemState/)\n\n```cpp\nXPLM_API void       XPLMCheckMenuItemState(\n                         XPLMMenuID           inMenu,\n                         int                  index,\n                         XPLMMenuCheck *      outCheck);\n\n```\n\nThis routine returns whether a menu item is checked or not. A menu item’s check\nmark may be on or off, or a menu may not have an icon at all.\n\n### [XPLMEnableMenuItem](/sdk/XPLMEnableMenuItem/)\n\n```cpp\nXPLM_API void       XPLMEnableMenuItem(\n                         XPLMMenuID           inMenu,\n                         int                  index,\n                         int                  enabled);\n\n```\n\nSets whether this menu item is enabled. Items start out enabled.\n\n### [XPLMRemoveMenuItem](/sdk/XPLMRemoveMenuItem/)\n\n```cpp\nXPLM_API void       XPLMRemoveMenuItem(\n                         XPLMMenuID           inMenu,\n                         int                  inIndex);\n\n```\n\nRemoves one item from a menu. Note that all menu items below are moved up one;\nyour plugin must track the change in index numbers.",
      "own_functions": [
        "XPLMFindPluginsMenu",
        "XPLMFindAircraftMenu",
        "XPLMCreateMenu",
        "XPLMDestroyMenu",
        "XPLMClearAllMenuItems",
        "XPLMAppendMenuItem",
        "XPLMAppendMenuItemWithCommand",
        "XPLMAppendMenuSeparator",
        "XPLMSetMenuItemName",
        "XPLMCheckMenuItem",
        "XPLMCheckMenuItemState",
        "XPLMEnableMenuItem",
        "XPLMRemoveMenuItem",
        "XPLMMenuCheck",
        "voidXPLMDestroyMenu",
        "voidXPLMClearAllMenuItems",
        "intXPLMAppendMenuItem",
        "intXPLMAppendMenuItemWithCommand",
        "voidXPLMAppendMenuSeparator",
        "voidXPLMSetMenuItemName",
        "voidXPLMCheckMenuItem",
        "voidXPLMCheckMenuItemState",
        "voidXPLMEnableMenuItem",
        "voidXPLMRemoveMenuItem"
      ],
      "processing_timestamp": "2025-06-25T20:39:23.928820+00:00",
      "title": "XPLMMenus | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMMenus/"
    },
    "https://developer.x-plane.com/sdk/XPLMMouseStatus/": {
      "api_signatures": [
        {
          "name": "XPLMMouseStatus",
          "type": "enum",
          "values": []
        }
      ],
      "category": {
        "category": "XPLM_Utilities",
        "module": "Xplm Utilities",
        "url": "https://developer.x-plane.com/sdk/XPLMMouseStatus/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enum\"><h3 class=\"sdk-api-enum\" id=\"XPLMMouseStatus\"><a href=\"/sdk/XPLMMouseStatus/\">XPLMMouseStatus</a></h3><pre><code>When the mouse is clicked, your mouse click routine is called repeatedly.  It is first called with the\nmouse down message.  It is then called zero or more times with the mouse-drag message, and finally it\nis called once with the mouse up message.  All of these messages will be directed to the same window;\nyou are guaranteed to not receive a drag or mouse-up event without first receiving the corresponding mouse-down.\n</code></pre><p><div class=\"enumitem\"><table><thead><tr><th>Name</th><th>Value</th><th>Description</th></tr></thead><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_MouseDown\"><a href=\"/sdk/xplm_MouseDown/\">xplm_MouseDown</a></td><td>\"1\"</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_MouseDrag\"><a href=\"/sdk/xplm_MouseDrag/\">xplm_MouseDrag</a></td><td>\"2\"</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_MouseUp\"><a href=\"/sdk/xplm_MouseUp/\">xplm_MouseUp</a></td><td>\"3\"</td></tr></table></div></p></div></div></article>",
      "code_examples": [
        {
          "char_count": 419,
          "code": "When the mouse is clicked, your mouse click routine is called repeatedly.  It is first called with the\nmouse down message.  It is then called zero or more times with the mouse-drag message, and finally it\nis called once with the mouse up message.  All of these messages will be directed to the same window;\nyou are guaranteed to not receive a drag or mouse-up event without first receiving the corresponding mouse-down.",
          "context": "XPLMMouseStatus",
          "id": "example_0",
          "language": "c",
          "line_count": 4,
          "type": "snippet"
        }
      ],
      "cross_references": [],
      "markdown": "### [XPLMMouseStatus](/sdk/XPLMMouseStatus/)\n\n```cpp\nWhen the mouse is clicked, your mouse click routine is called repeatedly.  It is first called with the\nmouse down message.  It is then called zero or more times with the mouse-drag message, and finally it\nis called once with the mouse up message.  All of these messages will be directed to the same window;\nyou are guaranteed to not receive a drag or mouse-up event without first receiving the corresponding mouse-down.\n\n```\n\n| Name | Value | Description |\n| --- | --- | --- |\n| [xplm_MouseDown](/sdk/xplm_MouseDown/) | \"1\" |\n| [xplm_MouseDrag](/sdk/xplm_MouseDrag/) | \"2\" |\n| [xplm_MouseUp](/sdk/xplm_MouseUp/) | \"3\" |",
      "own_functions": [
        "XPLMMouseStatus"
      ],
      "processing_timestamp": "2025-06-25T20:39:24.533745+00:00",
      "title": "XPLMMouseStatus | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMMouseStatus/"
    },
    "https://developer.x-plane.com/sdk/XPLMNavFlightPlan/": {
      "api_signatures": [
        {
          "name": "XPLMNavFlightPlan",
          "type": "enum",
          "values": []
        }
      ],
      "category": {
        "category": "XPLM_Navigation",
        "module": "Xplm Navigation",
        "url": "https://developer.x-plane.com/sdk/XPLMNavFlightPlan/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enum XPLM410\"><h3 class=\"sdk-api-enum\" id=\"XPLMNavFlightPlan\"><a href=\"/sdk/XPLMNavFlightPlan/\">XPLMNavFlightPlan</a></h3><pre><code>These enumerations defines the flightplan you are accesing using the FMSFlightPlan functions.\nAn airplane can have up to two navigation devices (GPS or FMS) and each device can have two flightplans.\nA GPS has an enroute and an approach flightplan.\nAn FMS has an active and a temporary flightplan.\nIf you are trying to access a flightplan that doesn't exist in your aircraft, e.g. asking a GPS for a temp flightplan, FMSFlighPlan functions have no effect and will return no information.\n</code></pre><p><div class=\"enumitem XPLM410\"><table><thead><tr><th>Name</th><th>Value</th><th>Description</th></tr></thead><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_Fpl_Pilot_Primary\"><a href=\"/sdk/xplm_Fpl_Pilot_Primary/\">xplm_Fpl_Pilot_Primary</a></td><td>\"0\"</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_Fpl_CoPilot_Primary\"><a href=\"/sdk/xplm_Fpl_CoPilot_Primary/\">xplm_Fpl_CoPilot_Primary</a></td><td>\"1\"</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_Fpl_Pilot_Approach\"><a href=\"/sdk/xplm_Fpl_Pilot_Approach/\">xplm_Fpl_Pilot_Approach</a></td><td>\"2\"</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_Fpl_CoPilot_Approach\"><a href=\"/sdk/xplm_Fpl_CoPilot_Approach/\">xplm_Fpl_CoPilot_Approach</a></td><td>\"3\"</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_Fpl_Pilot_Temporary\"><a href=\"/sdk/xplm_Fpl_Pilot_Temporary/\">xplm_Fpl_Pilot_Temporary</a></td><td>\"4\"</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_Fpl_CoPilot_Temporary\"><a href=\"/sdk/xplm_Fpl_CoPilot_Temporary/\">xplm_Fpl_CoPilot_Temporary</a></td><td>\"5\"</td></tr></table></div></p></div></div></article>",
      "code_examples": [
        {
          "char_count": 485,
          "code": "These enumerations defines the flightplan you are accesing using the FMSFlightPlan functions.\nAn airplane can have up to two navigation devices (GPS or FMS) and each device can have two flightplans.\nA GPS has an enroute and an approach flightplan.\nAn FMS has an active and a temporary flightplan.\nIf you are trying to access a flightplan that doesn't exist in your aircraft, e.g. asking a GPS for a temp flightplan, FMSFlighPlan functions have no effect and will return no information.",
          "context": "XPLMNavFlightPlan",
          "id": "example_0",
          "language": "c",
          "line_count": 5,
          "type": "snippet"
        }
      ],
      "cross_references": [],
      "markdown": "### [XPLMNavFlightPlan](/sdk/XPLMNavFlightPlan/)\n\n```cpp\nThese enumerations defines the flightplan you are accesing using the FMSFlightPlan functions.\nAn airplane can have up to two navigation devices (GPS or FMS) and each device can have two flightplans.\nA GPS has an enroute and an approach flightplan.\nAn FMS has an active and a temporary flightplan.\nIf you are trying to access a flightplan that doesn't exist in your aircraft, e.g. asking a GPS for a temp flightplan, FMSFlighPlan functions have no effect and will return no information.\n\n```\n\n| Name | Value | Description |\n| --- | --- | --- |\n| [xplm_Fpl_Pilot_Primary](/sdk/xplm_Fpl_Pilot_Primary/) | \"0\" |\n| [xplm_Fpl_CoPilot_Primary](/sdk/xplm_Fpl_CoPilot_Primary/) | \"1\" |\n| [xplm_Fpl_Pilot_Approach](/sdk/xplm_Fpl_Pilot_Approach/) | \"2\" |\n| [xplm_Fpl_CoPilot_Approach](/sdk/xplm_Fpl_CoPilot_Approach/) | \"3\" |\n| [xplm_Fpl_Pilot_Temporary](/sdk/xplm_Fpl_Pilot_Temporary/) | \"4\" |\n| [xplm_Fpl_CoPilot_Temporary](/sdk/xplm_Fpl_CoPilot_Temporary/) | \"5\" |",
      "own_functions": [
        "XPLMNavFlightPlan"
      ],
      "processing_timestamp": "2025-06-25T20:39:24.000722+00:00",
      "title": "XPLMNavFlightPlan | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMNavFlightPlan/"
    },
    "https://developer.x-plane.com/sdk/XPLMNavRef/": {
      "api_signatures": [],
      "category": {
        "category": "XPLM_Navigation",
        "module": "Xplm Navigation",
        "url": "https://developer.x-plane.com/sdk/XPLMNavRef/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"typedef\"><h3 class=\"sdk-api-type\" id=\"XPLMNavRef\"><a href=\"/sdk/XPLMNavRef/\">XPLMNavRef</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>typedef int <a href=\"/sdk/XPLMNavRef/\">XPLMNavRef</a>;</code></pre><p><a href=\"/sdk/XPLMNavRef/\">XPLMNavRef</a>is an iterator into the navigation database. The navigation database is essentially an array, but it is not necessarily densely populated. The only assumption you can safely make is that like-typed nav-aids are grouped together.</p><p>Use<a href=\"/sdk/XPLMNavRef/\">XPLMNavRef</a>to refer to a nav-aid.</p><p><a href=\"/sdk/XPLM_NAV_NOT_FOUND/\">XPLM_NAV_NOT_FOUND</a>is returned by functions that return an<a href=\"/sdk/XPLMNavRef/\">XPLMNavRef</a>when the iterator must be invalid.</p></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "### [XPLMNavRef](/sdk/XPLMNavRef/)\n\n```cpp\ntypedef int XPLMNavRef;\n```\n\n[XPLMNavRef](/sdk/XPLMNavRef/)is an iterator into the navigation database. The\nnavigation database is essentially an array, but it is not necessarily densely\npopulated. The only assumption you can safely make is that like-typed nav-aids\nare grouped together.\n\nUse[XPLMNavRef](/sdk/XPLMNavRef/)to refer to a nav-aid.\n\n[XPLM_NAV_NOT_FOUND](/sdk/XPLM_NAV_NOT_FOUND/)is returned by functions that\nreturn an[XPLMNavRef](/sdk/XPLMNavRef/)when the iterator must be invalid.",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:24.002722+00:00",
      "title": "XPLMNavRef | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMNavRef/"
    },
    "https://developer.x-plane.com/sdk/XPLMNavType/": {
      "api_signatures": [
        {
          "name": "XPLMNavType",
          "type": "enum",
          "values": []
        }
      ],
      "category": {
        "category": "XPLM_Navigation",
        "module": "Xplm Navigation",
        "url": "https://developer.x-plane.com/sdk/XPLMNavType/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enum\"><h3 class=\"sdk-api-enum\" id=\"XPLMNavType\"><a href=\"/sdk/XPLMNavType/\">XPLMNavType</a></h3><p>These enumerations define the different types of navaids. They are each defined with a separate bit so that they may be bit-wise added together to form sets of nav-aid types.</p><p>NOTE:<a href=\"/sdk/xplm_Nav_LatLon/\">xplm_Nav_LatLon</a>is a specific lat-lon coordinate entered into the FMS. It will not exist in the database, and cannot be programmed into the FMS. Querying the FMS for navaids will return it. Use<a href=\"/sdk/XPLMSetFMSEntryLatLon/\">XPLMSetFMSEntryLatLon</a>to set a lat/lon waypoint.</p><p><div class=\"enumitem\"><table><thead><tr><th>Name</th><th>Value</th><th>Description</th></tr></thead><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_Nav_Unknown\"><a href=\"/sdk/xplm_Nav_Unknown/\">xplm_Nav_Unknown</a></td><td>\"0\"</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_Nav_Airport\"><a href=\"/sdk/xplm_Nav_Airport/\">xplm_Nav_Airport</a></td><td>\"1\"</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_Nav_NDB\"><a href=\"/sdk/xplm_Nav_NDB/\">xplm_Nav_NDB</a></td><td>\"2\"</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_Nav_VOR\"><a href=\"/sdk/xplm_Nav_VOR/\">xplm_Nav_VOR</a></td><td>\"4\"</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_Nav_ILS\"><a href=\"/sdk/xplm_Nav_ILS/\">xplm_Nav_ILS</a></td><td>\"8\"</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_Nav_Localizer\"><a href=\"/sdk/xplm_Nav_Localizer/\">xplm_Nav_Localizer</a></td><td>\"16\"</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_Nav_GlideSlope\"><a href=\"/sdk/xplm_Nav_GlideSlope/\">xplm_Nav_GlideSlope</a></td><td>\"32\"</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_Nav_OuterMarker\"><a href=\"/sdk/xplm_Nav_OuterMarker/\">xplm_Nav_OuterMarker</a></td><td>\"64\"</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_Nav_MiddleMarker\"><a href=\"/sdk/xplm_Nav_MiddleMarker/\">xplm_Nav_MiddleMarker</a></td><td>\"128\"</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_Nav_InnerMarker\"><a href=\"/sdk/xplm_Nav_InnerMarker/\">xplm_Nav_InnerMarker</a></td><td>\"256\"</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_Nav_Fix\"><a href=\"/sdk/xplm_Nav_Fix/\">xplm_Nav_Fix</a></td><td>\"512\"</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_Nav_DME\"><a href=\"/sdk/xplm_Nav_DME/\">xplm_Nav_DME</a></td><td>\"1024\"</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_Nav_LatLon\"><a href=\"/sdk/xplm_Nav_LatLon/\">xplm_Nav_LatLon</a></td><td>\"2048\"</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_Nav_TACAN\"><a href=\"/sdk/xplm_Nav_TACAN/\">xplm_Nav_TACAN</a></td><td>\"4096\"</td></tr></table></div></p></div></div></article>",
      "code_examples": [],
      "cross_references": [
        "XPLMSetFMSEntryLatLon"
      ],
      "markdown": "### [XPLMNavType](/sdk/XPLMNavType/)\n\nThese enumerations define the different types of navaids. They are each defined\nwith a separate bit so that they may be bit-wise added together to form sets of\nnav-aid types.\n\nNOTE:[xplm_Nav_LatLon](/sdk/xplm_Nav_LatLon/)is a specific lat-lon coordinate\nentered into the FMS. It will not exist in the database, and cannot be\nprogrammed into the FMS. Querying the FMS for navaids will return it.\nUse[XPLMSetFMSEntryLatLon](/sdk/XPLMSetFMSEntryLatLon/)to set a lat/lon\nwaypoint.\n\n| Name | Value | Description |\n| --- | --- | --- |\n| [xplm_Nav_Unknown](/sdk/xplm_Nav_Unknown/) | \"0\" |\n| [xplm_Nav_Airport](/sdk/xplm_Nav_Airport/) | \"1\" |\n| [xplm_Nav_NDB](/sdk/xplm_Nav_NDB/) | \"2\" |\n| [xplm_Nav_VOR](/sdk/xplm_Nav_VOR/) | \"4\" |\n| [xplm_Nav_ILS](/sdk/xplm_Nav_ILS/) | \"8\" |\n| [xplm_Nav_Localizer](/sdk/xplm_Nav_Localizer/) | \"16\" |\n| [xplm_Nav_GlideSlope](/sdk/xplm_Nav_GlideSlope/) | \"32\" |\n| [xplm_Nav_OuterMarker](/sdk/xplm_Nav_OuterMarker/) | \"64\" |\n| [xplm_Nav_MiddleMarker](/sdk/xplm_Nav_MiddleMarker/) | \"128\" |\n| [xplm_Nav_InnerMarker](/sdk/xplm_Nav_InnerMarker/) | \"256\" |\n| [xplm_Nav_Fix](/sdk/xplm_Nav_Fix/) | \"512\" |\n| [xplm_Nav_DME](/sdk/xplm_Nav_DME/) | \"1024\" |\n| [xplm_Nav_LatLon](/sdk/xplm_Nav_LatLon/) | \"2048\" |\n| [xplm_Nav_TACAN](/sdk/xplm_Nav_TACAN/) | \"4096\" |",
      "own_functions": [
        "XPLMNavType"
      ],
      "processing_timestamp": "2025-06-25T20:39:24.012313+00:00",
      "title": "XPLMNavType | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMNavType/"
    },
    "https://developer.x-plane.com/sdk/XPLMNavigation/": {
      "api_signatures": [
        {
          "description": "This returns the very first navaid in the database. Use this to traverse the entire database. ReturnsXPLM_NAV_NOT_FOUNDif the nav database is empty.",
          "name": "XPLMGetFirstNavAid",
          "parameters": [],
          "signature": "XPLM_APIXPLMNavRefXPLMGetFirstNavAid(void);"
        },
        {
          "description": "Given a valid navaid ref, this routine returns the next navaid. It returnsXPLM_NAV_NOT_FOUNDif the navaid passed in was invalid or if the navaid passed in was the last one in the database. Use this routine to iterate across all like-typed navaids or the entire database.",
          "name": "XPLMGetNextNavAid",
          "parameters": [],
          "signature": "XPLM_APIXPLMNavRefXPLMGetNextNavAid(XPLMNavRefinNavAidRef);"
        },
        {
          "description": "This routine returns the ref of the first navaid of the given type in the database orXPLM_NAV_NOT_FOUNDif there are no navaids of that type in the database. You must pass exactly one navaid type to this routine.",
          "name": "XPLMFindFirstNavAidOfType",
          "parameters": [],
          "signature": "XPLM_APIXPLMNavRefXPLMFindFirstNavAidOfType(XPLMNavTypeinType);"
        },
        {
          "description": "This routine returns the ref of the last navaid of the given type in the database orXPLM_NAV_NOT_FOUNDif there are no navaids of that type in the database. You must pass exactly one navaid type to this routine.",
          "name": "XPLMFindLastNavAidOfType",
          "parameters": [],
          "signature": "XPLM_APIXPLMNavRefXPLMFindLastNavAidOfType(XPLMNavTypeinType);"
        },
        {
          "description": "This routine provides a number of searching capabilities for the nav database.XPLMFindNavAidwill search through every navaid whose type is within inType (multiple types may be added together) and return any navaids found based on the following rules:",
          "name": "XPLMFindNavAid",
          "parameters": [
            {
              "full_declaration": "const char *         inNameFragment",
              "name": "inNameFragment",
              "type": "const char *"
            },
            {
              "full_declaration": "const char *         inIDFragment",
              "name": "inIDFragment",
              "type": "const char *"
            },
            {
              "full_declaration": "float *              inLat",
              "name": "inLat",
              "type": "float *"
            },
            {
              "full_declaration": "float *              inLon",
              "name": "inLon",
              "type": "float *"
            },
            {
              "full_declaration": "int *                inFrequency",
              "name": "inFrequency",
              "type": "int *"
            }
          ],
          "signature": "XPLM_APIXPLMNavRefXPLMFindNavAid(\n                         const char *         inNameFragment,    /* Can be NULL */\n                         const char *         inIDFragment,    /* Can be NULL */\n                         float *              inLat,    /* Can be NULL */\n                         float *              inLon,    /* Can be NULL */\n                         int *                inFrequency,    /* Can be NULL */XPLMNavTypeinType);"
        },
        {
          "description": "This routine returns information about a navaid. Any non-null field is filled out with information if it is available.",
          "name": "XPLMGetNavAidInfo",
          "parameters": [],
          "signature": "XPLM_API voidXPLMGetNavAidInfo(XPLMNavRefinRef,XPLMNavType*        outType,    /* Can be NULL */\n                         float *              outLatitude,    /* Can be NULL */\n                         float *              outLongitude,    /* Can be NULL */\n                         float *              outHeight,    /* Can be NULL */\n                         int *                outFrequency,    /* Can be NULL */\n                         float *              outHeading,    /* Can be NULL */\n                         char *               outID,    /* Can be NULL */\n                         char *               outName,    /* Can be NULL */\n                         char *               outReg);    /* Can be NULL */"
        },
        {
          "description": "This routine returns the number of entries in the FMS.",
          "name": "XPLMCountFMSEntries",
          "parameters": [],
          "signature": "XPLM_API intXPLMCountFMSEntries(void);"
        },
        {
          "description": "This routine returns the index of the entry the pilot is viewing.",
          "name": "XPLMGetDisplayedFMSEntry",
          "parameters": [],
          "signature": "XPLM_API intXPLMGetDisplayedFMSEntry(void);"
        },
        {
          "description": "This routine returns the index of the entry the FMS is flying to.",
          "name": "XPLMGetDestinationFMSEntry",
          "parameters": [],
          "signature": "XPLM_API intXPLMGetDestinationFMSEntry(void);"
        },
        {
          "description": "This routine changes which entry the FMS is showing to the index specified.",
          "name": "XPLMSetDisplayedFMSEntry",
          "parameters": [
            {
              "full_declaration": "int                  inIndex",
              "name": "inIndex",
              "type": "int"
            }
          ],
          "signature": "XPLM_API voidXPLMSetDisplayedFMSEntry(\n                         int                  inIndex);"
        },
        {
          "description": "This routine changes which entry the FMS is flying the aircraft toward. The track is from the n-1'th point to the n'th point.",
          "name": "XPLMSetDestinationFMSEntry",
          "parameters": [
            {
              "full_declaration": "int                  inIndex",
              "name": "inIndex",
              "type": "int"
            }
          ],
          "signature": "XPLM_API voidXPLMSetDestinationFMSEntry(\n                         int                  inIndex);"
        },
        {
          "description": "This routine returns information about a given FMS entry. If the entry is an airport or navaid, a reference to a nav entry can be returned allowing you to find additional information (such as a frequency, ILS heading, name, etc.). Note that this reference can beXPLM_NAV_NOT_FOUNDuntil the information has been looked up asynchronously, so after flightplan changes, it might take up to a second for this field to become populated. The other information is available immediately. For a lat/lon entry, the lat/lon is returned by this routine but the navaid cannot be looked up (and the reference will beXPLM_NAV_NOT_FOUND). FMS name entry buffers should be at least 256 chars in length.",
          "name": "XPLMGetFMSEntryInfo",
          "parameters": [],
          "signature": "XPLM_API voidXPLMGetFMSEntryInfo(\n                         int                  inIndex,XPLMNavType*        outType,    /* Can be NULL */\n                         char *               outID,    /* Can be NULL */XPLMNavRef*         outRef,    /* Can be NULL */\n                         int *                outAltitude,    /* Can be NULL */\n                         float *              outLat,    /* Can be NULL */\n                         float *              outLon);    /* Can be NULL */"
        },
        {
          "description": "This routine changes an entry in the FMS to have the destination navaid passed in and the altitude specified. Use this only for airports, fixes, and radio-beacon navaids. Currently of radio beacons, the FMS can only support VORs and NDBs. Use the routines below to clear or fly to a lat/lon.",
          "name": "XPLMSetFMSEntryInfo",
          "parameters": [
            {
              "full_declaration": "int                  inIndex",
              "name": "inIndex",
              "type": "int"
            },
            {
              "full_declaration": "int                  inAltitude",
              "name": "inAltitude",
              "type": "int"
            }
          ],
          "signature": "XPLM_API voidXPLMSetFMSEntryInfo(\n                         int                  inIndex,XPLMNavRefinRef,\n                         int                  inAltitude);"
        },
        {
          "description": "This routine changes the entry in the FMS to a lat/lon entry with the given coordinates.",
          "name": "XPLMSetFMSEntryLatLon",
          "parameters": [
            {
              "full_declaration": "int                  inIndex",
              "name": "inIndex",
              "type": "int"
            },
            {
              "full_declaration": "float                inLat",
              "name": "inLat",
              "type": "float"
            },
            {
              "full_declaration": "float                inLon",
              "name": "inLon",
              "type": "float"
            },
            {
              "full_declaration": "int                  inAltitude",
              "name": "inAltitude",
              "type": "int"
            }
          ],
          "signature": "XPLM_API voidXPLMSetFMSEntryLatLon(\n                         int                  inIndex,\n                         float                inLat,\n                         float                inLon,\n                         int                  inAltitude);"
        },
        {
          "description": "This routine clears the given entry, potentially shortening the flight plan.",
          "name": "XPLMClearFMSEntry",
          "parameters": [
            {
              "full_declaration": "int                  inIndex",
              "name": "inIndex",
              "type": "int"
            }
          ],
          "signature": "XPLM_API voidXPLMClearFMSEntry(\n                         int                  inIndex);"
        },
        {
          "description": "This routine returns the number of entries in the FMS.",
          "name": "XPLMCountFMSFlightPlanEntries",
          "parameters": [],
          "signature": "XPLM_API intXPLMCountFMSFlightPlanEntries(XPLMNavFlightPlaninFlightPlan);"
        },
        {
          "description": "This routine returns the index of the entry the pilot is viewing.",
          "name": "XPLMGetDisplayedFMSFlightPlanEntry",
          "parameters": [],
          "signature": "XPLM_API intXPLMGetDisplayedFMSFlightPlanEntry(XPLMNavFlightPlaninFlightPlan);"
        },
        {
          "description": "This routine returns the index of the entry the FMS is flying to.",
          "name": "XPLMGetDestinationFMSFlightPlanEntry",
          "parameters": [],
          "signature": "XPLM_API intXPLMGetDestinationFMSFlightPlanEntry(XPLMNavFlightPlaninFlightPlan);"
        },
        {
          "description": "This routine changes which entry the FMS is showing to the index specified.",
          "name": "XPLMSetDisplayedFMSFlightPlanEntry",
          "parameters": [
            {
              "full_declaration": "int                  inIndex",
              "name": "inIndex",
              "type": "int"
            }
          ],
          "signature": "XPLM_API voidXPLMSetDisplayedFMSFlightPlanEntry(XPLMNavFlightPlaninFlightPlan,\n                         int                  inIndex);"
        },
        {
          "description": "This routine changes which entry the FMS is flying the aircraft toward. The track is from the n-1'th point to the n'th point.",
          "name": "XPLMSetDestinationFMSFlightPlanEntry",
          "parameters": [
            {
              "full_declaration": "int                  inIndex",
              "name": "inIndex",
              "type": "int"
            }
          ],
          "signature": "XPLM_API voidXPLMSetDestinationFMSFlightPlanEntry(XPLMNavFlightPlaninFlightPlan,\n                         int                  inIndex);"
        },
        {
          "description": "This routine changes which entry the FMS is flying the aircraft toward. The track is from the current position of the aircraft directly to the n'th point, ignoring the point before it.",
          "name": "XPLMSetDirectToFMSFlightPlanEntry",
          "parameters": [
            {
              "full_declaration": "int                  inIndex",
              "name": "inIndex",
              "type": "int"
            }
          ],
          "signature": "XPLM_API voidXPLMSetDirectToFMSFlightPlanEntry(XPLMNavFlightPlaninFlightPlan,\n                         int                  inIndex);"
        },
        {
          "description": "This routine returns information about a given FMS entry. If the entry is an airport or navaid, a reference to a nav entry can be returned allowing you to find additional information (such as a frequency, ILS heading, name, etc.). Note that this reference can beXPLM_NAV_NOT_FOUNDuntil the information has been looked up asynchronously, so after flightplan changes, it might take up to a second for this field to become populated. The other information is available immediately. For a lat/lon entry, the lat/lon is returned by this routine but the navaid cannot be looked up (and the reference will beXPLM_NAV_NOT_FOUND). FMS name entry buffers should be at least 256 chars in length.",
          "name": "XPLMGetFMSFlightPlanEntryInfo",
          "parameters": [],
          "signature": "XPLM_API voidXPLMGetFMSFlightPlanEntryInfo(XPLMNavFlightPlaninFlightPlan,\n                         int                  inIndex,XPLMNavType*        outType,    /* Can be NULL */\n                         char *               outID,    /* Can be NULL */XPLMNavRef*         outRef,    /* Can be NULL */\n                         int *                outAltitude,    /* Can be NULL */\n                         float *              outLat,    /* Can be NULL */\n                         float *              outLon);    /* Can be NULL */"
        },
        {
          "description": "This routine changes an entry in the FMS to have the destination navaid passed in and the altitude specified. Use this only for airports, fixes, and radio-beacon navaids. Currently of radio beacons, the FMS can only support VORs, NDBs and TACANs. Use the routines below to clear or fly to a lat/lon.",
          "name": "XPLMSetFMSFlightPlanEntryInfo",
          "parameters": [
            {
              "full_declaration": "int                  inIndex",
              "name": "inIndex",
              "type": "int"
            },
            {
              "full_declaration": "int                  inAltitude",
              "name": "inAltitude",
              "type": "int"
            }
          ],
          "signature": "XPLM_API voidXPLMSetFMSFlightPlanEntryInfo(XPLMNavFlightPlaninFlightPlan,\n                         int                  inIndex,XPLMNavRefinRef,\n                         int                  inAltitude);"
        },
        {
          "description": "This routine changes the entry in the FMS to a lat/lon entry with the given coordinates.",
          "name": "XPLMSetFMSFlightPlanEntryLatLon",
          "parameters": [
            {
              "full_declaration": "int                  inIndex",
              "name": "inIndex",
              "type": "int"
            },
            {
              "full_declaration": "float                inLat",
              "name": "inLat",
              "type": "float"
            },
            {
              "full_declaration": "float                inLon",
              "name": "inLon",
              "type": "float"
            },
            {
              "full_declaration": "int                  inAltitude",
              "name": "inAltitude",
              "type": "int"
            }
          ],
          "signature": "XPLM_API voidXPLMSetFMSFlightPlanEntryLatLon(XPLMNavFlightPlaninFlightPlan,\n                         int                  inIndex,\n                         float                inLat,\n                         float                inLon,\n                         int                  inAltitude);"
        },
        {
          "description": "This routine changes the entry in the FMS to a lat/lon entry with the given coordinates. You can specify the display ID of the waypoint.",
          "name": "XPLMSetFMSFlightPlanEntryLatLonWithId",
          "parameters": [
            {
              "full_declaration": "int                  inIndex",
              "name": "inIndex",
              "type": "int"
            },
            {
              "full_declaration": "float                inLat",
              "name": "inLat",
              "type": "float"
            },
            {
              "full_declaration": "float                inLon",
              "name": "inLon",
              "type": "float"
            },
            {
              "full_declaration": "int                  inAltitude",
              "name": "inAltitude",
              "type": "int"
            },
            {
              "full_declaration": "const char*          inId",
              "name": "inId",
              "type": "const char*"
            },
            {
              "full_declaration": "unsigned int         inIdLength",
              "name": "inIdLength",
              "type": "unsigned int"
            }
          ],
          "signature": "XPLM_API voidXPLMSetFMSFlightPlanEntryLatLonWithId(XPLMNavFlightPlaninFlightPlan,\n                         int                  inIndex,\n                         float                inLat,\n                         float                inLon,\n                         int                  inAltitude,\n                         const char*          inId,\n                         unsigned int         inIdLength);"
        },
        {
          "description": "This routine clears the given entry, potentially shortening the flight plan.",
          "name": "XPLMClearFMSFlightPlanEntry",
          "parameters": [
            {
              "full_declaration": "int                  inIndex",
              "name": "inIndex",
              "type": "int"
            }
          ],
          "signature": "XPLM_API voidXPLMClearFMSFlightPlanEntry(XPLMNavFlightPlaninFlightPlan,\n                         int                  inIndex);"
        },
        {
          "description": "Loads an X-Plane 11 and later formatted flightplan from the buffer into the FMS or GPS, including instrument procedures. Use device index 0 for the pilot-side and device index 1 for the co-pilot side unit.",
          "name": "XPLMLoadFMSFlightPlan",
          "parameters": [
            {
              "full_declaration": "int                  inDevice",
              "name": "inDevice",
              "type": "int"
            },
            {
              "full_declaration": "const char *         inBuffer",
              "name": "inBuffer",
              "type": "const char *"
            },
            {
              "full_declaration": "unsigned int         inBufferLen",
              "name": "inBufferLen",
              "type": "unsigned int"
            }
          ],
          "signature": "XPLM_API voidXPLMLoadFMSFlightPlan(\n                         int                  inDevice,\n                         const char *         inBuffer,\n                         unsigned int         inBufferLen);"
        },
        {
          "description": "Saves an X-Plane 11 formatted flightplan from the FMS or GPS into a char buffer that you provide. Use device index 0 for the pilot-side and device index 1 for the co-pilot side unit. Provide the length of the buffer you allocated. X-Plane will write a null-terminated string if the full flight plan fits into the buffer. If your buffer is too small, X-Plane will write inBufferLen characters, and the resulting buffer is not null-terminated. The return value is the number of characters (including null terminator) that X-Plane needed to write the flightplan. If this number is larger than the buffer you provided, the flightplan in the buffer will be incomplete and the buffer not null-terminated.",
          "name": "XPLMSaveFMSFlightPlan",
          "parameters": [
            {
              "full_declaration": "int                  inDevice",
              "name": "inDevice",
              "type": "int"
            },
            {
              "full_declaration": "char *               inBuffer",
              "name": "inBuffer",
              "type": "char *"
            },
            {
              "full_declaration": "unsigned int         inBufferLen",
              "name": "inBufferLen",
              "type": "unsigned int"
            }
          ],
          "signature": "XPLM_API unsigned intXPLMSaveFMSFlightPlan(\n                         int                  inDevice,\n                         char *               inBuffer,\n                         unsigned int         inBufferLen);"
        },
        {
          "description": "This routine returns the type of the currently selected GPS destination, one of fix, airport, VOR or NDB.",
          "name": "XPLMGetGPSDestinationType",
          "parameters": [],
          "signature": "XPLM_APIXPLMNavTypeXPLMGetGPSDestinationType(void);"
        },
        {
          "description": "This routine returns the current GPS destination.",
          "name": "XPLMGetGPSDestination",
          "parameters": [],
          "signature": "XPLM_APIXPLMNavRefXPLMGetGPSDestination(void);"
        },
        {
          "name": "XPLMNavType",
          "type": "enum",
          "values": []
        },
        {
          "name": "XPLMNavFlightPlan",
          "type": "enum",
          "values": []
        },
        {
          "name": "voidXPLMGetNavAidInfo",
          "signature": "XPLM_API voidXPLMGetNavAidInfo(XPLMNavRefinRef,XPLMNavType*        outType,    /* Can be NULL */\n                         float *              outLatitude,    /* Can be NULL */\n                         float *              outLongitude,    /* Can be NULL */\n                         float *              outHeight,    /* Can be NULL */\n                         int *                outFrequency,    /* Can be NULL */\n                         float *              outHeading,    /* Can be NULL */\n                         char *               outID,    /* Can be NULL */\n                         char *               outName,    /* Can be NULL */\n                         char *               outReg);",
          "source": "code_block_extraction",
          "type": "function"
        },
        {
          "name": "intXPLMCountFMSEntries",
          "signature": "XPLM_API intXPLMCountFMSEntries(void);",
          "source": "code_block_extraction",
          "type": "function"
        },
        {
          "name": "intXPLMGetDisplayedFMSEntry",
          "signature": "XPLM_API intXPLMGetDisplayedFMSEntry(void);",
          "source": "code_block_extraction",
          "type": "function"
        },
        {
          "name": "intXPLMGetDestinationFMSEntry",
          "signature": "XPLM_API intXPLMGetDestinationFMSEntry(void);",
          "source": "code_block_extraction",
          "type": "function"
        },
        {
          "name": "voidXPLMSetDisplayedFMSEntry",
          "signature": "XPLM_API voidXPLMSetDisplayedFMSEntry(\n                         int                  inIndex);",
          "source": "code_block_extraction",
          "type": "function"
        },
        {
          "name": "voidXPLMSetDestinationFMSEntry",
          "signature": "XPLM_API voidXPLMSetDestinationFMSEntry(\n                         int                  inIndex);",
          "source": "code_block_extraction",
          "type": "function"
        },
        {
          "name": "voidXPLMGetFMSEntryInfo",
          "signature": "XPLM_API voidXPLMGetFMSEntryInfo(\n                         int                  inIndex,XPLMNavType*        outType,    /* Can be NULL */\n                         char *               outID,    /* Can be NULL */XPLMNavRef*         outRef,    /* Can be NULL */\n                         int *                outAltitude,    /* Can be NULL */\n                         float *              outLat,    /* Can be NULL */\n                         float *              outLon);",
          "source": "code_block_extraction",
          "type": "function"
        },
        {
          "name": "voidXPLMSetFMSEntryInfo",
          "signature": "XPLM_API voidXPLMSetFMSEntryInfo(\n                         int                  inIndex,XPLMNavRefinRef,\n                         int                  inAltitude);",
          "source": "code_block_extraction",
          "type": "function"
        },
        {
          "name": "voidXPLMSetFMSEntryLatLon",
          "signature": "XPLM_API voidXPLMSetFMSEntryLatLon(\n                         int                  inIndex,\n                         float                inLat,\n                         float                inLon,\n                         int                  inAltitude);",
          "source": "code_block_extraction",
          "type": "function"
        },
        {
          "name": "voidXPLMClearFMSEntry",
          "signature": "XPLM_API voidXPLMClearFMSEntry(\n                         int                  inIndex);",
          "source": "code_block_extraction",
          "type": "function"
        },
        {
          "name": "intXPLMCountFMSFlightPlanEntries",
          "signature": "XPLM_API intXPLMCountFMSFlightPlanEntries(XPLMNavFlightPlaninFlightPlan);",
          "source": "code_block_extraction",
          "type": "function"
        },
        {
          "name": "intXPLMGetDisplayedFMSFlightPlanEntry",
          "signature": "XPLM_API intXPLMGetDisplayedFMSFlightPlanEntry(XPLMNavFlightPlaninFlightPlan);",
          "source": "code_block_extraction",
          "type": "function"
        },
        {
          "name": "intXPLMGetDestinationFMSFlightPlanEntry",
          "signature": "XPLM_API intXPLMGetDestinationFMSFlightPlanEntry(XPLMNavFlightPlaninFlightPlan);",
          "source": "code_block_extraction",
          "type": "function"
        },
        {
          "name": "voidXPLMSetDisplayedFMSFlightPlanEntry",
          "signature": "XPLM_API voidXPLMSetDisplayedFMSFlightPlanEntry(XPLMNavFlightPlaninFlightPlan,\n                         int                  inIndex);",
          "source": "code_block_extraction",
          "type": "function"
        },
        {
          "name": "voidXPLMSetDestinationFMSFlightPlanEntry",
          "signature": "XPLM_API voidXPLMSetDestinationFMSFlightPlanEntry(XPLMNavFlightPlaninFlightPlan,\n                         int                  inIndex);",
          "source": "code_block_extraction",
          "type": "function"
        },
        {
          "name": "voidXPLMSetDirectToFMSFlightPlanEntry",
          "signature": "XPLM_API voidXPLMSetDirectToFMSFlightPlanEntry(XPLMNavFlightPlaninFlightPlan,\n                         int                  inIndex);",
          "source": "code_block_extraction",
          "type": "function"
        },
        {
          "name": "voidXPLMGetFMSFlightPlanEntryInfo",
          "signature": "XPLM_API voidXPLMGetFMSFlightPlanEntryInfo(XPLMNavFlightPlaninFlightPlan,\n                         int                  inIndex,XPLMNavType*        outType,    /* Can be NULL */\n                         char *               outID,    /* Can be NULL */XPLMNavRef*         outRef,    /* Can be NULL */\n                         int *                outAltitude,    /* Can be NULL */\n                         float *              outLat,    /* Can be NULL */\n                         float *              outLon);",
          "source": "code_block_extraction",
          "type": "function"
        },
        {
          "name": "voidXPLMSetFMSFlightPlanEntryInfo",
          "signature": "XPLM_API voidXPLMSetFMSFlightPlanEntryInfo(XPLMNavFlightPlaninFlightPlan,\n                         int                  inIndex,XPLMNavRefinRef,\n                         int                  inAltitude);",
          "source": "code_block_extraction",
          "type": "function"
        },
        {
          "name": "voidXPLMSetFMSFlightPlanEntryLatLon",
          "signature": "XPLM_API voidXPLMSetFMSFlightPlanEntryLatLon(XPLMNavFlightPlaninFlightPlan,\n                         int                  inIndex,\n                         float                inLat,\n                         float                inLon,\n                         int                  inAltitude);",
          "source": "code_block_extraction",
          "type": "function"
        },
        {
          "name": "voidXPLMSetFMSFlightPlanEntryLatLonWithId",
          "signature": "XPLM_API voidXPLMSetFMSFlightPlanEntryLatLonWithId(XPLMNavFlightPlaninFlightPlan,\n                         int                  inIndex,\n                         float                inLat,\n                         float                inLon,\n                         int                  inAltitude,\n                         const char*          inId,\n                         unsigned int         inIdLength);",
          "source": "code_block_extraction",
          "type": "function"
        },
        {
          "name": "voidXPLMClearFMSFlightPlanEntry",
          "signature": "XPLM_API voidXPLMClearFMSFlightPlanEntry(XPLMNavFlightPlaninFlightPlan,\n                         int                  inIndex);",
          "source": "code_block_extraction",
          "type": "function"
        },
        {
          "name": "voidXPLMLoadFMSFlightPlan",
          "signature": "XPLM_API voidXPLMLoadFMSFlightPlan(\n                         int                  inDevice,\n                         const char *         inBuffer,\n                         unsigned int         inBufferLen);",
          "source": "code_block_extraction",
          "type": "function"
        },
        {
          "name": "intXPLMSaveFMSFlightPlan",
          "signature": "XPLM_API unsigned intXPLMSaveFMSFlightPlan(\n                         int                  inDevice,\n                         char *               inBuffer,\n                         unsigned int         inBufferLen)",
          "source": "code_block_extraction",
          "type": "function"
        },
        {
          "name": "unsigned",
          "signature": "unsigned intXPLMSaveFMSFlightPlan(\n                         int                  inDevice,\n                         char *               inBuffer,\n                         unsigned int         inBufferLen);",
          "source": "code_block_extraction",
          "type": "function"
        }
      ],
      "category": {
        "category": "XPLM_Navigation",
        "module": "Xplm Navigation",
        "url": "https://developer.x-plane.com/sdk/XPLMNavigation/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"api\"><h1 class=\"sdk-api-title\" id=\"XPLMNavigation\"><a href=\"/sdk/XPLMNavigation/\">XPLMNavigation</a>API</h1><p>The XPLM Navigation APIs give you some access to the navigation databases inside X-Plane. X-Plane stores all navigation information in RAM, so by using these APIs you can gain access to most information without having to go to disk or parse the files yourself.</p><p>You can also use this API to program the FMS. You must use the navigation APIs to find the nav-aids you want to program into the FMS, since the FMS is powered internally by X-Plane’s navigation database.</p><div class=\"component\"><h2 id=\"NAVIGATION DATABASE ACCESS\">NAVIGATION DATABASE ACCESS</h2><div class=\"enum\"><h3 class=\"sdk-api-enum\" id=\"XPLMNavType\"><a href=\"/sdk/XPLMNavType/\">XPLMNavType</a></h3><p>These enumerations define the different types of navaids. They are each defined with a separate bit so that they may be bit-wise added together to form sets of nav-aid types.</p><p>NOTE:<a href=\"/sdk/xplm_Nav_LatLon/\">xplm_Nav_LatLon</a>is a specific lat-lon coordinate entered into the FMS. It will not exist in the database, and cannot be programmed into the FMS. Querying the FMS for navaids will return it. Use<a href=\"/sdk/XPLMSetFMSEntryLatLon/\">XPLMSetFMSEntryLatLon</a>to set a lat/lon waypoint.</p><p><div class=\"enumitem\"><table><thead><tr><th>Name</th><th>Value</th><th>Description</th></tr></thead><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_Nav_Unknown\"><a href=\"/sdk/xplm_Nav_Unknown/\">xplm_Nav_Unknown</a></td><td>\"0\"</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_Nav_Airport\"><a href=\"/sdk/xplm_Nav_Airport/\">xplm_Nav_Airport</a></td><td>\"1\"</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_Nav_NDB\"><a href=\"/sdk/xplm_Nav_NDB/\">xplm_Nav_NDB</a></td><td>\"2\"</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_Nav_VOR\"><a href=\"/sdk/xplm_Nav_VOR/\">xplm_Nav_VOR</a></td><td>\"4\"</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_Nav_ILS\"><a href=\"/sdk/xplm_Nav_ILS/\">xplm_Nav_ILS</a></td><td>\"8\"</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_Nav_Localizer\"><a href=\"/sdk/xplm_Nav_Localizer/\">xplm_Nav_Localizer</a></td><td>\"16\"</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_Nav_GlideSlope\"><a href=\"/sdk/xplm_Nav_GlideSlope/\">xplm_Nav_GlideSlope</a></td><td>\"32\"</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_Nav_OuterMarker\"><a href=\"/sdk/xplm_Nav_OuterMarker/\">xplm_Nav_OuterMarker</a></td><td>\"64\"</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_Nav_MiddleMarker\"><a href=\"/sdk/xplm_Nav_MiddleMarker/\">xplm_Nav_MiddleMarker</a></td><td>\"128\"</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_Nav_InnerMarker\"><a href=\"/sdk/xplm_Nav_InnerMarker/\">xplm_Nav_InnerMarker</a></td><td>\"256\"</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_Nav_Fix\"><a href=\"/sdk/xplm_Nav_Fix/\">xplm_Nav_Fix</a></td><td>\"512\"</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_Nav_DME\"><a href=\"/sdk/xplm_Nav_DME/\">xplm_Nav_DME</a></td><td>\"1024\"</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_Nav_LatLon\"><a href=\"/sdk/xplm_Nav_LatLon/\">xplm_Nav_LatLon</a></td><td>\"2048\"</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_Nav_TACAN\"><a href=\"/sdk/xplm_Nav_TACAN/\">xplm_Nav_TACAN</a></td><td>\"4096\"</td></tr></table></div></p></div><div class=\"typedef\"><h3 class=\"sdk-api-type\" id=\"XPLMNavRef\"><a href=\"/sdk/XPLMNavRef/\">XPLMNavRef</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>typedef int <a href=\"/sdk/XPLMNavRef/\">XPLMNavRef</a>;</code></pre><p><a href=\"/sdk/XPLMNavRef/\">XPLMNavRef</a>is an iterator into the navigation database. The navigation database is essentially an array, but it is not necessarily densely populated. The only assumption you can safely make is that like-typed nav-aids are grouped together.</p><p>Use<a href=\"/sdk/XPLMNavRef/\">XPLMNavRef</a>to refer to a nav-aid.</p><p><a href=\"/sdk/XPLM_NAV_NOT_FOUND/\">XPLM_NAV_NOT_FOUND</a>is returned by functions that return an<a href=\"/sdk/XPLMNavRef/\">XPLMNavRef</a>when the iterator must be invalid.</p></div><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"XPLM_NAV_NOT_FOUND\"><a href=\"/sdk/XPLM_NAV_NOT_FOUND/\">XPLM_NAV_NOT_FOUND</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_NAV_NOT_FOUND/\">XPLM_NAV_NOT_FOUND</a>   -1</code></pre></div><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPLMGetFirstNavAid\"><a href=\"/sdk/XPLMGetFirstNavAid/\">XPLMGetFirstNavAid</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API <a href=\"/sdk/XPLMNavRef/\">XPLMNavRef</a> <a href=\"/sdk/XPLMGetFirstNavAid/\">XPLMGetFirstNavAid</a>(void);\n</code></pre><p>This returns the very first navaid in the database. Use this to traverse the entire database. Returns<a href=\"/sdk/XPLM_NAV_NOT_FOUND/\">XPLM_NAV_NOT_FOUND</a>if the nav database is empty.</p></div><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPLMGetNextNavAid\"><a href=\"/sdk/XPLMGetNextNavAid/\">XPLMGetNextNavAid</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API <a href=\"/sdk/XPLMNavRef/\">XPLMNavRef</a> <a href=\"/sdk/XPLMGetNextNavAid/\">XPLMGetNextNavAid</a>(\n                         <a href=\"/sdk/XPLMNavRef/\">XPLMNavRef</a>           inNavAidRef);\n</code></pre><p>Given a valid navaid ref, this routine returns the next navaid. It returns<a href=\"/sdk/XPLM_NAV_NOT_FOUND/\">XPLM_NAV_NOT_FOUND</a>if the navaid passed in was invalid or if the navaid passed in was the last one in the database. Use this routine to iterate across all like-typed navaids or the entire database.</p></div><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPLMFindFirstNavAidOfType\"><a href=\"/sdk/XPLMFindFirstNavAidOfType/\">XPLMFindFirstNavAidOfType</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API <a href=\"/sdk/XPLMNavRef/\">XPLMNavRef</a> <a href=\"/sdk/XPLMFindFirstNavAidOfType/\">XPLMFindFirstNavAidOfType</a>(\n                         <a href=\"/sdk/XPLMNavType/\">XPLMNavType</a>          inType);\n</code></pre><p>This routine returns the ref of the first navaid of the given type in the database or<a href=\"/sdk/XPLM_NAV_NOT_FOUND/\">XPLM_NAV_NOT_FOUND</a>if there are no navaids of that type in the database. You must pass exactly one navaid type to this routine.</p></div><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPLMFindLastNavAidOfType\"><a href=\"/sdk/XPLMFindLastNavAidOfType/\">XPLMFindLastNavAidOfType</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API <a href=\"/sdk/XPLMNavRef/\">XPLMNavRef</a> <a href=\"/sdk/XPLMFindLastNavAidOfType/\">XPLMFindLastNavAidOfType</a>(\n                         <a href=\"/sdk/XPLMNavType/\">XPLMNavType</a>          inType);\n</code></pre><p>This routine returns the ref of the last navaid of the given type in the database or<a href=\"/sdk/XPLM_NAV_NOT_FOUND/\">XPLM_NAV_NOT_FOUND</a>if there are no navaids of that type in the database. You must pass exactly one navaid type to this routine.</p></div><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPLMFindNavAid\"><a href=\"/sdk/XPLMFindNavAid/\">XPLMFindNavAid</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API <a href=\"/sdk/XPLMNavRef/\">XPLMNavRef</a> <a href=\"/sdk/XPLMFindNavAid/\">XPLMFindNavAid</a>(\n                         const char *         inNameFragment,    /* Can be NULL */\n                         const char *         inIDFragment,    /* Can be NULL */\n                         float *              inLat,    /* Can be NULL */\n                         float *              inLon,    /* Can be NULL */\n                         int *                inFrequency,    /* Can be NULL */\n                         <a href=\"/sdk/XPLMNavType/\">XPLMNavType</a>          inType);\n</code></pre><p>This routine provides a number of searching capabilities for the nav database.<a href=\"/sdk/XPLMFindNavAid/\">XPLMFindNavAid</a>will search through every navaid whose type is within inType (multiple types may be added together) and return any navaids found based on the following rules:</p><ul><li><p>If inLat and inLon are not NULL, the navaid nearest to that lat/lon will be returned, otherwise the last navaid found will be returned.</p></li><li><p>If inFrequency is not NULL, then any navaids considered must match this frequency. Note that this will screen out radio beacons that do not have frequency data published (like inner markers) but not fixes and airports.</p></li><li><p>If inNameFragment is not NULL, only navaids that contain the fragment in their name will be returned.</p></li><li><p>If inIDFragment is not NULL, only navaids that contain the fragment in their IDs will be returned.</p></li></ul><p>This routine provides a simple way to do a number of useful searches: * Find the nearest navaid on this frequency. * Find the nearest airport. * Find the VOR whose ID is “BOS”. * Find the nearest airport whose name contains “Chicago”.</p></div><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPLMGetNavAidInfo\"><a href=\"/sdk/XPLMGetNavAidInfo/\">XPLMGetNavAidInfo</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API void       <a href=\"/sdk/XPLMGetNavAidInfo/\">XPLMGetNavAidInfo</a>(\n                         <a href=\"/sdk/XPLMNavRef/\">XPLMNavRef</a>           inRef,\n                         <a href=\"/sdk/XPLMNavType/\">XPLMNavType</a> *        outType,    /* Can be NULL */\n                         float *              outLatitude,    /* Can be NULL */\n                         float *              outLongitude,    /* Can be NULL */\n                         float *              outHeight,    /* Can be NULL */\n                         int *                outFrequency,    /* Can be NULL */\n                         float *              outHeading,    /* Can be NULL */\n                         char *               outID,    /* Can be NULL */\n                         char *               outName,    /* Can be NULL */\n                         char *               outReg);    /* Can be NULL */\n</code></pre><p>This routine returns information about a navaid. Any non-null field is filled out with information if it is available.</p><p>Frequencies are in the nav.dat convention as described in the X-Plane nav database FAQ: NDB frequencies are exact, all others are multiplied by 100.</p><p>The buffer for IDs should be at least 6 chars and the buffer for names should be at least 41 chars, but since these values are likely to go up, I recommend passing at least 32 chars for IDs and 256 chars for names when possible.</p><p>The outReg parameter tells if the navaid is within the local “region” of loaded DSFs. (This information may not be particularly useful to plugins.) The parameter is a single byte value 1 for true or 0 for false, not a C string.</p></div></div><div class=\"component\"><h2 id=\"FLIGHT MANAGEMENT COMPUTER\">FLIGHT MANAGEMENT COMPUTER</h2><p>Note: the FMS works based on an array of entries. Indices into the array are zero-based. Each entry is a navaid plus an altitude. The FMS tracks the currently displayed entry and the entry that it is flying to.</p><p>The FMS must be programmed with contiguous entries, so clearing an entry at the end shortens the effective flight plan. There is a max of 100 waypoints in the flight plan.</p><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPLMCountFMSEntries\"><a href=\"/sdk/XPLMCountFMSEntries/\">XPLMCountFMSEntries</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API int        <a href=\"/sdk/XPLMCountFMSEntries/\">XPLMCountFMSEntries</a>(void);\n</code></pre><p>This routine returns the number of entries in the FMS.</p></div><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPLMGetDisplayedFMSEntry\"><a href=\"/sdk/XPLMGetDisplayedFMSEntry/\">XPLMGetDisplayedFMSEntry</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API int        <a href=\"/sdk/XPLMGetDisplayedFMSEntry/\">XPLMGetDisplayedFMSEntry</a>(void);\n</code></pre><p>This routine returns the index of the entry the pilot is viewing.</p></div><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPLMGetDestinationFMSEntry\"><a href=\"/sdk/XPLMGetDestinationFMSEntry/\">XPLMGetDestinationFMSEntry</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API int        <a href=\"/sdk/XPLMGetDestinationFMSEntry/\">XPLMGetDestinationFMSEntry</a>(void);\n</code></pre><p>This routine returns the index of the entry the FMS is flying to.</p></div><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPLMSetDisplayedFMSEntry\"><a href=\"/sdk/XPLMSetDisplayedFMSEntry/\">XPLMSetDisplayedFMSEntry</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API void       <a href=\"/sdk/XPLMSetDisplayedFMSEntry/\">XPLMSetDisplayedFMSEntry</a>(\n                         int                  inIndex);\n</code></pre><p>This routine changes which entry the FMS is showing to the index specified.</p></div><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPLMSetDestinationFMSEntry\"><a href=\"/sdk/XPLMSetDestinationFMSEntry/\">XPLMSetDestinationFMSEntry</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API void       <a href=\"/sdk/XPLMSetDestinationFMSEntry/\">XPLMSetDestinationFMSEntry</a>(\n                         int                  inIndex);\n</code></pre><p>This routine changes which entry the FMS is flying the aircraft toward. The track is from the n-1'th point to the n'th point.</p></div><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPLMGetFMSEntryInfo\"><a href=\"/sdk/XPLMGetFMSEntryInfo/\">XPLMGetFMSEntryInfo</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API void       <a href=\"/sdk/XPLMGetFMSEntryInfo/\">XPLMGetFMSEntryInfo</a>(\n                         int                  inIndex,\n                         <a href=\"/sdk/XPLMNavType/\">XPLMNavType</a> *        outType,    /* Can be NULL */\n                         char *               outID,    /* Can be NULL */\n                         <a href=\"/sdk/XPLMNavRef/\">XPLMNavRef</a> *         outRef,    /* Can be NULL */\n                         int *                outAltitude,    /* Can be NULL */\n                         float *              outLat,    /* Can be NULL */\n                         float *              outLon);    /* Can be NULL */\n</code></pre><p>This routine returns information about a given FMS entry. If the entry is an airport or navaid, a reference to a nav entry can be returned allowing you to find additional information (such as a frequency, ILS heading, name, etc.). Note that this reference can be<a href=\"/sdk/XPLM_NAV_NOT_FOUND/\">XPLM_NAV_NOT_FOUND</a>until the information has been looked up asynchronously, so after flightplan changes, it might take up to a second for this field to become populated. The other information is available immediately. For a lat/lon entry, the lat/lon is returned by this routine but the navaid cannot be looked up (and the reference will be<a href=\"/sdk/XPLM_NAV_NOT_FOUND/\">XPLM_NAV_NOT_FOUND</a>). FMS name entry buffers should be at least 256 chars in length.</p><p>WARNING: Due to a bug in X-Plane prior to 11.31, the navaid reference will not be set to<a href=\"/sdk/XPLM_NAV_NOT_FOUND/\">XPLM_NAV_NOT_FOUND</a>while no data is available, and instead just remain the value of the variable that you passed the pointer to. Therefore, always initialize the variable to<a href=\"/sdk/XPLM_NAV_NOT_FOUND/\">XPLM_NAV_NOT_FOUND</a>before passing the pointer to this function.</p></div><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPLMSetFMSEntryInfo\"><a href=\"/sdk/XPLMSetFMSEntryInfo/\">XPLMSetFMSEntryInfo</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API void       <a href=\"/sdk/XPLMSetFMSEntryInfo/\">XPLMSetFMSEntryInfo</a>(\n                         int                  inIndex,\n                         <a href=\"/sdk/XPLMNavRef/\">XPLMNavRef</a>           inRef,\n                         int                  inAltitude);\n</code></pre><p>This routine changes an entry in the FMS to have the destination navaid passed in and the altitude specified. Use this only for airports, fixes, and radio-beacon navaids. Currently of radio beacons, the FMS can only support VORs and NDBs. Use the routines below to clear or fly to a lat/lon.</p></div><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPLMSetFMSEntryLatLon\"><a href=\"/sdk/XPLMSetFMSEntryLatLon/\">XPLMSetFMSEntryLatLon</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API void       <a href=\"/sdk/XPLMSetFMSEntryLatLon/\">XPLMSetFMSEntryLatLon</a>(\n                         int                  inIndex,\n                         float                inLat,\n                         float                inLon,\n                         int                  inAltitude);\n</code></pre><p>This routine changes the entry in the FMS to a lat/lon entry with the given coordinates.</p></div><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPLMClearFMSEntry\"><a href=\"/sdk/XPLMClearFMSEntry/\">XPLMClearFMSEntry</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API void       <a href=\"/sdk/XPLMClearFMSEntry/\">XPLMClearFMSEntry</a>(\n                         int                  inIndex);\n</code></pre><p>This routine clears the given entry, potentially shortening the flight plan.</p></div><div class=\"enum XPLM410\"><h3 class=\"sdk-api-enum\" id=\"XPLMNavFlightPlan\"><a href=\"/sdk/XPLMNavFlightPlan/\">XPLMNavFlightPlan</a></h3><pre><code>These enumerations defines the flightplan you are accesing using the FMSFlightPlan functions.\nAn airplane can have up to two navigation devices (GPS or FMS) and each device can have two flightplans.\nA GPS has an enroute and an approach flightplan.\nAn FMS has an active and a temporary flightplan.\nIf you are trying to access a flightplan that doesn't exist in your aircraft, e.g. asking a GPS for a temp flightplan, FMSFlighPlan functions have no effect and will return no information.\n</code></pre><p><div class=\"enumitem XPLM410\"><table><thead><tr><th>Name</th><th>Value</th><th>Description</th></tr></thead><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_Fpl_Pilot_Primary\"><a href=\"/sdk/xplm_Fpl_Pilot_Primary/\">xplm_Fpl_Pilot_Primary</a></td><td>\"0\"</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_Fpl_CoPilot_Primary\"><a href=\"/sdk/xplm_Fpl_CoPilot_Primary/\">xplm_Fpl_CoPilot_Primary</a></td><td>\"1\"</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_Fpl_Pilot_Approach\"><a href=\"/sdk/xplm_Fpl_Pilot_Approach/\">xplm_Fpl_Pilot_Approach</a></td><td>\"2\"</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_Fpl_CoPilot_Approach\"><a href=\"/sdk/xplm_Fpl_CoPilot_Approach/\">xplm_Fpl_CoPilot_Approach</a></td><td>\"3\"</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_Fpl_Pilot_Temporary\"><a href=\"/sdk/xplm_Fpl_Pilot_Temporary/\">xplm_Fpl_Pilot_Temporary</a></td><td>\"4\"</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_Fpl_CoPilot_Temporary\"><a href=\"/sdk/xplm_Fpl_CoPilot_Temporary/\">xplm_Fpl_CoPilot_Temporary</a></td><td>\"5\"</td></tr></table></div></p></div><div class=\"function XPLM410\"><h3 class=\"sdk-api-function\" id=\"XPLMCountFMSFlightPlanEntries\"><a href=\"/sdk/XPLMCountFMSFlightPlanEntries/\">XPLMCountFMSFlightPlanEntries</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API int        <a href=\"/sdk/XPLMCountFMSFlightPlanEntries/\">XPLMCountFMSFlightPlanEntries</a>(\n                         <a href=\"/sdk/XPLMNavFlightPlan/\">XPLMNavFlightPlan</a>    inFlightPlan);\n</code></pre><p>This routine returns the number of entries in the FMS.</p></div><div class=\"function XPLM410\"><h3 class=\"sdk-api-function\" id=\"XPLMGetDisplayedFMSFlightPlanEntry\"><a href=\"/sdk/XPLMGetDisplayedFMSFlightPlanEntry/\">XPLMGetDisplayedFMSFlightPlanEntry</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API int        <a href=\"/sdk/XPLMGetDisplayedFMSFlightPlanEntry/\">XPLMGetDisplayedFMSFlightPlanEntry</a>(\n                         <a href=\"/sdk/XPLMNavFlightPlan/\">XPLMNavFlightPlan</a>    inFlightPlan);\n</code></pre><p>This routine returns the index of the entry the pilot is viewing.</p></div><div class=\"function XPLM410\"><h3 class=\"sdk-api-function\" id=\"XPLMGetDestinationFMSFlightPlanEntry\"><a href=\"/sdk/XPLMGetDestinationFMSFlightPlanEntry/\">XPLMGetDestinationFMSFlightPlanEntry</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API int        <a href=\"/sdk/XPLMGetDestinationFMSFlightPlanEntry/\">XPLMGetDestinationFMSFlightPlanEntry</a>(\n                         <a href=\"/sdk/XPLMNavFlightPlan/\">XPLMNavFlightPlan</a>    inFlightPlan);\n</code></pre><p>This routine returns the index of the entry the FMS is flying to.</p></div><div class=\"function XPLM410\"><h3 class=\"sdk-api-function\" id=\"XPLMSetDisplayedFMSFlightPlanEntry\"><a href=\"/sdk/XPLMSetDisplayedFMSFlightPlanEntry/\">XPLMSetDisplayedFMSFlightPlanEntry</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API void       <a href=\"/sdk/XPLMSetDisplayedFMSFlightPlanEntry/\">XPLMSetDisplayedFMSFlightPlanEntry</a>(\n                         <a href=\"/sdk/XPLMNavFlightPlan/\">XPLMNavFlightPlan</a>    inFlightPlan,\n                         int                  inIndex);\n</code></pre><p>This routine changes which entry the FMS is showing to the index specified.</p></div><div class=\"function XPLM410\"><h3 class=\"sdk-api-function\" id=\"XPLMSetDestinationFMSFlightPlanEntry\"><a href=\"/sdk/XPLMSetDestinationFMSFlightPlanEntry/\">XPLMSetDestinationFMSFlightPlanEntry</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API void       <a href=\"/sdk/XPLMSetDestinationFMSFlightPlanEntry/\">XPLMSetDestinationFMSFlightPlanEntry</a>(\n                         <a href=\"/sdk/XPLMNavFlightPlan/\">XPLMNavFlightPlan</a>    inFlightPlan,\n                         int                  inIndex);\n</code></pre><p>This routine changes which entry the FMS is flying the aircraft toward. The track is from the n-1'th point to the n'th point.</p></div><div class=\"function XPLM410\"><h3 class=\"sdk-api-function\" id=\"XPLMSetDirectToFMSFlightPlanEntry\"><a href=\"/sdk/XPLMSetDirectToFMSFlightPlanEntry/\">XPLMSetDirectToFMSFlightPlanEntry</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API void       <a href=\"/sdk/XPLMSetDirectToFMSFlightPlanEntry/\">XPLMSetDirectToFMSFlightPlanEntry</a>(\n                         <a href=\"/sdk/XPLMNavFlightPlan/\">XPLMNavFlightPlan</a>    inFlightPlan,\n                         int                  inIndex);\n</code></pre><p>This routine changes which entry the FMS is flying the aircraft toward. The track is from the current position of the aircraft directly to the n'th point, ignoring the point before it.</p></div><div class=\"function XPLM410\"><h3 class=\"sdk-api-function\" id=\"XPLMGetFMSFlightPlanEntryInfo\"><a href=\"/sdk/XPLMGetFMSFlightPlanEntryInfo/\">XPLMGetFMSFlightPlanEntryInfo</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API void       <a href=\"/sdk/XPLMGetFMSFlightPlanEntryInfo/\">XPLMGetFMSFlightPlanEntryInfo</a>(\n                         <a href=\"/sdk/XPLMNavFlightPlan/\">XPLMNavFlightPlan</a>    inFlightPlan,\n                         int                  inIndex,\n                         <a href=\"/sdk/XPLMNavType/\">XPLMNavType</a> *        outType,    /* Can be NULL */\n                         char *               outID,    /* Can be NULL */\n                         <a href=\"/sdk/XPLMNavRef/\">XPLMNavRef</a> *         outRef,    /* Can be NULL */\n                         int *                outAltitude,    /* Can be NULL */\n                         float *              outLat,    /* Can be NULL */\n                         float *              outLon);    /* Can be NULL */\n</code></pre><p>This routine returns information about a given FMS entry. If the entry is an airport or navaid, a reference to a nav entry can be returned allowing you to find additional information (such as a frequency, ILS heading, name, etc.). Note that this reference can be<a href=\"/sdk/XPLM_NAV_NOT_FOUND/\">XPLM_NAV_NOT_FOUND</a>until the information has been looked up asynchronously, so after flightplan changes, it might take up to a second for this field to become populated. The other information is available immediately. For a lat/lon entry, the lat/lon is returned by this routine but the navaid cannot be looked up (and the reference will be<a href=\"/sdk/XPLM_NAV_NOT_FOUND/\">XPLM_NAV_NOT_FOUND</a>). FMS name entry buffers should be at least 256 chars in length.</p><p>WARNING: Due to a bug in X-Plane prior to 11.31, the navaid reference will not be set to<a href=\"/sdk/XPLM_NAV_NOT_FOUND/\">XPLM_NAV_NOT_FOUND</a>while no data is available, and instead just remain the value of the variable that you passed the pointer to. Therefore, always initialize the variable to<a href=\"/sdk/XPLM_NAV_NOT_FOUND/\">XPLM_NAV_NOT_FOUND</a>before passing the pointer to this function.</p></div><div class=\"function XPLM410\"><h3 class=\"sdk-api-function\" id=\"XPLMSetFMSFlightPlanEntryInfo\"><a href=\"/sdk/XPLMSetFMSFlightPlanEntryInfo/\">XPLMSetFMSFlightPlanEntryInfo</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API void       <a href=\"/sdk/XPLMSetFMSFlightPlanEntryInfo/\">XPLMSetFMSFlightPlanEntryInfo</a>(\n                         <a href=\"/sdk/XPLMNavFlightPlan/\">XPLMNavFlightPlan</a>    inFlightPlan,\n                         int                  inIndex,\n                         <a href=\"/sdk/XPLMNavRef/\">XPLMNavRef</a>           inRef,\n                         int                  inAltitude);\n</code></pre><p>This routine changes an entry in the FMS to have the destination navaid passed in and the altitude specified. Use this only for airports, fixes, and radio-beacon navaids. Currently of radio beacons, the FMS can only support VORs, NDBs and TACANs. Use the routines below to clear or fly to a lat/lon.</p></div><div class=\"function XPLM410\"><h3 class=\"sdk-api-function\" id=\"XPLMSetFMSFlightPlanEntryLatLon\"><a href=\"/sdk/XPLMSetFMSFlightPlanEntryLatLon/\">XPLMSetFMSFlightPlanEntryLatLon</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API void       <a href=\"/sdk/XPLMSetFMSFlightPlanEntryLatLon/\">XPLMSetFMSFlightPlanEntryLatLon</a>(\n                         <a href=\"/sdk/XPLMNavFlightPlan/\">XPLMNavFlightPlan</a>    inFlightPlan,\n                         int                  inIndex,\n                         float                inLat,\n                         float                inLon,\n                         int                  inAltitude);\n</code></pre><p>This routine changes the entry in the FMS to a lat/lon entry with the given coordinates.</p></div><div class=\"function XPLM410\"><h3 class=\"sdk-api-function\" id=\"XPLMSetFMSFlightPlanEntryLatLonWithId\"><a href=\"/sdk/XPLMSetFMSFlightPlanEntryLatLonWithId/\">XPLMSetFMSFlightPlanEntryLatLonWithId</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API void       <a href=\"/sdk/XPLMSetFMSFlightPlanEntryLatLonWithId/\">XPLMSetFMSFlightPlanEntryLatLonWithId</a>(\n                         <a href=\"/sdk/XPLMNavFlightPlan/\">XPLMNavFlightPlan</a>    inFlightPlan,\n                         int                  inIndex,\n                         float                inLat,\n                         float                inLon,\n                         int                  inAltitude,\n                         const char*          inId,\n                         unsigned int         inIdLength);\n</code></pre><p>This routine changes the entry in the FMS to a lat/lon entry with the given coordinates. You can specify the display ID of the waypoint.</p></div><div class=\"function XPLM410\"><h3 class=\"sdk-api-function\" id=\"XPLMClearFMSFlightPlanEntry\"><a href=\"/sdk/XPLMClearFMSFlightPlanEntry/\">XPLMClearFMSFlightPlanEntry</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API void       <a href=\"/sdk/XPLMClearFMSFlightPlanEntry/\">XPLMClearFMSFlightPlanEntry</a>(\n                         <a href=\"/sdk/XPLMNavFlightPlan/\">XPLMNavFlightPlan</a>    inFlightPlan,\n                         int                  inIndex);\n</code></pre><p>This routine clears the given entry, potentially shortening the flight plan.</p></div><div class=\"function XPLM410\"><h3 class=\"sdk-api-function\" id=\"XPLMLoadFMSFlightPlan\"><a href=\"/sdk/XPLMLoadFMSFlightPlan/\">XPLMLoadFMSFlightPlan</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API void       <a href=\"/sdk/XPLMLoadFMSFlightPlan/\">XPLMLoadFMSFlightPlan</a>(\n                         int                  inDevice,\n                         const char *         inBuffer,\n                         unsigned int         inBufferLen);\n</code></pre><p>Loads an X-Plane 11 and later formatted flightplan from the buffer into the FMS or GPS, including instrument procedures. Use device index 0 for the pilot-side and device index 1 for the co-pilot side unit.</p></div><div class=\"function XPLM410\"><h3 class=\"sdk-api-function\" id=\"XPLMSaveFMSFlightPlan\"><a href=\"/sdk/XPLMSaveFMSFlightPlan/\">XPLMSaveFMSFlightPlan</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API unsigned int <a href=\"/sdk/XPLMSaveFMSFlightPlan/\">XPLMSaveFMSFlightPlan</a>(\n                         int                  inDevice,\n                         char *               inBuffer,\n                         unsigned int         inBufferLen);\n</code></pre><p>Saves an X-Plane 11 formatted flightplan from the FMS or GPS into a char buffer that you provide. Use device index 0 for the pilot-side and device index 1 for the co-pilot side unit. Provide the length of the buffer you allocated. X-Plane will write a null-terminated string if the full flight plan fits into the buffer. If your buffer is too small, X-Plane will write inBufferLen characters, and the resulting buffer is not null-terminated. The return value is the number of characters (including null terminator) that X-Plane needed to write the flightplan. If this number is larger than the buffer you provided, the flightplan in the buffer will be incomplete and the buffer not null-terminated.</p></div></div><div class=\"component\"><h2 id=\"GPS RECEIVER\">GPS RECEIVER</h2><p>These APIs let you read data from the GPS unit.</p><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPLMGetGPSDestinationType\"><a href=\"/sdk/XPLMGetGPSDestinationType/\">XPLMGetGPSDestinationType</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API <a href=\"/sdk/XPLMNavType/\">XPLMNavType</a> <a href=\"/sdk/XPLMGetGPSDestinationType/\">XPLMGetGPSDestinationType</a>(void);\n</code></pre><p>This routine returns the type of the currently selected GPS destination, one of fix, airport, VOR or NDB.</p></div><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPLMGetGPSDestination\"><a href=\"/sdk/XPLMGetGPSDestination/\">XPLMGetGPSDestination</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API <a href=\"/sdk/XPLMNavRef/\">XPLMNavRef</a> <a href=\"/sdk/XPLMGetGPSDestination/\">XPLMGetGPSDestination</a>(void);\n</code></pre><p>This routine returns the current GPS destination.</p></div></div></div></div></article>",
      "code_examples": [
        {
          "char_count": 59,
          "code": "XPLM_APIXPLMNavRefXPLMGetNextNavAid(XPLMNavRefinNavAidRef);",
          "context": "XPLMGetNextNavAid",
          "id": "example_3",
          "language": "c",
          "line_count": 1,
          "type": "snippet"
        },
        {
          "char_count": 63,
          "code": "XPLM_APIXPLMNavRefXPLMFindFirstNavAidOfType(XPLMNavTypeinType);",
          "context": "XPLMFindFirstNavAidOfType",
          "id": "example_4",
          "language": "c",
          "line_count": 1,
          "type": "snippet"
        },
        {
          "char_count": 62,
          "code": "XPLM_APIXPLMNavRefXPLMFindLastNavAidOfType(XPLMNavTypeinType);",
          "context": "XPLMFindLastNavAidOfType",
          "id": "example_5",
          "language": "c",
          "line_count": 1,
          "type": "snippet"
        },
        {
          "char_count": 444,
          "code": "XPLM_APIXPLMNavRefXPLMFindNavAid(\n                         const char *         inNameFragment,    /* Can be NULL */\n                         const char *         inIDFragment,    /* Can be NULL */\n                         float *              inLat,    /* Can be NULL */\n                         float *              inLon,    /* Can be NULL */\n                         int *                inFrequency,    /* Can be NULL */XPLMNavTypeinType);",
          "context": "XPLMFindNavAid",
          "id": "example_6",
          "language": "c",
          "line_count": 6,
          "type": "snippet"
        },
        {
          "char_count": 721,
          "code": "XPLM_API voidXPLMGetNavAidInfo(XPLMNavRefinRef,XPLMNavType*        outType,    /* Can be NULL */\n                         float *              outLatitude,    /* Can be NULL */\n                         float *              outLongitude,    /* Can be NULL */\n                         float *              outHeight,    /* Can be NULL */\n                         int *                outFrequency,    /* Can be NULL */\n                         float *              outHeading,    /* Can be NULL */\n                         char *               outID,    /* Can be NULL */\n                         char *               outName,    /* Can be NULL */\n                         char *               outReg);    /* Can be NULL */",
          "context": "XPLMGetNavAidInfo",
          "id": "example_7",
          "language": "c",
          "line_count": 9,
          "type": "snippet"
        },
        {
          "char_count": 94,
          "code": "XPLM_API voidXPLMSetDisplayedFMSEntry(\n                         int                  inIndex);",
          "context": "XPLMSetDisplayedFMSEntry",
          "id": "example_11",
          "language": "c",
          "line_count": 2,
          "type": "snippet"
        },
        {
          "char_count": 96,
          "code": "XPLM_API voidXPLMSetDestinationFMSEntry(\n                         int                  inIndex);",
          "context": "XPLMSetDestinationFMSEntry",
          "id": "example_12",
          "language": "c",
          "line_count": 2,
          "type": "snippet"
        },
        {
          "char_count": 490,
          "code": "XPLM_API voidXPLMGetFMSEntryInfo(\n                         int                  inIndex,XPLMNavType*        outType,    /* Can be NULL */\n                         char *               outID,    /* Can be NULL */XPLMNavRef*         outRef,    /* Can be NULL */\n                         int *                outAltitude,    /* Can be NULL */\n                         float *              outLat,    /* Can be NULL */\n                         float *              outLon);    /* Can be NULL */",
          "context": "XPLMGetFMSEntryInfo",
          "id": "example_13",
          "language": "c",
          "line_count": 6,
          "type": "snippet"
        },
        {
          "char_count": 163,
          "code": "XPLM_API voidXPLMSetFMSEntryInfo(\n                         int                  inIndex,XPLMNavRefinRef,\n                         int                  inAltitude);",
          "context": "XPLMSetFMSEntryInfo",
          "id": "example_14",
          "language": "c",
          "line_count": 3,
          "type": "snippet"
        },
        {
          "char_count": 255,
          "code": "XPLM_API voidXPLMSetFMSEntryLatLon(\n                         int                  inIndex,\n                         float                inLat,\n                         float                inLon,\n                         int                  inAltitude);",
          "context": "XPLMSetFMSEntryLatLon",
          "id": "example_15",
          "language": "c",
          "line_count": 5,
          "type": "snippet"
        },
        {
          "char_count": 87,
          "code": "XPLM_API voidXPLMClearFMSEntry(\n                         int                  inIndex);",
          "context": "XPLMClearFMSEntry",
          "id": "example_16",
          "language": "c",
          "line_count": 2,
          "type": "snippet"
        },
        {
          "char_count": 485,
          "code": "These enumerations defines the flightplan you are accesing using the FMSFlightPlan functions.\nAn airplane can have up to two navigation devices (GPS or FMS) and each device can have two flightplans.\nA GPS has an enroute and an approach flightplan.\nAn FMS has an active and a temporary flightplan.\nIf you are trying to access a flightplan that doesn't exist in your aircraft, e.g. asking a GPS for a temp flightplan, FMSFlighPlan functions have no effect and will return no information.",
          "context": "XPLMNavFlightPlan",
          "id": "example_17",
          "language": "c",
          "line_count": 5,
          "type": "snippet"
        },
        {
          "char_count": 73,
          "code": "XPLM_API intXPLMCountFMSFlightPlanEntries(XPLMNavFlightPlaninFlightPlan);",
          "context": "XPLMCountFMSFlightPlanEntries",
          "id": "example_18",
          "language": "c",
          "line_count": 1,
          "type": "snippet"
        },
        {
          "char_count": 78,
          "code": "XPLM_API intXPLMGetDisplayedFMSFlightPlanEntry(XPLMNavFlightPlaninFlightPlan);",
          "context": "XPLMGetDisplayedFMSFlightPlanEntry",
          "id": "example_19",
          "language": "cpp",
          "line_count": 1,
          "type": "snippet"
        },
        {
          "char_count": 80,
          "code": "XPLM_API intXPLMGetDestinationFMSFlightPlanEntry(XPLMNavFlightPlaninFlightPlan);",
          "context": "XPLMGetDestinationFMSFlightPlanEntry",
          "id": "example_20",
          "language": "cpp",
          "line_count": 1,
          "type": "snippet"
        },
        {
          "char_count": 134,
          "code": "XPLM_API voidXPLMSetDisplayedFMSFlightPlanEntry(XPLMNavFlightPlaninFlightPlan,\n                         int                  inIndex);",
          "context": "XPLMSetDisplayedFMSFlightPlanEntry",
          "id": "example_21",
          "language": "c",
          "line_count": 2,
          "type": "snippet"
        },
        {
          "char_count": 136,
          "code": "XPLM_API voidXPLMSetDestinationFMSFlightPlanEntry(XPLMNavFlightPlaninFlightPlan,\n                         int                  inIndex);",
          "context": "XPLMSetDestinationFMSFlightPlanEntry",
          "id": "example_22",
          "language": "c",
          "line_count": 2,
          "type": "snippet"
        },
        {
          "char_count": 133,
          "code": "XPLM_API voidXPLMSetDirectToFMSFlightPlanEntry(XPLMNavFlightPlaninFlightPlan,\n                         int                  inIndex);",
          "context": "XPLMSetDirectToFMSFlightPlanEntry",
          "id": "example_23",
          "language": "c",
          "line_count": 2,
          "type": "snippet"
        },
        {
          "char_count": 530,
          "code": "XPLM_API voidXPLMGetFMSFlightPlanEntryInfo(XPLMNavFlightPlaninFlightPlan,\n                         int                  inIndex,XPLMNavType*        outType,    /* Can be NULL */\n                         char *               outID,    /* Can be NULL */XPLMNavRef*         outRef,    /* Can be NULL */\n                         int *                outAltitude,    /* Can be NULL */\n                         float *              outLat,    /* Can be NULL */\n                         float *              outLon);    /* Can be NULL */",
          "context": "XPLMGetFMSFlightPlanEntryInfo",
          "id": "example_24",
          "language": "c",
          "line_count": 6,
          "type": "snippet"
        },
        {
          "char_count": 203,
          "code": "XPLM_API voidXPLMSetFMSFlightPlanEntryInfo(XPLMNavFlightPlaninFlightPlan,\n                         int                  inIndex,XPLMNavRefinRef,\n                         int                  inAltitude);",
          "context": "XPLMSetFMSFlightPlanEntryInfo",
          "id": "example_25",
          "language": "c",
          "line_count": 3,
          "type": "snippet"
        },
        {
          "char_count": 295,
          "code": "XPLM_API voidXPLMSetFMSFlightPlanEntryLatLon(XPLMNavFlightPlaninFlightPlan,\n                         int                  inIndex,\n                         float                inLat,\n                         float                inLon,\n                         int                  inAltitude);",
          "context": "XPLMSetFMSFlightPlanEntryLatLon",
          "id": "example_26",
          "language": "c",
          "line_count": 5,
          "type": "snippet"
        },
        {
          "char_count": 411,
          "code": "XPLM_API voidXPLMSetFMSFlightPlanEntryLatLonWithId(XPLMNavFlightPlaninFlightPlan,\n                         int                  inIndex,\n                         float                inLat,\n                         float                inLon,\n                         int                  inAltitude,\n                         const char*          inId,\n                         unsigned int         inIdLength);",
          "context": "XPLMSetFMSFlightPlanEntryLatLonWithId",
          "id": "example_27",
          "language": "c",
          "line_count": 7,
          "type": "snippet"
        },
        {
          "char_count": 127,
          "code": "XPLM_API voidXPLMClearFMSFlightPlanEntry(XPLMNavFlightPlaninFlightPlan,\n                         int                  inIndex);",
          "context": "XPLMClearFMSFlightPlanEntry",
          "id": "example_28",
          "language": "c",
          "line_count": 2,
          "type": "snippet"
        },
        {
          "char_count": 207,
          "code": "XPLM_API voidXPLMLoadFMSFlightPlan(\n                         int                  inDevice,\n                         const char *         inBuffer,\n                         unsigned int         inBufferLen);",
          "context": "XPLMLoadFMSFlightPlan",
          "id": "example_29",
          "language": "c",
          "line_count": 4,
          "type": "snippet"
        },
        {
          "char_count": 215,
          "code": "XPLM_API unsigned intXPLMSaveFMSFlightPlan(\n                         int                  inDevice,\n                         char *               inBuffer,\n                         unsigned int         inBufferLen);",
          "context": "XPLMSaveFMSFlightPlan",
          "id": "example_30",
          "language": "c",
          "line_count": 4,
          "type": "snippet"
        },
        {
          "char_count": 51,
          "code": "XPLM_APIXPLMNavTypeXPLMGetGPSDestinationType(void);",
          "context": "XPLMGetGPSDestinationType",
          "id": "example_31",
          "language": "c",
          "line_count": 1,
          "type": "snippet"
        }
      ],
      "cross_references": [],
      "markdown": "# [XPLMNavigation](/sdk/XPLMNavigation/)API\n\nThe XPLM Navigation APIs give you some access to the navigation databases inside\nX-Plane. X-Plane stores all navigation information in RAM, so by using these\nAPIs you can gain access to most information without having to go to disk or\nparse the files yourself.\n\nYou can also use this API to program the FMS. You must use the navigation APIs\nto find the nav-aids you want to program into the FMS, since the FMS is powered\ninternally by X-Plane’s navigation database.\n\n## NAVIGATION DATABASE ACCESS\n\n### [XPLMNavType](/sdk/XPLMNavType/)\n\nThese enumerations define the different types of navaids. They are each defined\nwith a separate bit so that they may be bit-wise added together to form sets of\nnav-aid types.\n\nNOTE:[xplm_Nav_LatLon](/sdk/xplm_Nav_LatLon/)is a specific lat-lon coordinate\nentered into the FMS. It will not exist in the database, and cannot be\nprogrammed into the FMS. Querying the FMS for navaids will return it.\nUse[XPLMSetFMSEntryLatLon](/sdk/XPLMSetFMSEntryLatLon/)to set a lat/lon\nwaypoint.\n\n| Name | Value | Description |\n| --- | --- | --- |\n| [xplm_Nav_Unknown](/sdk/xplm_Nav_Unknown/) | \"0\" |\n| [xplm_Nav_Airport](/sdk/xplm_Nav_Airport/) | \"1\" |\n| [xplm_Nav_NDB](/sdk/xplm_Nav_NDB/) | \"2\" |\n| [xplm_Nav_VOR](/sdk/xplm_Nav_VOR/) | \"4\" |\n| [xplm_Nav_ILS](/sdk/xplm_Nav_ILS/) | \"8\" |\n| [xplm_Nav_Localizer](/sdk/xplm_Nav_Localizer/) | \"16\" |\n| [xplm_Nav_GlideSlope](/sdk/xplm_Nav_GlideSlope/) | \"32\" |\n| [xplm_Nav_OuterMarker](/sdk/xplm_Nav_OuterMarker/) | \"64\" |\n| [xplm_Nav_MiddleMarker](/sdk/xplm_Nav_MiddleMarker/) | \"128\" |\n| [xplm_Nav_InnerMarker](/sdk/xplm_Nav_InnerMarker/) | \"256\" |\n| [xplm_Nav_Fix](/sdk/xplm_Nav_Fix/) | \"512\" |\n| [xplm_Nav_DME](/sdk/xplm_Nav_DME/) | \"1024\" |\n| [xplm_Nav_LatLon](/sdk/xplm_Nav_LatLon/) | \"2048\" |\n| [xplm_Nav_TACAN](/sdk/xplm_Nav_TACAN/) | \"4096\" |\n\n### [XPLMNavRef](/sdk/XPLMNavRef/)\n\n```cpp\ntypedef int XPLMNavRef;\n```\n\n[XPLMNavRef](/sdk/XPLMNavRef/)is an iterator into the navigation database. The\nnavigation database is essentially an array, but it is not necessarily densely\npopulated. The only assumption you can safely make is that like-typed nav-aids\nare grouped together.\n\nUse[XPLMNavRef](/sdk/XPLMNavRef/)to refer to a nav-aid.\n\n[XPLM_NAV_NOT_FOUND](/sdk/XPLM_NAV_NOT_FOUND/)is returned by functions that\nreturn an[XPLMNavRef](/sdk/XPLMNavRef/)when the iterator must be invalid.\n\n### [XPLM_NAV_NOT_FOUND](/sdk/XPLM_NAV_NOT_FOUND/)\n\n```cpp\n#define XPLM_NAV_NOT_FOUND   -1\n```\n\n### [XPLMGetFirstNavAid](/sdk/XPLMGetFirstNavAid/)\n\n```cpp\nXPLM_API XPLMNavRef XPLMGetFirstNavAid(void);\n\n```\n\nThis returns the very first navaid in the database. Use this to traverse the\nentire database. Returns[XPLM_NAV_NOT_FOUND](/sdk/XPLM_NAV_NOT_FOUND/)if the nav\ndatabase is empty.\n\n### [XPLMGetNextNavAid](/sdk/XPLMGetNextNavAid/)\n\n```cpp\nXPLM_API XPLMNavRef XPLMGetNextNavAid(\n                         XPLMNavRef           inNavAidRef);\n\n```\n\nGiven a valid navaid ref, this routine returns the next navaid. It\nreturns[XPLM_NAV_NOT_FOUND](/sdk/XPLM_NAV_NOT_FOUND/)if the navaid passed in was\ninvalid or if the navaid passed in was the last one in the database. Use this\nroutine to iterate across all like-typed navaids or the entire database.\n\n### [XPLMFindFirstNavAidOfType](/sdk/XPLMFindFirstNavAidOfType/)\n\n```cpp\nXPLM_API XPLMNavRef XPLMFindFirstNavAidOfType(\n                         XPLMNavType          inType);\n\n```\n\nThis routine returns the ref of the first navaid of the given type in the\ndatabase or[XPLM_NAV_NOT_FOUND](/sdk/XPLM_NAV_NOT_FOUND/)if there are no navaids\nof that type in the database. You must pass exactly one navaid type to this\nroutine.\n\n### [XPLMFindLastNavAidOfType](/sdk/XPLMFindLastNavAidOfType/)\n\n```cpp\nXPLM_API XPLMNavRef XPLMFindLastNavAidOfType(\n                         XPLMNavType          inType);\n\n```\n\nThis routine returns the ref of the last navaid of the given type in the\ndatabase or[XPLM_NAV_NOT_FOUND](/sdk/XPLM_NAV_NOT_FOUND/)if there are no navaids\nof that type in the database. You must pass exactly one navaid type to this\nroutine.\n\n### [XPLMFindNavAid](/sdk/XPLMFindNavAid/)\n\n```cpp\nXPLM_API XPLMNavRef XPLMFindNavAid(\n                         const char *         inNameFragment,    /* Can be NULL */\n                         const char *         inIDFragment,    /* Can be NULL */\n                         float *              inLat,    /* Can be NULL */\n                         float *              inLon,    /* Can be NULL */\n                         int *                inFrequency,    /* Can be NULL */\n                         XPLMNavType          inType);\n\n```\n\nThis routine provides a number of searching capabilities for the nav\ndatabase.[XPLMFindNavAid](/sdk/XPLMFindNavAid/)will search through every navaid\nwhose type is within inType (multiple types may be added together) and return\nany navaids found based on the following rules:\n\n- If inLat and inLon are not NULL, the navaid nearest to that lat/lon will be\n  returned, otherwise the last navaid found will be returned.\n- If inFrequency is not NULL, then any navaids considered must match this\n  frequency. Note that this will screen out radio beacons that do not have\n  frequency data published (like inner markers) but not fixes and airports.\n- If inNameFragment is not NULL, only navaids that contain the fragment in their\n  name will be returned.\n- If inIDFragment is not NULL, only navaids that contain the fragment in their IDs\n  will be returned.\n\nThis routine provides a simple way to do a number of useful searches: * Find the\nnearest navaid on this frequency. * Find the nearest airport. * Find the VOR\nwhose ID is “BOS”. * Find the nearest airport whose name contains “Chicago”.\n\n### [XPLMGetNavAidInfo](/sdk/XPLMGetNavAidInfo/)\n\n```cpp\nXPLM_API void       XPLMGetNavAidInfo(\n                         XPLMNavRef           inRef,\n                         XPLMNavType *        outType,    /* Can be NULL */\n                         float *              outLatitude,    /* Can be NULL */\n                         float *              outLongitude,    /* Can be NULL */\n                         float *              outHeight,    /* Can be NULL */\n                         int *                outFrequency,    /* Can be NULL */\n                         float *              outHeading,    /* Can be NULL */\n                         char *               outID,    /* Can be NULL */\n                         char *               outName,    /* Can be NULL */\n                         char *               outReg);    /* Can be NULL */\n\n```\n\nThis routine returns information about a navaid. Any non-null field is filled\nout with information if it is available.\n\nFrequencies are in the nav.dat convention as described in the X-Plane nav\ndatabase FAQ: NDB frequencies are exact, all others are multiplied by 100.\n\nThe buffer for IDs should be at least 6 chars and the buffer for names should be\nat least 41 chars, but since these values are likely to go up, I recommend\npassing at least 32 chars for IDs and 256 chars for names when possible.\n\nThe outReg parameter tells if the navaid is within the local “region” of loaded\nDSFs. (This information may not be particularly useful to plugins.) The\nparameter is a single byte value 1 for true or 0 for false, not a C string.\n\n## FLIGHT MANAGEMENT COMPUTER\n\nNote: the FMS works based on an array of entries. Indices into the array are\nzero-based. Each entry is a navaid plus an altitude. The FMS tracks the\ncurrently displayed entry and the entry that it is flying to.\n\nThe FMS must be programmed with contiguous entries, so clearing an entry at the\nend shortens the effective flight plan. There is a max of 100 waypoints in the\nflight plan.\n\n### [XPLMCountFMSEntries](/sdk/XPLMCountFMSEntries/)\n\n```cpp\nXPLM_API int        XPLMCountFMSEntries(void);\n\n```\n\nThis routine returns the number of entries in the FMS.\n\n### [XPLMGetDisplayedFMSEntry](/sdk/XPLMGetDisplayedFMSEntry/)\n\n```cpp\nXPLM_API int        XPLMGetDisplayedFMSEntry(void);\n\n```\n\nThis routine returns the index of the entry the pilot is viewing.\n\n### [XPLMGetDestinationFMSEntry](/sdk/XPLMGetDestinationFMSEntry/)\n\n```cpp\nXPLM_API int        XPLMGetDestinationFMSEntry(void);\n\n```\n\nThis routine returns the index of the entry the FMS is flying to.\n\n### [XPLMSetDisplayedFMSEntry](/sdk/XPLMSetDisplayedFMSEntry/)\n\n```cpp\nXPLM_API void       XPLMSetDisplayedFMSEntry(\n                         int                  inIndex);\n\n```\n\nThis routine changes which entry the FMS is showing to the index specified.\n\n### [XPLMSetDestinationFMSEntry](/sdk/XPLMSetDestinationFMSEntry/)\n\n```cpp\nXPLM_API void       XPLMSetDestinationFMSEntry(\n                         int                  inIndex);\n\n```\n\nThis routine changes which entry the FMS is flying the aircraft toward. The\ntrack is from the n-1'th point to the n'th point.\n\n### [XPLMGetFMSEntryInfo](/sdk/XPLMGetFMSEntryInfo/)\n\n```cpp\nXPLM_API void       XPLMGetFMSEntryInfo(\n                         int                  inIndex,\n                         XPLMNavType *        outType,    /* Can be NULL */\n                         char *               outID,    /* Can be NULL */\n                         XPLMNavRef *         outRef,    /* Can be NULL */\n                         int *                outAltitude,    /* Can be NULL */\n                         float *              outLat,    /* Can be NULL */\n                         float *              outLon);    /* Can be NULL */\n\n```\n\nThis routine returns information about a given FMS entry. If the entry is an\nairport or navaid, a reference to a nav entry can be returned allowing you to\nfind additional information (such as a frequency, ILS heading, name, etc.). Note\nthat this reference can be[XPLM_NAV_NOT_FOUND](/sdk/XPLM_NAV_NOT_FOUND/)until\nthe information has been looked up asynchronously, so after flightplan changes,\nit might take up to a second for this field to become populated. The other\ninformation is available immediately. For a lat/lon entry, the lat/lon is\nreturned by this routine but the navaid cannot be looked up (and the reference\nwill be[XPLM_NAV_NOT_FOUND](/sdk/XPLM_NAV_NOT_FOUND/)). FMS name entry buffers\nshould be at least 256 chars in length.\n\nWARNING: Due to a bug in X-Plane prior to 11.31, the navaid reference will not\nbe set to[XPLM_NAV_NOT_FOUND](/sdk/XPLM_NAV_NOT_FOUND/)while no data is\navailable, and instead just remain the value of the variable that you passed the\npointer to. Therefore, always initialize the variable\nto[XPLM_NAV_NOT_FOUND](/sdk/XPLM_NAV_NOT_FOUND/)before passing the pointer to\nthis function.\n\n### [XPLMSetFMSEntryInfo](/sdk/XPLMSetFMSEntryInfo/)\n\n```cpp\nXPLM_API void       XPLMSetFMSEntryInfo(\n                         int                  inIndex,\n                         XPLMNavRef           inRef,\n                         int                  inAltitude);\n\n```\n\nThis routine changes an entry in the FMS to have the destination navaid passed\nin and the altitude specified. Use this only for airports, fixes, and\nradio-beacon navaids. Currently of radio beacons, the FMS can only support VORs\nand NDBs. Use the routines below to clear or fly to a lat/lon.\n\n### [XPLMSetFMSEntryLatLon](/sdk/XPLMSetFMSEntryLatLon/)\n\n```cpp\nXPLM_API void       XPLMSetFMSEntryLatLon(\n                         int                  inIndex,\n                         float                inLat,\n                         float                inLon,\n                         int                  inAltitude);\n\n```\n\nThis routine changes the entry in the FMS to a lat/lon entry with the given\ncoordinates.\n\n### [XPLMClearFMSEntry](/sdk/XPLMClearFMSEntry/)\n\n```cpp\nXPLM_API void       XPLMClearFMSEntry(\n                         int                  inIndex);\n\n```\n\nThis routine clears the given entry, potentially shortening the flight plan.\n\n### [XPLMNavFlightPlan](/sdk/XPLMNavFlightPlan/)\n\n```cpp\nThese enumerations defines the flightplan you are accesing using the FMSFlightPlan functions.\nAn airplane can have up to two navigation devices (GPS or FMS) and each device can have two flightplans.\nA GPS has an enroute and an approach flightplan.\nAn FMS has an active and a temporary flightplan.\nIf you are trying to access a flightplan that doesn't exist in your aircraft, e.g. asking a GPS for a temp flightplan, FMSFlighPlan functions have no effect and will return no information.\n\n```\n\n| Name | Value | Description |\n| --- | --- | --- |\n| [xplm_Fpl_Pilot_Primary](/sdk/xplm_Fpl_Pilot_Primary/) | \"0\" |\n| [xplm_Fpl_CoPilot_Primary](/sdk/xplm_Fpl_CoPilot_Primary/) | \"1\" |\n| [xplm_Fpl_Pilot_Approach](/sdk/xplm_Fpl_Pilot_Approach/) | \"2\" |\n| [xplm_Fpl_CoPilot_Approach](/sdk/xplm_Fpl_CoPilot_Approach/) | \"3\" |\n| [xplm_Fpl_Pilot_Temporary](/sdk/xplm_Fpl_Pilot_Temporary/) | \"4\" |\n| [xplm_Fpl_CoPilot_Temporary](/sdk/xplm_Fpl_CoPilot_Temporary/) | \"5\" |\n\n### [XPLMCountFMSFlightPlanEntries](/sdk/XPLMCountFMSFlightPlanEntries/)\n\n```cpp\nXPLM_API int        XPLMCountFMSFlightPlanEntries(\n                         XPLMNavFlightPlan    inFlightPlan);\n\n```\n\nThis routine returns the number of entries in the FMS.\n\n### [XPLMGetDisplayedFMSFlightPlanEntry](/sdk/XPLMGetDisplayedFMSFlightPlanEntry/)\n\n```cpp\nXPLM_API int        XPLMGetDisplayedFMSFlightPlanEntry(\n                         XPLMNavFlightPlan    inFlightPlan);\n\n```\n\nThis routine returns the index of the entry the pilot is viewing.\n\n### [XPLMGetDestinationFMSFlightPlanEntry](/sdk/XPLMGetDestinationFMSFlightPlanEntry/)\n\n```cpp\nXPLM_API int        XPLMGetDestinationFMSFlightPlanEntry(\n                         XPLMNavFlightPlan    inFlightPlan);\n\n```\n\nThis routine returns the index of the entry the FMS is flying to.\n\n### [XPLMSetDisplayedFMSFlightPlanEntry](/sdk/XPLMSetDisplayedFMSFlightPlanEntry/)\n\n```cpp\nXPLM_API void       XPLMSetDisplayedFMSFlightPlanEntry(\n                         XPLMNavFlightPlan    inFlightPlan,\n                         int                  inIndex);\n\n```\n\nThis routine changes which entry the FMS is showing to the index specified.\n\n### [XPLMSetDestinationFMSFlightPlanEntry](/sdk/XPLMSetDestinationFMSFlightPlanEntry/)\n\n```cpp\nXPLM_API void       XPLMSetDestinationFMSFlightPlanEntry(\n                         XPLMNavFlightPlan    inFlightPlan,\n                         int                  inIndex);\n\n```\n\nThis routine changes which entry the FMS is flying the aircraft toward. The\ntrack is from the n-1'th point to the n'th point.\n\n### [XPLMSetDirectToFMSFlightPlanEntry](/sdk/XPLMSetDirectToFMSFlightPlanEntry/)\n\n```cpp\nXPLM_API void       XPLMSetDirectToFMSFlightPlanEntry(\n                         XPLMNavFlightPlan    inFlightPlan,\n                         int                  inIndex);\n\n```\n\nThis routine changes which entry the FMS is flying the aircraft toward. The\ntrack is from the current position of the aircraft directly to the n'th point,\nignoring the point before it.\n\n### [XPLMGetFMSFlightPlanEntryInfo](/sdk/XPLMGetFMSFlightPlanEntryInfo/)\n\n```cpp\nXPLM_API void       XPLMGetFMSFlightPlanEntryInfo(\n                         XPLMNavFlightPlan    inFlightPlan,\n                         int                  inIndex,\n                         XPLMNavType *        outType,    /* Can be NULL */\n                         char *               outID,    /* Can be NULL */\n                         XPLMNavRef *         outRef,    /* Can be NULL */\n                         int *                outAltitude,    /* Can be NULL */\n                         float *              outLat,    /* Can be NULL */\n                         float *              outLon);    /* Can be NULL */\n\n```\n\nThis routine returns information about a given FMS entry. If the entry is an\nairport or navaid, a reference to a nav entry can be returned allowing you to\nfind additional information (such as a frequency, ILS heading, name, etc.). Note\nthat this reference can be[XPLM_NAV_NOT_FOUND](/sdk/XPLM_NAV_NOT_FOUND/)until\nthe information has been looked up asynchronously, so after flightplan changes,\nit might take up to a second for this field to become populated. The other\ninformation is available immediately. For a lat/lon entry, the lat/lon is\nreturned by this routine but the navaid cannot be looked up (and the reference\nwill be[XPLM_NAV_NOT_FOUND](/sdk/XPLM_NAV_NOT_FOUND/)). FMS name entry buffers\nshould be at least 256 chars in length.\n\nWARNING: Due to a bug in X-Plane prior to 11.31, the navaid reference will not\nbe set to[XPLM_NAV_NOT_FOUND](/sdk/XPLM_NAV_NOT_FOUND/)while no data is\navailable, and instead just remain the value of the variable that you passed the\npointer to. Therefore, always initialize the variable\nto[XPLM_NAV_NOT_FOUND](/sdk/XPLM_NAV_NOT_FOUND/)before passing the pointer to\nthis function.\n\n### [XPLMSetFMSFlightPlanEntryInfo](/sdk/XPLMSetFMSFlightPlanEntryInfo/)\n\n```cpp\nXPLM_API void       XPLMSetFMSFlightPlanEntryInfo(\n                         XPLMNavFlightPlan    inFlightPlan,\n                         int                  inIndex,\n                         XPLMNavRef           inRef,\n                         int                  inAltitude);\n\n```\n\nThis routine changes an entry in the FMS to have the destination navaid passed\nin and the altitude specified. Use this only for airports, fixes, and\nradio-beacon navaids. Currently of radio beacons, the FMS can only support VORs,\nNDBs and TACANs. Use the routines below to clear or fly to a lat/lon.\n\n### [XPLMSetFMSFlightPlanEntryLatLon](/sdk/XPLMSetFMSFlightPlanEntryLatLon/)\n\n```cpp\nXPLM_API void       XPLMSetFMSFlightPlanEntryLatLon(\n                         XPLMNavFlightPlan    inFlightPlan,\n                         int                  inIndex,\n                         float                inLat,\n                         float                inLon,\n                         int                  inAltitude);\n\n```\n\nThis routine changes the entry in the FMS to a lat/lon entry with the given\ncoordinates.\n\n### [XPLMSetFMSFlightPlanEntryLatLonWithId](/sdk/XPLMSetFMSFlightPlanEntryLatLonWithId/)\n\n```cpp\nXPLM_API void       XPLMSetFMSFlightPlanEntryLatLonWithId(\n                         XPLMNavFlightPlan    inFlightPlan,\n                         int                  inIndex,\n                         float                inLat,\n                         float                inLon,\n                         int                  inAltitude,\n                         const char*          inId,\n                         unsigned int         inIdLength);\n\n```\n\nThis routine changes the entry in the FMS to a lat/lon entry with the given\ncoordinates. You can specify the display ID of the waypoint.\n\n### [XPLMClearFMSFlightPlanEntry](/sdk/XPLMClearFMSFlightPlanEntry/)\n\n```cpp\nXPLM_API void       XPLMClearFMSFlightPlanEntry(\n                         XPLMNavFlightPlan    inFlightPlan,\n                         int                  inIndex);\n\n```\n\nThis routine clears the given entry, potentially shortening the flight plan.\n\n### [XPLMLoadFMSFlightPlan](/sdk/XPLMLoadFMSFlightPlan/)\n\n```cpp\nXPLM_API void       XPLMLoadFMSFlightPlan(\n                         int                  inDevice,\n                         const char *         inBuffer,\n                         unsigned int         inBufferLen);\n\n```\n\nLoads an X-Plane 11 and later formatted flightplan from the buffer into the FMS\nor GPS, including instrument procedures. Use device index 0 for the pilot-side\nand device index 1 for the co-pilot side unit.\n\n### [XPLMSaveFMSFlightPlan](/sdk/XPLMSaveFMSFlightPlan/)\n\n```cpp\nXPLM_API unsigned int XPLMSaveFMSFlightPlan(\n                         int                  inDevice,\n                         char *               inBuffer,\n                         unsigned int         inBufferLen);\n\n```\n\nSaves an X-Plane 11 formatted flightplan from the FMS or GPS into a char buffer\nthat you provide. Use device index 0 for the pilot-side and device index 1 for\nthe co-pilot side unit. Provide the length of the buffer you allocated. X-Plane\nwill write a null-terminated string if the full flight plan fits into the\nbuffer. If your buffer is too small, X-Plane will write inBufferLen characters,\nand the resulting buffer is not null-terminated. The return value is the number\nof characters (including null terminator) that X-Plane needed to write the\nflightplan. If this number is larger than the buffer you provided, the\nflightplan in the buffer will be incomplete and the buffer not null-terminated.\n\n## GPS RECEIVER\n\nThese APIs let you read data from the GPS unit.\n\n### [XPLMGetGPSDestinationType](/sdk/XPLMGetGPSDestinationType/)\n\n```cpp\nXPLM_API XPLMNavType XPLMGetGPSDestinationType(void);\n\n```\n\nThis routine returns the type of the currently selected GPS destination, one of\nfix, airport, VOR or NDB.\n\n### [XPLMGetGPSDestination](/sdk/XPLMGetGPSDestination/)\n\n```cpp\nXPLM_API XPLMNavRef XPLMGetGPSDestination(void);\n\n```\n\nThis routine returns the current GPS destination.",
      "own_functions": [
        "XPLMGetFirstNavAid",
        "XPLMGetNextNavAid",
        "XPLMFindFirstNavAidOfType",
        "XPLMFindLastNavAidOfType",
        "XPLMFindNavAid",
        "XPLMGetNavAidInfo",
        "XPLMCountFMSEntries",
        "XPLMGetDisplayedFMSEntry",
        "XPLMGetDestinationFMSEntry",
        "XPLMSetDisplayedFMSEntry",
        "XPLMSetDestinationFMSEntry",
        "XPLMGetFMSEntryInfo",
        "XPLMSetFMSEntryInfo",
        "XPLMSetFMSEntryLatLon",
        "XPLMClearFMSEntry",
        "XPLMCountFMSFlightPlanEntries",
        "XPLMGetDisplayedFMSFlightPlanEntry",
        "XPLMGetDestinationFMSFlightPlanEntry",
        "XPLMSetDisplayedFMSFlightPlanEntry",
        "XPLMSetDestinationFMSFlightPlanEntry",
        "XPLMSetDirectToFMSFlightPlanEntry",
        "XPLMGetFMSFlightPlanEntryInfo",
        "XPLMSetFMSFlightPlanEntryInfo",
        "XPLMSetFMSFlightPlanEntryLatLon",
        "XPLMSetFMSFlightPlanEntryLatLonWithId",
        "XPLMClearFMSFlightPlanEntry",
        "XPLMLoadFMSFlightPlan",
        "XPLMSaveFMSFlightPlan",
        "XPLMGetGPSDestinationType",
        "XPLMGetGPSDestination",
        "XPLMNavType",
        "XPLMNavFlightPlan",
        "voidXPLMGetNavAidInfo",
        "intXPLMCountFMSEntries",
        "intXPLMGetDisplayedFMSEntry",
        "intXPLMGetDestinationFMSEntry",
        "voidXPLMSetDisplayedFMSEntry",
        "voidXPLMSetDestinationFMSEntry",
        "voidXPLMGetFMSEntryInfo",
        "voidXPLMSetFMSEntryInfo",
        "voidXPLMSetFMSEntryLatLon",
        "voidXPLMClearFMSEntry",
        "intXPLMCountFMSFlightPlanEntries",
        "intXPLMGetDisplayedFMSFlightPlanEntry",
        "intXPLMGetDestinationFMSFlightPlanEntry",
        "voidXPLMSetDisplayedFMSFlightPlanEntry",
        "voidXPLMSetDestinationFMSFlightPlanEntry",
        "voidXPLMSetDirectToFMSFlightPlanEntry",
        "voidXPLMGetFMSFlightPlanEntryInfo",
        "voidXPLMSetFMSFlightPlanEntryInfo",
        "voidXPLMSetFMSFlightPlanEntryLatLon",
        "voidXPLMSetFMSFlightPlanEntryLatLonWithId",
        "voidXPLMClearFMSFlightPlanEntry",
        "voidXPLMLoadFMSFlightPlan",
        "intXPLMSaveFMSFlightPlan",
        "unsigned"
      ],
      "processing_timestamp": "2025-06-25T20:39:24.066034+00:00",
      "title": "XPLMNavigation | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMNavigation/"
    },
    "https://developer.x-plane.com/sdk/XPLMObjectLoaded_f/": {
      "api_signatures": [],
      "category": {
        "category": "XPLM_Instance",
        "module": "Xplm Instance",
        "url": "https://developer.x-plane.com/sdk/XPLMObjectLoaded_f/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"callback XPLM210\"><h3 class=\"sdk-api-callback\" id=\"XPLMObjectLoaded_f\"><a href=\"/sdk/XPLMObjectLoaded_f/\">XPLMObjectLoaded_f</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>typedef void (* <a href=\"/sdk/XPLMObjectLoaded_f/\">XPLMObjectLoaded_f</a>)(\n                         <a href=\"/sdk/XPLMObjectRef/\">XPLMObjectRef</a>        inObject,\n                         void *               inRefcon);\n</code></pre><p>You provide this callback when loading an object asynchronously; it will be called once the object is loaded. Your refcon is passed back. The object ref passed in is the newly loaded object (ready for use) or NULL if an error occured.</p><p>If your plugin is disabled, this callback will be delivered as soon as the plugin is re-enabled. If your plugin is unloaded before this callback is ever called, the SDK will release the object handle for you.</p></div></div></article>",
      "code_examples": [
        {
          "char_count": 114,
          "code": "typedef void (*XPLMObjectLoaded_f)(XPLMObjectRefinObject,\n                         void *               inRefcon);",
          "context": "XPLMObjectLoaded_f",
          "id": "example_0",
          "language": "c",
          "line_count": 2,
          "type": "snippet"
        }
      ],
      "cross_references": [],
      "markdown": "### [XPLMObjectLoaded_f](/sdk/XPLMObjectLoaded_f/)\n\n```cpp\ntypedef void (* XPLMObjectLoaded_f)(\n                         XPLMObjectRef        inObject,\n                         void *               inRefcon);\n\n```\n\nYou provide this callback when loading an object asynchronously; it will be\ncalled once the object is loaded. Your refcon is passed back. The object ref\npassed in is the newly loaded object (ready for use) or NULL if an error\noccured.\n\nIf your plugin is disabled, this callback will be delivered as soon as the\nplugin is re-enabled. If your plugin is unloaded before this callback is ever\ncalled, the SDK will release the object handle for you.",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:23.747410+00:00",
      "title": "XPLMObjectLoaded_f | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMObjectLoaded_f/"
    },
    "https://developer.x-plane.com/sdk/XPLMObjectRef/": {
      "api_signatures": [],
      "category": {
        "category": "XPLM_Instance",
        "module": "Xplm Instance",
        "url": "https://developer.x-plane.com/sdk/XPLMObjectRef/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"typedef XPLM200\"><h3 class=\"sdk-api-type\" id=\"XPLMObjectRef\"><a href=\"/sdk/XPLMObjectRef/\">XPLMObjectRef</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>typedef void * <a href=\"/sdk/XPLMObjectRef/\">XPLMObjectRef</a>;</code></pre><p>An<a href=\"/sdk/XPLMObjectRef/\">XPLMObjectRef</a>is a opaque handle to an .obj file that has been loaded into memory.</p></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "### [XPLMObjectRef](/sdk/XPLMObjectRef/)\n\n```cpp\ntypedef void * XPLMObjectRef;\n```\n\nAn[XPLMObjectRef](/sdk/XPLMObjectRef/)is a opaque handle to an .obj file that\nhas been loaded into memory.",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:23.753412+00:00",
      "title": "XPLMObjectRef | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMObjectRef/"
    },
    "https://developer.x-plane.com/sdk/XPLMPCMComplete_f/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/XPLMPCMComplete_f/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"callback\"><h3 class=\"sdk-api-callback\" id=\"XPLMPCMComplete_f\"><a href=\"/sdk/XPLMPCMComplete_f/\">XPLMPCMComplete_f</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>typedef void (* <a href=\"/sdk/XPLMPCMComplete_f/\">XPLMPCMComplete_f</a>)(\n                         void *               inRefcon,\n                         FMOD_RESULT          status);\n</code></pre><p>If you use<a href=\"/sdk/XPLMPlayPCMOnBus/\">XPLMPlayPCMOnBus</a>() you may use this optional callback to find out when the FMOD::Channel is complete, if you need to deallocate memory for example.</p></div></div></article>",
      "code_examples": [
        {
          "char_count": 145,
          "code": "typedef void (*XPLMPCMComplete_f)(\n                         void *               inRefcon,\n                         FMOD_RESULT          status);",
          "context": "XPLMPCMComplete_f",
          "id": "example_0",
          "language": "c",
          "line_count": 3,
          "type": "snippet"
        }
      ],
      "cross_references": [
        "XPLMPlayPCMOnBus"
      ],
      "markdown": "### [XPLMPCMComplete_f](/sdk/XPLMPCMComplete_f/)\n\n```cpp\ntypedef void (* XPLMPCMComplete_f)(\n                         void *               inRefcon,\n                         FMOD_RESULT          status);\n\n```\n\nIf you use[XPLMPlayPCMOnBus](/sdk/XPLMPlayPCMOnBus/)() you may use this optional\ncallback to find out when the FMOD::Channel is complete, if you need to\ndeallocate memory for example.",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.387883+00:00",
      "title": "XPLMPCMComplete_f | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMPCMComplete_f/"
    },
    "https://developer.x-plane.com/sdk/XPLMPlaceUserAtAirport/": {
      "api_signatures": [
        {
          "description": "This routine places the user at a given airport. Specify the airport by its X-Plane airport ID (e.g. ‘KBOS’).",
          "name": "XPLMPlaceUserAtAirport",
          "parameters": [
            {
              "full_declaration": "const char *         inAirportCode",
              "name": "inAirportCode",
              "type": "const char *"
            }
          ],
          "signature": "XPLM_API voidXPLMPlaceUserAtAirport(\n                         const char *         inAirportCode);"
        },
        {
          "name": "voidXPLMPlaceUserAtAirport",
          "signature": "XPLM_API voidXPLMPlaceUserAtAirport(\n                         const char *         inAirportCode);",
          "source": "code_block_extraction",
          "type": "function"
        }
      ],
      "category": {
        "category": "XPLM_Navigation",
        "module": "Xplm Navigation",
        "url": "https://developer.x-plane.com/sdk/XPLMPlaceUserAtAirport/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPLMPlaceUserAtAirport\"><a href=\"/sdk/XPLMPlaceUserAtAirport/\">XPLMPlaceUserAtAirport</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API void       <a href=\"/sdk/XPLMPlaceUserAtAirport/\">XPLMPlaceUserAtAirport</a>(\n                         const char *         inAirportCode);\n</code></pre><p>This routine places the user at a given airport. Specify the airport by its X-Plane airport ID (e.g. ‘KBOS’).</p></div></div></article>",
      "code_examples": [
        {
          "char_count": 98,
          "code": "XPLM_API voidXPLMPlaceUserAtAirport(\n                         const char *         inAirportCode);",
          "context": "XPLMPlaceUserAtAirport",
          "id": "example_0",
          "language": "c",
          "line_count": 2,
          "type": "snippet"
        }
      ],
      "cross_references": [],
      "markdown": "### [XPLMPlaceUserAtAirport](/sdk/XPLMPlaceUserAtAirport/)\n\n```cpp\nXPLM_API void       XPLMPlaceUserAtAirport(\n                         const char *         inAirportCode);\n\n```\n\nThis routine places the user at a given airport. Specify the airport by its\nX-Plane airport ID (e.g. ‘KBOS’).",
      "own_functions": [
        "XPLMPlaceUserAtAirport",
        "voidXPLMPlaceUserAtAirport"
      ],
      "processing_timestamp": "2025-06-25T20:39:24.014314+00:00",
      "title": "XPLMPlaceUserAtAirport | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMPlaceUserAtAirport/"
    },
    "https://developer.x-plane.com/sdk/XPLMPlaceUserAtLocation/": {
      "api_signatures": [
        {
          "description": "Places the user at a specific location after performing any necessary scenery loads.",
          "name": "XPLMPlaceUserAtLocation",
          "parameters": [
            {
              "full_declaration": "double               latitudeDegrees",
              "name": "latitudeDegrees",
              "type": "double"
            },
            {
              "full_declaration": "double               longitudeDegrees",
              "name": "longitudeDegrees",
              "type": "double"
            },
            {
              "full_declaration": "float                elevationMetersMSL",
              "name": "elevationMetersMSL",
              "type": "float"
            },
            {
              "full_declaration": "float                headingDegreesTrue",
              "name": "headingDegreesTrue",
              "type": "float"
            },
            {
              "full_declaration": "float                speedMetersPerSecond",
              "name": "speedMetersPerSecond",
              "type": "float"
            }
          ],
          "signature": "XPLM_API voidXPLMPlaceUserAtLocation(\n                         double               latitudeDegrees,\n                         double               longitudeDegrees,\n                         float                elevationMetersMSL,\n                         float                headingDegreesTrue,\n                         float                speedMetersPerSecond);"
        },
        {
          "name": "voidXPLMPlaceUserAtLocation",
          "signature": "XPLM_API voidXPLMPlaceUserAtLocation(\n                         double               latitudeDegrees,\n                         double               longitudeDegrees,\n                         float                elevationMetersMSL,\n                         float                headingDegreesTrue,\n                         float                speedMetersPerSecond);",
          "source": "code_block_extraction",
          "type": "function"
        }
      ],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/XPLMPlaceUserAtLocation/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"function XPLM300\"><h3 class=\"sdk-api-function\" id=\"XPLMPlaceUserAtLocation\"><a href=\"/sdk/XPLMPlaceUserAtLocation/\">XPLMPlaceUserAtLocation</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API void       <a href=\"/sdk/XPLMPlaceUserAtLocation/\">XPLMPlaceUserAtLocation</a>(\n                         double               latitudeDegrees,\n                         double               longitudeDegrees,\n                         float                elevationMetersMSL,\n                         float                headingDegreesTrue,\n                         float                speedMetersPerSecond);\n</code></pre><p>Places the user at a specific location after performing any necessary scenery loads.</p><p>As with in-air starts initiated from the X-Plane user interface, the aircraft will always start with its engines running, regardless of the user’s preferences (i.e., regardless of what the dataref<code>sim/operation/prefs/startup_running</code>says).</p></div></div></article>",
      "code_examples": [
        {
          "char_count": 365,
          "code": "XPLM_API voidXPLMPlaceUserAtLocation(\n                         double               latitudeDegrees,\n                         double               longitudeDegrees,\n                         float                elevationMetersMSL,\n                         float                headingDegreesTrue,\n                         float                speedMetersPerSecond);",
          "context": "XPLMPlaceUserAtLocation",
          "id": "example_0",
          "language": "c",
          "line_count": 6,
          "type": "snippet"
        }
      ],
      "cross_references": [],
      "markdown": "### [XPLMPlaceUserAtLocation](/sdk/XPLMPlaceUserAtLocation/)\n\n```cpp\nXPLM_API void       XPLMPlaceUserAtLocation(\n                         double               latitudeDegrees,\n                         double               longitudeDegrees,\n                         float                elevationMetersMSL,\n                         float                headingDegreesTrue,\n                         float                speedMetersPerSecond);\n\n```\n\nPlaces the user at a specific location after performing any necessary scenery\nloads.\n\nAs with in-air starts initiated from the X-Plane user interface, the aircraft\nwill always start with its engines running, regardless of the user’s preferences\n(i.e., regardless of what the dataref`sim/operation/prefs/startup_running`says).",
      "own_functions": [
        "XPLMPlaceUserAtLocation",
        "voidXPLMPlaceUserAtLocation"
      ],
      "processing_timestamp": "2025-06-25T20:39:22.385832+00:00",
      "title": "XPLMPlaceUserAtLocation | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMPlaceUserAtLocation/"
    },
    "https://developer.x-plane.com/sdk/XPLMPlaneDrawState_t/": {
      "api_signatures": [],
      "category": {
        "category": "XPLM_Display",
        "module": "Xplm Display",
        "url": "https://developer.x-plane.com/sdk/XPLMPlaneDrawState_t/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"struct XPLM_DEPRECATED\"><h3 class=\"sdk-api-struct\" id=\"XPLMPlaneDrawState_t\"><a href=\"/sdk/XPLMPlaneDrawState_t/\">XPLMPlaneDrawState_t</a></h3><p>This structure contains additional plane parameter info to be passed to draw plane. Make sure to fill in the size of the structure field with sizeof(XPLMDrawPlaneState_t) so that the XPLM can tell how many fields you knew about when compiling your plugin (since more fields may be added later).</p><p>Most of these fields are ratios from 0 to 1 for control input. X-Plane calculates what the actual controls look like based on the .acf file for that airplane. Note for the yoke inputs, this is what the pilot of the plane has commanded (post artificial stability system if there were one) and affects ailerons, rudder, etc. It is not necessarily related to the actual position of the plane’s surfaces!</p><pre class=\"language-cpp\" data-manual=\"true\"><code>typedef struct {\n     // The size of the draw state struct.\n     int                       structSize;\n     // A ratio from [0..1] describing how far the landing gear is extended.\n     float                     gearPosition;\n     // Ratio of flap deployment, 0 = up, 1 = full deploy.\n     float                     flapRatio;\n     // Ratio of spoiler deployment, 0 = none, 1 = full deploy.\n     float                     spoilerRatio;\n     // Ratio of speed brake deployment, 0 = none, 1 = full deploy.\n     float                     speedBrakeRatio;\n     // Ratio of slat deployment, 0 = none, 1 = full deploy.\n     float                     slatRatio;\n     // Wing sweep ratio, 0 = forward, 1 = swept.\n     float                     wingSweep;\n     // Thrust power, 0 = none, 1 = full fwd, -1 = full reverse.\n     float                     thrust;\n     // Total pitch input for this plane.\n     float                     yokePitch;\n     // Total Heading input for this plane.\n     float                     yokeHeading;\n     // Total Roll input for this plane.\n     float                     yokeRoll;\n} <a href=\"/sdk/XPLMPlaneDrawState_t/\">XPLMPlaneDrawState_t</a>;</code></pre></div></div></article>",
      "code_examples": [
        {
          "char_count": 1126,
          "code": "typedef struct {\n     // The size of the draw state struct.\n     int                       structSize;\n     // A ratio from [0..1] describing how far the landing gear is extended.\n     float                     gearPosition;\n     // Ratio of flap deployment, 0 = up, 1 = full deploy.\n     float                     flapRatio;\n     // Ratio of spoiler deployment, 0 = none, 1 = full deploy.\n     float                     spoilerRatio;\n     // Ratio of speed brake deployment, 0 = none, 1 = full deploy.\n     float                     speedBrakeRatio;\n     // Ratio of slat deployment, 0 = none, 1 = full deploy.\n     float                     slatRatio;\n     // Wing sweep ratio, 0 = forward, 1 = swept.\n     float                     wingSweep;\n     // Thrust power, 0 = none, 1 = full fwd, -1 = full reverse.\n     float                     thrust;\n     // Total pitch input for this plane.\n     float                     yokePitch;\n     // Total Heading input for this plane.\n     float                     yokeHeading;\n     // Total Roll input for this plane.\n     float                     yokeRoll;\n}XPLMPlaneDrawState_t;",
          "context": "Most of these fields are ratios from 0 to 1 for control input. X-Plane calculates what the actual controls look like based on the .acf file for that airplane. Note for the yoke inputs, this is what th",
          "id": "example_0",
          "language": "c",
          "line_count": 24,
          "type": "example"
        }
      ],
      "cross_references": [],
      "markdown": "### [XPLMPlaneDrawState_t](/sdk/XPLMPlaneDrawState_t/)\n\nThis structure contains additional plane parameter info to be passed to draw\nplane. Make sure to fill in the size of the structure field with\nsizeof(XPLMDrawPlaneState_t) so that the XPLM can tell how many fields you knew\nabout when compiling your plugin (since more fields may be added later).\n\nMost of these fields are ratios from 0 to 1 for control input. X-Plane\ncalculates what the actual controls look like based on the .acf file for that\nairplane. Note for the yoke inputs, this is what the pilot of the plane has\ncommanded (post artificial stability system if there were one) and affects\nailerons, rudder, etc. It is not necessarily related to the actual position of\nthe plane’s surfaces!\n\n```cpp\ntypedef struct {\n     // The size of the draw state struct.\n     int                       structSize;\n     // A ratio from [0..1] describing how far the landing gear is extended.\n     float                     gearPosition;\n     // Ratio of flap deployment, 0 = up, 1 = full deploy.\n     float                     flapRatio;\n     // Ratio of spoiler deployment, 0 = none, 1 = full deploy.\n     float                     spoilerRatio;\n     // Ratio of speed brake deployment, 0 = none, 1 = full deploy.\n     float                     speedBrakeRatio;\n     // Ratio of slat deployment, 0 = none, 1 = full deploy.\n     float                     slatRatio;\n     // Wing sweep ratio, 0 = forward, 1 = swept.\n     float                     wingSweep;\n     // Thrust power, 0 = none, 1 = full fwd, -1 = full reverse.\n     float                     thrust;\n     // Total pitch input for this plane.\n     float                     yokePitch;\n     // Total Heading input for this plane.\n     float                     yokeHeading;\n     // Total Roll input for this plane.\n     float                     yokeRoll;\n} XPLMPlaneDrawState_t;\n```",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:23.534353+00:00",
      "title": "XPLMPlaneDrawState_t | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMPlaneDrawState_t/"
    },
    "https://developer.x-plane.com/sdk/XPLMPlanes/": {
      "api_signatures": [
        {
          "description": "This routine changes the user’s aircraft. Note that this will reinitialize the user to be on the nearest airport’s first runway. Pass in a full path (hard drive and everything including the .acf extension) to the .acf file.",
          "name": "XPLMSetUsersAircraft",
          "parameters": [
            {
              "full_declaration": "const char *         inAircraftPath",
              "name": "inAircraftPath",
              "type": "const char *"
            }
          ],
          "signature": "XPLM_API voidXPLMSetUsersAircraft(\n                         const char *         inAircraftPath);"
        },
        {
          "description": "This routine places the user at a given airport. Specify the airport by its X-Plane airport ID (e.g. ‘KBOS’).",
          "name": "XPLMPlaceUserAtAirport",
          "parameters": [
            {
              "full_declaration": "const char *         inAirportCode",
              "name": "inAirportCode",
              "type": "const char *"
            }
          ],
          "signature": "XPLM_API voidXPLMPlaceUserAtAirport(\n                         const char *         inAirportCode);"
        },
        {
          "description": "Places the user at a specific location after performing any necessary scenery loads.",
          "name": "XPLMPlaceUserAtLocation",
          "parameters": [
            {
              "full_declaration": "double               latitudeDegrees",
              "name": "latitudeDegrees",
              "type": "double"
            },
            {
              "full_declaration": "double               longitudeDegrees",
              "name": "longitudeDegrees",
              "type": "double"
            },
            {
              "full_declaration": "float                elevationMetersMSL",
              "name": "elevationMetersMSL",
              "type": "float"
            },
            {
              "full_declaration": "float                headingDegreesTrue",
              "name": "headingDegreesTrue",
              "type": "float"
            },
            {
              "full_declaration": "float                speedMetersPerSecond",
              "name": "speedMetersPerSecond",
              "type": "float"
            }
          ],
          "signature": "XPLM_API voidXPLMPlaceUserAtLocation(\n                         double               latitudeDegrees,\n                         double               longitudeDegrees,\n                         float                elevationMetersMSL,\n                         float                headingDegreesTrue,\n                         float                speedMetersPerSecond);"
        },
        {
          "description": "This function returns the number of aircraft X-Plane is capable of having, as well as the number of aircraft that are currently active. These numbers count the user’s aircraft. It can also return the plugin that is currently controlling aircraft. In X-Plane 7, this routine reflects the number of aircraft the user has enabled in the rendering options window.",
          "name": "XPLMCountAircraft",
          "parameters": [
            {
              "full_declaration": "int *                outTotalAircraft",
              "name": "outTotalAircraft",
              "type": "int *"
            },
            {
              "full_declaration": "int *                outActiveAircraft",
              "name": "outActiveAircraft",
              "type": "int *"
            },
            {
              "full_declaration": "XPLMPluginID*       outController",
              "name": "outController",
              "type": "XPLMPluginID*"
            }
          ],
          "signature": "XPLM_API voidXPLMCountAircraft(\n                         int *                outTotalAircraft,\n                         int *                outActiveAircraft,XPLMPluginID*       outController);"
        },
        {
          "description": "This function returns the aircraft model for the Nth aircraft. Indices are zero based, with zero being the user’s aircraft. The file name should be at least 256 chars in length; the path should be at least 512 chars in length.",
          "name": "XPLMGetNthAircraftModel",
          "parameters": [
            {
              "full_declaration": "int                  inIndex",
              "name": "inIndex",
              "type": "int"
            },
            {
              "full_declaration": "char *               outFileName",
              "name": "outFileName",
              "type": "char *"
            },
            {
              "full_declaration": "char *               outPath",
              "name": "outPath",
              "type": "char *"
            }
          ],
          "signature": "XPLM_API voidXPLMGetNthAircraftModel(\n                         int                  inIndex,\n                         char *               outFileName,\n                         char *               outPath);"
        },
        {
          "description": "XPLMAcquirePlanesgrants your plugin exclusive access to the aircraft. It returns 1 if you gain access, 0 if you do not.",
          "name": "XPLMAcquirePlanes",
          "parameters": [
            {
              "full_declaration": "char **              inAircraft",
              "name": "inAircraft",
              "type": "char **"
            },
            {
              "full_declaration": "void *               inRefcon",
              "name": "inRefcon",
              "type": "void *"
            }
          ],
          "signature": "XPLM_API intXPLMAcquirePlanes(\n                         char **              inAircraft,    /* Can be NULL */XPLMPlanesAvailable_finCallback,\n                         void *               inRefcon);"
        },
        {
          "description": "Call this function to release access to the planes. Note that if you are disabled, access to planes is released for you and you must reacquire it.",
          "name": "XPLMReleasePlanes",
          "parameters": [],
          "signature": "XPLM_API voidXPLMReleasePlanes(void);"
        },
        {
          "description": "This routine sets the number of active planes. If you pass in a number higher than the total number of planes availables, only the total number of planes available is actually used.",
          "name": "XPLMSetActiveAircraftCount",
          "parameters": [
            {
              "full_declaration": "int                  inCount",
              "name": "inCount",
              "type": "int"
            }
          ],
          "signature": "XPLM_API voidXPLMSetActiveAircraftCount(\n                         int                  inCount);"
        },
        {
          "description": "This routine loads an aircraft model. It may only be called if you have exclusive access to the airplane APIs. Pass in the path of the model with the .acf extension. The index is zero based, but you may not pass in 0 (useXPLMSetUsersAircraftto load the user’s aircracft).",
          "name": "XPLMSetAircraftModel",
          "parameters": [
            {
              "full_declaration": "int                  inIndex",
              "name": "inIndex",
              "type": "int"
            },
            {
              "full_declaration": "const char *         inAircraftPath",
              "name": "inAircraftPath",
              "type": "const char *"
            }
          ],
          "signature": "XPLM_API voidXPLMSetAircraftModel(\n                         int                  inIndex,\n                         const char *         inAircraftPath);"
        },
        {
          "description": "This routine turns off X-Plane’s AI for a given plane. The plane will continue to draw and be a real plane in X-Plane, but will not move itself.",
          "name": "XPLMDisableAIForPlane",
          "parameters": [
            {
              "full_declaration": "int                  inPlaneIndex",
              "name": "inPlaneIndex",
              "type": "int"
            }
          ],
          "signature": "XPLM_API voidXPLMDisableAIForPlane(\n                         int                  inPlaneIndex);"
        },
        {
          "deprecated": true,
          "description": "WARNING: Aircraft drawing via this API is deprecated and WILL NOT WORK in future versions of X-Plane. UseXPLMInstancefor 3-d drawing of custom aircraft models.",
          "name": "XPLMDrawAircraft",
          "parameters": [
            {
              "full_declaration": "int                  inPlaneIndex",
              "name": "inPlaneIndex",
              "type": "int"
            },
            {
              "full_declaration": "float                inX",
              "name": "inX",
              "type": "float"
            },
            {
              "full_declaration": "float                inY",
              "name": "inY",
              "type": "float"
            },
            {
              "full_declaration": "float                inZ",
              "name": "inZ",
              "type": "float"
            },
            {
              "full_declaration": "float                inPitch",
              "name": "inPitch",
              "type": "float"
            },
            {
              "full_declaration": "float                inRoll",
              "name": "inRoll",
              "type": "float"
            },
            {
              "full_declaration": "float                inYaw",
              "name": "inYaw",
              "type": "float"
            },
            {
              "full_declaration": "int                  inFullDraw",
              "name": "inFullDraw",
              "type": "int"
            },
            {
              "full_declaration": "XPLMPlaneDrawState_t* inDrawStateInfo",
              "name": "inDrawStateInfo",
              "type": "XPLMPlaneDrawState_t*"
            }
          ],
          "signature": "XPLM_API voidXPLMDrawAircraft(\n                         int                  inPlaneIndex,\n                         float                inX,\n                         float                inY,\n                         float                inZ,\n                         float                inPitch,\n                         float                inRoll,\n                         float                inYaw,\n                         int                  inFullDraw,XPLMPlaneDrawState_t* inDrawStateInfo);"
        },
        {
          "deprecated": true,
          "description": "WARNING: DO NOT USE. UseXPLMPlaceUserAtAirportorXPLMPlaceUserAtLocation.",
          "name": "XPLMReinitUsersPlane",
          "parameters": [],
          "signature": "XPLM_API voidXPLMReinitUsersPlane(void);"
        },
        {
          "name": "voidXPLMSetUsersAircraft",
          "signature": "XPLM_API voidXPLMSetUsersAircraft(\n                         const char *         inAircraftPath);",
          "source": "code_block_extraction",
          "type": "function"
        },
        {
          "name": "voidXPLMPlaceUserAtAirport",
          "signature": "XPLM_API voidXPLMPlaceUserAtAirport(\n                         const char *         inAirportCode);",
          "source": "code_block_extraction",
          "type": "function"
        },
        {
          "name": "voidXPLMPlaceUserAtLocation",
          "signature": "XPLM_API voidXPLMPlaceUserAtLocation(\n                         double               latitudeDegrees,\n                         double               longitudeDegrees,\n                         float                elevationMetersMSL,\n                         float                headingDegreesTrue,\n                         float                speedMetersPerSecond);",
          "source": "code_block_extraction",
          "type": "function"
        },
        {
          "name": "voidXPLMCountAircraft",
          "signature": "XPLM_API voidXPLMCountAircraft(\n                         int *                outTotalAircraft,\n                         int *                outActiveAircraft,XPLMPluginID*       outController);",
          "source": "code_block_extraction",
          "type": "function"
        },
        {
          "name": "voidXPLMGetNthAircraftModel",
          "signature": "XPLM_API voidXPLMGetNthAircraftModel(\n                         int                  inIndex,\n                         char *               outFileName,\n                         char *               outPath);",
          "source": "code_block_extraction",
          "type": "function"
        },
        {
          "name": "intXPLMAcquirePlanes",
          "signature": "XPLM_API intXPLMAcquirePlanes(\n                         char **              inAircraft,    /* Can be NULL */XPLMPlanesAvailable_finCallback,\n                         void *               inRefcon);",
          "source": "code_block_extraction",
          "type": "function"
        },
        {
          "name": "voidXPLMReleasePlanes",
          "signature": "XPLM_API voidXPLMReleasePlanes(void);",
          "source": "code_block_extraction",
          "type": "function"
        },
        {
          "name": "voidXPLMSetActiveAircraftCount",
          "signature": "XPLM_API voidXPLMSetActiveAircraftCount(\n                         int                  inCount);",
          "source": "code_block_extraction",
          "type": "function"
        },
        {
          "name": "voidXPLMSetAircraftModel",
          "signature": "XPLM_API voidXPLMSetAircraftModel(\n                         int                  inIndex,\n                         const char *         inAircraftPath);",
          "source": "code_block_extraction",
          "type": "function"
        },
        {
          "name": "voidXPLMDisableAIForPlane",
          "signature": "XPLM_API voidXPLMDisableAIForPlane(\n                         int                  inPlaneIndex);",
          "source": "code_block_extraction",
          "type": "function"
        },
        {
          "name": "voidXPLMDrawAircraft",
          "signature": "XPLM_API voidXPLMDrawAircraft(\n                         int                  inPlaneIndex,\n                         float                inX,\n                         float                inY,\n                         float                inZ,\n                         float                inPitch,\n                         float                inRoll,\n                         float                inYaw,\n                         int                  inFullDraw,XPLMPlaneDrawState_t* inDrawStateInfo);",
          "source": "code_block_extraction",
          "type": "function"
        },
        {
          "name": "voidXPLMReinitUsersPlane",
          "signature": "XPLM_API voidXPLMReinitUsersPlane(void);",
          "source": "code_block_extraction",
          "type": "function"
        }
      ],
      "category": {
        "category": "XPLM_Planes",
        "module": "Xplm Planes",
        "url": "https://developer.x-plane.com/sdk/XPLMPlanes/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"api\"><h1 class=\"sdk-api-title\" id=\"XPLMPlanes\"><a href=\"/sdk/XPLMPlanes/\">XPLMPlanes</a>API</h1><p>The<a href=\"/sdk/XPLMPlanes/\">XPLMPlanes</a>APIs allow you to control the various aircraft in X-Plane, both the user’s and the sim’s.</p><p><em>Note</em>: unlike almost all other APIs in the SDK, aircraft paths are<em>full</em>file system paths for historical reasons. You’ll need to prefix all relative paths with the X-Plane path as accessed via<a href=\"/sdk/XPLMGetSystemPath/\">XPLMGetSystemPath</a>.</p><div class=\"component\"><h2 id=\"USER AIRCRAFT ACCESS\">USER AIRCRAFT ACCESS</h2></div><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPLMSetUsersAircraft\"><a href=\"/sdk/XPLMSetUsersAircraft/\">XPLMSetUsersAircraft</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API void       <a href=\"/sdk/XPLMSetUsersAircraft/\">XPLMSetUsersAircraft</a>(\n                         const char *         inAircraftPath);\n</code></pre><p>This routine changes the user’s aircraft. Note that this will reinitialize the user to be on the nearest airport’s first runway. Pass in a full path (hard drive and everything including the .acf extension) to the .acf file.</p></div><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPLMPlaceUserAtAirport\"><a href=\"/sdk/XPLMPlaceUserAtAirport/\">XPLMPlaceUserAtAirport</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API void       <a href=\"/sdk/XPLMPlaceUserAtAirport/\">XPLMPlaceUserAtAirport</a>(\n                         const char *         inAirportCode);\n</code></pre><p>This routine places the user at a given airport. Specify the airport by its X-Plane airport ID (e.g. ‘KBOS’).</p></div><div class=\"function XPLM300\"><h3 class=\"sdk-api-function\" id=\"XPLMPlaceUserAtLocation\"><a href=\"/sdk/XPLMPlaceUserAtLocation/\">XPLMPlaceUserAtLocation</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API void       <a href=\"/sdk/XPLMPlaceUserAtLocation/\">XPLMPlaceUserAtLocation</a>(\n                         double               latitudeDegrees,\n                         double               longitudeDegrees,\n                         float                elevationMetersMSL,\n                         float                headingDegreesTrue,\n                         float                speedMetersPerSecond);\n</code></pre><p>Places the user at a specific location after performing any necessary scenery loads.</p><p>As with in-air starts initiated from the X-Plane user interface, the aircraft will always start with its engines running, regardless of the user’s preferences (i.e., regardless of what the dataref<code>sim/operation/prefs/startup_running</code>says).</p></div><div class=\"component\"><h2 id=\"GLOBAL AIRCRAFT ACCESS\">GLOBAL AIRCRAFT ACCESS</h2></div><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"XPLM_USER_AIRCRAFT\"><a href=\"/sdk/XPLM_USER_AIRCRAFT/\">XPLM_USER_AIRCRAFT</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_USER_AIRCRAFT/\">XPLM_USER_AIRCRAFT</a>   0</code></pre><p>The user’s aircraft is always index 0.</p></div><div class=\"struct XPLM_DEPRECATED\"><h3 class=\"sdk-api-struct\" id=\"XPLMPlaneDrawState_t\"><a href=\"/sdk/XPLMPlaneDrawState_t/\">XPLMPlaneDrawState_t</a></h3><p>This structure contains additional plane parameter info to be passed to draw plane. Make sure to fill in the size of the structure field with sizeof(XPLMDrawPlaneState_t) so that the XPLM can tell how many fields you knew about when compiling your plugin (since more fields may be added later).</p><p>Most of these fields are ratios from 0 to 1 for control input. X-Plane calculates what the actual controls look like based on the .acf file for that airplane. Note for the yoke inputs, this is what the pilot of the plane has commanded (post artificial stability system if there were one) and affects ailerons, rudder, etc. It is not necessarily related to the actual position of the plane’s surfaces!</p><pre class=\"language-cpp\" data-manual=\"true\"><code>typedef struct {\n     // The size of the draw state struct.\n     int                       structSize;\n     // A ratio from [0..1] describing how far the landing gear is extended.\n     float                     gearPosition;\n     // Ratio of flap deployment, 0 = up, 1 = full deploy.\n     float                     flapRatio;\n     // Ratio of spoiler deployment, 0 = none, 1 = full deploy.\n     float                     spoilerRatio;\n     // Ratio of speed brake deployment, 0 = none, 1 = full deploy.\n     float                     speedBrakeRatio;\n     // Ratio of slat deployment, 0 = none, 1 = full deploy.\n     float                     slatRatio;\n     // Wing sweep ratio, 0 = forward, 1 = swept.\n     float                     wingSweep;\n     // Thrust power, 0 = none, 1 = full fwd, -1 = full reverse.\n     float                     thrust;\n     // Total pitch input for this plane.\n     float                     yokePitch;\n     // Total Heading input for this plane.\n     float                     yokeHeading;\n     // Total Roll input for this plane.\n     float                     yokeRoll;\n} <a href=\"/sdk/XPLMPlaneDrawState_t/\">XPLMPlaneDrawState_t</a>;</code></pre></div><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPLMCountAircraft\"><a href=\"/sdk/XPLMCountAircraft/\">XPLMCountAircraft</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API void       <a href=\"/sdk/XPLMCountAircraft/\">XPLMCountAircraft</a>(\n                         int *                outTotalAircraft,\n                         int *                outActiveAircraft,\n                         <a href=\"/sdk/XPLMPluginID/\">XPLMPluginID</a> *       outController);\n</code></pre><p>This function returns the number of aircraft X-Plane is capable of having, as well as the number of aircraft that are currently active. These numbers count the user’s aircraft. It can also return the plugin that is currently controlling aircraft. In X-Plane 7, this routine reflects the number of aircraft the user has enabled in the rendering options window.</p></div><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPLMGetNthAircraftModel\"><a href=\"/sdk/XPLMGetNthAircraftModel/\">XPLMGetNthAircraftModel</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API void       <a href=\"/sdk/XPLMGetNthAircraftModel/\">XPLMGetNthAircraftModel</a>(\n                         int                  inIndex,\n                         char *               outFileName,\n                         char *               outPath);\n</code></pre><p>This function returns the aircraft model for the Nth aircraft. Indices are zero based, with zero being the user’s aircraft. The file name should be at least 256 chars in length; the path should be at least 512 chars in length.</p></div><div class=\"component\"><h2 id=\"EXCLUSIVE AIRCRAFT ACCESS\">EXCLUSIVE AIRCRAFT ACCESS</h2><p>The following routines require exclusive access to the airplane APIs. Only one plugin may have this access at a time.</p><div class=\"callback\"><h3 class=\"sdk-api-callback\" id=\"XPLMPlanesAvailable_f\"><a href=\"/sdk/XPLMPlanesAvailable_f/\">XPLMPlanesAvailable_f</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>typedef void (* <a href=\"/sdk/XPLMPlanesAvailable_f/\">XPLMPlanesAvailable_f</a>)(\n                         void *               inRefcon);\n</code></pre><p>Your airplanes available callback is called when another plugin gives up access to the multiplayer planes. Use this to wait for access to multiplayer.</p></div><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPLMAcquirePlanes\"><a href=\"/sdk/XPLMAcquirePlanes/\">XPLMAcquirePlanes</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API int        <a href=\"/sdk/XPLMAcquirePlanes/\">XPLMAcquirePlanes</a>(\n                         char **              inAircraft,    /* Can be NULL */\n                         <a href=\"/sdk/XPLMPlanesAvailable_f/\">XPLMPlanesAvailable_f</a> inCallback,\n                         void *               inRefcon);\n</code></pre><p><a href=\"/sdk/XPLMAcquirePlanes/\">XPLMAcquirePlanes</a>grants your plugin exclusive access to the aircraft. It returns 1 if you gain access, 0 if you do not.</p><p>inAircraft - pass in an array of pointers to strings specifying the planes you want loaded. For any plane index you do not want loaded, pass a 0-length string. Other strings should be full paths with the .acf extension. NULL terminates this array, or pass NULL if there are no planes you want loaded.</p><p>If you pass in a callback and do not receive access to the planes your callback will be called when the airplanes are available. If you do receive airplane access, your callback will not be called.</p></div><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPLMReleasePlanes\"><a href=\"/sdk/XPLMReleasePlanes/\">XPLMReleasePlanes</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API void       <a href=\"/sdk/XPLMReleasePlanes/\">XPLMReleasePlanes</a>(void);\n</code></pre><p>Call this function to release access to the planes. Note that if you are disabled, access to planes is released for you and you must reacquire it.</p></div><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPLMSetActiveAircraftCount\"><a href=\"/sdk/XPLMSetActiveAircraftCount/\">XPLMSetActiveAircraftCount</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API void       <a href=\"/sdk/XPLMSetActiveAircraftCount/\">XPLMSetActiveAircraftCount</a>(\n                         int                  inCount);\n</code></pre><p>This routine sets the number of active planes. If you pass in a number higher than the total number of planes availables, only the total number of planes available is actually used.</p></div><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPLMSetAircraftModel\"><a href=\"/sdk/XPLMSetAircraftModel/\">XPLMSetAircraftModel</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API void       <a href=\"/sdk/XPLMSetAircraftModel/\">XPLMSetAircraftModel</a>(\n                         int                  inIndex,\n                         const char *         inAircraftPath);\n</code></pre><p>This routine loads an aircraft model. It may only be called if you have exclusive access to the airplane APIs. Pass in the path of the model with the .acf extension. The index is zero based, but you may not pass in 0 (use<a href=\"/sdk/XPLMSetUsersAircraft/\">XPLMSetUsersAircraft</a>to load the user’s aircracft).</p></div><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPLMDisableAIForPlane\"><a href=\"/sdk/XPLMDisableAIForPlane/\">XPLMDisableAIForPlane</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API void       <a href=\"/sdk/XPLMDisableAIForPlane/\">XPLMDisableAIForPlane</a>(\n                         int                  inPlaneIndex);\n</code></pre><p>This routine turns off X-Plane’s AI for a given plane. The plane will continue to draw and be a real plane in X-Plane, but will not move itself.</p></div><div class=\"function XPLM_DEPRECATED\"><h3 class=\"sdk-api-function\" id=\"XPLMDrawAircraft\"><a href=\"/sdk/XPLMDrawAircraft/\">XPLMDrawAircraft</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API void       <a href=\"/sdk/XPLMDrawAircraft/\">XPLMDrawAircraft</a>(\n                         int                  inPlaneIndex,\n                         float                inX,\n                         float                inY,\n                         float                inZ,\n                         float                inPitch,\n                         float                inRoll,\n                         float                inYaw,\n                         int                  inFullDraw,\n                         <a href=\"/sdk/XPLMPlaneDrawState_t/\">XPLMPlaneDrawState_t</a> * inDrawStateInfo);\n</code></pre><p>WARNING: Aircraft drawing via this API is deprecated and WILL NOT WORK in future versions of X-Plane. Use<a href=\"/sdk/XPLMInstance/\">XPLMInstance</a>for 3-d drawing of custom aircraft models.</p><p>This routine draws an aircraft. It can only be called from a 3-d drawing callback. Pass in the position of the plane in OpenGL local coordinates and the orientation of the plane. A 1 for full drawing indicates that the whole plane must be drawn; a 0 indicates you only need the nav lights drawn. (This saves rendering time when planes are far away.)</p></div><div class=\"function XPLM_DEPRECATED\"><h3 class=\"sdk-api-function\" id=\"XPLMReinitUsersPlane\"><a href=\"/sdk/XPLMReinitUsersPlane/\">XPLMReinitUsersPlane</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API void       <a href=\"/sdk/XPLMReinitUsersPlane/\">XPLMReinitUsersPlane</a>(void);\n</code></pre><p>WARNING: DO NOT USE. Use<a href=\"/sdk/XPLMPlaceUserAtAirport/\">XPLMPlaceUserAtAirport</a>or<a href=\"/sdk/XPLMPlaceUserAtLocation/\">XPLMPlaceUserAtLocation</a>.</p><p>This function recomputes the derived flight model data from the aircraft structure in memory. If you have used the data access layer to modify the aircraft structure, use this routine to resynchronize X-Plane; since X-Plane works at least partly from derived values, the sim will not behave properly until this is called.</p><p>WARNING: this routine does not necessarily place the airplane at the airport; use<a href=\"/sdk/XPLMSetUsersAircraft/\">XPLMSetUsersAircraft</a>to be compatible. This routine is provided to do special experimentation with flight models without resetting flight.</p></div></div></div></div></article>",
      "code_examples": [
        {
          "char_count": 97,
          "code": "XPLM_API voidXPLMSetUsersAircraft(\n                         const char *         inAircraftPath);",
          "context": "XPLMSetUsersAircraft",
          "id": "example_0",
          "language": "c",
          "line_count": 2,
          "type": "snippet"
        },
        {
          "char_count": 98,
          "code": "XPLM_API voidXPLMPlaceUserAtAirport(\n                         const char *         inAirportCode);",
          "context": "XPLMPlaceUserAtAirport",
          "id": "example_1",
          "language": "c",
          "line_count": 2,
          "type": "snippet"
        },
        {
          "char_count": 365,
          "code": "XPLM_API voidXPLMPlaceUserAtLocation(\n                         double               latitudeDegrees,\n                         double               longitudeDegrees,\n                         float                elevationMetersMSL,\n                         float                headingDegreesTrue,\n                         float                speedMetersPerSecond);",
          "context": "XPLMPlaceUserAtLocation",
          "id": "example_2",
          "language": "c",
          "line_count": 6,
          "type": "snippet"
        },
        {
          "char_count": 1126,
          "code": "typedef struct {\n     // The size of the draw state struct.\n     int                       structSize;\n     // A ratio from [0..1] describing how far the landing gear is extended.\n     float                     gearPosition;\n     // Ratio of flap deployment, 0 = up, 1 = full deploy.\n     float                     flapRatio;\n     // Ratio of spoiler deployment, 0 = none, 1 = full deploy.\n     float                     spoilerRatio;\n     // Ratio of speed brake deployment, 0 = none, 1 = full deploy.\n     float                     speedBrakeRatio;\n     // Ratio of slat deployment, 0 = none, 1 = full deploy.\n     float                     slatRatio;\n     // Wing sweep ratio, 0 = forward, 1 = swept.\n     float                     wingSweep;\n     // Thrust power, 0 = none, 1 = full fwd, -1 = full reverse.\n     float                     thrust;\n     // Total pitch input for this plane.\n     float                     yokePitch;\n     // Total Heading input for this plane.\n     float                     yokeHeading;\n     // Total Roll input for this plane.\n     float                     yokeRoll;\n}XPLMPlaneDrawState_t;",
          "context": "Most of these fields are ratios from 0 to 1 for control input. X-Plane calculates what the actual controls look like based on the .acf file for that airplane. Note for the yoke inputs, this is what th",
          "id": "example_4",
          "language": "c",
          "line_count": 24,
          "type": "example"
        },
        {
          "char_count": 195,
          "code": "XPLM_API voidXPLMCountAircraft(\n                         int *                outTotalAircraft,\n                         int *                outActiveAircraft,XPLMPluginID*       outController);",
          "context": "XPLMCountAircraft",
          "id": "example_5",
          "language": "c",
          "line_count": 3,
          "type": "snippet"
        },
        {
          "char_count": 207,
          "code": "XPLM_API voidXPLMGetNthAircraftModel(\n                         int                  inIndex,\n                         char *               outFileName,\n                         char *               outPath);",
          "context": "XPLMGetNthAircraftModel",
          "id": "example_6",
          "language": "c",
          "line_count": 4,
          "type": "snippet"
        },
        {
          "char_count": 95,
          "code": "typedef void (*XPLMPlanesAvailable_f)(\n                         void *               inRefcon);",
          "context": "XPLMPlanesAvailable_f",
          "id": "example_7",
          "language": "c",
          "line_count": 2,
          "type": "snippet"
        },
        {
          "char_count": 198,
          "code": "XPLM_API intXPLMAcquirePlanes(\n                         char **              inAircraft,    /* Can be NULL */XPLMPlanesAvailable_finCallback,\n                         void *               inRefcon);",
          "context": "XPLMAcquirePlanes",
          "id": "example_8",
          "language": "c",
          "line_count": 3,
          "type": "snippet"
        },
        {
          "char_count": 96,
          "code": "XPLM_API voidXPLMSetActiveAircraftCount(\n                         int                  inCount);",
          "context": "XPLMSetActiveAircraftCount",
          "id": "example_10",
          "language": "c",
          "line_count": 2,
          "type": "snippet"
        },
        {
          "char_count": 152,
          "code": "XPLM_API voidXPLMSetAircraftModel(\n                         int                  inIndex,\n                         const char *         inAircraftPath);",
          "context": "XPLMSetAircraftModel",
          "id": "example_11",
          "language": "c",
          "line_count": 3,
          "type": "snippet"
        },
        {
          "char_count": 96,
          "code": "XPLM_API voidXPLMDisableAIForPlane(\n                         int                  inPlaneIndex);",
          "context": "XPLMDisableAIForPlane",
          "id": "example_12",
          "language": "c",
          "line_count": 2,
          "type": "snippet"
        },
        {
          "char_count": 502,
          "code": "XPLM_API voidXPLMDrawAircraft(\n                         int                  inPlaneIndex,\n                         float                inX,\n                         float                inY,\n                         float                inZ,\n                         float                inPitch,\n                         float                inRoll,\n                         float                inYaw,\n                         int                  inFullDraw,XPLMPlaneDrawState_t* inDrawStateInfo);",
          "context": "XPLMDrawAircraft",
          "id": "example_13",
          "language": "c",
          "line_count": 9,
          "type": "snippet"
        }
      ],
      "cross_references": [
        "XPLMInstance",
        "XPLMPlugin",
        "XPLMGetSystemPath"
      ],
      "markdown": "# [XPLMPlanes](/sdk/XPLMPlanes/)API\n\nThe[XPLMPlanes](/sdk/XPLMPlanes/)APIs allow you to control the various aircraft\nin X-Plane, both the user’s and the sim’s.\n\n*Note*: unlike almost all other APIs in the SDK, aircraft paths are*full*file\nsystem paths for historical reasons. You’ll need to prefix all relative paths\nwith the X-Plane path as accessed\nvia[XPLMGetSystemPath](/sdk/XPLMGetSystemPath/).\n\n## USER AIRCRAFT ACCESS\n\n### [XPLMSetUsersAircraft](/sdk/XPLMSetUsersAircraft/)\n\n```cpp\nXPLM_API void       XPLMSetUsersAircraft(\n                         const char *         inAircraftPath);\n\n```\n\nThis routine changes the user’s aircraft. Note that this will reinitialize the\nuser to be on the nearest airport’s first runway. Pass in a full path (hard\ndrive and everything including the .acf extension) to the .acf file.\n\n### [XPLMPlaceUserAtAirport](/sdk/XPLMPlaceUserAtAirport/)\n\n```cpp\nXPLM_API void       XPLMPlaceUserAtAirport(\n                         const char *         inAirportCode);\n\n```\n\nThis routine places the user at a given airport. Specify the airport by its\nX-Plane airport ID (e.g. ‘KBOS’).\n\n### [XPLMPlaceUserAtLocation](/sdk/XPLMPlaceUserAtLocation/)\n\n```cpp\nXPLM_API void       XPLMPlaceUserAtLocation(\n                         double               latitudeDegrees,\n                         double               longitudeDegrees,\n                         float                elevationMetersMSL,\n                         float                headingDegreesTrue,\n                         float                speedMetersPerSecond);\n\n```\n\nPlaces the user at a specific location after performing any necessary scenery\nloads.\n\nAs with in-air starts initiated from the X-Plane user interface, the aircraft\nwill always start with its engines running, regardless of the user’s preferences\n(i.e., regardless of what the dataref`sim/operation/prefs/startup_running`says).\n\n## GLOBAL AIRCRAFT ACCESS\n\n### [XPLM_USER_AIRCRAFT](/sdk/XPLM_USER_AIRCRAFT/)\n\n```cpp\n#define XPLM_USER_AIRCRAFT   0\n```\n\nThe user’s aircraft is always index 0.\n\n### [XPLMPlaneDrawState_t](/sdk/XPLMPlaneDrawState_t/)\n\nThis structure contains additional plane parameter info to be passed to draw\nplane. Make sure to fill in the size of the structure field with\nsizeof(XPLMDrawPlaneState_t) so that the XPLM can tell how many fields you knew\nabout when compiling your plugin (since more fields may be added later).\n\nMost of these fields are ratios from 0 to 1 for control input. X-Plane\ncalculates what the actual controls look like based on the .acf file for that\nairplane. Note for the yoke inputs, this is what the pilot of the plane has\ncommanded (post artificial stability system if there were one) and affects\nailerons, rudder, etc. It is not necessarily related to the actual position of\nthe plane’s surfaces!\n\n```cpp\ntypedef struct {\n     // The size of the draw state struct.\n     int                       structSize;\n     // A ratio from [0..1] describing how far the landing gear is extended.\n     float                     gearPosition;\n     // Ratio of flap deployment, 0 = up, 1 = full deploy.\n     float                     flapRatio;\n     // Ratio of spoiler deployment, 0 = none, 1 = full deploy.\n     float                     spoilerRatio;\n     // Ratio of speed brake deployment, 0 = none, 1 = full deploy.\n     float                     speedBrakeRatio;\n     // Ratio of slat deployment, 0 = none, 1 = full deploy.\n     float                     slatRatio;\n     // Wing sweep ratio, 0 = forward, 1 = swept.\n     float                     wingSweep;\n     // Thrust power, 0 = none, 1 = full fwd, -1 = full reverse.\n     float                     thrust;\n     // Total pitch input for this plane.\n     float                     yokePitch;\n     // Total Heading input for this plane.\n     float                     yokeHeading;\n     // Total Roll input for this plane.\n     float                     yokeRoll;\n} XPLMPlaneDrawState_t;\n```\n\n### [XPLMCountAircraft](/sdk/XPLMCountAircraft/)\n\n```cpp\nXPLM_API void       XPLMCountAircraft(\n                         int *                outTotalAircraft,\n                         int *                outActiveAircraft,\n                         XPLMPluginID *       outController);\n\n```\n\nThis function returns the number of aircraft X-Plane is capable of having, as\nwell as the number of aircraft that are currently active. These numbers count\nthe user’s aircraft. It can also return the plugin that is currently controlling\naircraft. In X-Plane 7, this routine reflects the number of aircraft the user\nhas enabled in the rendering options window.\n\n### [XPLMGetNthAircraftModel](/sdk/XPLMGetNthAircraftModel/)\n\n```cpp\nXPLM_API void       XPLMGetNthAircraftModel(\n                         int                  inIndex,\n                         char *               outFileName,\n                         char *               outPath);\n\n```\n\nThis function returns the aircraft model for the Nth aircraft. Indices are zero\nbased, with zero being the user’s aircraft. The file name should be at least 256\nchars in length; the path should be at least 512 chars in length.\n\n## EXCLUSIVE AIRCRAFT ACCESS\n\nThe following routines require exclusive access to the airplane APIs. Only one\nplugin may have this access at a time.\n\n### [XPLMPlanesAvailable_f](/sdk/XPLMPlanesAvailable_f/)\n\n```cpp\ntypedef void (* XPLMPlanesAvailable_f)(\n                         void *               inRefcon);\n\n```\n\nYour airplanes available callback is called when another plugin gives up access\nto the multiplayer planes. Use this to wait for access to multiplayer.\n\n### [XPLMAcquirePlanes](/sdk/XPLMAcquirePlanes/)\n\n```cpp\nXPLM_API int        XPLMAcquirePlanes(\n                         char **              inAircraft,    /* Can be NULL */\n                         XPLMPlanesAvailable_f inCallback,\n                         void *               inRefcon);\n\n```\n\n[XPLMAcquirePlanes](/sdk/XPLMAcquirePlanes/)grants your plugin exclusive access\nto the aircraft. It returns 1 if you gain access, 0 if you do not.\n\ninAircraft - pass in an array of pointers to strings specifying the planes you\nwant loaded. For any plane index you do not want loaded, pass a 0-length string.\nOther strings should be full paths with the .acf extension. NULL terminates this\narray, or pass NULL if there are no planes you want loaded.\n\nIf you pass in a callback and do not receive access to the planes your callback\nwill be called when the airplanes are available. If you do receive airplane\naccess, your callback will not be called.\n\n### [XPLMReleasePlanes](/sdk/XPLMReleasePlanes/)\n\n```cpp\nXPLM_API void       XPLMReleasePlanes(void);\n\n```\n\nCall this function to release access to the planes. Note that if you are\ndisabled, access to planes is released for you and you must reacquire it.\n\n### [XPLMSetActiveAircraftCount](/sdk/XPLMSetActiveAircraftCount/)\n\n```cpp\nXPLM_API void       XPLMSetActiveAircraftCount(\n                         int                  inCount);\n\n```\n\nThis routine sets the number of active planes. If you pass in a number higher\nthan the total number of planes availables, only the total number of planes\navailable is actually used.\n\n### [XPLMSetAircraftModel](/sdk/XPLMSetAircraftModel/)\n\n```cpp\nXPLM_API void       XPLMSetAircraftModel(\n                         int                  inIndex,\n                         const char *         inAircraftPath);\n\n```\n\nThis routine loads an aircraft model. It may only be called if you have\nexclusive access to the airplane APIs. Pass in the path of the model with the\n.acf extension. The index is zero based, but you may not pass in 0\n(use[XPLMSetUsersAircraft](/sdk/XPLMSetUsersAircraft/)to load the user’s\naircracft).\n\n### [XPLMDisableAIForPlane](/sdk/XPLMDisableAIForPlane/)\n\n```cpp\nXPLM_API void       XPLMDisableAIForPlane(\n                         int                  inPlaneIndex);\n\n```\n\nThis routine turns off X-Plane’s AI for a given plane. The plane will continue\nto draw and be a real plane in X-Plane, but will not move itself.\n\n### [XPLMDrawAircraft](/sdk/XPLMDrawAircraft/)\n\n```cpp\nXPLM_API void       XPLMDrawAircraft(\n                         int                  inPlaneIndex,\n                         float                inX,\n                         float                inY,\n                         float                inZ,\n                         float                inPitch,\n                         float                inRoll,\n                         float                inYaw,\n                         int                  inFullDraw,\n                         XPLMPlaneDrawState_t * inDrawStateInfo);\n\n```\n\nWARNING: Aircraft drawing via this API is deprecated and WILL NOT WORK in future\nversions of X-Plane. Use[XPLMInstance](/sdk/XPLMInstance/)for 3-d drawing of\ncustom aircraft models.\n\nThis routine draws an aircraft. It can only be called from a 3-d drawing\ncallback. Pass in the position of the plane in OpenGL local coordinates and the\norientation of the plane. A 1 for full drawing indicates that the whole plane\nmust be drawn; a 0 indicates you only need the nav lights drawn. (This saves\nrendering time when planes are far away.)\n\n### [XPLMReinitUsersPlane](/sdk/XPLMReinitUsersPlane/)\n\n```cpp\nXPLM_API void       XPLMReinitUsersPlane(void);\n\n```\n\nWARNING: DO NOT USE.\nUse[XPLMPlaceUserAtAirport](/sdk/XPLMPlaceUserAtAirport/)or[XPLMPlaceUserAtLocation](/sdk/XPLMPlaceUserAtLocation/).\n\nThis function recomputes the derived flight model data from the aircraft\nstructure in memory. If you have used the data access layer to modify the\naircraft structure, use this routine to resynchronize X-Plane; since X-Plane\nworks at least partly from derived values, the sim will not behave properly\nuntil this is called.\n\nWARNING: this routine does not necessarily place the airplane at the airport;\nuse[XPLMSetUsersAircraft](/sdk/XPLMSetUsersAircraft/)to be compatible. This\nroutine is provided to do special experimentation with flight models without\nresetting flight.",
      "own_functions": [
        "XPLMSetUsersAircraft",
        "XPLMPlaceUserAtAirport",
        "XPLMPlaceUserAtLocation",
        "XPLMCountAircraft",
        "XPLMGetNthAircraftModel",
        "XPLMAcquirePlanes",
        "XPLMReleasePlanes",
        "XPLMSetActiveAircraftCount",
        "XPLMSetAircraftModel",
        "XPLMDisableAIForPlane",
        "XPLMDrawAircraft",
        "XPLMReinitUsersPlane",
        "voidXPLMSetUsersAircraft",
        "voidXPLMPlaceUserAtAirport",
        "voidXPLMPlaceUserAtLocation",
        "voidXPLMCountAircraft",
        "voidXPLMGetNthAircraftModel",
        "intXPLMAcquirePlanes",
        "voidXPLMReleasePlanes",
        "voidXPLMSetActiveAircraftCount",
        "voidXPLMSetAircraftModel",
        "voidXPLMDisableAIForPlane",
        "voidXPLMDrawAircraft",
        "voidXPLMReinitUsersPlane"
      ],
      "processing_timestamp": "2025-06-25T20:39:24.155421+00:00",
      "title": "XPLMPlanes | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMPlanes/"
    },
    "https://developer.x-plane.com/sdk/XPLMPlanesAvailable_f/": {
      "api_signatures": [],
      "category": {
        "category": "XPLM_Planes",
        "module": "Xplm Planes",
        "url": "https://developer.x-plane.com/sdk/XPLMPlanesAvailable_f/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"callback\"><h3 class=\"sdk-api-callback\" id=\"XPLMPlanesAvailable_f\"><a href=\"/sdk/XPLMPlanesAvailable_f/\">XPLMPlanesAvailable_f</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>typedef void (* <a href=\"/sdk/XPLMPlanesAvailable_f/\">XPLMPlanesAvailable_f</a>)(\n                         void *               inRefcon);\n</code></pre><p>Your airplanes available callback is called when another plugin gives up access to the multiplayer planes. Use this to wait for access to multiplayer.</p></div></div></article>",
      "code_examples": [
        {
          "char_count": 95,
          "code": "typedef void (*XPLMPlanesAvailable_f)(\n                         void *               inRefcon);",
          "context": "XPLMPlanesAvailable_f",
          "id": "example_0",
          "language": "c",
          "line_count": 2,
          "type": "snippet"
        }
      ],
      "cross_references": [],
      "markdown": "### [XPLMPlanesAvailable_f](/sdk/XPLMPlanesAvailable_f/)\n\n```cpp\ntypedef void (* XPLMPlanesAvailable_f)(\n                         void *               inRefcon);\n\n```\n\nYour airplanes available callback is called when another plugin gives up access\nto the multiplayer planes. Use this to wait for access to multiplayer.",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:24.134187+00:00",
      "title": "XPLMPlanesAvailable_f | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMPlanesAvailable_f/"
    },
    "https://developer.x-plane.com/sdk/XPLMPlayPCMOnBus/": {
      "api_signatures": [
        {
          "description": "Play an in-memory audio buffer on a given audio bus. The resulting FMOD channel is returned. PAY ATTENTION TO THE CALLBACK - when the sample completes or is stopped by X-Plane, the channel will go away. It’s up to you to listen for the callback and invalidate any copy of the channel pointer you have lying around. The callback is optional because if you have no intention of interacting with the sound after it’s launched, then you don’t need to keep the channel pointer at all. The sound is not started instantly. Instead, it will be started the next time X-Plane refreshes the sound system, typically at the start of the next frame. This allows you to set the initial position for the sound, if required. The callback will be called on the main thread, and will be called only once per sound. If the call fails and you provide a callback function, you will get a callback with an FMOD status code.",
          "name": "XPLMPlayPCMOnBus",
          "parameters": [],
          "signature": "XPLM_API FMOD_CHANNEL*XPLMPlayPCMOnBus(\n                         void *               audioBuffer,\n                         uint32_t             bufferSize,\n                         FMOD_SOUND_FORMAT    soundFormat,\n                         int                  freqHz,\n                         int                  numChannels,\n                         int                  loop,XPLMAudioBusaudioType,XPLMPCMComplete_finCallback,\n                         void *               inRefcon);    /* Can be NULL */"
        }
      ],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/XPLMPlayPCMOnBus/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPLMPlayPCMOnBus\"><a href=\"/sdk/XPLMPlayPCMOnBus/\">XPLMPlayPCMOnBus</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API FMOD_CHANNEL* <a href=\"/sdk/XPLMPlayPCMOnBus/\">XPLMPlayPCMOnBus</a>(\n                         void *               audioBuffer,\n                         uint32_t             bufferSize,\n                         FMOD_SOUND_FORMAT    soundFormat,\n                         int                  freqHz,\n                         int                  numChannels,\n                         int                  loop,\n                         <a href=\"/sdk/XPLMAudioBus/\">XPLMAudioBus</a>         audioType,\n                         <a href=\"/sdk/XPLMPCMComplete_f/\">XPLMPCMComplete_f</a>    inCallback,\n                         void *               inRefcon);    /* Can be NULL */\n</code></pre><p>Play an in-memory audio buffer on a given audio bus. The resulting FMOD channel is returned. PAY ATTENTION TO THE CALLBACK - when the sample completes or is stopped by X-Plane, the channel will go away. It’s up to you to listen for the callback and invalidate any copy of the channel pointer you have lying around. The callback is optional because if you have no intention of interacting with the sound after it’s launched, then you don’t need to keep the channel pointer at all. The sound is not started instantly. Instead, it will be started the next time X-Plane refreshes the sound system, typically at the start of the next frame. This allows you to set the initial position for the sound, if required. The callback will be called on the main thread, and will be called only once per sound. If the call fails and you provide a callback function, you will get a callback with an FMOD status code.</p></div></div></article>",
      "code_examples": [
        {
          "char_count": 508,
          "code": "XPLM_API FMOD_CHANNEL*XPLMPlayPCMOnBus(\n                         void *               audioBuffer,\n                         uint32_t             bufferSize,\n                         FMOD_SOUND_FORMAT    soundFormat,\n                         int                  freqHz,\n                         int                  numChannels,\n                         int                  loop,XPLMAudioBusaudioType,XPLMPCMComplete_finCallback,\n                         void *               inRefcon);    /* Can be NULL */",
          "context": "XPLMPlayPCMOnBus",
          "id": "example_0",
          "language": "c",
          "line_count": 8,
          "type": "snippet"
        }
      ],
      "cross_references": [
        "XPLMAudioBus"
      ],
      "markdown": "### [XPLMPlayPCMOnBus](/sdk/XPLMPlayPCMOnBus/)\n\n```cpp\nXPLM_API FMOD_CHANNEL* XPLMPlayPCMOnBus(\n                         void *               audioBuffer,\n                         uint32_t             bufferSize,\n                         FMOD_SOUND_FORMAT    soundFormat,\n                         int                  freqHz,\n                         int                  numChannels,\n                         int                  loop,\n                         XPLMAudioBus         audioType,\n                         XPLMPCMComplete_f    inCallback,\n                         void *               inRefcon);    /* Can be NULL */\n\n```\n\nPlay an in-memory audio buffer on a given audio bus. The resulting FMOD channel\nis returned. PAY ATTENTION TO THE CALLBACK - when the sample completes or is\nstopped by X-Plane, the channel will go away. It’s up to you to listen for the\ncallback and invalidate any copy of the channel pointer you have lying around.\nThe callback is optional because if you have no intention of interacting with\nthe sound after it’s launched, then you don’t need to keep the channel pointer\nat all. The sound is not started instantly. Instead, it will be started the next\ntime X-Plane refreshes the sound system, typically at the start of the next\nframe. This allows you to set the initial position for the sound, if required.\nThe callback will be called on the main thread, and will be called only once per\nsound. If the call fails and you provide a callback function, you will get a\ncallback with an FMOD status code.",
      "own_functions": [
        "XPLMPlayPCMOnBus"
      ],
      "processing_timestamp": "2025-06-25T20:39:22.392393+00:00",
      "title": "XPLMPlayPCMOnBus | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMPlayPCMOnBus/"
    },
    "https://developer.x-plane.com/sdk/XPLMPlugin/": {
      "api_signatures": [
        {
          "description": "This routine returns the plugin ID of the calling plug-in. Call this to get your own ID.",
          "name": "XPLMGetMyID",
          "parameters": [],
          "signature": "XPLM_APIXPLMPluginIDXPLMGetMyID(void);"
        },
        {
          "description": "This routine returns the total number of plug-ins that are loaded, both disabled and enabled.",
          "name": "XPLMCountPlugins",
          "parameters": [],
          "signature": "XPLM_API intXPLMCountPlugins(void);"
        },
        {
          "description": "This routine returns the ID of a plug-in by index. Index is 0 based from 0 toXPLMCountPlugins-1, inclusive. Plugins may be returned in any arbitrary order.",
          "name": "XPLMGetNthPlugin",
          "parameters": [
            {
              "full_declaration": "int                  inIndex",
              "name": "inIndex",
              "type": "int"
            }
          ],
          "signature": "XPLM_APIXPLMPluginIDXPLMGetNthPlugin(\n                         int                  inIndex);"
        },
        {
          "description": "This routine returns the plug-in ID of the plug-in whose file exists at the passed in absolute file system path.XPLM_NO_PLUGIN_IDis returned if the path does not point to a currently loaded plug-in.",
          "name": "XPLMFindPluginByPath",
          "parameters": [
            {
              "full_declaration": "const char *         inPath",
              "name": "inPath",
              "type": "const char *"
            }
          ],
          "signature": "XPLM_APIXPLMPluginIDXPLMFindPluginByPath(\n                         const char *         inPath);"
        },
        {
          "description": "This routine returns the plug-in ID of the plug-in whose signature matches what is passed in orXPLM_NO_PLUGIN_IDif no running plug-in has this signature. Signatures are the best way to identify another plug-in as they are independent of the file system path of a plug-in or the human-readable plug-in name, and should be unique for all plug-ins. Use this routine to locate another plugin that your plugin interoperates with",
          "name": "XPLMFindPluginBySignature",
          "parameters": [
            {
              "full_declaration": "const char *         inSignature",
              "name": "inSignature",
              "type": "const char *"
            }
          ],
          "signature": "XPLM_APIXPLMPluginIDXPLMFindPluginBySignature(\n                         const char *         inSignature);"
        },
        {
          "description": "This routine returns information about a plug-in. Each parameter should be a pointer to a buffer of at least 256 characters, or NULL to not receive the information.",
          "name": "XPLMGetPluginInfo",
          "parameters": [],
          "signature": "XPLM_API voidXPLMGetPluginInfo(XPLMPluginIDinPlugin,\n                         char *               outName,    /* Can be NULL */\n                         char *               outFilePath,    /* Can be NULL */\n                         char *               outSignature,    /* Can be NULL */\n                         char *               outDescription);    /* Can be NULL */"
        },
        {
          "description": "Returns whether the specified plug-in is enabled for running.",
          "name": "XPLMIsPluginEnabled",
          "parameters": [],
          "signature": "XPLM_API intXPLMIsPluginEnabled(XPLMPluginIDinPluginID);"
        },
        {
          "description": "This routine enables a plug-in if it is not already enabled. It returns 1 if the plugin was enabled or successfully enables itself, 0 if it does not. Plugins may fail to enable (for example, if resources cannot be acquired) by returning 0 from their XPluginEnable callback.",
          "name": "XPLMEnablePlugin",
          "parameters": [],
          "signature": "XPLM_API intXPLMEnablePlugin(XPLMPluginIDinPluginID);"
        },
        {
          "description": "This routine disableds an enabled plug-in.",
          "name": "XPLMDisablePlugin",
          "parameters": [],
          "signature": "XPLM_API voidXPLMDisablePlugin(XPLMPluginIDinPluginID);"
        },
        {
          "description": "This routine reloads all plug-ins. Once this routine is called and you return from the callback you were within (e.g. a menu select callback) you will receive your XPluginDisable and XPluginStop callbacks and your DLL will be unloaded, then the start process happens as if the sim was starting up.",
          "name": "XPLMReloadPlugins",
          "parameters": [],
          "signature": "XPLM_API voidXPLMReloadPlugins(void);"
        },
        {
          "description": "This function sends a message to another plug-in or X-Plane. PassXPLM_NO_PLUGIN_IDto broadcast to all plug-ins. Only enabled plug-ins with a message receive function receive the message.",
          "name": "XPLMSendMessageToPlugin",
          "parameters": [
            {
              "full_declaration": "int                  inMessage",
              "name": "inMessage",
              "type": "int"
            },
            {
              "full_declaration": "void *               inParam",
              "name": "inParam",
              "type": "void *"
            }
          ],
          "signature": "XPLM_API voidXPLMSendMessageToPlugin(XPLMPluginIDinPlugin,\n                         int                  inMessage,\n                         void *               inParam);"
        },
        {
          "description": "This returns 1 if the given installation of X-Plane supports a feature, or 0 if it does not.",
          "name": "XPLMHasFeature",
          "parameters": [
            {
              "full_declaration": "const char *         inFeature",
              "name": "inFeature",
              "type": "const char *"
            }
          ],
          "signature": "XPLM_API intXPLMHasFeature(\n                         const char *         inFeature);"
        },
        {
          "description": "This returns 1 if a feature is currently enabled for your plugin, or 0 if it is not enabled. It is an error to call this routine with an unsupported feature.",
          "name": "XPLMIsFeatureEnabled",
          "parameters": [
            {
              "full_declaration": "const char *         inFeature",
              "name": "inFeature",
              "type": "const char *"
            }
          ],
          "signature": "XPLM_API intXPLMIsFeatureEnabled(\n                         const char *         inFeature);"
        },
        {
          "description": "This routine enables or disables a feature for your plugin. This will change the running behavior of X-Plane and your plugin in some way, depending on the feature.",
          "name": "XPLMEnableFeature",
          "parameters": [
            {
              "full_declaration": "const char *         inFeature",
              "name": "inFeature",
              "type": "const char *"
            },
            {
              "full_declaration": "int                  inEnable",
              "name": "inEnable",
              "type": "int"
            }
          ],
          "signature": "XPLM_API voidXPLMEnableFeature(\n                         const char *         inFeature,\n                         int                  inEnable);"
        },
        {
          "description": "This routine calls your enumerator callback once for each feature that this running version of X-Plane supports. Use this routine to determine all of the features that X-Plane can support.",
          "name": "XPLMEnumerateFeatures",
          "parameters": [
            {
              "full_declaration": "void *               inRef",
              "name": "inRef",
              "type": "void *"
            }
          ],
          "signature": "XPLM_API voidXPLMEnumerateFeatures(XPLMFeatureEnumerator_finEnumerator,\n                         void *               inRef);"
        },
        {
          "name": "intXPLMCountPlugins",
          "signature": "XPLM_API intXPLMCountPlugins(void);",
          "source": "code_block_extraction",
          "type": "function"
        },
        {
          "name": "voidXPLMGetPluginInfo",
          "signature": "XPLM_API voidXPLMGetPluginInfo(XPLMPluginIDinPlugin,\n                         char *               outName,    /* Can be NULL */\n                         char *               outFilePath,    /* Can be NULL */\n                         char *               outSignature,    /* Can be NULL */\n                         char *               outDescription);",
          "source": "code_block_extraction",
          "type": "function"
        },
        {
          "name": "intXPLMIsPluginEnabled",
          "signature": "XPLM_API intXPLMIsPluginEnabled(XPLMPluginIDinPluginID);",
          "source": "code_block_extraction",
          "type": "function"
        },
        {
          "name": "intXPLMEnablePlugin",
          "signature": "XPLM_API intXPLMEnablePlugin(XPLMPluginIDinPluginID);",
          "source": "code_block_extraction",
          "type": "function"
        },
        {
          "name": "voidXPLMDisablePlugin",
          "signature": "XPLM_API voidXPLMDisablePlugin(XPLMPluginIDinPluginID);",
          "source": "code_block_extraction",
          "type": "function"
        },
        {
          "name": "voidXPLMReloadPlugins",
          "signature": "XPLM_API voidXPLMReloadPlugins(void);",
          "source": "code_block_extraction",
          "type": "function"
        },
        {
          "name": "voidXPLMSendMessageToPlugin",
          "signature": "XPLM_API voidXPLMSendMessageToPlugin(XPLMPluginIDinPlugin,\n                         int                  inMessage,\n                         void *               inParam);",
          "source": "code_block_extraction",
          "type": "function"
        },
        {
          "name": "intXPLMHasFeature",
          "signature": "XPLM_API intXPLMHasFeature(\n                         const char *         inFeature);",
          "source": "code_block_extraction",
          "type": "function"
        },
        {
          "name": "intXPLMIsFeatureEnabled",
          "signature": "XPLM_API intXPLMIsFeatureEnabled(\n                         const char *         inFeature);",
          "source": "code_block_extraction",
          "type": "function"
        },
        {
          "name": "voidXPLMEnableFeature",
          "signature": "XPLM_API voidXPLMEnableFeature(\n                         const char *         inFeature,\n                         int                  inEnable);",
          "source": "code_block_extraction",
          "type": "function"
        },
        {
          "name": "voidXPLMEnumerateFeatures",
          "signature": "XPLM_API voidXPLMEnumerateFeatures(XPLMFeatureEnumerator_finEnumerator,\n                         void *               inRef);",
          "source": "code_block_extraction",
          "type": "function"
        }
      ],
      "category": {
        "category": "XPLM_Plugin",
        "module": "Xplm Plugin",
        "url": "https://developer.x-plane.com/sdk/XPLMPlugin/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"api\"><h1 class=\"sdk-api-title\" id=\"XPLMPlugin\"><a href=\"/sdk/XPLMPlugin/\">XPLMPlugin</a>API</h1><p>These APIs provide facilities to find and work with other plugins and manage other plugins.</p><div class=\"component\"><h2 id=\"FINDING PLUGINS\">FINDING PLUGINS</h2><p>These APIs allow you to find another plugin or yourself, or iterate across all plugins. For example, if you wrote an FMS plugin that needed to talk to an autopilot plugin, you could use these APIs to locate the autopilot plugin.</p><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPLMGetMyID\"><a href=\"/sdk/XPLMGetMyID/\">XPLMGetMyID</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API <a href=\"/sdk/XPLMPluginID/\">XPLMPluginID</a> <a href=\"/sdk/XPLMGetMyID/\">XPLMGetMyID</a>(void);\n</code></pre><p>This routine returns the plugin ID of the calling plug-in. Call this to get your own ID.</p></div><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPLMCountPlugins\"><a href=\"/sdk/XPLMCountPlugins/\">XPLMCountPlugins</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API int        <a href=\"/sdk/XPLMCountPlugins/\">XPLMCountPlugins</a>(void);\n</code></pre><p>This routine returns the total number of plug-ins that are loaded, both disabled and enabled.</p></div><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPLMGetNthPlugin\"><a href=\"/sdk/XPLMGetNthPlugin/\">XPLMGetNthPlugin</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API <a href=\"/sdk/XPLMPluginID/\">XPLMPluginID</a> <a href=\"/sdk/XPLMGetNthPlugin/\">XPLMGetNthPlugin</a>(\n                         int                  inIndex);\n</code></pre><p>This routine returns the ID of a plug-in by index. Index is 0 based from 0 to<a href=\"/sdk/XPLMCountPlugins/\">XPLMCountPlugins</a>-1, inclusive. Plugins may be returned in any arbitrary order.</p></div><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPLMFindPluginByPath\"><a href=\"/sdk/XPLMFindPluginByPath/\">XPLMFindPluginByPath</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API <a href=\"/sdk/XPLMPluginID/\">XPLMPluginID</a> <a href=\"/sdk/XPLMFindPluginByPath/\">XPLMFindPluginByPath</a>(\n                         const char *         inPath);\n</code></pre><p>This routine returns the plug-in ID of the plug-in whose file exists at the passed in absolute file system path.<a href=\"/sdk/XPLM_NO_PLUGIN_ID/\">XPLM_NO_PLUGIN_ID</a>is returned if the path does not point to a currently loaded plug-in.</p></div><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPLMFindPluginBySignature\"><a href=\"/sdk/XPLMFindPluginBySignature/\">XPLMFindPluginBySignature</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API <a href=\"/sdk/XPLMPluginID/\">XPLMPluginID</a> <a href=\"/sdk/XPLMFindPluginBySignature/\">XPLMFindPluginBySignature</a>(\n                         const char *         inSignature);\n</code></pre><p>This routine returns the plug-in ID of the plug-in whose signature matches what is passed in or<a href=\"/sdk/XPLM_NO_PLUGIN_ID/\">XPLM_NO_PLUGIN_ID</a>if no running plug-in has this signature. Signatures are the best way to identify another plug-in as they are independent of the file system path of a plug-in or the human-readable plug-in name, and should be unique for all plug-ins. Use this routine to locate another plugin that your plugin interoperates with</p></div><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPLMGetPluginInfo\"><a href=\"/sdk/XPLMGetPluginInfo/\">XPLMGetPluginInfo</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API void       <a href=\"/sdk/XPLMGetPluginInfo/\">XPLMGetPluginInfo</a>(\n                         <a href=\"/sdk/XPLMPluginID/\">XPLMPluginID</a>         inPlugin,\n                         char *               outName,    /* Can be NULL */\n                         char *               outFilePath,    /* Can be NULL */\n                         char *               outSignature,    /* Can be NULL */\n                         char *               outDescription);    /* Can be NULL */\n</code></pre><p>This routine returns information about a plug-in. Each parameter should be a pointer to a buffer of at least 256 characters, or NULL to not receive the information.</p><p>outName - the human-readable name of the plug-in. outFilePath - the absolute file path to the file that contains this plug-in. outSignature - a unique string that identifies this plug-in. outDescription - a human-readable description of this plug-in.</p></div></div><div class=\"component\"><h2 id=\"ENABLING/DISABLING PLUG-INS\">ENABLING/DISABLING PLUG-INS</h2><p>These routines are used to work with plug-ins and manage them. Most plugins will not need to use these APIs.</p><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPLMIsPluginEnabled\"><a href=\"/sdk/XPLMIsPluginEnabled/\">XPLMIsPluginEnabled</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API int        <a href=\"/sdk/XPLMIsPluginEnabled/\">XPLMIsPluginEnabled</a>(\n                         <a href=\"/sdk/XPLMPluginID/\">XPLMPluginID</a>         inPluginID);\n</code></pre><p>Returns whether the specified plug-in is enabled for running.</p></div><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPLMEnablePlugin\"><a href=\"/sdk/XPLMEnablePlugin/\">XPLMEnablePlugin</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API int        <a href=\"/sdk/XPLMEnablePlugin/\">XPLMEnablePlugin</a>(\n                         <a href=\"/sdk/XPLMPluginID/\">XPLMPluginID</a>         inPluginID);\n</code></pre><p>This routine enables a plug-in if it is not already enabled. It returns 1 if the plugin was enabled or successfully enables itself, 0 if it does not. Plugins may fail to enable (for example, if resources cannot be acquired) by returning 0 from their XPluginEnable callback.</p></div><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPLMDisablePlugin\"><a href=\"/sdk/XPLMDisablePlugin/\">XPLMDisablePlugin</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API void       <a href=\"/sdk/XPLMDisablePlugin/\">XPLMDisablePlugin</a>(\n                         <a href=\"/sdk/XPLMPluginID/\">XPLMPluginID</a>         inPluginID);\n</code></pre><p>This routine disableds an enabled plug-in.</p></div><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPLMReloadPlugins\"><a href=\"/sdk/XPLMReloadPlugins/\">XPLMReloadPlugins</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API void       <a href=\"/sdk/XPLMReloadPlugins/\">XPLMReloadPlugins</a>(void);\n</code></pre><p>This routine reloads all plug-ins. Once this routine is called and you return from the callback you were within (e.g. a menu select callback) you will receive your XPluginDisable and XPluginStop callbacks and your DLL will be unloaded, then the start process happens as if the sim was starting up.</p></div></div><div class=\"component\"><h2 id=\"INTERPLUGIN MESSAGING\">INTERPLUGIN MESSAGING</h2><p>Plugin messages are defined as 32-bit integers. Messages below 0x00FFFFFF are reserved for X-Plane and the plugin SDK.</p><p>Messages come with a pointer parameter; the meaning of this pointer depends on the message itself. In some messages, the pointer parameter contains an actual typed pointer to data that can be inspected in the plugin; in these cases the documentation will state that the parameter “points to” information.</p><p>in other cases, the value of the pointer is actually an integral number stuffed into the pointer’s storage. In these second cases, the pointer parameter needs to be cast, not dereferenced. In these caess, the documentation will state that the parameter “contains” a value, which will always be an integral type.</p><p>Some messages don’t use the pointer parameter - in this case your plugin should ignore it.</p><p>Messages have two conceptual uses: notifications and commands. Commands are sent from one plugin to another to induce behavior; notifications are sent from one plugin to all others for informational purposes. It is important that commands and notifications not have the same values because this could cause a notification sent by one plugin to accidentally induce a command in another.</p><p>By convention, plugin-defined notifications should have the high bit set (e.g. be greater or equal to unsigned 0x8000000) while commands should have this bit be cleared.</p><p>The following messages are sent to your plugin by X-Plane.</p><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"XPLM_MSG_PLANE_CRASHED\"><a href=\"/sdk/XPLM_MSG_PLANE_CRASHED/\">XPLM_MSG_PLANE_CRASHED</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_MSG_PLANE_CRASHED/\">XPLM_MSG_PLANE_CRASHED</a> 101</code></pre><p>This message is sent to your plugin whenever the user’s plane crashes. The parameter is ignored.</p></div><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"XPLM_MSG_PLANE_LOADED\"><a href=\"/sdk/XPLM_MSG_PLANE_LOADED/\">XPLM_MSG_PLANE_LOADED</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_MSG_PLANE_LOADED/\">XPLM_MSG_PLANE_LOADED</a> 102</code></pre><p>This message is sent to your plugin whenever a new plane is loaded. The parameter contains the index number of the plane being loaded; 0 indicates the user’s plane.</p></div><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"XPLM_MSG_AIRPORT_LOADED\"><a href=\"/sdk/XPLM_MSG_AIRPORT_LOADED/\">XPLM_MSG_AIRPORT_LOADED</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_MSG_AIRPORT_LOADED/\">XPLM_MSG_AIRPORT_LOADED</a> 103</code></pre><p>This messages is sent whenever the user’s plane is positioned at a new airport. The parameter is ignored.</p></div><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"XPLM_MSG_SCENERY_LOADED\"><a href=\"/sdk/XPLM_MSG_SCENERY_LOADED/\">XPLM_MSG_SCENERY_LOADED</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_MSG_SCENERY_LOADED/\">XPLM_MSG_SCENERY_LOADED</a> 104</code></pre><p>This message is sent whenever new scenery is loaded. Use datarefs to determine the new scenery files that were loaded. The parameter is ignored.</p></div><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"XPLM_MSG_AIRPLANE_COUNT_CHANGED\"><a href=\"/sdk/XPLM_MSG_AIRPLANE_COUNT_CHANGED/\">XPLM_MSG_AIRPLANE_COUNT_CHANGED</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_MSG_AIRPLANE_COUNT_CHANGED/\">XPLM_MSG_AIRPLANE_COUNT_CHANGED</a> 105</code></pre><p>This message is sent whenever the user adjusts the number of X-Plane aircraft models. You must use XPLMCountPlanes to find out how many planes are now available. This message will only be sent in XP7 and higher because in XP6 the number of aircraft is not user-adjustable. The parameter is ignored.</p></div><div class=\"define XPLM200\"><h3 class=\"sdk-api-define\" id=\"XPLM_MSG_PLANE_UNLOADED\"><a href=\"/sdk/XPLM_MSG_PLANE_UNLOADED/\">XPLM_MSG_PLANE_UNLOADED</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_MSG_PLANE_UNLOADED/\">XPLM_MSG_PLANE_UNLOADED</a> 106</code></pre><p>This message is sent to your plugin whenever a plane is unloaded. The parameter contains the index number of the plane being unloaded; 0 indicates the user’s plane. The parameter is of type int, passed as the value of the pointer. (That is: the parameter is an int, not a pointer to an int.)</p></div><div class=\"define XPLM210\"><h3 class=\"sdk-api-define\" id=\"XPLM_MSG_WILL_WRITE_PREFS\"><a href=\"/sdk/XPLM_MSG_WILL_WRITE_PREFS/\">XPLM_MSG_WILL_WRITE_PREFS</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_MSG_WILL_WRITE_PREFS/\">XPLM_MSG_WILL_WRITE_PREFS</a> 107</code></pre><p>This message is sent to your plugin right before X-Plane writes its preferences file. You can use this for two purposes: to write your own preferences, and to modify any datarefs to influence preferences output. For example, if your plugin temporarily modifies saved preferences, you can put them back to their default values here to avoid having the tweaks be persisted if your plugin is not loaded on the next invocation of X-Plane. The parameter is ignored.</p></div><div class=\"define XPLM210\"><h3 class=\"sdk-api-define\" id=\"XPLM_MSG_LIVERY_LOADED\"><a href=\"/sdk/XPLM_MSG_LIVERY_LOADED/\">XPLM_MSG_LIVERY_LOADED</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_MSG_LIVERY_LOADED/\">XPLM_MSG_LIVERY_LOADED</a> 108</code></pre><p>This message is sent to your plugin right after a livery is loaded for an airplane. You can use this to check the new livery (via datarefs) and react accordingly. The parameter contains the index number of the aircraft whose livery is changing.</p></div><div class=\"define XPLM301\"><h3 class=\"sdk-api-define\" id=\"XPLM_MSG_ENTERED_VR\"><a href=\"/sdk/XPLM_MSG_ENTERED_VR/\">XPLM_MSG_ENTERED_VR</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_MSG_ENTERED_VR/\">XPLM_MSG_ENTERED_VR</a>  109</code></pre><p>Sent to your plugin right before X-Plane enters virtual reality mode (at which time any windows that are not positioned in VR mode will no longer be visible to the user). The parameter is unused and should be ignored.</p></div><div class=\"define XPLM301\"><h3 class=\"sdk-api-define\" id=\"XPLM_MSG_EXITING_VR\"><a href=\"/sdk/XPLM_MSG_EXITING_VR/\">XPLM_MSG_EXITING_VR</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_MSG_EXITING_VR/\">XPLM_MSG_EXITING_VR</a>  110</code></pre><p>Sent to your plugin right before X-Plane leaves virtual reality mode (at which time you may want to clean up windows that are positioned in VR mode). The parameter is unused and should be ignored.</p></div><div class=\"define XPLM303\"><h3 class=\"sdk-api-define\" id=\"XPLM_MSG_RELEASE_PLANES\"><a href=\"/sdk/XPLM_MSG_RELEASE_PLANES/\">XPLM_MSG_RELEASE_PLANES</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_MSG_RELEASE_PLANES/\">XPLM_MSG_RELEASE_PLANES</a> 111</code></pre><p>Sent to your plugin if another plugin wants to take over AI planes. If you are a synthetic traffic provider, that probably means a plugin for an online network has connected and wants to supply aircraft flown by real humans and you should cease to provide synthetic traffic. If however you are providing online traffic from real humans, you probably don’t want to disconnect, in which case you just ignore this message. The sender is the plugin ID of the plugin asking for control of the planes now. You can use it to find out who is requesting and whether you should yield to them. Synthetic traffic providers should always yield to online networks. The parameter is unused and should be ignored.</p></div><div class=\"define XPLM400\"><h3 class=\"sdk-api-define\" id=\"XPLM_MSG_FMOD_BANK_LOADED\"><a href=\"/sdk/XPLM_MSG_FMOD_BANK_LOADED/\">XPLM_MSG_FMOD_BANK_LOADED</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_MSG_FMOD_BANK_LOADED/\">XPLM_MSG_FMOD_BANK_LOADED</a> 112</code></pre><p>Sent to your plugin after FMOD sound banks are loaded. The parameter is the<a href=\"/sdk/XPLMBankID/\">XPLMBankID</a>enum in<a href=\"/sdk/XPLMSound/\">XPLMSound</a>.h, 0 for the master bank and 1 for the radio bank.</p></div><div class=\"define XPLM400\"><h3 class=\"sdk-api-define\" id=\"XPLM_MSG_FMOD_BANK_UNLOADING\"><a href=\"/sdk/XPLM_MSG_FMOD_BANK_UNLOADING/\">XPLM_MSG_FMOD_BANK_UNLOADING</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_MSG_FMOD_BANK_UNLOADING/\">XPLM_MSG_FMOD_BANK_UNLOADING</a> 113</code></pre><p>Sent to your plugin before FMOD sound banks are unloaded. Any associated resources should be cleaned up at this point. The parameter is the<a href=\"/sdk/XPLMBankID/\">XPLMBankID</a>enum in<a href=\"/sdk/XPLMSound/\">XPLMSound</a>.h, 0 for the master bank and 1 for the radio bank.</p></div><div class=\"define XPLM400\"><h3 class=\"sdk-api-define\" id=\"XPLM_MSG_DATAREFS_ADDED\"><a href=\"/sdk/XPLM_MSG_DATAREFS_ADDED/\">XPLM_MSG_DATAREFS_ADDED</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_MSG_DATAREFS_ADDED/\">XPLM_MSG_DATAREFS_ADDED</a> 114</code></pre><p>Sent to your plugin per-frame (at-most) when/if datarefs are added. It will include the new data ref total count so that your plugin can keep a local cache of the total, see what’s changed and know which ones to inquire about if it cares.</p><p>This message is only sent to plugins that enable the XPLM_WANTS_DATAREF_NOTIFICATIONS feature.</p></div><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPLMSendMessageToPlugin\"><a href=\"/sdk/XPLMSendMessageToPlugin/\">XPLMSendMessageToPlugin</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API void       <a href=\"/sdk/XPLMSendMessageToPlugin/\">XPLMSendMessageToPlugin</a>(\n                         <a href=\"/sdk/XPLMPluginID/\">XPLMPluginID</a>         inPlugin,\n                         int                  inMessage,\n                         void *               inParam);\n</code></pre><p>This function sends a message to another plug-in or X-Plane. Pass<a href=\"/sdk/XPLM_NO_PLUGIN_ID/\">XPLM_NO_PLUGIN_ID</a>to broadcast to all plug-ins. Only enabled plug-ins with a message receive function receive the message.</p></div></div><div class=\"component XPLM200\"><h2 id=\"Plugin Features API\">Plugin Features API</h2><p>The plugin features API allows your plugin to “sign up” for additional capabilities and plugin system features that are normally disabled for backward compatibility or performance. This allows advanced plugins to “opt-in” to new behavior.</p><p>Each feature is defined by a permanent string name. The feature string names will vary with the particular installation of X-Plane, so plugins should not expect a feature to be guaranteed present.</p><h2>XPLM_WANTS_REFLECTIONS</h2><p>Available in the SDK 2.0 and later for X-Plane 9, enabling this capability causes your plugin to receive drawing hook callbacks when X-Plane builds its off-screen reflection and shadow rendering passes. Plugins should enable this and examine the dataref sim/graphics/view/plane_render_type to determine whether the drawing callback is for a reflection, shadow calculation, or the main screen. Rendering can be simlified or omitted for reflections, and non-solid drawing should be skipped for shadow calculations.</p><p><strong>Note</strong>: direct drawing via draw callbacks is not recommended; use the<a href=\"/sdk/XPLMInstance/\">XPLMInstance</a>API to create object models instead.</p><h2>XPLM_USE_NATIVE_PATHS</h2><p>available in the SDK 2.1 and later for X-Plane 10, this modifies the plugin system to use Unix-style paths on all operating systems. With this enabled:</p><ul><li>OS X paths will match the native OS X Unix.</li><li>Windows will use forward slashes but preserve C:\\ or another drive letter when using complete file paths.</li><li>Linux uses its native file system path scheme.</li></ul><p>Without this enabled:</p><ul><li>OS X will use CFM file paths separated by a colon.</li><li>Windows will use back-slashes and conventional DOS paths.</li><li>Linux uses its native file system path scheme.</li></ul><p>All plugins should enable this feature on OS X to access the native file system.</p><h2>XPLM_USE_NATIVE_WIDGET_WINDOWS</h2><p>Available in the SDK 3.0.2 SDK, this capability tells the widgets library to use new, modern X-Plane backed<a href=\"/sdk/XPLMDisplay/\">XPLMDisplay</a>windows to anchor all widget trees. Without it, widgets will always use legacy windows.</p><p>Plugins should enable this to allow their widget hierarchies to respond to the user’s UI size settings and to map widget-based windwos to a VR HMD.</p><p>Before enabling this, make sure any custom widget code in your plugin is prepared to cope with the UI coordinate system not being th same as the OpenGL window coordinate system.</p><h2>XPLM_WANTS_DATAREF_NOTIFICATIONS</h2><p>Available in the SDK 4.0.0, this capability tells X-Plane to to send the enabling plugin the new<a href=\"/sdk/XPLM_MSG_DATAREFS_ADDED/\">XPLM_MSG_DATAREFS_ADDED</a>message any time new datarefs are added. The SDK will coalesce consecutive dataref registrations to minimize the number of messages sent.</p><div class=\"callback\"><h3 class=\"sdk-api-callback\" id=\"XPLMFeatureEnumerator_f\"><a href=\"/sdk/XPLMFeatureEnumerator_f/\">XPLMFeatureEnumerator_f</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>typedef void (* <a href=\"/sdk/XPLMFeatureEnumerator_f/\">XPLMFeatureEnumerator_f</a>)(\n                         const char *         inFeature,\n                         void *               inRef);\n</code></pre><p>You pass an<a href=\"/sdk/XPLMFeatureEnumerator_f/\">XPLMFeatureEnumerator_f</a>to get a list of all features supported by a given version running version of X-Plane. This routine is called once for each feature.</p></div><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPLMHasFeature\"><a href=\"/sdk/XPLMHasFeature/\">XPLMHasFeature</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API int        <a href=\"/sdk/XPLMHasFeature/\">XPLMHasFeature</a>(\n                         const char *         inFeature);\n</code></pre><p>This returns 1 if the given installation of X-Plane supports a feature, or 0 if it does not.</p></div><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPLMIsFeatureEnabled\"><a href=\"/sdk/XPLMIsFeatureEnabled/\">XPLMIsFeatureEnabled</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API int        <a href=\"/sdk/XPLMIsFeatureEnabled/\">XPLMIsFeatureEnabled</a>(\n                         const char *         inFeature);\n</code></pre><p>This returns 1 if a feature is currently enabled for your plugin, or 0 if it is not enabled. It is an error to call this routine with an unsupported feature.</p></div><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPLMEnableFeature\"><a href=\"/sdk/XPLMEnableFeature/\">XPLMEnableFeature</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API void       <a href=\"/sdk/XPLMEnableFeature/\">XPLMEnableFeature</a>(\n                         const char *         inFeature,\n                         int                  inEnable);\n</code></pre><p>This routine enables or disables a feature for your plugin. This will change the running behavior of X-Plane and your plugin in some way, depending on the feature.</p></div><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPLMEnumerateFeatures\"><a href=\"/sdk/XPLMEnumerateFeatures/\">XPLMEnumerateFeatures</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API void       <a href=\"/sdk/XPLMEnumerateFeatures/\">XPLMEnumerateFeatures</a>(\n                         <a href=\"/sdk/XPLMFeatureEnumerator_f/\">XPLMFeatureEnumerator_f</a> inEnumerator,\n                         void *               inRef);\n</code></pre><p>This routine calls your enumerator callback once for each feature that this running version of X-Plane supports. Use this routine to determine all of the features that X-Plane can support.</p></div></div></div></div></article>",
      "code_examples": [
        {
          "char_count": 93,
          "code": "XPLM_APIXPLMPluginIDXPLMGetNthPlugin(\n                         int                  inIndex);",
          "context": "XPLMGetNthPlugin",
          "id": "example_2",
          "language": "c",
          "line_count": 2,
          "type": "snippet"
        },
        {
          "char_count": 96,
          "code": "XPLM_APIXPLMPluginIDXPLMFindPluginByPath(\n                         const char *         inPath);",
          "context": "XPLMFindPluginByPath",
          "id": "example_3",
          "language": "c",
          "line_count": 2,
          "type": "snippet"
        },
        {
          "char_count": 106,
          "code": "XPLM_APIXPLMPluginIDXPLMFindPluginBySignature(\n                         const char *         inSignature);",
          "context": "XPLMFindPluginBySignature",
          "id": "example_4",
          "language": "c",
          "line_count": 2,
          "type": "snippet"
        },
        {
          "char_count": 373,
          "code": "XPLM_API voidXPLMGetPluginInfo(XPLMPluginIDinPlugin,\n                         char *               outName,    /* Can be NULL */\n                         char *               outFilePath,    /* Can be NULL */\n                         char *               outSignature,    /* Can be NULL */\n                         char *               outDescription);    /* Can be NULL */",
          "context": "XPLMGetPluginInfo",
          "id": "example_5",
          "language": "c",
          "line_count": 5,
          "type": "snippet"
        },
        {
          "char_count": 56,
          "code": "XPLM_API intXPLMIsPluginEnabled(XPLMPluginIDinPluginID);",
          "context": "XPLMIsPluginEnabled",
          "id": "example_6",
          "language": "c",
          "line_count": 1,
          "type": "snippet"
        },
        {
          "char_count": 53,
          "code": "XPLM_API intXPLMEnablePlugin(XPLMPluginIDinPluginID);",
          "context": "XPLMEnablePlugin",
          "id": "example_7",
          "language": "c",
          "line_count": 1,
          "type": "snippet"
        },
        {
          "char_count": 55,
          "code": "XPLM_API voidXPLMDisablePlugin(XPLMPluginIDinPluginID);",
          "context": "XPLMDisablePlugin",
          "id": "example_8",
          "language": "cpp",
          "line_count": 1,
          "type": "snippet"
        },
        {
          "char_count": 171,
          "code": "XPLM_API voidXPLMSendMessageToPlugin(XPLMPluginIDinPlugin,\n                         int                  inMessage,\n                         void *               inParam);",
          "context": "XPLMSendMessageToPlugin",
          "id": "example_24",
          "language": "c",
          "line_count": 3,
          "type": "snippet"
        },
        {
          "char_count": 151,
          "code": "typedef void (*XPLMFeatureEnumerator_f)(\n                         const char *         inFeature,\n                         void *               inRef);",
          "context": "XPLMFeatureEnumerator_f",
          "id": "example_25",
          "language": "c",
          "line_count": 3,
          "type": "snippet"
        },
        {
          "char_count": 85,
          "code": "XPLM_API intXPLMHasFeature(\n                         const char *         inFeature);",
          "context": "XPLMHasFeature",
          "id": "example_26",
          "language": "c",
          "line_count": 2,
          "type": "snippet"
        },
        {
          "char_count": 91,
          "code": "XPLM_API intXPLMIsFeatureEnabled(\n                         const char *         inFeature);",
          "context": "XPLMIsFeatureEnabled",
          "id": "example_27",
          "language": "c",
          "line_count": 2,
          "type": "snippet"
        },
        {
          "char_count": 145,
          "code": "XPLM_API voidXPLMEnableFeature(\n                         const char *         inFeature,\n                         int                  inEnable);",
          "context": "XPLMEnableFeature",
          "id": "example_28",
          "language": "c",
          "line_count": 3,
          "type": "snippet"
        },
        {
          "char_count": 125,
          "code": "XPLM_API voidXPLMEnumerateFeatures(XPLMFeatureEnumerator_finEnumerator,\n                         void *               inRef);",
          "context": "XPLMEnumerateFeatures",
          "id": "example_29",
          "language": "c",
          "line_count": 2,
          "type": "snippet"
        }
      ],
      "cross_references": [
        "XPLMInstance",
        "unsigned",
        "XPLMBankID",
        "XPLMDisplay",
        "XPLMSound"
      ],
      "markdown": "# [XPLMPlugin](/sdk/XPLMPlugin/)API\n\nThese APIs provide facilities to find and work with other plugins and manage\nother plugins.\n\n## FINDING PLUGINS\n\nThese APIs allow you to find another plugin or yourself, or iterate across all\nplugins. For example, if you wrote an FMS plugin that needed to talk to an\nautopilot plugin, you could use these APIs to locate the autopilot plugin.\n\n### [XPLMGetMyID](/sdk/XPLMGetMyID/)\n\n```cpp\nXPLM_API XPLMPluginID XPLMGetMyID(void);\n\n```\n\nThis routine returns the plugin ID of the calling plug-in. Call this to get your\nown ID.\n\n### [XPLMCountPlugins](/sdk/XPLMCountPlugins/)\n\n```cpp\nXPLM_API int        XPLMCountPlugins(void);\n\n```\n\nThis routine returns the total number of plug-ins that are loaded, both disabled\nand enabled.\n\n### [XPLMGetNthPlugin](/sdk/XPLMGetNthPlugin/)\n\n```cpp\nXPLM_API XPLMPluginID XPLMGetNthPlugin(\n                         int                  inIndex);\n\n```\n\nThis routine returns the ID of a plug-in by index. Index is 0 based from 0\nto[XPLMCountPlugins](/sdk/XPLMCountPlugins/)-1, inclusive. Plugins may be\nreturned in any arbitrary order.\n\n### [XPLMFindPluginByPath](/sdk/XPLMFindPluginByPath/)\n\n```cpp\nXPLM_API XPLMPluginID XPLMFindPluginByPath(\n                         const char *         inPath);\n\n```\n\nThis routine returns the plug-in ID of the plug-in whose file exists at the\npassed in absolute file system\npath.[XPLM_NO_PLUGIN_ID](/sdk/XPLM_NO_PLUGIN_ID/)is returned if the path does\nnot point to a currently loaded plug-in.\n\n### [XPLMFindPluginBySignature](/sdk/XPLMFindPluginBySignature/)\n\n```cpp\nXPLM_API XPLMPluginID XPLMFindPluginBySignature(\n                         const char *         inSignature);\n\n```\n\nThis routine returns the plug-in ID of the plug-in whose signature matches what\nis passed in or[XPLM_NO_PLUGIN_ID](/sdk/XPLM_NO_PLUGIN_ID/)if no running plug-in\nhas this signature. Signatures are the best way to identify another plug-in as\nthey are independent of the file system path of a plug-in or the human-readable\nplug-in name, and should be unique for all plug-ins. Use this routine to locate\nanother plugin that your plugin interoperates with\n\n### [XPLMGetPluginInfo](/sdk/XPLMGetPluginInfo/)\n\n```cpp\nXPLM_API void       XPLMGetPluginInfo(\n                         XPLMPluginID         inPlugin,\n                         char *               outName,    /* Can be NULL */\n                         char *               outFilePath,    /* Can be NULL */\n                         char *               outSignature,    /* Can be NULL */\n                         char *               outDescription);    /* Can be NULL */\n\n```\n\nThis routine returns information about a plug-in. Each parameter should be a\npointer to a buffer of at least 256 characters, or NULL to not receive the\ninformation.\n\noutName - the human-readable name of the plug-in. outFilePath - the absolute\nfile path to the file that contains this plug-in. outSignature - a unique string\nthat identifies this plug-in. outDescription - a human-readable description of\nthis plug-in.\n\n## ENABLING/DISABLING PLUG-INS\n\nThese routines are used to work with plug-ins and manage them. Most plugins will\nnot need to use these APIs.\n\n### [XPLMIsPluginEnabled](/sdk/XPLMIsPluginEnabled/)\n\n```cpp\nXPLM_API int        XPLMIsPluginEnabled(\n                         XPLMPluginID         inPluginID);\n\n```\n\nReturns whether the specified plug-in is enabled for running.\n\n### [XPLMEnablePlugin](/sdk/XPLMEnablePlugin/)\n\n```cpp\nXPLM_API int        XPLMEnablePlugin(\n                         XPLMPluginID         inPluginID);\n\n```\n\nThis routine enables a plug-in if it is not already enabled. It returns 1 if the\nplugin was enabled or successfully enables itself, 0 if it does not. Plugins may\nfail to enable (for example, if resources cannot be acquired) by returning 0\nfrom their XPluginEnable callback.\n\n### [XPLMDisablePlugin](/sdk/XPLMDisablePlugin/)\n\n```cpp\nXPLM_API void       XPLMDisablePlugin(\n                         XPLMPluginID         inPluginID);\n\n```\n\nThis routine disableds an enabled plug-in.\n\n### [XPLMReloadPlugins](/sdk/XPLMReloadPlugins/)\n\n```cpp\nXPLM_API void       XPLMReloadPlugins(void);\n\n```\n\nThis routine reloads all plug-ins. Once this routine is called and you return\nfrom the callback you were within (e.g. a menu select callback) you will receive\nyour XPluginDisable and XPluginStop callbacks and your DLL will be unloaded,\nthen the start process happens as if the sim was starting up.\n\n## INTERPLUGIN MESSAGING\n\nPlugin messages are defined as 32-bit integers. Messages below 0x00FFFFFF are\nreserved for X-Plane and the plugin SDK.\n\nMessages come with a pointer parameter; the meaning of this pointer depends on\nthe message itself. In some messages, the pointer parameter contains an actual\ntyped pointer to data that can be inspected in the plugin; in these cases the\ndocumentation will state that the parameter “points to” information.\n\nin other cases, the value of the pointer is actually an integral number stuffed\ninto the pointer’s storage. In these second cases, the pointer parameter needs\nto be cast, not dereferenced. In these caess, the documentation will state that\nthe parameter “contains” a value, which will always be an integral type.\n\nSome messages don’t use the pointer parameter - in this case your plugin should\nignore it.\n\nMessages have two conceptual uses: notifications and commands. Commands are sent\nfrom one plugin to another to induce behavior; notifications are sent from one\nplugin to all others for informational purposes. It is important that commands\nand notifications not have the same values because this could cause a\nnotification sent by one plugin to accidentally induce a command in another.\n\nBy convention, plugin-defined notifications should have the high bit set (e.g.\nbe greater or equal to unsigned 0x8000000) while commands should have this bit\nbe cleared.\n\nThe following messages are sent to your plugin by X-Plane.\n\n### [XPLM_MSG_PLANE_CRASHED](/sdk/XPLM_MSG_PLANE_CRASHED/)\n\n```cpp\n#define XPLM_MSG_PLANE_CRASHED 101\n```\n\nThis message is sent to your plugin whenever the user’s plane crashes. The\nparameter is ignored.\n\n### [XPLM_MSG_PLANE_LOADED](/sdk/XPLM_MSG_PLANE_LOADED/)\n\n```cpp\n#define XPLM_MSG_PLANE_LOADED 102\n```\n\nThis message is sent to your plugin whenever a new plane is loaded. The\nparameter contains the index number of the plane being loaded; 0 indicates the\nuser’s plane.\n\n### [XPLM_MSG_AIRPORT_LOADED](/sdk/XPLM_MSG_AIRPORT_LOADED/)\n\n```cpp\n#define XPLM_MSG_AIRPORT_LOADED 103\n```\n\nThis messages is sent whenever the user’s plane is positioned at a new airport.\nThe parameter is ignored.\n\n### [XPLM_MSG_SCENERY_LOADED](/sdk/XPLM_MSG_SCENERY_LOADED/)\n\n```cpp\n#define XPLM_MSG_SCENERY_LOADED 104\n```\n\nThis message is sent whenever new scenery is loaded. Use datarefs to determine\nthe new scenery files that were loaded. The parameter is ignored.\n\n### [XPLM_MSG_AIRPLANE_COUNT_CHANGED](/sdk/XPLM_MSG_AIRPLANE_COUNT_CHANGED/)\n\n```cpp\n#define XPLM_MSG_AIRPLANE_COUNT_CHANGED 105\n```\n\nThis message is sent whenever the user adjusts the number of X-Plane aircraft\nmodels. You must use XPLMCountPlanes to find out how many planes are now\navailable. This message will only be sent in XP7 and higher because in XP6 the\nnumber of aircraft is not user-adjustable. The parameter is ignored.\n\n### [XPLM_MSG_PLANE_UNLOADED](/sdk/XPLM_MSG_PLANE_UNLOADED/)\n\n```cpp\n#define XPLM_MSG_PLANE_UNLOADED 106\n```\n\nThis message is sent to your plugin whenever a plane is unloaded. The parameter\ncontains the index number of the plane being unloaded; 0 indicates the user’s\nplane. The parameter is of type int, passed as the value of the pointer. (That\nis: the parameter is an int, not a pointer to an int.)\n\n### [XPLM_MSG_WILL_WRITE_PREFS](/sdk/XPLM_MSG_WILL_WRITE_PREFS/)\n\n```cpp\n#define XPLM_MSG_WILL_WRITE_PREFS 107\n```\n\nThis message is sent to your plugin right before X-Plane writes its preferences\nfile. You can use this for two purposes: to write your own preferences, and to\nmodify any datarefs to influence preferences output. For example, if your plugin\ntemporarily modifies saved preferences, you can put them back to their default\nvalues here to avoid having the tweaks be persisted if your plugin is not loaded\non the next invocation of X-Plane. The parameter is ignored.\n\n### [XPLM_MSG_LIVERY_LOADED](/sdk/XPLM_MSG_LIVERY_LOADED/)\n\n```cpp\n#define XPLM_MSG_LIVERY_LOADED 108\n```\n\nThis message is sent to your plugin right after a livery is loaded for an\nairplane. You can use this to check the new livery (via datarefs) and react\naccordingly. The parameter contains the index number of the aircraft whose\nlivery is changing.\n\n### [XPLM_MSG_ENTERED_VR](/sdk/XPLM_MSG_ENTERED_VR/)\n\n```cpp\n#define XPLM_MSG_ENTERED_VR  109\n```\n\nSent to your plugin right before X-Plane enters virtual reality mode (at which\ntime any windows that are not positioned in VR mode will no longer be visible to\nthe user). The parameter is unused and should be ignored.\n\n### [XPLM_MSG_EXITING_VR](/sdk/XPLM_MSG_EXITING_VR/)\n\n```cpp\n#define XPLM_MSG_EXITING_VR  110\n```\n\nSent to your plugin right before X-Plane leaves virtual reality mode (at which\ntime you may want to clean up windows that are positioned in VR mode). The\nparameter is unused and should be ignored.\n\n### [XPLM_MSG_RELEASE_PLANES](/sdk/XPLM_MSG_RELEASE_PLANES/)\n\n```cpp\n#define XPLM_MSG_RELEASE_PLANES 111\n```\n\nSent to your plugin if another plugin wants to take over AI planes. If you are a\nsynthetic traffic provider, that probably means a plugin for an online network\nhas connected and wants to supply aircraft flown by real humans and you should\ncease to provide synthetic traffic. If however you are providing online traffic\nfrom real humans, you probably don’t want to disconnect, in which case you just\nignore this message. The sender is the plugin ID of the plugin asking for\ncontrol of the planes now. You can use it to find out who is requesting and\nwhether you should yield to them. Synthetic traffic providers should always\nyield to online networks. The parameter is unused and should be ignored.\n\n### [XPLM_MSG_FMOD_BANK_LOADED](/sdk/XPLM_MSG_FMOD_BANK_LOADED/)\n\n```cpp\n#define XPLM_MSG_FMOD_BANK_LOADED 112\n```\n\nSent to your plugin after FMOD sound banks are loaded. The parameter is\nthe[XPLMBankID](/sdk/XPLMBankID/)enum in[XPLMSound](/sdk/XPLMSound/).h, 0 for\nthe master bank and 1 for the radio bank.\n\n### [XPLM_MSG_FMOD_BANK_UNLOADING](/sdk/XPLM_MSG_FMOD_BANK_UNLOADING/)\n\n```cpp\n#define XPLM_MSG_FMOD_BANK_UNLOADING 113\n```\n\nSent to your plugin before FMOD sound banks are unloaded. Any associated\nresources should be cleaned up at this point. The parameter is\nthe[XPLMBankID](/sdk/XPLMBankID/)enum in[XPLMSound](/sdk/XPLMSound/).h, 0 for\nthe master bank and 1 for the radio bank.\n\n### [XPLM_MSG_DATAREFS_ADDED](/sdk/XPLM_MSG_DATAREFS_ADDED/)\n\n```cpp\n#define XPLM_MSG_DATAREFS_ADDED 114\n```\n\nSent to your plugin per-frame (at-most) when/if datarefs are added. It will\ninclude the new data ref total count so that your plugin can keep a local cache\nof the total, see what’s changed and know which ones to inquire about if it\ncares.\n\nThis message is only sent to plugins that enable the\nXPLM_WANTS_DATAREF_NOTIFICATIONS feature.\n\n### [XPLMSendMessageToPlugin](/sdk/XPLMSendMessageToPlugin/)\n\n```cpp\nXPLM_API void       XPLMSendMessageToPlugin(\n                         XPLMPluginID         inPlugin,\n                         int                  inMessage,\n                         void *               inParam);\n\n```\n\nThis function sends a message to another plug-in or X-Plane.\nPass[XPLM_NO_PLUGIN_ID](/sdk/XPLM_NO_PLUGIN_ID/)to broadcast to all plug-ins.\nOnly enabled plug-ins with a message receive function receive the message.\n\n## Plugin Features API\n\nThe plugin features API allows your plugin to “sign up” for additional\ncapabilities and plugin system features that are normally disabled for backward\ncompatibility or performance. This allows advanced plugins to “opt-in” to new\nbehavior.\n\nEach feature is defined by a permanent string name. The feature string names\nwill vary with the particular installation of X-Plane, so plugins should not\nexpect a feature to be guaranteed present.\n\n## XPLM_WANTS_REFLECTIONS\n\nAvailable in the SDK 2.0 and later for X-Plane 9, enabling this capability\ncauses your plugin to receive drawing hook callbacks when X-Plane builds its\noff-screen reflection and shadow rendering passes. Plugins should enable this\nand examine the dataref sim/graphics/view/plane_render_type to determine whether\nthe drawing callback is for a reflection, shadow calculation, or the main\nscreen. Rendering can be simlified or omitted for reflections, and non-solid\ndrawing should be skipped for shadow calculations.\n\n**Note**: direct drawing via draw callbacks is not recommended; use\nthe[XPLMInstance](/sdk/XPLMInstance/)API to create object models instead.\n\n## XPLM_USE_NATIVE_PATHS\n\navailable in the SDK 2.1 and later for X-Plane 10, this modifies the plugin\nsystem to use Unix-style paths on all operating systems. With this enabled:\n\n- OS X paths will match the native OS X Unix.\n- Windows will use forward slashes but preserve C:\\ or another drive letter when using complete file paths.\n- Linux uses its native file system path scheme.\n\nWithout this enabled:\n\n- OS X will use CFM file paths separated by a colon.\n- Windows will use back-slashes and conventional DOS paths.\n- Linux uses its native file system path scheme.\n\nAll plugins should enable this feature on OS X to access the native file system.\n\n## XPLM_USE_NATIVE_WIDGET_WINDOWS\n\nAvailable in the SDK 3.0.2 SDK, this capability tells the widgets library to use\nnew, modern X-Plane backed[XPLMDisplay](/sdk/XPLMDisplay/)windows to anchor all\nwidget trees. Without it, widgets will always use legacy windows.\n\nPlugins should enable this to allow their widget hierarchies to respond to the\nuser’s UI size settings and to map widget-based windwos to a VR HMD.\n\nBefore enabling this, make sure any custom widget code in your plugin is\nprepared to cope with the UI coordinate system not being th same as the OpenGL\nwindow coordinate system.\n\n## XPLM_WANTS_DATAREF_NOTIFICATIONS\n\nAvailable in the SDK 4.0.0, this capability tells X-Plane to to send the\nenabling plugin the\nnew[XPLM_MSG_DATAREFS_ADDED](/sdk/XPLM_MSG_DATAREFS_ADDED/)message any time new\ndatarefs are added. The SDK will coalesce consecutive dataref registrations to\nminimize the number of messages sent.\n\n### [XPLMFeatureEnumerator_f](/sdk/XPLMFeatureEnumerator_f/)\n\n```cpp\ntypedef void (* XPLMFeatureEnumerator_f)(\n                         const char *         inFeature,\n                         void *               inRef);\n\n```\n\nYou pass an[XPLMFeatureEnumerator_f](/sdk/XPLMFeatureEnumerator_f/)to get a list\nof all features supported by a given version running version of X-Plane. This\nroutine is called once for each feature.\n\n### [XPLMHasFeature](/sdk/XPLMHasFeature/)\n\n```cpp\nXPLM_API int        XPLMHasFeature(\n                         const char *         inFeature);\n\n```\n\nThis returns 1 if the given installation of X-Plane supports a feature, or 0 if\nit does not.\n\n### [XPLMIsFeatureEnabled](/sdk/XPLMIsFeatureEnabled/)\n\n```cpp\nXPLM_API int        XPLMIsFeatureEnabled(\n                         const char *         inFeature);\n\n```\n\nThis returns 1 if a feature is currently enabled for your plugin, or 0 if it is\nnot enabled. It is an error to call this routine with an unsupported feature.\n\n### [XPLMEnableFeature](/sdk/XPLMEnableFeature/)\n\n```cpp\nXPLM_API void       XPLMEnableFeature(\n                         const char *         inFeature,\n                         int                  inEnable);\n\n```\n\nThis routine enables or disables a feature for your plugin. This will change the\nrunning behavior of X-Plane and your plugin in some way, depending on the\nfeature.\n\n### [XPLMEnumerateFeatures](/sdk/XPLMEnumerateFeatures/)\n\n```cpp\nXPLM_API void       XPLMEnumerateFeatures(\n                         XPLMFeatureEnumerator_f inEnumerator,\n                         void *               inRef);\n\n```\n\nThis routine calls your enumerator callback once for each feature that this\nrunning version of X-Plane supports. Use this routine to determine all of the\nfeatures that X-Plane can support.",
      "own_functions": [
        "XPLMGetMyID",
        "XPLMCountPlugins",
        "XPLMGetNthPlugin",
        "XPLMFindPluginByPath",
        "XPLMFindPluginBySignature",
        "XPLMGetPluginInfo",
        "XPLMIsPluginEnabled",
        "XPLMEnablePlugin",
        "XPLMDisablePlugin",
        "XPLMReloadPlugins",
        "XPLMSendMessageToPlugin",
        "XPLMHasFeature",
        "XPLMIsFeatureEnabled",
        "XPLMEnableFeature",
        "XPLMEnumerateFeatures",
        "intXPLMCountPlugins",
        "voidXPLMGetPluginInfo",
        "intXPLMIsPluginEnabled",
        "intXPLMEnablePlugin",
        "voidXPLMDisablePlugin",
        "voidXPLMReloadPlugins",
        "voidXPLMSendMessageToPlugin",
        "intXPLMHasFeature",
        "intXPLMIsFeatureEnabled",
        "voidXPLMEnableFeature",
        "voidXPLMEnumerateFeatures"
      ],
      "processing_timestamp": "2025-06-25T20:39:24.253427+00:00",
      "title": "XPLMPlugin | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMPlugin/"
    },
    "https://developer.x-plane.com/sdk/XPLMPluginID/": {
      "api_signatures": [],
      "category": {
        "category": "XPLM_Plugin",
        "module": "Xplm Plugin",
        "url": "https://developer.x-plane.com/sdk/XPLMPluginID/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"typedef\"><h3 class=\"sdk-api-type\" id=\"XPLMPluginID\"><a href=\"/sdk/XPLMPluginID/\">XPLMPluginID</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>typedef int <a href=\"/sdk/XPLMPluginID/\">XPLMPluginID</a>;</code></pre><p>Each plug-in is identified by a unique integer ID. This ID can be used to disable or enable a plug-in, or discover what plug-in is ‘running’ at the time. A plug-in ID is unique within the currently running instance of X-Plane unless plug-ins are reloaded. Plug-ins may receive a different unique ID each time they are loaded. This includes the unloading and reloading of plugins that are part of the user’s aircraft.</p><p>For persistent identification of plug-ins, use<a href=\"/sdk/XPLMFindPluginBySignature/\">XPLMFindPluginBySignature</a>in XPLMUtiltiies.h .</p><p>-1 indicates no plug-in.</p></div></div></article>",
      "code_examples": [],
      "cross_references": [
        "XPLMFindPluginBySignature"
      ],
      "markdown": "### [XPLMPluginID](/sdk/XPLMPluginID/)\n\n```cpp\ntypedef int XPLMPluginID;\n```\n\nEach plug-in is identified by a unique integer ID. This ID can be used to\ndisable or enable a plug-in, or discover what plug-in is ‘running’ at the time.\nA plug-in ID is unique within the currently running instance of X-Plane unless\nplug-ins are reloaded. Plug-ins may receive a different unique ID each time they\nare loaded. This includes the unloading and reloading of plugins that are part\nof the user’s aircraft.\n\nFor persistent identification of plug-ins,\nuse[XPLMFindPluginBySignature](/sdk/XPLMFindPluginBySignature/)in\nXPLMUtiltiies.h .\n\n-1 indicates no plug-in.",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:24.211262+00:00",
      "title": "XPLMPluginID | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMPluginID/"
    },
    "https://developer.x-plane.com/sdk/XPLMPopOutAvionics/": {
      "api_signatures": [
        {
          "description": "Pops out the window for a cockpit device.",
          "name": "XPLMPopOutAvionics",
          "parameters": [],
          "signature": "XPLM_API voidXPLMPopOutAvionics(XPLMAvionicsIDinHandle);"
        },
        {
          "name": "voidXPLMPopOutAvionics",
          "signature": "XPLM_API voidXPLMPopOutAvionics(XPLMAvionicsIDinHandle);",
          "source": "code_block_extraction",
          "type": "function"
        }
      ],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/XPLMPopOutAvionics/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"function XPLM410\"><h3 class=\"sdk-api-function\" id=\"XPLMPopOutAvionics\"><a href=\"/sdk/XPLMPopOutAvionics/\">XPLMPopOutAvionics</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API void       <a href=\"/sdk/XPLMPopOutAvionics/\">XPLMPopOutAvionics</a>(\n                         <a href=\"/sdk/XPLMAvionicsID/\">XPLMAvionicsID</a>       inHandle);\n</code></pre><p>Pops out the window for a cockpit device.</p></div></div></article>",
      "code_examples": [
        {
          "char_count": 56,
          "code": "XPLM_API voidXPLMPopOutAvionics(XPLMAvionicsIDinHandle);",
          "context": "XPLMPopOutAvionics",
          "id": "example_0",
          "language": "c",
          "line_count": 1,
          "type": "snippet"
        }
      ],
      "cross_references": [],
      "markdown": "### [XPLMPopOutAvionics](/sdk/XPLMPopOutAvionics/)\n\n```cpp\nXPLM_API void       XPLMPopOutAvionics(\n                         XPLMAvionicsID       inHandle);\n\n```\n\nPops out the window for a cockpit device.",
      "own_functions": [
        "XPLMPopOutAvionics",
        "voidXPLMPopOutAvionics"
      ],
      "processing_timestamp": "2025-06-25T20:39:22.397959+00:00",
      "title": "XPLMPopOutAvionics | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMPopOutAvionics/"
    },
    "https://developer.x-plane.com/sdk/XPLMProbeInfo_t/": {
      "api_signatures": [],
      "category": {
        "category": "XPLM_Scenery",
        "module": "Xplm Scenery",
        "url": "https://developer.x-plane.com/sdk/XPLMProbeInfo_t/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"struct\"><h3 class=\"sdk-api-struct\" id=\"XPLMProbeInfo_t\"><a href=\"/sdk/XPLMProbeInfo_t/\">XPLMProbeInfo_t</a></h3><p><a href=\"/sdk/XPLMProbeInfo_t/\">XPLMProbeInfo_t</a>contains the results of a probe call. Make sure to set structSize to the size of the struct before using it.</p><pre class=\"language-cpp\" data-manual=\"true\"><code>typedef struct {\n     // Size of structure in bytes - always set this before calling the XPLM.\n     int                       structSize;\n     // Resulting X location of the terrain point we hit, in local OpenGL coordinates.\n     float                     locationX;\n     // Resulting Y location of the terrain point we hit, in local OpenGL coordinates.\n     float                     locationY;\n     // Resulting Z location of the terrain point we hit, in local OpenGL coordinates.\n     float                     locationZ;\n     // X component of the normal vector to the terrain we found.\n     float                     normalX;\n     // Y component of the normal vector to the terrain we found.\n     float                     normalY;\n     // Z component of the normal vector to the terrain we found.\n     float                     normalZ;\n     // X component of the velocity vector of the terrain we found.\n     float                     velocityX;\n     // Y component of the velocity vector of the terrain we found.\n     float                     velocityY;\n     // Z component of the velocity vector of the terrain we found.\n     float                     velocityZ;\n     // Tells if the surface we hit is water (otherwise it is land).\n     int                       is_wet;\n} <a href=\"/sdk/XPLMProbeInfo_t/\">XPLMProbeInfo_t</a>;</code></pre></div></div></article>",
      "code_examples": [
        {
          "char_count": 1298,
          "code": "typedef struct {\n     // Size of structure in bytes - always set this before calling the XPLM.\n     int                       structSize;\n     // Resulting X location of the terrain point we hit, in local OpenGL coordinates.\n     float                     locationX;\n     // Resulting Y location of the terrain point we hit, in local OpenGL coordinates.\n     float                     locationY;\n     // Resulting Z location of the terrain point we hit, in local OpenGL coordinates.\n     float                     locationZ;\n     // X component of the normal vector to the terrain we found.\n     float                     normalX;\n     // Y component of the normal vector to the terrain we found.\n     float                     normalY;\n     // Z component of the normal vector to the terrain we found.\n     float                     normalZ;\n     // X component of the velocity vector of the terrain we found.\n     float                     velocityX;\n     // Y component of the velocity vector of the terrain we found.\n     float                     velocityY;\n     // Z component of the velocity vector of the terrain we found.\n     float                     velocityZ;\n     // Tells if the surface we hit is water (otherwise it is land).\n     int                       is_wet;\n}XPLMProbeInfo_t;",
          "context": "XPLMProbeInfo_tcontains the results of a probe call. Make sure to set structSize to the size of the struct before using it.",
          "id": "example_0",
          "language": "c",
          "line_count": 24,
          "type": "example"
        }
      ],
      "cross_references": [],
      "markdown": "### [XPLMProbeInfo_t](/sdk/XPLMProbeInfo_t/)\n\n[XPLMProbeInfo_t](/sdk/XPLMProbeInfo_t/)contains the results of a probe call.\nMake sure to set structSize to the size of the struct before using it.\n\n```cpp\ntypedef struct {\n     // Size of structure in bytes - always set this before calling the XPLM.\n     int                       structSize;\n     // Resulting X location of the terrain point we hit, in local OpenGL coordinates.\n     float                     locationX;\n     // Resulting Y location of the terrain point we hit, in local OpenGL coordinates.\n     float                     locationY;\n     // Resulting Z location of the terrain point we hit, in local OpenGL coordinates.\n     float                     locationZ;\n     // X component of the normal vector to the terrain we found.\n     float                     normalX;\n     // Y component of the normal vector to the terrain we found.\n     float                     normalY;\n     // Z component of the normal vector to the terrain we found.\n     float                     normalZ;\n     // X component of the velocity vector of the terrain we found.\n     float                     velocityX;\n     // Y component of the velocity vector of the terrain we found.\n     float                     velocityY;\n     // Z component of the velocity vector of the terrain we found.\n     float                     velocityZ;\n     // Tells if the surface we hit is water (otherwise it is land).\n     int                       is_wet;\n} XPLMProbeInfo_t;\n```",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:24.379051+00:00",
      "title": "XPLMProbeInfo_t | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMProbeInfo_t/"
    },
    "https://developer.x-plane.com/sdk/XPLMProbeRef/": {
      "api_signatures": [],
      "category": {
        "category": "XPLM_Scenery",
        "module": "Xplm Scenery",
        "url": "https://developer.x-plane.com/sdk/XPLMProbeRef/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"typedef\"><h3 class=\"sdk-api-type\" id=\"XPLMProbeRef\"><a href=\"/sdk/XPLMProbeRef/\">XPLMProbeRef</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>typedef void * <a href=\"/sdk/XPLMProbeRef/\">XPLMProbeRef</a>;</code></pre><p>An<a href=\"/sdk/XPLMProbeRef/\">XPLMProbeRef</a>is an opaque handle to a probe, used for querying the terrain.</p></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "### [XPLMProbeRef](/sdk/XPLMProbeRef/)\n\n```cpp\ntypedef void * XPLMProbeRef;\n```\n\nAn[XPLMProbeRef](/sdk/XPLMProbeRef/)is an opaque handle to a probe, used for\nquerying the terrain.",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:24.381052+00:00",
      "title": "XPLMProbeRef | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMProbeRef/"
    },
    "https://developer.x-plane.com/sdk/XPLMProbeResult/": {
      "api_signatures": [
        {
          "name": "XPLMProbeResult",
          "type": "enum",
          "values": [
            {
              "description": "The probe hit terrain and returned valid values.",
              "name": "xplm_ProbeHitTerrain",
              "value": "\"0\""
            },
            {
              "description": "An error in the API call. Either the probe struct size is bad, the probe is invalid, or the type is mismatched for the specific query call.",
              "name": "xplm_ProbeError",
              "value": "\"1\""
            },
            {
              "description": "The probe call succeeded but there is no terrain under this point (perhaps it is off the side of the planet?)",
              "name": "xplm_ProbeMissed",
              "value": "\"2\""
            }
          ]
        }
      ],
      "category": {
        "category": "XPLM_Scenery",
        "module": "Xplm Scenery",
        "url": "https://developer.x-plane.com/sdk/XPLMProbeResult/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enum\"><h3 class=\"sdk-api-enum\" id=\"XPLMProbeResult\"><a href=\"/sdk/XPLMProbeResult/\">XPLMProbeResult</a></h3><p>Probe results - possible results from a probe query.</p><p><div class=\"enumitem\"><table><thead><tr><th>Name</th><th>Value</th><th>Description</th></tr></thead><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_ProbeHitTerrain\"><a href=\"/sdk/xplm_ProbeHitTerrain/\">xplm_ProbeHitTerrain</a></td><td>\"0\"</td><td>The probe hit terrain and returned valid values.</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_ProbeError\"><a href=\"/sdk/xplm_ProbeError/\">xplm_ProbeError</a></td><td>\"1\"</td><td>An error in the API call. Either the probe struct size is bad, the probe is invalid, or the type is mismatched for the specific query call.</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_ProbeMissed\"><a href=\"/sdk/xplm_ProbeMissed/\">xplm_ProbeMissed</a></td><td>\"2\"</td><td>The probe call succeeded but there is no terrain under this point (perhaps it is off the side of the planet?)</td></tr></table></div></p></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "### [XPLMProbeResult](/sdk/XPLMProbeResult/)\n\nProbe results - possible results from a probe query.\n\n| Name | Value | Description |\n| --- | --- | --- |\n| [xplm_ProbeHitTerrain](/sdk/xplm_ProbeHitTerrain/) | \"0\" | The probe hit\nterrain and returned valid values. |\n| [xplm_ProbeError](/sdk/xplm_ProbeError/) | \"1\" | An error in the API call.\nEither the probe struct size is bad, the probe is invalid, or the type is\nmismatched for the specific query call. |\n| [xplm_ProbeMissed](/sdk/xplm_ProbeMissed/) | \"2\" | The probe call succeeded\nbut there is no terrain under this point (perhaps it is off the side of the\nplanet?) |",
      "own_functions": [
        "XPLMProbeResult"
      ],
      "processing_timestamp": "2025-06-25T20:39:24.385051+00:00",
      "title": "XPLMProbeResult | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMProbeResult/"
    },
    "https://developer.x-plane.com/sdk/XPLMProbeTerrainXYZ/": {
      "api_signatures": [
        {
          "description": "Probes the terrain. Pass in the XYZ coordinate of the probe point, a probe object, and anXPLMProbeInfo_tstruct that has its structSize member set properly. Other fields are filled in if we hit terrain, and a probe result is returned.",
          "name": "XPLMProbeTerrainXYZ",
          "parameters": [
            {
              "full_declaration": "float                inX",
              "name": "inX",
              "type": "float"
            },
            {
              "full_declaration": "float                inY",
              "name": "inY",
              "type": "float"
            },
            {
              "full_declaration": "float                inZ",
              "name": "inZ",
              "type": "float"
            },
            {
              "full_declaration": "XPLMProbeInfo_t*    outInfo",
              "name": "outInfo",
              "type": "XPLMProbeInfo_t*"
            }
          ],
          "signature": "XPLM_APIXPLMProbeResultXPLMProbeTerrainXYZ(XPLMProbeRefinProbe,\n                         float                inX,\n                         float                inY,\n                         float                inZ,XPLMProbeInfo_t*    outInfo);"
        }
      ],
      "category": {
        "category": "XPLM_Scenery",
        "module": "Xplm Scenery",
        "url": "https://developer.x-plane.com/sdk/XPLMProbeTerrainXYZ/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPLMProbeTerrainXYZ\"><a href=\"/sdk/XPLMProbeTerrainXYZ/\">XPLMProbeTerrainXYZ</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API <a href=\"/sdk/XPLMProbeResult/\">XPLMProbeResult</a> <a href=\"/sdk/XPLMProbeTerrainXYZ/\">XPLMProbeTerrainXYZ</a>(\n                         <a href=\"/sdk/XPLMProbeRef/\">XPLMProbeRef</a>         inProbe,\n                         float                inX,\n                         float                inY,\n                         float                inZ,\n                         <a href=\"/sdk/XPLMProbeInfo_t/\">XPLMProbeInfo_t</a> *    outInfo);\n</code></pre><p>Probes the terrain. Pass in the XYZ coordinate of the probe point, a probe object, and an<a href=\"/sdk/XPLMProbeInfo_t/\">XPLMProbeInfo_t</a>struct that has its structSize member set properly. Other fields are filled in if we hit terrain, and a probe result is returned.</p></div></div></article>",
      "code_examples": [
        {
          "char_count": 245,
          "code": "XPLM_APIXPLMProbeResultXPLMProbeTerrainXYZ(XPLMProbeRefinProbe,\n                         float                inX,\n                         float                inY,\n                         float                inZ,XPLMProbeInfo_t*    outInfo);",
          "context": "XPLMProbeTerrainXYZ",
          "id": "example_0",
          "language": "c",
          "line_count": 4,
          "type": "snippet"
        }
      ],
      "cross_references": [
        "XPLMProbeResult"
      ],
      "markdown": "### [XPLMProbeTerrainXYZ](/sdk/XPLMProbeTerrainXYZ/)\n\n```cpp\nXPLM_API XPLMProbeResult XPLMProbeTerrainXYZ(\n                         XPLMProbeRef         inProbe,\n                         float                inX,\n                         float                inY,\n                         float                inZ,\n                         XPLMProbeInfo_t *    outInfo);\n\n```\n\nProbes the terrain. Pass in the XYZ coordinate of the probe point, a probe\nobject, and an[XPLMProbeInfo_t](/sdk/XPLMProbeInfo_t/)struct that has its\nstructSize member set properly. Other fields are filled in if we hit terrain,\nand a probe result is returned.",
      "own_functions": [
        "XPLMProbeTerrainXYZ"
      ],
      "processing_timestamp": "2025-06-25T20:39:24.391050+00:00",
      "title": "XPLMProbeTerrainXYZ | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMProbeTerrainXYZ/"
    },
    "https://developer.x-plane.com/sdk/XPLMProbeType/": {
      "api_signatures": [
        {
          "name": "XPLMProbeType",
          "type": "enum",
          "values": [
            {
              "description": "The Y probe gives you the location of the tallest physicalscenery along the Y axis going through the queried point.",
              "name": "xplm_ProbeY",
              "value": "\"0\""
            }
          ]
        }
      ],
      "category": {
        "category": "XPLM_Scenery",
        "module": "Xplm Scenery",
        "url": "https://developer.x-plane.com/sdk/XPLMProbeType/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enum\"><h3 class=\"sdk-api-enum\" id=\"XPLMProbeType\"><a href=\"/sdk/XPLMProbeType/\">XPLMProbeType</a></h3><p><a href=\"/sdk/XPLMProbeType/\">XPLMProbeType</a>defines the type of terrain probe - each probe has a different algorithm. (Only one type of probe is provided right now, but future APIs will expose more flexible or powerful or useful probes.</p><p><div class=\"enumitem\"><table><thead><tr><th>Name</th><th>Value</th><th>Description</th></tr></thead><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_ProbeY\"><a href=\"/sdk/xplm_ProbeY/\">xplm_ProbeY</a></td><td>\"0\"</td><td>The Y probe gives you the location of the tallest physicalscenery along the Y axis going through the queried point.</td></tr></table></div></p></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "### [XPLMProbeType](/sdk/XPLMProbeType/)\n\n[XPLMProbeType](/sdk/XPLMProbeType/)defines the type of terrain probe - each\nprobe has a different algorithm. (Only one type of probe is provided right now,\nbut future APIs will expose more flexible or powerful or useful probes.\n\n| Name | Value | Description |\n| --- | --- | --- |\n| [xplm_ProbeY](/sdk/xplm_ProbeY/) | \"0\" | The Y probe gives you the location of\nthe tallest physicalscenery along the Y axis going through the queried point. |",
      "own_functions": [
        "XPLMProbeType"
      ],
      "processing_timestamp": "2025-06-25T20:39:24.388050+00:00",
      "title": "XPLMProbeType | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMProbeType/"
    },
    "https://developer.x-plane.com/sdk/XPLMProcessing/": {
      "api_signatures": [
        {
          "description": "This routine returns the elapsed time since the sim started up in decimal seconds. This is a wall timer; it keeps counting upward even if the sim is pasued.",
          "name": "XPLMGetElapsedTime",
          "parameters": [],
          "signature": "XPLM_API floatXPLMGetElapsedTime(void);"
        },
        {
          "description": "This routine returns a counter starting at zero for each sim cycle computed/video frame rendered.",
          "name": "XPLMGetCycleNumber",
          "parameters": [],
          "signature": "XPLM_API intXPLMGetCycleNumber(void);"
        },
        {
          "description": "This routine registers your flight loop callback. Pass in a pointer to a flight loop function and a refcon (an optional reference value determined by you). inInterval defines when you will be called. Pass in a positive number to specify seconds from registration time to the next callback. Pass in a negative number to indicate when you will be called (e.g. pass -1 to be called at the next cylcle). Pass 0 to not be called; your callback will be inactive.",
          "name": "XPLMRegisterFlightLoopCallback",
          "parameters": [
            {
              "full_declaration": "float                inInterval",
              "name": "inInterval",
              "type": "float"
            },
            {
              "full_declaration": "void *               inRefcon",
              "name": "inRefcon",
              "type": "void *"
            }
          ],
          "signature": "XPLM_API voidXPLMRegisterFlightLoopCallback(XPLMFlightLoop_finFlightLoop,\n                         float                inInterval,\n                         void *               inRefcon);"
        },
        {
          "description": "This routine unregisters your flight loop callback. Do NOT call it from your flight loop callback. Once your flight loop callback is unregistered, it will not be called again.",
          "name": "XPLMUnregisterFlightLoopCallback",
          "parameters": [
            {
              "full_declaration": "void *               inRefcon",
              "name": "inRefcon",
              "type": "void *"
            }
          ],
          "signature": "XPLM_API voidXPLMUnregisterFlightLoopCallback(XPLMFlightLoop_finFlightLoop,\n                         void *               inRefcon);"
        },
        {
          "description": "This routine sets when a callback will be called. Do NOT call it from your callback; use the return value of the callback to change your callback interval from inside your callback.",
          "name": "XPLMSetFlightLoopCallbackInterval",
          "parameters": [
            {
              "full_declaration": "float                inInterval",
              "name": "inInterval",
              "type": "float"
            },
            {
              "full_declaration": "int                  inRelativeToNow",
              "name": "inRelativeToNow",
              "type": "int"
            },
            {
              "full_declaration": "void *               inRefcon",
              "name": "inRefcon",
              "type": "void *"
            }
          ],
          "signature": "XPLM_API voidXPLMSetFlightLoopCallbackInterval(XPLMFlightLoop_finFlightLoop,\n                         float                inInterval,\n                         int                  inRelativeToNow,\n                         void *               inRefcon);"
        },
        {
          "description": "This routine creates a flight loop callback and returns its ID. The flight loop callback is created using the input param struct, and is inited to be unscheduled.",
          "name": "XPLMCreateFlightLoop",
          "parameters": [
            {
              "full_declaration": "XPLMCreateFlightLoop_t* inParams",
              "name": "inParams",
              "type": "XPLMCreateFlightLoop_t*"
            }
          ],
          "signature": "XPLM_APIXPLMFlightLoopIDXPLMCreateFlightLoop(XPLMCreateFlightLoop_t* inParams);"
        },
        {
          "description": "This routine destroys a flight loop callback by ID. Only call it on flight loops created with the newerXPLMCreateFlightLoopAPI.",
          "name": "XPLMDestroyFlightLoop",
          "parameters": [],
          "signature": "XPLM_API voidXPLMDestroyFlightLoop(XPLMFlightLoopIDinFlightLoopID);"
        },
        {
          "description": "This routine schedules a flight loop callback for future execution. If inInterval is negative, it is run in a certain number of frames based on the absolute value of the input. If the interval is positive, it is a duration in seconds.",
          "name": "XPLMScheduleFlightLoop",
          "parameters": [
            {
              "full_declaration": "float                inInterval",
              "name": "inInterval",
              "type": "float"
            },
            {
              "full_declaration": "int                  inRelativeToNow",
              "name": "inRelativeToNow",
              "type": "int"
            }
          ],
          "signature": "XPLM_API voidXPLMScheduleFlightLoop(XPLMFlightLoopIDinFlightLoopID,\n                         float                inInterval,\n                         int                  inRelativeToNow);"
        },
        {
          "name": "XPLMFlightLoopPhaseType",
          "type": "enum",
          "values": [
            {
              "description": "Your callback runs before X-Plane integrates the flight model.",
              "name": "xplm_FlightLoop_Phase_BeforeFlightModel",
              "value": "\"0\""
            },
            {
              "description": "Your callback runs after X-Plane integrates the flight model.",
              "name": "xplm_FlightLoop_Phase_AfterFlightModel",
              "value": "\"1\""
            }
          ]
        },
        {
          "name": "floatXPLMGetElapsedTime",
          "signature": "XPLM_API floatXPLMGetElapsedTime(void);",
          "source": "code_block_extraction",
          "type": "function"
        },
        {
          "name": "intXPLMGetCycleNumber",
          "signature": "XPLM_API intXPLMGetCycleNumber(void);",
          "source": "code_block_extraction",
          "type": "function"
        },
        {
          "name": "voidXPLMRegisterFlightLoopCallback",
          "signature": "XPLM_API voidXPLMRegisterFlightLoopCallback(XPLMFlightLoop_finFlightLoop,\n                         float                inInterval,\n                         void *               inRefcon);",
          "source": "code_block_extraction",
          "type": "function"
        },
        {
          "name": "voidXPLMUnregisterFlightLoopCallback",
          "signature": "XPLM_API voidXPLMUnregisterFlightLoopCallback(XPLMFlightLoop_finFlightLoop,\n                         void *               inRefcon);",
          "source": "code_block_extraction",
          "type": "function"
        },
        {
          "name": "voidXPLMSetFlightLoopCallbackInterval",
          "signature": "XPLM_API voidXPLMSetFlightLoopCallbackInterval(XPLMFlightLoop_finFlightLoop,\n                         float                inInterval,\n                         int                  inRelativeToNow,\n                         void *               inRefcon);",
          "source": "code_block_extraction",
          "type": "function"
        },
        {
          "name": "voidXPLMDestroyFlightLoop",
          "signature": "XPLM_API voidXPLMDestroyFlightLoop(XPLMFlightLoopIDinFlightLoopID);",
          "source": "code_block_extraction",
          "type": "function"
        },
        {
          "name": "voidXPLMScheduleFlightLoop",
          "signature": "XPLM_API voidXPLMScheduleFlightLoop(XPLMFlightLoopIDinFlightLoopID,\n                         float                inInterval,\n                         int                  inRelativeToNow);",
          "source": "code_block_extraction",
          "type": "function"
        }
      ],
      "category": {
        "category": "XPLM_Processing",
        "module": "Xplm Processing",
        "url": "https://developer.x-plane.com/sdk/XPLMProcessing/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"api\"><h1 class=\"sdk-api-title\" id=\"XPLMProcessing\"><a href=\"/sdk/XPLMProcessing/\">XPLMProcessing</a>API</h1><p>This API allows you to get regular callbacks during the flight loop, the part of X-Plane where the plane’s position calculates the physics of flight, etc. Use these APIs to accomplish periodic tasks like logging data and performing I/O.</p><p>You can receive a callback either just before or just after the per-frame physics calculations happen - you can use post-flightmodel callbacks to “patch” the flight model after it has run.</p><p>If the user has set the number of flight model iterations per frame greater than one your plugin will<em>not</em>see this; these integrations run on the sub-section of the flight model where iterations improve responsiveness (e.g. physical integration, not simple systems tracking) and are thus opaque to plugins.</p><p>Flight loop scheduling, when scheduled by time, is scheduled by a “first callback after the deadline” schedule, e.g. your callbacks will always be slightly late to ensure that we don’t run faster than your deadline.</p><p>WARNING: Do NOT use these callbacks to draw! You cannot draw during flight loop callbacks. Use the drawing callbacks (see<a href=\"/sdk/XPLMDisplay/\">XPLMDisplay</a>for more info) for graphics or the<a href=\"/sdk/XPLMInstance/\">XPLMInstance</a>functions for aircraft or models. (One exception: you can use a post-flight loop callback to update your own off-screen FBOs.)</p><div class=\"component\"><h2 id=\"FLIGHT LOOP CALLBACKS\">FLIGHT LOOP CALLBACKS</h2><div class=\"enum XPLM210\"><h3 class=\"sdk-api-enum\" id=\"XPLMFlightLoopPhaseType\"><a href=\"/sdk/XPLMFlightLoopPhaseType/\">XPLMFlightLoopPhaseType</a></h3><p>You can register a flight loop callback to run either before or after the flight model is integrated by X-Plane.</p><p><div class=\"enumitem XPLM210\"><table><thead><tr><th>Name</th><th>Value</th><th>Description</th></tr></thead><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_FlightLoop_Phase_BeforeFlightModel\"><a href=\"/sdk/xplm_FlightLoop_Phase_BeforeFlightModel/\">xplm_FlightLoop_Phase_BeforeFlightModel</a></td><td>\"0\"</td><td>Your callback runs before X-Plane integrates the flight model.</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_FlightLoop_Phase_AfterFlightModel\"><a href=\"/sdk/xplm_FlightLoop_Phase_AfterFlightModel/\">xplm_FlightLoop_Phase_AfterFlightModel</a></td><td>\"1\"</td><td>Your callback runs after X-Plane integrates the flight model.</td></tr></table></div></p></div><div class=\"typedef XPLM210\"><h3 class=\"sdk-api-type\" id=\"XPLMFlightLoopID\"><a href=\"/sdk/XPLMFlightLoopID/\">XPLMFlightLoopID</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>typedef void * <a href=\"/sdk/XPLMFlightLoopID/\">XPLMFlightLoopID</a>;</code></pre><p>This is an opaque identifier for a flight loop callback. You can use this identifier to easily track and remove your callbacks, or to use the new flight loop APIs.</p></div><div class=\"callback\"><h3 class=\"sdk-api-callback\" id=\"XPLMFlightLoop_f\"><a href=\"/sdk/XPLMFlightLoop_f/\">XPLMFlightLoop_f</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>typedef float (* <a href=\"/sdk/XPLMFlightLoop_f/\">XPLMFlightLoop_f</a>)(\n                         float                inElapsedSinceLastCall,\n                         float                inElapsedTimeSinceLastFlightLoop,\n                         int                  inCounter,\n                         void *               inRefcon);\n</code></pre><p>This is your flight loop callback. Each time the flight loop is iterated through, you receive this call at the end.</p><p>Flight loop callbacks receive a number of input timing parameters. These input timing parameters are not particularly useful; you may need to track your own timing data (e.g. by reading datarefs). The input parameters are:</p><ul><li>inElapsedSinceLastCall: the wall time since your last callback.</li><li>inElapsedTimeSinceLastFlightLoop: the wall time since any flight loop was dispatched.</li><li>inCounter: a monotonically increasing counter, bumped once per flight loop dispatch from the sim.</li><li>inRefcon: your own pointer constant provided when you registered yor callback.</li></ul><p>Your return value controls when you will next be called.</p><ul><li>Return 0 to stop receiving callbacks.</li><li>Return a positive number to specify how many seconds until the next callback. (You will be called at or after this time, not before.)</li><li>Return a negative number to specify how many loops must go by until you are called. For example, -1.0 means call me the very next loop.</li></ul><p>Try to run your flight loop as infrequently as is practical, and suspend it (using return value 0) when you do not need it; lots of flight loop callbacks that do nothing lowers X-Plane’s frame rate.</p><p>Your callback will NOT be unregistered if you return 0; it will merely be inactive.</p></div><div class=\"struct XPLM210\"><h3 class=\"sdk-api-struct\" id=\"XPLMCreateFlightLoop_t\"><a href=\"/sdk/XPLMCreateFlightLoop_t/\">XPLMCreateFlightLoop_t</a></h3><p><a href=\"/sdk/XPLMCreateFlightLoop_t/\">XPLMCreateFlightLoop_t</a>contains the parameters to create a new flight loop callback. The structure may be expanded in future SDKs - always set structSize to the size of your structure in bytes.</p><pre class=\"language-cpp\" data-manual=\"true\"><code>typedef struct {\n     int                       structSize;\n     <a href=\"/sdk/XPLMFlightLoopPhaseType/\">XPLMFlightLoopPhaseType</a>   phase;\n     <a href=\"/sdk/XPLMFlightLoop_f/\">XPLMFlightLoop_f</a>          callbackFunc;\n     void *                    refcon;\n} <a href=\"/sdk/XPLMCreateFlightLoop_t/\">XPLMCreateFlightLoop_t</a>;</code></pre></div><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPLMGetElapsedTime\"><a href=\"/sdk/XPLMGetElapsedTime/\">XPLMGetElapsedTime</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API float      <a href=\"/sdk/XPLMGetElapsedTime/\">XPLMGetElapsedTime</a>(void);\n</code></pre><p>This routine returns the elapsed time since the sim started up in decimal seconds. This is a wall timer; it keeps counting upward even if the sim is pasued.</p><p><strong>WARNING</strong>:<a href=\"/sdk/XPLMGetElapsedTime/\">XPLMGetElapsedTime</a>is not a very good timer! It lacks precision in both its data type and its source. Do not attempt to use it for timing critical applications like network multiplayer.</p></div><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPLMGetCycleNumber\"><a href=\"/sdk/XPLMGetCycleNumber/\">XPLMGetCycleNumber</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API int        <a href=\"/sdk/XPLMGetCycleNumber/\">XPLMGetCycleNumber</a>(void);\n</code></pre><p>This routine returns a counter starting at zero for each sim cycle computed/video frame rendered.</p></div><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPLMRegisterFlightLoopCallback\"><a href=\"/sdk/XPLMRegisterFlightLoopCallback/\">XPLMRegisterFlightLoopCallback</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API void       <a href=\"/sdk/XPLMRegisterFlightLoopCallback/\">XPLMRegisterFlightLoopCallback</a>(\n                         <a href=\"/sdk/XPLMFlightLoop_f/\">XPLMFlightLoop_f</a>     inFlightLoop,\n                         float                inInterval,\n                         void *               inRefcon);\n</code></pre><p>This routine registers your flight loop callback. Pass in a pointer to a flight loop function and a refcon (an optional reference value determined by you). inInterval defines when you will be called. Pass in a positive number to specify seconds from registration time to the next callback. Pass in a negative number to indicate when you will be called (e.g. pass -1 to be called at the next cylcle). Pass 0 to not be called; your callback will be inactive.</p><p>(This legacy function only installs pre-flight-loop callbacks; use<a href=\"/sdk/XPLMCreateFlightLoop/\">XPLMCreateFlightLoop</a>for more control.)</p></div><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPLMUnregisterFlightLoopCallback\"><a href=\"/sdk/XPLMUnregisterFlightLoopCallback/\">XPLMUnregisterFlightLoopCallback</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API void       <a href=\"/sdk/XPLMUnregisterFlightLoopCallback/\">XPLMUnregisterFlightLoopCallback</a>(\n                         <a href=\"/sdk/XPLMFlightLoop_f/\">XPLMFlightLoop_f</a>     inFlightLoop,\n                         void *               inRefcon);\n</code></pre><p>This routine unregisters your flight loop callback. Do NOT call it from your flight loop callback. Once your flight loop callback is unregistered, it will not be called again.</p><p>Only use this on flight loops registered via<a href=\"/sdk/XPLMRegisterFlightLoopCallback/\">XPLMRegisterFlightLoopCallback</a>.</p></div><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPLMSetFlightLoopCallbackInterval\"><a href=\"/sdk/XPLMSetFlightLoopCallbackInterval/\">XPLMSetFlightLoopCallbackInterval</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API void       <a href=\"/sdk/XPLMSetFlightLoopCallbackInterval/\">XPLMSetFlightLoopCallbackInterval</a>(\n                         <a href=\"/sdk/XPLMFlightLoop_f/\">XPLMFlightLoop_f</a>     inFlightLoop,\n                         float                inInterval,\n                         int                  inRelativeToNow,\n                         void *               inRefcon);\n</code></pre><p>This routine sets when a callback will be called. Do NOT call it from your callback; use the return value of the callback to change your callback interval from inside your callback.</p><p>inInterval is formatted the same way as in<a href=\"/sdk/XPLMRegisterFlightLoopCallback/\">XPLMRegisterFlightLoopCallback</a>; positive for seconds, negative for cycles, and 0 for deactivating the callback. If inRelativeToNow is 1, times are from the time of this call; otherwise they are from the time the callback was last called (or the time it was registered if it has never been called.</p></div><div class=\"function XPLM210\"><h3 class=\"sdk-api-function\" id=\"XPLMCreateFlightLoop\"><a href=\"/sdk/XPLMCreateFlightLoop/\">XPLMCreateFlightLoop</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API <a href=\"/sdk/XPLMFlightLoopID/\">XPLMFlightLoopID</a> <a href=\"/sdk/XPLMCreateFlightLoop/\">XPLMCreateFlightLoop</a>(\n                         <a href=\"/sdk/XPLMCreateFlightLoop_t/\">XPLMCreateFlightLoop_t</a> * inParams);\n</code></pre><p>This routine creates a flight loop callback and returns its ID. The flight loop callback is created using the input param struct, and is inited to be unscheduled.</p></div><div class=\"function XPLM210\"><h3 class=\"sdk-api-function\" id=\"XPLMDestroyFlightLoop\"><a href=\"/sdk/XPLMDestroyFlightLoop/\">XPLMDestroyFlightLoop</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API void       <a href=\"/sdk/XPLMDestroyFlightLoop/\">XPLMDestroyFlightLoop</a>(\n                         <a href=\"/sdk/XPLMFlightLoopID/\">XPLMFlightLoopID</a>     inFlightLoopID);\n</code></pre><p>This routine destroys a flight loop callback by ID. Only call it on flight loops created with the newer<a href=\"/sdk/XPLMCreateFlightLoop/\">XPLMCreateFlightLoop</a>API.</p></div><div class=\"function XPLM210\"><h3 class=\"sdk-api-function\" id=\"XPLMScheduleFlightLoop\"><a href=\"/sdk/XPLMScheduleFlightLoop/\">XPLMScheduleFlightLoop</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API void       <a href=\"/sdk/XPLMScheduleFlightLoop/\">XPLMScheduleFlightLoop</a>(\n                         <a href=\"/sdk/XPLMFlightLoopID/\">XPLMFlightLoopID</a>     inFlightLoopID,\n                         float                inInterval,\n                         int                  inRelativeToNow);\n</code></pre><p>This routine schedules a flight loop callback for future execution. If inInterval is negative, it is run in a certain number of frames based on the absolute value of the input. If the interval is positive, it is a duration in seconds.</p><p>If inRelativeToNow is true, times are interpreted relative to the time this routine is called; otherwise they are relative to the last call time or the time the flight loop was registered (if never called).</p></div></div></div></div></article>",
      "code_examples": [
        {
          "char_count": 298,
          "code": "typedef float (*XPLMFlightLoop_f)(\n                         float                inElapsedSinceLastCall,\n                         float                inElapsedTimeSinceLastFlightLoop,\n                         int                  inCounter,\n                         void *               inRefcon);",
          "context": "XPLMFlightLoop_f",
          "id": "example_1",
          "language": "c",
          "line_count": 5,
          "type": "snippet"
        },
        {
          "char_count": 181,
          "code": "typedef struct {\n     int                       structSize;XPLMFlightLoopPhaseTypephase;XPLMFlightLoop_fcallbackFunc;\n     void *                    refcon;\n}XPLMCreateFlightLoop_t;",
          "context": "XPLMCreateFlightLoop_tcontains the parameters to create a new flight loop callback. The structure may be expanded in future SDKs - always set structSize to the size of your structure in bytes.",
          "id": "example_2",
          "language": "c",
          "line_count": 4,
          "type": "snippet"
        },
        {
          "char_count": 188,
          "code": "XPLM_API voidXPLMRegisterFlightLoopCallback(XPLMFlightLoop_finFlightLoop,\n                         float                inInterval,\n                         void *               inRefcon);",
          "context": "XPLMRegisterFlightLoopCallback",
          "id": "example_5",
          "language": "c",
          "line_count": 3,
          "type": "snippet"
        },
        {
          "char_count": 132,
          "code": "XPLM_API voidXPLMUnregisterFlightLoopCallback(XPLMFlightLoop_finFlightLoop,\n                         void *               inRefcon);",
          "context": "XPLMUnregisterFlightLoopCallback",
          "id": "example_6",
          "language": "c",
          "line_count": 2,
          "type": "snippet"
        },
        {
          "char_count": 254,
          "code": "XPLM_API voidXPLMSetFlightLoopCallbackInterval(XPLMFlightLoop_finFlightLoop,\n                         float                inInterval,\n                         int                  inRelativeToNow,\n                         void *               inRefcon);",
          "context": "XPLMSetFlightLoopCallbackInterval",
          "id": "example_7",
          "language": "c",
          "line_count": 4,
          "type": "snippet"
        },
        {
          "char_count": 79,
          "code": "XPLM_APIXPLMFlightLoopIDXPLMCreateFlightLoop(XPLMCreateFlightLoop_t* inParams);",
          "context": "XPLMCreateFlightLoop",
          "id": "example_8",
          "language": "c",
          "line_count": 1,
          "type": "snippet"
        },
        {
          "char_count": 67,
          "code": "XPLM_API voidXPLMDestroyFlightLoop(XPLMFlightLoopIDinFlightLoopID);",
          "context": "XPLMDestroyFlightLoop",
          "id": "example_9",
          "language": "c",
          "line_count": 1,
          "type": "snippet"
        },
        {
          "char_count": 189,
          "code": "XPLM_API voidXPLMScheduleFlightLoop(XPLMFlightLoopIDinFlightLoopID,\n                         float                inInterval,\n                         int                  inRelativeToNow);",
          "context": "XPLMScheduleFlightLoop",
          "id": "example_10",
          "language": "c",
          "line_count": 3,
          "type": "snippet"
        }
      ],
      "cross_references": [
        "XPLMInstance",
        "XPLMDisplay"
      ],
      "markdown": "# [XPLMProcessing](/sdk/XPLMProcessing/)API\n\nThis API allows you to get regular callbacks during the flight loop, the part of\nX-Plane where the plane’s position calculates the physics of flight, etc. Use\nthese APIs to accomplish periodic tasks like logging data and performing I/O.\n\nYou can receive a callback either just before or just after the per-frame\nphysics calculations happen - you can use post-flightmodel callbacks to “patch”\nthe flight model after it has run.\n\nIf the user has set the number of flight model iterations per frame greater than\none your plugin will*not*see this; these integrations run on the sub-section of\nthe flight model where iterations improve responsiveness (e.g. physical\nintegration, not simple systems tracking) and are thus opaque to plugins.\n\nFlight loop scheduling, when scheduled by time, is scheduled by a “first\ncallback after the deadline” schedule, e.g. your callbacks will always be\nslightly late to ensure that we don’t run faster than your deadline.\n\nWARNING: Do NOT use these callbacks to draw! You cannot draw during flight loop\ncallbacks. Use the drawing callbacks (see[XPLMDisplay](/sdk/XPLMDisplay/)for\nmore info) for graphics or the[XPLMInstance](/sdk/XPLMInstance/)functions for\naircraft or models. (One exception: you can use a post-flight loop callback to\nupdate your own off-screen FBOs.)\n\n## FLIGHT LOOP CALLBACKS\n\n### [XPLMFlightLoopPhaseType](/sdk/XPLMFlightLoopPhaseType/)\n\nYou can register a flight loop callback to run either before or after the flight\nmodel is integrated by X-Plane.\n\n| Name | Value | Description |\n| --- | --- | --- |\n|\n[xplm_FlightLoop_Phase_BeforeFlightModel](/sdk/xplm_FlightLoop_Phase_BeforeFlightModel/)\n| \"0\" | Your callback runs before X-Plane integrates the flight model. |\n|\n[xplm_FlightLoop_Phase_AfterFlightModel](/sdk/xplm_FlightLoop_Phase_AfterFlightModel/)\n| \"1\" | Your callback runs after X-Plane integrates the flight model. |\n\n### [XPLMFlightLoopID](/sdk/XPLMFlightLoopID/)\n\n```cpp\ntypedef void * XPLMFlightLoopID;\n```\n\nThis is an opaque identifier for a flight loop callback. You can use this\nidentifier to easily track and remove your callbacks, or to use the new flight\nloop APIs.\n\n### [XPLMFlightLoop_f](/sdk/XPLMFlightLoop_f/)\n\n```cpp\ntypedef float (* XPLMFlightLoop_f)(\n                         float                inElapsedSinceLastCall,\n                         float                inElapsedTimeSinceLastFlightLoop,\n                         int                  inCounter,\n                         void *               inRefcon);\n\n```\n\nThis is your flight loop callback. Each time the flight loop is iterated\nthrough, you receive this call at the end.\n\nFlight loop callbacks receive a number of input timing parameters. These input\ntiming parameters are not particularly useful; you may need to track your own\ntiming data (e.g. by reading datarefs). The input parameters are:\n\n- inElapsedSinceLastCall: the wall time since your last callback.\n- inElapsedTimeSinceLastFlightLoop: the wall time since any flight loop was dispatched.\n- inCounter: a monotonically increasing counter, bumped once per flight loop dispatch from the sim.\n- inRefcon: your own pointer constant provided when you registered yor callback.\n\nYour return value controls when you will next be called.\n\n- Return 0 to stop receiving callbacks.\n- Return a positive number to specify how many seconds until the next callback. (You will be called at or after this time, not before.)\n- Return a negative number to specify how many loops must go by until you are called. For example, -1.0 means call me the very next loop.\n\nTry to run your flight loop as infrequently as is practical, and suspend it\n(using return value 0) when you do not need it; lots of flight loop callbacks\nthat do nothing lowers X-Plane’s frame rate.\n\nYour callback will NOT be unregistered if you return 0; it will merely be\ninactive.\n\n### [XPLMCreateFlightLoop_t](/sdk/XPLMCreateFlightLoop_t/)\n\n[XPLMCreateFlightLoop_t](/sdk/XPLMCreateFlightLoop_t/)contains the parameters to\ncreate a new flight loop callback. The structure may be expanded in future SDKs\n- always set structSize to the size of your structure in bytes.\n\n```cpp\ntypedef struct {\n     int                       structSize;\n     XPLMFlightLoopPhaseType   phase;\n     XPLMFlightLoop_f          callbackFunc;\n     void *                    refcon;\n} XPLMCreateFlightLoop_t;\n```\n\n### [XPLMGetElapsedTime](/sdk/XPLMGetElapsedTime/)\n\n```cpp\nXPLM_API float      XPLMGetElapsedTime(void);\n\n```\n\nThis routine returns the elapsed time since the sim started up in decimal\nseconds. This is a wall timer; it keeps counting upward even if the sim is\npasued.\n\n**WARNING**:[XPLMGetElapsedTime](/sdk/XPLMGetElapsedTime/)is not a very good\ntimer! It lacks precision in both its data type and its source. Do not attempt\nto use it for timing critical applications like network multiplayer.\n\n### [XPLMGetCycleNumber](/sdk/XPLMGetCycleNumber/)\n\n```cpp\nXPLM_API int        XPLMGetCycleNumber(void);\n\n```\n\nThis routine returns a counter starting at zero for each sim cycle\ncomputed/video frame rendered.\n\n### [XPLMRegisterFlightLoopCallback](/sdk/XPLMRegisterFlightLoopCallback/)\n\n```cpp\nXPLM_API void       XPLMRegisterFlightLoopCallback(\n                         XPLMFlightLoop_f     inFlightLoop,\n                         float                inInterval,\n                         void *               inRefcon);\n\n```\n\nThis routine registers your flight loop callback. Pass in a pointer to a flight\nloop function and a refcon (an optional reference value determined by you).\ninInterval defines when you will be called. Pass in a positive number to specify\nseconds from registration time to the next callback. Pass in a negative number\nto indicate when you will be called (e.g. pass -1 to be called at the next\ncylcle). Pass 0 to not be called; your callback will be inactive.\n\n(This legacy function only installs pre-flight-loop callbacks;\nuse[XPLMCreateFlightLoop](/sdk/XPLMCreateFlightLoop/)for more control.)\n\n### [XPLMUnregisterFlightLoopCallback](/sdk/XPLMUnregisterFlightLoopCallback/)\n\n```cpp\nXPLM_API void       XPLMUnregisterFlightLoopCallback(\n                         XPLMFlightLoop_f     inFlightLoop,\n                         void *               inRefcon);\n\n```\n\nThis routine unregisters your flight loop callback. Do NOT call it from your\nflight loop callback. Once your flight loop callback is unregistered, it will\nnot be called again.\n\nOnly use this on flight loops registered\nvia[XPLMRegisterFlightLoopCallback](/sdk/XPLMRegisterFlightLoopCallback/).\n\n### [XPLMSetFlightLoopCallbackInterval](/sdk/XPLMSetFlightLoopCallbackInterval/)\n\n```cpp\nXPLM_API void       XPLMSetFlightLoopCallbackInterval(\n                         XPLMFlightLoop_f     inFlightLoop,\n                         float                inInterval,\n                         int                  inRelativeToNow,\n                         void *               inRefcon);\n\n```\n\nThis routine sets when a callback will be called. Do NOT call it from your\ncallback; use the return value of the callback to change your callback interval\nfrom inside your callback.\n\ninInterval is formatted the same way as\nin[XPLMRegisterFlightLoopCallback](/sdk/XPLMRegisterFlightLoopCallback/);\npositive for seconds, negative for cycles, and 0 for deactivating the callback.\nIf inRelativeToNow is 1, times are from the time of this call; otherwise they\nare from the time the callback was last called (or the time it was registered if\nit has never been called.\n\n### [XPLMCreateFlightLoop](/sdk/XPLMCreateFlightLoop/)\n\n```cpp\nXPLM_API XPLMFlightLoopID XPLMCreateFlightLoop(\n                         XPLMCreateFlightLoop_t * inParams);\n\n```\n\nThis routine creates a flight loop callback and returns its ID. The flight loop\ncallback is created using the input param struct, and is inited to be\nunscheduled.\n\n### [XPLMDestroyFlightLoop](/sdk/XPLMDestroyFlightLoop/)\n\n```cpp\nXPLM_API void       XPLMDestroyFlightLoop(\n                         XPLMFlightLoopID     inFlightLoopID);\n\n```\n\nThis routine destroys a flight loop callback by ID. Only call it on flight loops\ncreated with the newer[XPLMCreateFlightLoop](/sdk/XPLMCreateFlightLoop/)API.\n\n### [XPLMScheduleFlightLoop](/sdk/XPLMScheduleFlightLoop/)\n\n```cpp\nXPLM_API void       XPLMScheduleFlightLoop(\n                         XPLMFlightLoopID     inFlightLoopID,\n                         float                inInterval,\n                         int                  inRelativeToNow);\n\n```\n\nThis routine schedules a flight loop callback for future execution. If\ninInterval is negative, it is run in a certain number of frames based on the\nabsolute value of the input. If the interval is positive, it is a duration in\nseconds.\n\nIf inRelativeToNow is true, times are interpreted relative to the time this\nroutine is called; otherwise they are relative to the last call time or the time\nthe flight loop was registered (if never called).",
      "own_functions": [
        "XPLMGetElapsedTime",
        "XPLMGetCycleNumber",
        "XPLMRegisterFlightLoopCallback",
        "XPLMUnregisterFlightLoopCallback",
        "XPLMSetFlightLoopCallbackInterval",
        "XPLMCreateFlightLoop",
        "XPLMDestroyFlightLoop",
        "XPLMScheduleFlightLoop",
        "XPLMFlightLoopPhaseType",
        "floatXPLMGetElapsedTime",
        "intXPLMGetCycleNumber",
        "voidXPLMRegisterFlightLoopCallback",
        "voidXPLMUnregisterFlightLoopCallback",
        "voidXPLMSetFlightLoopCallbackInterval",
        "voidXPLMDestroyFlightLoop",
        "voidXPLMScheduleFlightLoop"
      ],
      "processing_timestamp": "2025-06-25T20:39:24.354723+00:00",
      "title": "XPLMProcessing | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMProcessing/"
    },
    "https://developer.x-plane.com/sdk/XPLMReadCameraPosition/": {
      "api_signatures": [
        {
          "description": "This function reads the current camera position.",
          "name": "XPLMReadCameraPosition",
          "parameters": [
            {
              "full_declaration": "XPLMCameraPosition_t* outCameraPosition",
              "name": "outCameraPosition",
              "type": "XPLMCameraPosition_t*"
            }
          ],
          "signature": "XPLM_API voidXPLMReadCameraPosition(XPLMCameraPosition_t* outCameraPosition);"
        },
        {
          "name": "voidXPLMReadCameraPosition",
          "signature": "XPLM_API voidXPLMReadCameraPosition(XPLMCameraPosition_t* outCameraPosition);",
          "source": "code_block_extraction",
          "type": "function"
        }
      ],
      "category": {
        "category": "XPLM_Camera",
        "module": "Xplm Camera",
        "url": "https://developer.x-plane.com/sdk/XPLMReadCameraPosition/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPLMReadCameraPosition\"><a href=\"/sdk/XPLMReadCameraPosition/\">XPLMReadCameraPosition</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API void       <a href=\"/sdk/XPLMReadCameraPosition/\">XPLMReadCameraPosition</a>(\n                         <a href=\"/sdk/XPLMCameraPosition_t/\">XPLMCameraPosition_t</a> * outCameraPosition);\n</code></pre><p>This function reads the current camera position.</p></div></div></article>",
      "code_examples": [
        {
          "char_count": 77,
          "code": "XPLM_API voidXPLMReadCameraPosition(XPLMCameraPosition_t* outCameraPosition);",
          "context": "XPLMReadCameraPosition",
          "id": "example_0",
          "language": "c",
          "line_count": 1,
          "type": "snippet"
        }
      ],
      "cross_references": [
        "XPLMCamera"
      ],
      "markdown": "### [XPLMReadCameraPosition](/sdk/XPLMReadCameraPosition/)\n\n```cpp\nXPLM_API void       XPLMReadCameraPosition(\n                         XPLMCameraPosition_t * outCameraPosition);\n\n```\n\nThis function reads the current camera position.",
      "own_functions": [
        "XPLMReadCameraPosition",
        "voidXPLMReadCameraPosition"
      ],
      "processing_timestamp": "2025-06-25T20:39:23.323091+00:00",
      "title": "XPLMReadCameraPosition | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMReadCameraPosition/"
    },
    "https://developer.x-plane.com/sdk/XPLMReceiveMonitorBoundsGlobal_f/": {
      "api_signatures": [],
      "category": {
        "category": "XPLM_Graphics",
        "module": "Xplm Graphics",
        "url": "https://developer.x-plane.com/sdk/XPLMReceiveMonitorBoundsGlobal_f/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"callback XPLM300\"><h3 class=\"sdk-api-callback\" id=\"XPLMReceiveMonitorBoundsGlobal_f\"><a href=\"/sdk/XPLMReceiveMonitorBoundsGlobal_f/\">XPLMReceiveMonitorBoundsGlobal_f</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>typedef void (* <a href=\"/sdk/XPLMReceiveMonitorBoundsGlobal_f/\">XPLMReceiveMonitorBoundsGlobal_f</a>)(\n                         int                  inMonitorIndex,\n                         int                  inLeftBx,\n                         int                  inTopBx,\n                         int                  inRightBx,\n                         int                  inBottomBx,\n                         void *               inRefcon);\n</code></pre><p>This function is informed of the global bounds (in boxels) of a particular monitor within the X-Plane global desktop space. Note that X-Plane must be running in full screen on a monitor in order for that monitor to be passed to you in this callback.</p></div></div></article>",
      "code_examples": [
        {
          "char_count": 394,
          "code": "typedef void (*XPLMReceiveMonitorBoundsGlobal_f)(\n                         int                  inMonitorIndex,\n                         int                  inLeftBx,\n                         int                  inTopBx,\n                         int                  inRightBx,\n                         int                  inBottomBx,\n                         void *               inRefcon);",
          "context": "XPLMReceiveMonitorBoundsGlobal_f",
          "id": "example_0",
          "language": "c",
          "line_count": 7,
          "type": "snippet"
        }
      ],
      "cross_references": [],
      "markdown": "### [XPLMReceiveMonitorBoundsGlobal_f](/sdk/XPLMReceiveMonitorBoundsGlobal_f/)\n\n```cpp\ntypedef void (* XPLMReceiveMonitorBoundsGlobal_f)(\n                         int                  inMonitorIndex,\n                         int                  inLeftBx,\n                         int                  inTopBx,\n                         int                  inRightBx,\n                         int                  inBottomBx,\n                         void *               inRefcon);\n\n```\n\nThis function is informed of the global bounds (in boxels) of a particular\nmonitor within the X-Plane global desktop space. Note that X-Plane must be\nrunning in full screen on a monitor in order for that monitor to be passed to\nyou in this callback.",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:23.662109+00:00",
      "title": "XPLMReceiveMonitorBoundsGlobal_f | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMReceiveMonitorBoundsGlobal_f/"
    },
    "https://developer.x-plane.com/sdk/XPLMReceiveMonitorBoundsOS_f/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/XPLMReceiveMonitorBoundsOS_f/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"callback XPLM300\"><h3 class=\"sdk-api-callback\" id=\"XPLMReceiveMonitorBoundsOS_f\"><a href=\"/sdk/XPLMReceiveMonitorBoundsOS_f/\">XPLMReceiveMonitorBoundsOS_f</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>typedef void (* <a href=\"/sdk/XPLMReceiveMonitorBoundsOS_f/\">XPLMReceiveMonitorBoundsOS_f</a>)(\n                         int                  inMonitorIndex,\n                         int                  inLeftPx,\n                         int                  inTopPx,\n                         int                  inRightPx,\n                         int                  inBottomPx,\n                         void *               inRefcon);\n</code></pre><p>This function is informed of the global bounds (in pixels) of a particular monitor within the operating system’s global desktop space. Note that a monitor index being passed to you here does not indicate that X-Plane is running in full screen on this monitor, or even that any X-Plane windows exist on this monitor.</p></div></div></article>",
      "code_examples": [
        {
          "char_count": 390,
          "code": "typedef void (*XPLMReceiveMonitorBoundsOS_f)(\n                         int                  inMonitorIndex,\n                         int                  inLeftPx,\n                         int                  inTopPx,\n                         int                  inRightPx,\n                         int                  inBottomPx,\n                         void *               inRefcon);",
          "context": "XPLMReceiveMonitorBoundsOS_f",
          "id": "example_0",
          "language": "c",
          "line_count": 7,
          "type": "snippet"
        }
      ],
      "cross_references": [],
      "markdown": "### [XPLMReceiveMonitorBoundsOS_f](/sdk/XPLMReceiveMonitorBoundsOS_f/)\n\n```cpp\ntypedef void (* XPLMReceiveMonitorBoundsOS_f)(\n                         int                  inMonitorIndex,\n                         int                  inLeftPx,\n                         int                  inTopPx,\n                         int                  inRightPx,\n                         int                  inBottomPx,\n                         void *               inRefcon);\n\n```\n\nThis function is informed of the global bounds (in pixels) of a particular\nmonitor within the operating system’s global desktop space. Note that a monitor\nindex being passed to you here does not indicate that X-Plane is running in full\nscreen on this monitor, or even that any X-Plane windows exist on this monitor.",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.395955+00:00",
      "title": "XPLMReceiveMonitorBoundsOS_f | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMReceiveMonitorBoundsOS_f/"
    },
    "https://developer.x-plane.com/sdk/XPLMRegisterAvionicsCallbacksEx/": {
      "api_signatures": [
        {
          "description": "This routine registers your callbacks for a built-in device. This returns a handle. If the returned handle is NULL, there was a problem interpreting your input, most likely the struct size was wrong for your SDK version. If the returned handle is not NULL, your callbacks will be called according to schedule as long as your plugin is not deactivated, or unloaded, or you callXPLMUnregisterAvionicsCallbacks().",
          "name": "XPLMRegisterAvionicsCallbacksEx",
          "parameters": [
            {
              "full_declaration": "XPLMCustomizeAvionics_t* inParams",
              "name": "inParams",
              "type": "XPLMCustomizeAvionics_t*"
            }
          ],
          "signature": "XPLM_APIXPLMAvionicsIDXPLMRegisterAvionicsCallbacksEx(XPLMCustomizeAvionics_t* inParams);"
        }
      ],
      "category": {
        "category": "XPLM_Processing",
        "module": "Xplm Processing",
        "url": "https://developer.x-plane.com/sdk/XPLMRegisterAvionicsCallbacksEx/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPLMRegisterAvionicsCallbacksEx\"><a href=\"/sdk/XPLMRegisterAvionicsCallbacksEx/\">XPLMRegisterAvionicsCallbacksEx</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API <a href=\"/sdk/XPLMAvionicsID/\">XPLMAvionicsID</a> <a href=\"/sdk/XPLMRegisterAvionicsCallbacksEx/\">XPLMRegisterAvionicsCallbacksEx</a>(\n                         <a href=\"/sdk/XPLMCustomizeAvionics_t/\">XPLMCustomizeAvionics_t</a> * inParams);\n</code></pre><p>This routine registers your callbacks for a built-in device. This returns a handle. If the returned handle is NULL, there was a problem interpreting your input, most likely the struct size was wrong for your SDK version. If the returned handle is not NULL, your callbacks will be called according to schedule as long as your plugin is not deactivated, or unloaded, or you call<a href=\"/sdk/XPLMUnregisterAvionicsCallbacks/\">XPLMUnregisterAvionicsCallbacks</a>().</p><p>Note that you cannot register new callbacks for a device that is not a built-in one (for example a device that you have created, or a device another plugin has created).</p></div></div></article>",
      "code_examples": [
        {
          "char_count": 89,
          "code": "XPLM_APIXPLMAvionicsIDXPLMRegisterAvionicsCallbacksEx(XPLMCustomizeAvionics_t* inParams);",
          "context": "XPLMRegisterAvionicsCallbacksEx",
          "id": "example_0",
          "language": "c",
          "line_count": 1,
          "type": "snippet"
        }
      ],
      "cross_references": [
        "XPLMUnregisterAvionicsCallbacks"
      ],
      "markdown": "### [XPLMRegisterAvionicsCallbacksEx](/sdk/XPLMRegisterAvionicsCallbacksEx/)\n\n```cpp\nXPLM_API XPLMAvionicsID XPLMRegisterAvionicsCallbacksEx(\n                         XPLMCustomizeAvionics_t * inParams);\n\n```\n\nThis routine registers your callbacks for a built-in device. This returns a\nhandle. If the returned handle is NULL, there was a problem interpreting your\ninput, most likely the struct size was wrong for your SDK version. If the\nreturned handle is not NULL, your callbacks will be called according to schedule\nas long as your plugin is not deactivated, or unloaded, or you\ncall[XPLMUnregisterAvionicsCallbacks](/sdk/XPLMUnregisterAvionicsCallbacks/)().\n\nNote that you cannot register new callbacks for a device that is not a built-in\none (for example a device that you have created, or a device another plugin has\ncreated).",
      "own_functions": [
        "XPLMRegisterAvionicsCallbacksEx"
      ],
      "processing_timestamp": "2025-06-25T20:39:24.335160+00:00",
      "title": "XPLMRegisterAvionicsCallbacksEx | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMRegisterAvionicsCallbacksEx/"
    },
    "https://developer.x-plane.com/sdk/XPLMRegisterCommandHandler/": {
      "api_signatures": [
        {
          "description": "XPLMRegisterCommandHandlerregisters a callback to be called when a command is executed. You provide a callback with a reference pointer.",
          "name": "XPLMRegisterCommandHandler",
          "parameters": [
            {
              "full_declaration": "int                  inBefore",
              "name": "inBefore",
              "type": "int"
            },
            {
              "full_declaration": "void *               inRefcon",
              "name": "inRefcon",
              "type": "void *"
            }
          ],
          "signature": "XPLM_API voidXPLMRegisterCommandHandler(XPLMCommandRefinComand,XPLMCommandCallback_finHandler,\n                         int                  inBefore,\n                         void *               inRefcon);"
        },
        {
          "name": "voidXPLMRegisterCommandHandler",
          "signature": "XPLM_API voidXPLMRegisterCommandHandler(XPLMCommandRefinComand,XPLMCommandCallback_finHandler,\n                         int                  inBefore,\n                         void *               inRefcon);",
          "source": "code_block_extraction",
          "type": "function"
        }
      ],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/XPLMRegisterCommandHandler/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPLMRegisterCommandHandler\"><a href=\"/sdk/XPLMRegisterCommandHandler/\">XPLMRegisterCommandHandler</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API void       <a href=\"/sdk/XPLMRegisterCommandHandler/\">XPLMRegisterCommandHandler</a>(\n                         <a href=\"/sdk/XPLMCommandRef/\">XPLMCommandRef</a>       inComand,\n                         <a href=\"/sdk/XPLMCommandCallback_f/\">XPLMCommandCallback_f</a> inHandler,\n                         int                  inBefore,\n                         void *               inRefcon);\n</code></pre><p><a href=\"/sdk/XPLMRegisterCommandHandler/\">XPLMRegisterCommandHandler</a>registers a callback to be called when a command is executed. You provide a callback with a reference pointer.</p><p>If inBefore is true, your command handler callback will be executed before X-Plane executes the command, and returning 0 from your callback will disable X-Plane’s processing of the command. If inBefore is false, your callback will run after X-Plane. (You can register a single callback both before and after a command.)</p></div></div></article>",
      "code_examples": [
        {
          "char_count": 207,
          "code": "XPLM_API voidXPLMRegisterCommandHandler(XPLMCommandRefinComand,XPLMCommandCallback_finHandler,\n                         int                  inBefore,\n                         void *               inRefcon);",
          "context": "XPLMRegisterCommandHandler",
          "id": "example_0",
          "language": "c",
          "line_count": 3,
          "type": "snippet"
        }
      ],
      "cross_references": [],
      "markdown": "### [XPLMRegisterCommandHandler](/sdk/XPLMRegisterCommandHandler/)\n\n```cpp\nXPLM_API void       XPLMRegisterCommandHandler(\n                         XPLMCommandRef       inComand,\n                         XPLMCommandCallback_f inHandler,\n                         int                  inBefore,\n                         void *               inRefcon);\n\n```\n\n[XPLMRegisterCommandHandler](/sdk/XPLMRegisterCommandHandler/)registers a\ncallback to be called when a command is executed. You provide a callback with a\nreference pointer.\n\nIf inBefore is true, your command handler callback will be executed before\nX-Plane executes the command, and returning 0 from your callback will disable\nX-Plane’s processing of the command. If inBefore is false, your callback will\nrun after X-Plane. (You can register a single callback both before and after a\ncommand.)",
      "own_functions": [
        "XPLMRegisterCommandHandler",
        "voidXPLMRegisterCommandHandler"
      ],
      "processing_timestamp": "2025-06-25T20:39:22.394392+00:00",
      "title": "XPLMRegisterCommandHandler | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMRegisterCommandHandler/"
    },
    "https://developer.x-plane.com/sdk/XPLMRegisterDataAccessor/": {
      "api_signatures": [
        {
          "description": "This routine creates a new item of data that can be read and written. Pass in the data’s full name for searching, the type(s) of the data for accessing, and whether the data can be written to. For each data type you support, pass in a read accessor function and a write accessor function if necessary. Pass NULL for data types you do not support or write accessors if you are read-only.",
          "name": "XPLMRegisterDataAccessor",
          "parameters": [
            {
              "full_declaration": "const char *         inDataName",
              "name": "inDataName",
              "type": "const char *"
            },
            {
              "full_declaration": "int                  inIsWritable",
              "name": "inIsWritable",
              "type": "int"
            },
            {
              "full_declaration": "void *               inReadRefcon",
              "name": "inReadRefcon",
              "type": "void *"
            },
            {
              "full_declaration": "void *               inWriteRefcon",
              "name": "inWriteRefcon",
              "type": "void *"
            }
          ],
          "signature": "XPLM_APIXPLMDataRefXPLMRegisterDataAccessor(\n                         const char *         inDataName,XPLMDataTypeIDinDataType,\n                         int                  inIsWritable,XPLMGetDatai_finReadInt,XPLMSetDatai_finWriteInt,XPLMGetDataf_finReadFloat,XPLMSetDataf_finWriteFloat,XPLMGetDatad_finReadDouble,XPLMSetDatad_finWriteDouble,XPLMGetDatavi_finReadIntArray,XPLMSetDatavi_finWriteIntArray,XPLMGetDatavf_finReadFloatArray,XPLMSetDatavf_finWriteFloatArray,XPLMGetDatab_finReadData,XPLMSetDatab_finWriteData,\n                         void *               inReadRefcon,\n                         void *               inWriteRefcon);"
        }
      ],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/XPLMRegisterDataAccessor/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPLMRegisterDataAccessor\"><a href=\"/sdk/XPLMRegisterDataAccessor/\">XPLMRegisterDataAccessor</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API <a href=\"/sdk/XPLMDataRef/\">XPLMDataRef</a> <a href=\"/sdk/XPLMRegisterDataAccessor/\">XPLMRegisterDataAccessor</a>(\n                         const char *         inDataName,\n                         <a href=\"/sdk/XPLMDataTypeID/\">XPLMDataTypeID</a>       inDataType,\n                         int                  inIsWritable,\n                         <a href=\"/sdk/XPLMGetDatai_f/\">XPLMGetDatai_f</a>       inReadInt,\n                         <a href=\"/sdk/XPLMSetDatai_f/\">XPLMSetDatai_f</a>       inWriteInt,\n                         <a href=\"/sdk/XPLMGetDataf_f/\">XPLMGetDataf_f</a>       inReadFloat,\n                         <a href=\"/sdk/XPLMSetDataf_f/\">XPLMSetDataf_f</a>       inWriteFloat,\n                         <a href=\"/sdk/XPLMGetDatad_f/\">XPLMGetDatad_f</a>       inReadDouble,\n                         <a href=\"/sdk/XPLMSetDatad_f/\">XPLMSetDatad_f</a>       inWriteDouble,\n                         <a href=\"/sdk/XPLMGetDatavi_f/\">XPLMGetDatavi_f</a>      inReadIntArray,\n                         <a href=\"/sdk/XPLMSetDatavi_f/\">XPLMSetDatavi_f</a>      inWriteIntArray,\n                         <a href=\"/sdk/XPLMGetDatavf_f/\">XPLMGetDatavf_f</a>      inReadFloatArray,\n                         <a href=\"/sdk/XPLMSetDatavf_f/\">XPLMSetDatavf_f</a>      inWriteFloatArray,\n                         <a href=\"/sdk/XPLMGetDatab_f/\">XPLMGetDatab_f</a>       inReadData,\n                         <a href=\"/sdk/XPLMSetDatab_f/\">XPLMSetDatab_f</a>       inWriteData,\n                         void *               inReadRefcon,\n                         void *               inWriteRefcon);\n</code></pre><p>This routine creates a new item of data that can be read and written. Pass in the data’s full name for searching, the type(s) of the data for accessing, and whether the data can be written to. For each data type you support, pass in a read accessor function and a write accessor function if necessary. Pass NULL for data types you do not support or write accessors if you are read-only.</p><p>You are returned a dataref for the new item of data created. You can use this dataref to unregister your data later or read or write from it.</p></div></div></article>",
      "code_examples": [
        {
          "char_count": 643,
          "code": "XPLM_APIXPLMDataRefXPLMRegisterDataAccessor(\n                         const char *         inDataName,XPLMDataTypeIDinDataType,\n                         int                  inIsWritable,XPLMGetDatai_finReadInt,XPLMSetDatai_finWriteInt,XPLMGetDataf_finReadFloat,XPLMSetDataf_finWriteFloat,XPLMGetDatad_finReadDouble,XPLMSetDatad_finWriteDouble,XPLMGetDatavi_finReadIntArray,XPLMSetDatavi_finWriteIntArray,XPLMGetDatavf_finReadFloatArray,XPLMSetDatavf_finWriteFloatArray,XPLMGetDatab_finReadData,XPLMSetDatab_finWriteData,\n                         void *               inReadRefcon,\n                         void *               inWriteRefcon);",
          "context": "XPLMRegisterDataAccessor",
          "id": "example_0",
          "language": "c",
          "line_count": 5,
          "type": "snippet"
        }
      ],
      "cross_references": [
        "XPLMGetDatad",
        "XPLMGetDatavf",
        "XPLMSetDatai",
        "XPLMSetDataf",
        "XPLMGetDataf",
        "XPLMSetDatavi",
        "XPLMGetDatavi",
        "XPLMGetDatab",
        "XPLMSetDatavf",
        "XPLMDataTypeID",
        "XPLMSetDatad",
        "XPLMGetDatai",
        "XPLMSetDatab"
      ],
      "markdown": "### [XPLMRegisterDataAccessor](/sdk/XPLMRegisterDataAccessor/)\n\n```cpp\nXPLM_API XPLMDataRef XPLMRegisterDataAccessor(\n                         const char *         inDataName,\n                         XPLMDataTypeID       inDataType,\n                         int                  inIsWritable,\n                         XPLMGetDatai_f       inReadInt,\n                         XPLMSetDatai_f       inWriteInt,\n                         XPLMGetDataf_f       inReadFloat,\n                         XPLMSetDataf_f       inWriteFloat,\n                         XPLMGetDatad_f       inReadDouble,\n                         XPLMSetDatad_f       inWriteDouble,\n                         XPLMGetDatavi_f      inReadIntArray,\n                         XPLMSetDatavi_f      inWriteIntArray,\n                         XPLMGetDatavf_f      inReadFloatArray,\n                         XPLMSetDatavf_f      inWriteFloatArray,\n                         XPLMGetDatab_f       inReadData,\n                         XPLMSetDatab_f       inWriteData,\n                         void *               inReadRefcon,\n                         void *               inWriteRefcon);\n\n```\n\nThis routine creates a new item of data that can be read and written. Pass in\nthe data’s full name for searching, the type(s) of the data for accessing, and\nwhether the data can be written to. For each data type you support, pass in a\nread accessor function and a write accessor function if necessary. Pass NULL for\ndata types you do not support or write accessors if you are read-only.\n\nYou are returned a dataref for the new item of data created. You can use this\ndataref to unregister your data later or read or write from it.",
      "own_functions": [
        "XPLMRegisterDataAccessor"
      ],
      "processing_timestamp": "2025-06-25T20:39:22.401959+00:00",
      "title": "XPLMRegisterDataAccessor | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMRegisterDataAccessor/"
    },
    "https://developer.x-plane.com/sdk/XPLMRegisterDrawCallback/": {
      "api_signatures": [
        {
          "description": "This routine registers a low level drawing callback. Pass in the phase you want to be called for and whether you want to be called before or after. This routine returns 1 if the registration was successful, or 0 if the phase does not exist in this version of X-Plane. You may register a callback multiple times for the same or different phases as long as the refcon is unique each time.",
          "name": "XPLMRegisterDrawCallback",
          "parameters": [
            {
              "full_declaration": "int                  inWantsBefore",
              "name": "inWantsBefore",
              "type": "int"
            },
            {
              "full_declaration": "void *               inRefcon",
              "name": "inRefcon",
              "type": "void *"
            }
          ],
          "signature": "XPLM_API intXPLMRegisterDrawCallback(XPLMDrawCallback_finCallback,XPLMDrawingPhaseinPhase,\n                         int                  inWantsBefore,\n                         void *               inRefcon);"
        },
        {
          "name": "intXPLMRegisterDrawCallback",
          "signature": "XPLM_API intXPLMRegisterDrawCallback(XPLMDrawCallback_finCallback,XPLMDrawingPhaseinPhase,\n                         int                  inWantsBefore,\n                         void *               inRefcon);",
          "source": "code_block_extraction",
          "type": "function"
        }
      ],
      "category": {
        "category": "XPLM_Display",
        "module": "Xplm Display",
        "url": "https://developer.x-plane.com/sdk/XPLMRegisterDrawCallback/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPLMRegisterDrawCallback\"><a href=\"/sdk/XPLMRegisterDrawCallback/\">XPLMRegisterDrawCallback</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API int        <a href=\"/sdk/XPLMRegisterDrawCallback/\">XPLMRegisterDrawCallback</a>(\n                         <a href=\"/sdk/XPLMDrawCallback_f/\">XPLMDrawCallback_f</a>   inCallback,\n                         <a href=\"/sdk/XPLMDrawingPhase/\">XPLMDrawingPhase</a>     inPhase,\n                         int                  inWantsBefore,\n                         void *               inRefcon);\n</code></pre><p>This routine registers a low level drawing callback. Pass in the phase you want to be called for and whether you want to be called before or after. This routine returns 1 if the registration was successful, or 0 if the phase does not exist in this version of X-Plane. You may register a callback multiple times for the same or different phases as long as the refcon is unique each time.</p><p>Note that this function will likely be removed during the X-Plane 11 run as part of the transition to Vulkan/Metal/etc. See the<a href=\"/sdk/XPLMInstance/\">XPLMInstance</a>API for future-proof drawing of 3-D objects.</p></div></div></article>",
      "code_examples": [
        {
          "char_count": 208,
          "code": "XPLM_API intXPLMRegisterDrawCallback(XPLMDrawCallback_finCallback,XPLMDrawingPhaseinPhase,\n                         int                  inWantsBefore,\n                         void *               inRefcon);",
          "context": "XPLMRegisterDrawCallback",
          "id": "example_0",
          "language": "c",
          "line_count": 3,
          "type": "snippet"
        }
      ],
      "cross_references": [
        "XPLMInstance",
        "XPLMDrawingPhase"
      ],
      "markdown": "### [XPLMRegisterDrawCallback](/sdk/XPLMRegisterDrawCallback/)\n\n```cpp\nXPLM_API int        XPLMRegisterDrawCallback(\n                         XPLMDrawCallback_f   inCallback,\n                         XPLMDrawingPhase     inPhase,\n                         int                  inWantsBefore,\n                         void *               inRefcon);\n\n```\n\nThis routine registers a low level drawing callback. Pass in the phase you want\nto be called for and whether you want to be called before or after. This routine\nreturns 1 if the registration was successful, or 0 if the phase does not exist\nin this version of X-Plane. You may register a callback multiple times for the\nsame or different phases as long as the refcon is unique each time.\n\nNote that this function will likely be removed during the X-Plane 11 run as part\nof the transition to Vulkan/Metal/etc. See\nthe[XPLMInstance](/sdk/XPLMInstance/)API for future-proof drawing of 3-D\nobjects.",
      "own_functions": [
        "XPLMRegisterDrawCallback",
        "intXPLMRegisterDrawCallback"
      ],
      "processing_timestamp": "2025-06-25T20:39:23.531164+00:00",
      "title": "XPLMRegisterDrawCallback | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMRegisterDrawCallback/"
    },
    "https://developer.x-plane.com/sdk/XPLMRegisterFlightLoopCallback/": {
      "api_signatures": [
        {
          "description": "This routine registers your flight loop callback. Pass in a pointer to a flight loop function and a refcon (an optional reference value determined by you). inInterval defines when you will be called. Pass in a positive number to specify seconds from registration time to the next callback. Pass in a negative number to indicate when you will be called (e.g. pass -1 to be called at the next cylcle). Pass 0 to not be called; your callback will be inactive.",
          "name": "XPLMRegisterFlightLoopCallback",
          "parameters": [
            {
              "full_declaration": "float                inInterval",
              "name": "inInterval",
              "type": "float"
            },
            {
              "full_declaration": "void *               inRefcon",
              "name": "inRefcon",
              "type": "void *"
            }
          ],
          "signature": "XPLM_API voidXPLMRegisterFlightLoopCallback(XPLMFlightLoop_finFlightLoop,\n                         float                inInterval,\n                         void *               inRefcon);"
        },
        {
          "name": "voidXPLMRegisterFlightLoopCallback",
          "signature": "XPLM_API voidXPLMRegisterFlightLoopCallback(XPLMFlightLoop_finFlightLoop,\n                         float                inInterval,\n                         void *               inRefcon);",
          "source": "code_block_extraction",
          "type": "function"
        }
      ],
      "category": {
        "category": "XPLM_Processing",
        "module": "Xplm Processing",
        "url": "https://developer.x-plane.com/sdk/XPLMRegisterFlightLoopCallback/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPLMRegisterFlightLoopCallback\"><a href=\"/sdk/XPLMRegisterFlightLoopCallback/\">XPLMRegisterFlightLoopCallback</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API void       <a href=\"/sdk/XPLMRegisterFlightLoopCallback/\">XPLMRegisterFlightLoopCallback</a>(\n                         <a href=\"/sdk/XPLMFlightLoop_f/\">XPLMFlightLoop_f</a>     inFlightLoop,\n                         float                inInterval,\n                         void *               inRefcon);\n</code></pre><p>This routine registers your flight loop callback. Pass in a pointer to a flight loop function and a refcon (an optional reference value determined by you). inInterval defines when you will be called. Pass in a positive number to specify seconds from registration time to the next callback. Pass in a negative number to indicate when you will be called (e.g. pass -1 to be called at the next cylcle). Pass 0 to not be called; your callback will be inactive.</p><p>(This legacy function only installs pre-flight-loop callbacks; use<a href=\"/sdk/XPLMCreateFlightLoop/\">XPLMCreateFlightLoop</a>for more control.)</p></div></div></article>",
      "code_examples": [
        {
          "char_count": 188,
          "code": "XPLM_API voidXPLMRegisterFlightLoopCallback(XPLMFlightLoop_finFlightLoop,\n                         float                inInterval,\n                         void *               inRefcon);",
          "context": "XPLMRegisterFlightLoopCallback",
          "id": "example_0",
          "language": "c",
          "line_count": 3,
          "type": "snippet"
        }
      ],
      "cross_references": [
        "XPLMCreateFlightLoop"
      ],
      "markdown": "### [XPLMRegisterFlightLoopCallback](/sdk/XPLMRegisterFlightLoopCallback/)\n\n```cpp\nXPLM_API void       XPLMRegisterFlightLoopCallback(\n                         XPLMFlightLoop_f     inFlightLoop,\n                         float                inInterval,\n                         void *               inRefcon);\n\n```\n\nThis routine registers your flight loop callback. Pass in a pointer to a flight\nloop function and a refcon (an optional reference value determined by you).\ninInterval defines when you will be called. Pass in a positive number to specify\nseconds from registration time to the next callback. Pass in a negative number\nto indicate when you will be called (e.g. pass -1 to be called at the next\ncylcle). Pass 0 to not be called; your callback will be inactive.\n\n(This legacy function only installs pre-flight-loop callbacks;\nuse[XPLMCreateFlightLoop](/sdk/XPLMCreateFlightLoop/)for more control.)",
      "own_functions": [
        "XPLMRegisterFlightLoopCallback",
        "voidXPLMRegisterFlightLoopCallback"
      ],
      "processing_timestamp": "2025-06-25T20:39:24.357549+00:00",
      "title": "XPLMRegisterFlightLoopCallback | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMRegisterFlightLoopCallback/"
    },
    "https://developer.x-plane.com/sdk/XPLMRegisterHotKey/": {
      "api_signatures": [
        {
          "description": "This routine registers a hot key. You specify your preferred key stroke virtual key/flag combination, a description of what your callback does (so other plug-ins can describe the plug-in to the user for remapping) and a callback function and opaque pointer to pass in). A new hot key ID is returned. During execution, the actual key associated with your hot key may change, but you are insulated from this.",
          "name": "XPLMRegisterHotKey",
          "parameters": [
            {
              "full_declaration": "char                 inVirtualKey",
              "name": "inVirtualKey",
              "type": "char"
            },
            {
              "full_declaration": "const char *         inDescription",
              "name": "inDescription",
              "type": "const char *"
            },
            {
              "full_declaration": "void *               inRefcon",
              "name": "inRefcon",
              "type": "void *"
            }
          ],
          "signature": "XPLM_APIXPLMHotKeyIDXPLMRegisterHotKey(\n                         char                 inVirtualKey,XPLMKeyFlagsinFlags,\n                         const char *         inDescription,XPLMHotKey_finCallback,\n                         void *               inRefcon);"
        }
      ],
      "category": {
        "category": "XPLM_Utilities",
        "module": "Xplm Utilities",
        "url": "https://developer.x-plane.com/sdk/XPLMRegisterHotKey/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPLMRegisterHotKey\"><a href=\"/sdk/XPLMRegisterHotKey/\">XPLMRegisterHotKey</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API <a href=\"/sdk/XPLMHotKeyID/\">XPLMHotKeyID</a> <a href=\"/sdk/XPLMRegisterHotKey/\">XPLMRegisterHotKey</a>(\n                         char                 inVirtualKey,\n                         <a href=\"/sdk/XPLMKeyFlags/\">XPLMKeyFlags</a>         inFlags,\n                         const char *         inDescription,\n                         <a href=\"/sdk/XPLMHotKey_f/\">XPLMHotKey_f</a>         inCallback,\n                         void *               inRefcon);\n</code></pre><p>This routine registers a hot key. You specify your preferred key stroke virtual key/flag combination, a description of what your callback does (so other plug-ins can describe the plug-in to the user for remapping) and a callback function and opaque pointer to pass in). A new hot key ID is returned. During execution, the actual key associated with your hot key may change, but you are insulated from this.</p></div></div></article>",
      "code_examples": [
        {
          "char_count": 260,
          "code": "XPLM_APIXPLMHotKeyIDXPLMRegisterHotKey(\n                         char                 inVirtualKey,XPLMKeyFlagsinFlags,\n                         const char *         inDescription,XPLMHotKey_finCallback,\n                         void *               inRefcon);",
          "context": "XPLMRegisterHotKey",
          "id": "example_0",
          "language": "c",
          "line_count": 4,
          "type": "snippet"
        }
      ],
      "cross_references": [
        "XPLMKeyFlags"
      ],
      "markdown": "### [XPLMRegisterHotKey](/sdk/XPLMRegisterHotKey/)\n\n```cpp\nXPLM_API XPLMHotKeyID XPLMRegisterHotKey(\n                         char                 inVirtualKey,\n                         XPLMKeyFlags         inFlags,\n                         const char *         inDescription,\n                         XPLMHotKey_f         inCallback,\n                         void *               inRefcon);\n\n```\n\nThis routine registers a hot key. You specify your preferred key stroke virtual\nkey/flag combination, a description of what your callback does (so other\nplug-ins can describe the plug-in to the user for remapping) and a callback\nfunction and opaque pointer to pass in). A new hot key ID is returned. During\nexecution, the actual key associated with your hot key may change, but you are\ninsulated from this.",
      "own_functions": [
        "XPLMRegisterHotKey"
      ],
      "processing_timestamp": "2025-06-25T20:39:24.535745+00:00",
      "title": "XPLMRegisterHotKey | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMRegisterHotKey/"
    },
    "https://developer.x-plane.com/sdk/XPLMRegisterKeySniffer/": {
      "api_signatures": [
        {
          "description": "This routine registers a key sniffing callback. You specify whether you want to sniff before the window system, or only sniff keys the window system does not consume. You should ALMOST ALWAYS sniff non-control keys after the window system. When the window system consumes a key, it is because the user has “focused” a window. Consuming the key or taking action based on the key will produce very weird results. Returns 1 if successful.",
          "name": "XPLMRegisterKeySniffer",
          "parameters": [
            {
              "full_declaration": "int                  inBeforeWindows",
              "name": "inBeforeWindows",
              "type": "int"
            },
            {
              "full_declaration": "void *               inRefcon",
              "name": "inRefcon",
              "type": "void *"
            }
          ],
          "signature": "XPLM_API intXPLMRegisterKeySniffer(XPLMKeySniffer_finCallback,\n                         int                  inBeforeWindows,\n                         void *               inRefcon);"
        },
        {
          "name": "intXPLMRegisterKeySniffer",
          "signature": "XPLM_API intXPLMRegisterKeySniffer(XPLMKeySniffer_finCallback,\n                         int                  inBeforeWindows,\n                         void *               inRefcon);",
          "source": "code_block_extraction",
          "type": "function"
        }
      ],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/XPLMRegisterKeySniffer/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPLMRegisterKeySniffer\"><a href=\"/sdk/XPLMRegisterKeySniffer/\">XPLMRegisterKeySniffer</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API int        <a href=\"/sdk/XPLMRegisterKeySniffer/\">XPLMRegisterKeySniffer</a>(\n                         <a href=\"/sdk/XPLMKeySniffer_f/\">XPLMKeySniffer_f</a>     inCallback,\n                         int                  inBeforeWindows,\n                         void *               inRefcon);\n</code></pre><p>This routine registers a key sniffing callback. You specify whether you want to sniff before the window system, or only sniff keys the window system does not consume. You should ALMOST ALWAYS sniff non-control keys after the window system. When the window system consumes a key, it is because the user has “focused” a window. Consuming the key or taking action based on the key will produce very weird results. Returns 1 if successful.</p></div></div></article>",
      "code_examples": [
        {
          "char_count": 182,
          "code": "XPLM_API intXPLMRegisterKeySniffer(XPLMKeySniffer_finCallback,\n                         int                  inBeforeWindows,\n                         void *               inRefcon);",
          "context": "XPLMRegisterKeySniffer",
          "id": "example_0",
          "language": "c",
          "line_count": 3,
          "type": "snippet"
        }
      ],
      "cross_references": [],
      "markdown": "### [XPLMRegisterKeySniffer](/sdk/XPLMRegisterKeySniffer/)\n\n```cpp\nXPLM_API int        XPLMRegisterKeySniffer(\n                         XPLMKeySniffer_f     inCallback,\n                         int                  inBeforeWindows,\n                         void *               inRefcon);\n\n```\n\nThis routine registers a key sniffing callback. You specify whether you want to\nsniff before the window system, or only sniff keys the window system does not\nconsume. You should ALMOST ALWAYS sniff non-control keys after the window\nsystem. When the window system consumes a key, it is because the user has\n“focused” a window. Consuming the key or taking action based on the key will\nproduce very weird results. Returns 1 if successful.",
      "own_functions": [
        "XPLMRegisterKeySniffer",
        "intXPLMRegisterKeySniffer"
      ],
      "processing_timestamp": "2025-06-25T20:39:22.403959+00:00",
      "title": "XPLMRegisterKeySniffer | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMRegisterKeySniffer/"
    },
    "https://developer.x-plane.com/sdk/XPLMRegisterMapCreationHook/": {
      "api_signatures": [
        {
          "description": "Registers your callback to receive a notification each time a new map is constructed in X-Plane. This callback is the best time to add your custom map layer usingXPLMCreateMapLayer().",
          "name": "XPLMRegisterMapCreationHook",
          "parameters": [
            {
              "full_declaration": "void *               refcon",
              "name": "refcon",
              "type": "void *"
            }
          ],
          "signature": "XPLM_API voidXPLMRegisterMapCreationHook(XPLMMapCreatedCallback_fcallback,\n                         void *               refcon);"
        },
        {
          "name": "voidXPLMRegisterMapCreationHook",
          "signature": "XPLM_API voidXPLMRegisterMapCreationHook(XPLMMapCreatedCallback_fcallback,\n                         void *               refcon);",
          "source": "code_block_extraction",
          "type": "function"
        }
      ],
      "category": {
        "category": "XPLM_Map",
        "module": "Xplm Map",
        "url": "https://developer.x-plane.com/sdk/XPLMRegisterMapCreationHook/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPLMRegisterMapCreationHook\"><a href=\"/sdk/XPLMRegisterMapCreationHook/\">XPLMRegisterMapCreationHook</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API void       <a href=\"/sdk/XPLMRegisterMapCreationHook/\">XPLMRegisterMapCreationHook</a>(\n                         <a href=\"/sdk/XPLMMapCreatedCallback_f/\">XPLMMapCreatedCallback_f</a> callback,\n                         void *               refcon);\n</code></pre><p>Registers your callback to receive a notification each time a new map is constructed in X-Plane. This callback is the best time to add your custom map layer using<a href=\"/sdk/XPLMCreateMapLayer/\">XPLMCreateMapLayer</a>().</p><p>Note that you will not be notified about any maps that already exist—you can use<a href=\"/sdk/XPLMMapExists/\">XPLMMapExists</a>() to check for maps that were created previously.</p></div></div></article>",
      "code_examples": [
        {
          "char_count": 129,
          "code": "XPLM_API voidXPLMRegisterMapCreationHook(XPLMMapCreatedCallback_fcallback,\n                         void *               refcon);",
          "context": "XPLMRegisterMapCreationHook",
          "id": "example_0",
          "language": "c",
          "line_count": 2,
          "type": "snippet"
        }
      ],
      "cross_references": [
        "XPLMCreateMapLayer",
        "XPLMMapExists",
        "XPLMMap"
      ],
      "markdown": "### [XPLMRegisterMapCreationHook](/sdk/XPLMRegisterMapCreationHook/)\n\n```cpp\nXPLM_API void       XPLMRegisterMapCreationHook(\n                         XPLMMapCreatedCallback_f callback,\n                         void *               refcon);\n\n```\n\nRegisters your callback to receive a notification each time a new map is\nconstructed in X-Plane. This callback is the best time to add your custom map\nlayer using[XPLMCreateMapLayer](/sdk/XPLMCreateMapLayer/)().\n\nNote that you will not be notified about any maps that already exist—you can\nuse[XPLMMapExists](/sdk/XPLMMapExists/)() to check for maps that were created\npreviously.",
      "own_functions": [
        "XPLMRegisterMapCreationHook",
        "voidXPLMRegisterMapCreationHook"
      ],
      "processing_timestamp": "2025-06-25T20:39:23.858559+00:00",
      "title": "XPLMRegisterMapCreationHook | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMRegisterMapCreationHook/"
    },
    "https://developer.x-plane.com/sdk/XPLMReinitUsersPlane/": {
      "api_signatures": [
        {
          "deprecated": true,
          "description": "WARNING: DO NOT USE. UseXPLMPlaceUserAtAirportorXPLMPlaceUserAtLocation.",
          "name": "XPLMReinitUsersPlane",
          "parameters": [],
          "signature": "XPLM_API voidXPLMReinitUsersPlane(void);"
        },
        {
          "name": "voidXPLMReinitUsersPlane",
          "signature": "XPLM_API voidXPLMReinitUsersPlane(void);",
          "source": "code_block_extraction",
          "type": "function"
        }
      ],
      "category": {
        "category": "XPLM_Planes",
        "module": "Xplm Planes",
        "url": "https://developer.x-plane.com/sdk/XPLMReinitUsersPlane/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"function XPLM_DEPRECATED\"><h3 class=\"sdk-api-function\" id=\"XPLMReinitUsersPlane\"><a href=\"/sdk/XPLMReinitUsersPlane/\">XPLMReinitUsersPlane</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API void       <a href=\"/sdk/XPLMReinitUsersPlane/\">XPLMReinitUsersPlane</a>(void);\n</code></pre><p>WARNING: DO NOT USE. Use<a href=\"/sdk/XPLMPlaceUserAtAirport/\">XPLMPlaceUserAtAirport</a>or<a href=\"/sdk/XPLMPlaceUserAtLocation/\">XPLMPlaceUserAtLocation</a>.</p><p>This function recomputes the derived flight model data from the aircraft structure in memory. If you have used the data access layer to modify the aircraft structure, use this routine to resynchronize X-Plane; since X-Plane works at least partly from derived values, the sim will not behave properly until this is called.</p><p>WARNING: this routine does not necessarily place the airplane at the airport; use<a href=\"/sdk/XPLMSetUsersAircraft/\">XPLMSetUsersAircraft</a>to be compatible. This routine is provided to do special experimentation with flight models without resetting flight.</p></div></div></article>",
      "code_examples": [],
      "cross_references": [
        "XPLMPlaceUserAtLocation",
        "XPLMPlaceUserAtAirport",
        "XPLMSetUsersAircraft"
      ],
      "markdown": "### [XPLMReinitUsersPlane](/sdk/XPLMReinitUsersPlane/)\n\n```cpp\nXPLM_API void       XPLMReinitUsersPlane(void);\n\n```\n\nWARNING: DO NOT USE.\nUse[XPLMPlaceUserAtAirport](/sdk/XPLMPlaceUserAtAirport/)or[XPLMPlaceUserAtLocation](/sdk/XPLMPlaceUserAtLocation/).\n\nThis function recomputes the derived flight model data from the aircraft\nstructure in memory. If you have used the data access layer to modify the\naircraft structure, use this routine to resynchronize X-Plane; since X-Plane\nworks at least partly from derived values, the sim will not behave properly\nuntil this is called.\n\nWARNING: this routine does not necessarily place the airplane at the airport;\nuse[XPLMSetUsersAircraft](/sdk/XPLMSetUsersAircraft/)to be compatible. This\nroutine is provided to do special experimentation with flight models without\nresetting flight.",
      "own_functions": [
        "XPLMReinitUsersPlane",
        "voidXPLMReinitUsersPlane"
      ],
      "processing_timestamp": "2025-06-25T20:39:24.138187+00:00",
      "title": "XPLMReinitUsersPlane | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMReinitUsersPlane/"
    },
    "https://developer.x-plane.com/sdk/XPLMReleasePlanes/": {
      "api_signatures": [
        {
          "description": "Call this function to release access to the planes. Note that if you are disabled, access to planes is released for you and you must reacquire it.",
          "name": "XPLMReleasePlanes",
          "parameters": [],
          "signature": "XPLM_API voidXPLMReleasePlanes(void);"
        },
        {
          "name": "voidXPLMReleasePlanes",
          "signature": "XPLM_API voidXPLMReleasePlanes(void);",
          "source": "code_block_extraction",
          "type": "function"
        }
      ],
      "category": {
        "category": "XPLM_Planes",
        "module": "Xplm Planes",
        "url": "https://developer.x-plane.com/sdk/XPLMReleasePlanes/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPLMReleasePlanes\"><a href=\"/sdk/XPLMReleasePlanes/\">XPLMReleasePlanes</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API void       <a href=\"/sdk/XPLMReleasePlanes/\">XPLMReleasePlanes</a>(void);\n</code></pre><p>Call this function to release access to the planes. Note that if you are disabled, access to planes is released for you and you must reacquire it.</p></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "### [XPLMReleasePlanes](/sdk/XPLMReleasePlanes/)\n\n```cpp\nXPLM_API void       XPLMReleasePlanes(void);\n\n```\n\nCall this function to release access to the planes. Note that if you are\ndisabled, access to planes is released for you and you must reacquire it.",
      "own_functions": [
        "XPLMReleasePlanes",
        "voidXPLMReleasePlanes"
      ],
      "processing_timestamp": "2025-06-25T20:39:24.135186+00:00",
      "title": "XPLMReleasePlanes | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMReleasePlanes/"
    },
    "https://developer.x-plane.com/sdk/XPLMReloadPlugins/": {
      "api_signatures": [
        {
          "description": "This routine reloads all plug-ins. Once this routine is called and you return from the callback you were within (e.g. a menu select callback) you will receive your XPluginDisable and XPluginStop callbacks and your DLL will be unloaded, then the start process happens as if the sim was starting up.",
          "name": "XPLMReloadPlugins",
          "parameters": [],
          "signature": "XPLM_API voidXPLMReloadPlugins(void);"
        },
        {
          "name": "voidXPLMReloadPlugins",
          "signature": "XPLM_API voidXPLMReloadPlugins(void);",
          "source": "code_block_extraction",
          "type": "function"
        }
      ],
      "category": {
        "category": "XPLM_Plugin",
        "module": "Xplm Plugin",
        "url": "https://developer.x-plane.com/sdk/XPLMReloadPlugins/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPLMReloadPlugins\"><a href=\"/sdk/XPLMReloadPlugins/\">XPLMReloadPlugins</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API void       <a href=\"/sdk/XPLMReloadPlugins/\">XPLMReloadPlugins</a>(void);\n</code></pre><p>This routine reloads all plug-ins. Once this routine is called and you return from the callback you were within (e.g. a menu select callback) you will receive your XPluginDisable and XPluginStop callbacks and your DLL will be unloaded, then the start process happens as if the sim was starting up.</p></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "### [XPLMReloadPlugins](/sdk/XPLMReloadPlugins/)\n\n```cpp\nXPLM_API void       XPLMReloadPlugins(void);\n\n```\n\nThis routine reloads all plug-ins. Once this routine is called and you return\nfrom the callback you were within (e.g. a menu select callback) you will receive\nyour XPluginDisable and XPluginStop callbacks and your DLL will be unloaded,\nthen the start process happens as if the sim was starting up.",
      "own_functions": [
        "XPLMReloadPlugins",
        "voidXPLMReloadPlugins"
      ],
      "processing_timestamp": "2025-06-25T20:39:24.255934+00:00",
      "title": "XPLMReloadPlugins | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMReloadPlugins/"
    },
    "https://developer.x-plane.com/sdk/XPLMReloadScenery/": {
      "api_signatures": [
        {
          "description": "XPLMReloadSceneryreloads the current set of scenery. You can use this function in two typical ways: simply call it to reload the scenery, picking up any new installed scenery, .env files, etc. from disk. Or, change the lat/ref and lon/ref datarefs and then call this function to shift the scenery environment. This routine is equivalent to picking “reload scenery” from the developer menu.",
          "name": "XPLMReloadScenery",
          "parameters": [],
          "signature": "XPLM_API voidXPLMReloadScenery(void);"
        },
        {
          "name": "voidXPLMReloadScenery",
          "signature": "XPLM_API voidXPLMReloadScenery(void);",
          "source": "code_block_extraction",
          "type": "function"
        }
      ],
      "category": {
        "category": "XPLM_Scenery",
        "module": "Xplm Scenery",
        "url": "https://developer.x-plane.com/sdk/XPLMReloadScenery/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPLMReloadScenery\"><a href=\"/sdk/XPLMReloadScenery/\">XPLMReloadScenery</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API void       <a href=\"/sdk/XPLMReloadScenery/\">XPLMReloadScenery</a>(void);\n</code></pre><p><a href=\"/sdk/XPLMReloadScenery/\">XPLMReloadScenery</a>reloads the current set of scenery. You can use this function in two typical ways: simply call it to reload the scenery, picking up any new installed scenery, .env files, etc. from disk. Or, change the lat/ref and lon/ref datarefs and then call this function to shift the scenery environment. This routine is equivalent to picking “reload scenery” from the developer menu.</p></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "### [XPLMReloadScenery](/sdk/XPLMReloadScenery/)\n\n```cpp\nXPLM_API void       XPLMReloadScenery(void);\n\n```\n\n[XPLMReloadScenery](/sdk/XPLMReloadScenery/)reloads the current set of scenery.\nYou can use this function in two typical ways: simply call it to reload the\nscenery, picking up any new installed scenery, .env files, etc. from disk. Or,\nchange the lat/ref and lon/ref datarefs and then call this function to shift the\nscenery environment. This routine is equivalent to picking “reload scenery” from\nthe developer menu.",
      "own_functions": [
        "XPLMReloadScenery",
        "voidXPLMReloadScenery"
      ],
      "processing_timestamp": "2025-06-25T20:39:24.392054+00:00",
      "title": "XPLMReloadScenery | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMReloadScenery/"
    },
    "https://developer.x-plane.com/sdk/XPLMRemoveMenuItem/": {
      "api_signatures": [
        {
          "description": "Removes one item from a menu. Note that all menu items below are moved up one; your plugin must track the change in index numbers.",
          "name": "XPLMRemoveMenuItem",
          "parameters": [
            {
              "full_declaration": "int                  inIndex",
              "name": "inIndex",
              "type": "int"
            }
          ],
          "signature": "XPLM_API voidXPLMRemoveMenuItem(XPLMMenuIDinMenu,\n                         int                  inIndex);"
        },
        {
          "name": "voidXPLMRemoveMenuItem",
          "signature": "XPLM_API voidXPLMRemoveMenuItem(XPLMMenuIDinMenu,\n                         int                  inIndex);",
          "source": "code_block_extraction",
          "type": "function"
        }
      ],
      "category": {
        "category": "XPLM_Menus",
        "module": "Xplm Menus",
        "url": "https://developer.x-plane.com/sdk/XPLMRemoveMenuItem/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"function XPLM210\"><h3 class=\"sdk-api-function\" id=\"XPLMRemoveMenuItem\"><a href=\"/sdk/XPLMRemoveMenuItem/\">XPLMRemoveMenuItem</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API void       <a href=\"/sdk/XPLMRemoveMenuItem/\">XPLMRemoveMenuItem</a>(\n                         <a href=\"/sdk/XPLMMenuID/\">XPLMMenuID</a>           inMenu,\n                         int                  inIndex);\n</code></pre><p>Removes one item from a menu. Note that all menu items below are moved up one; your plugin must track the change in index numbers.</p></div></div></article>",
      "code_examples": [
        {
          "char_count": 105,
          "code": "XPLM_API voidXPLMRemoveMenuItem(XPLMMenuIDinMenu,\n                         int                  inIndex);",
          "context": "XPLMRemoveMenuItem",
          "id": "example_0",
          "language": "c",
          "line_count": 2,
          "type": "snippet"
        }
      ],
      "cross_references": [],
      "markdown": "### [XPLMRemoveMenuItem](/sdk/XPLMRemoveMenuItem/)\n\n```cpp\nXPLM_API void       XPLMRemoveMenuItem(\n                         XPLMMenuID           inMenu,\n                         int                  inIndex);\n\n```\n\nRemoves one item from a menu. Note that all menu items below are moved up one;\nyour plugin must track the change in index numbers.",
      "own_functions": [
        "XPLMRemoveMenuItem",
        "voidXPLMRemoveMenuItem"
      ],
      "processing_timestamp": "2025-06-25T20:39:23.932820+00:00",
      "title": "XPLMRemoveMenuItem | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMRemoveMenuItem/"
    },
    "https://developer.x-plane.com/sdk/XPLMSaveDataFile/": {
      "api_signatures": [
        {
          "description": "Saves the current situation or replay; paths are relative to the X-System folder.",
          "name": "XPLMSaveDataFile",
          "parameters": [
            {
              "full_declaration": "const char *         inFilePath",
              "name": "inFilePath",
              "type": "const char *"
            }
          ],
          "signature": "XPLM_API intXPLMSaveDataFile(XPLMDataFileTypeinFileType,\n                         const char *         inFilePath);"
        },
        {
          "name": "intXPLMSaveDataFile",
          "signature": "XPLM_API intXPLMSaveDataFile(XPLMDataFileTypeinFileType,\n                         const char *         inFilePath);",
          "source": "code_block_extraction",
          "type": "function"
        }
      ],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/XPLMSaveDataFile/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"function XPLM200\"><h3 class=\"sdk-api-function\" id=\"XPLMSaveDataFile\"><a href=\"/sdk/XPLMSaveDataFile/\">XPLMSaveDataFile</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API int        <a href=\"/sdk/XPLMSaveDataFile/\">XPLMSaveDataFile</a>(\n                         <a href=\"/sdk/XPLMDataFileType/\">XPLMDataFileType</a>     inFileType,\n                         const char *         inFilePath);\n</code></pre><p>Saves the current situation or replay; paths are relative to the X-System folder.</p></div></div></article>",
      "code_examples": [
        {
          "char_count": 115,
          "code": "XPLM_API intXPLMSaveDataFile(XPLMDataFileTypeinFileType,\n                         const char *         inFilePath);",
          "context": "XPLMSaveDataFile",
          "id": "example_0",
          "language": "c",
          "line_count": 2,
          "type": "snippet"
        }
      ],
      "cross_references": [
        "XPLMDataFileType"
      ],
      "markdown": "### [XPLMSaveDataFile](/sdk/XPLMSaveDataFile/)\n\n```cpp\nXPLM_API int        XPLMSaveDataFile(\n                         XPLMDataFileType     inFileType,\n                         const char *         inFilePath);\n\n```\n\nSaves the current situation or replay; paths are relative to the X-System\nfolder.",
      "own_functions": [
        "XPLMSaveDataFile",
        "intXPLMSaveDataFile"
      ],
      "processing_timestamp": "2025-06-25T20:39:22.409960+00:00",
      "title": "XPLMSaveDataFile | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMSaveDataFile/"
    },
    "https://developer.x-plane.com/sdk/XPLMSaveFMSFlightPlan/": {
      "api_signatures": [
        {
          "description": "Saves an X-Plane 11 formatted flightplan from the FMS or GPS into a char buffer that you provide. Use device index 0 for the pilot-side and device index 1 for the co-pilot side unit. Provide the length of the buffer you allocated. X-Plane will write a null-terminated string if the full flight plan fits into the buffer. If your buffer is too small, X-Plane will write inBufferLen characters, and the resulting buffer is not null-terminated. The return value is the number of characters (including null terminator) that X-Plane needed to write the flightplan. If this number is larger than the buffer you provided, the flightplan in the buffer will be incomplete and the buffer not null-terminated.",
          "name": "XPLMSaveFMSFlightPlan",
          "parameters": [
            {
              "full_declaration": "int                  inDevice",
              "name": "inDevice",
              "type": "int"
            },
            {
              "full_declaration": "char *               inBuffer",
              "name": "inBuffer",
              "type": "char *"
            },
            {
              "full_declaration": "unsigned int         inBufferLen",
              "name": "inBufferLen",
              "type": "unsigned int"
            }
          ],
          "signature": "XPLM_API unsigned intXPLMSaveFMSFlightPlan(\n                         int                  inDevice,\n                         char *               inBuffer,\n                         unsigned int         inBufferLen);"
        },
        {
          "name": "intXPLMSaveFMSFlightPlan",
          "signature": "XPLM_API unsigned intXPLMSaveFMSFlightPlan(\n                         int                  inDevice,\n                         char *               inBuffer,\n                         unsigned int         inBufferLen)",
          "source": "code_block_extraction",
          "type": "function"
        },
        {
          "name": "unsigned",
          "signature": "unsigned intXPLMSaveFMSFlightPlan(\n                         int                  inDevice,\n                         char *               inBuffer,\n                         unsigned int         inBufferLen);",
          "source": "code_block_extraction",
          "type": "function"
        }
      ],
      "category": {
        "category": "XPLM_Navigation",
        "module": "Xplm Navigation",
        "url": "https://developer.x-plane.com/sdk/XPLMSaveFMSFlightPlan/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"function XPLM410\"><h3 class=\"sdk-api-function\" id=\"XPLMSaveFMSFlightPlan\"><a href=\"/sdk/XPLMSaveFMSFlightPlan/\">XPLMSaveFMSFlightPlan</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API unsigned int <a href=\"/sdk/XPLMSaveFMSFlightPlan/\">XPLMSaveFMSFlightPlan</a>(\n                         int                  inDevice,\n                         char *               inBuffer,\n                         unsigned int         inBufferLen);\n</code></pre><p>Saves an X-Plane 11 formatted flightplan from the FMS or GPS into a char buffer that you provide. Use device index 0 for the pilot-side and device index 1 for the co-pilot side unit. Provide the length of the buffer you allocated. X-Plane will write a null-terminated string if the full flight plan fits into the buffer. If your buffer is too small, X-Plane will write inBufferLen characters, and the resulting buffer is not null-terminated. The return value is the number of characters (including null terminator) that X-Plane needed to write the flightplan. If this number is larger than the buffer you provided, the flightplan in the buffer will be incomplete and the buffer not null-terminated.</p></div></div></article>",
      "code_examples": [
        {
          "char_count": 215,
          "code": "XPLM_API unsigned intXPLMSaveFMSFlightPlan(\n                         int                  inDevice,\n                         char *               inBuffer,\n                         unsigned int         inBufferLen);",
          "context": "XPLMSaveFMSFlightPlan",
          "id": "example_0",
          "language": "c",
          "line_count": 4,
          "type": "snippet"
        }
      ],
      "cross_references": [],
      "markdown": "### [XPLMSaveFMSFlightPlan](/sdk/XPLMSaveFMSFlightPlan/)\n\n```cpp\nXPLM_API unsigned int XPLMSaveFMSFlightPlan(\n                         int                  inDevice,\n                         char *               inBuffer,\n                         unsigned int         inBufferLen);\n\n```\n\nSaves an X-Plane 11 formatted flightplan from the FMS or GPS into a char buffer\nthat you provide. Use device index 0 for the pilot-side and device index 1 for\nthe co-pilot side unit. Provide the length of the buffer you allocated. X-Plane\nwill write a null-terminated string if the full flight plan fits into the\nbuffer. If your buffer is too small, X-Plane will write inBufferLen characters,\nand the resulting buffer is not null-terminated. The return value is the number\nof characters (including null terminator) that X-Plane needed to write the\nflightplan. If this number is larger than the buffer you provided, the\nflightplan in the buffer will be incomplete and the buffer not null-terminated.",
      "own_functions": [
        "XPLMSaveFMSFlightPlan",
        "intXPLMSaveFMSFlightPlan",
        "unsigned"
      ],
      "processing_timestamp": "2025-06-25T20:39:24.016317+00:00",
      "title": "XPLMSaveFMSFlightPlan | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMSaveFMSFlightPlan/"
    },
    "https://developer.x-plane.com/sdk/XPLMScenery/": {
      "api_signatures": [
        {
          "description": "Creates a new probe object of a given type and returns.",
          "name": "XPLMCreateProbe",
          "parameters": [],
          "signature": "XPLM_APIXPLMProbeRefXPLMCreateProbe(XPLMProbeTypeinProbeType);"
        },
        {
          "description": "Deallocates an existing probe object.",
          "name": "XPLMDestroyProbe",
          "parameters": [],
          "signature": "XPLM_API voidXPLMDestroyProbe(XPLMProbeRefinProbe);"
        },
        {
          "description": "Probes the terrain. Pass in the XYZ coordinate of the probe point, a probe object, and anXPLMProbeInfo_tstruct that has its structSize member set properly. Other fields are filled in if we hit terrain, and a probe result is returned.",
          "name": "XPLMProbeTerrainXYZ",
          "parameters": [
            {
              "full_declaration": "float                inX",
              "name": "inX",
              "type": "float"
            },
            {
              "full_declaration": "float                inY",
              "name": "inY",
              "type": "float"
            },
            {
              "full_declaration": "float                inZ",
              "name": "inZ",
              "type": "float"
            },
            {
              "full_declaration": "XPLMProbeInfo_t*    outInfo",
              "name": "outInfo",
              "type": "XPLMProbeInfo_t*"
            }
          ],
          "signature": "XPLM_APIXPLMProbeResultXPLMProbeTerrainXYZ(XPLMProbeRefinProbe,\n                         float                inX,\n                         float                inY,\n                         float                inZ,XPLMProbeInfo_t*    outInfo);"
        },
        {
          "description": "Returns X-Plane’s simulated magnetic variation (declination) at the indication latitude and longitude.",
          "name": "XPLMGetMagneticVariation",
          "parameters": [
            {
              "full_declaration": "double               latitude",
              "name": "latitude",
              "type": "double"
            },
            {
              "full_declaration": "double               longitude",
              "name": "longitude",
              "type": "double"
            }
          ],
          "signature": "XPLM_API floatXPLMGetMagneticVariation(\n                         double               latitude,\n                         double               longitude);"
        },
        {
          "description": "Converts a heading in degrees relative to true north into a value relative to magnetic north at the user’s current location.",
          "name": "XPLMDegTrueToDegMagnetic",
          "parameters": [
            {
              "full_declaration": "float                headingDegreesTrue",
              "name": "headingDegreesTrue",
              "type": "float"
            }
          ],
          "signature": "XPLM_API floatXPLMDegTrueToDegMagnetic(\n                         float                headingDegreesTrue);"
        },
        {
          "description": "Converts a heading in degrees relative to magnetic north at the user’s current location into a value relative to true north.",
          "name": "XPLMDegMagneticToDegTrue",
          "parameters": [
            {
              "full_declaration": "float                headingDegreesMagnetic",
              "name": "headingDegreesMagnetic",
              "type": "float"
            }
          ],
          "signature": "XPLM_API floatXPLMDegMagneticToDegTrue(\n                         float                headingDegreesMagnetic);"
        },
        {
          "description": "This routine loads an OBJ file and returns a handle to it. If X-Plane has already loaded the object, the handle to the existing object is returned. Do not assume you will get the same handle back twice, but do make sure to call unload once for every load to avoid “leaking” objects. The object will be purged from memory when no plugins and no scenery are using it.",
          "name": "XPLMLoadObject",
          "parameters": [
            {
              "full_declaration": "const char *         inPath",
              "name": "inPath",
              "type": "const char *"
            }
          ],
          "signature": "XPLM_APIXPLMObjectRefXPLMLoadObject(\n                         const char *         inPath);"
        },
        {
          "description": "This routine loads an object asynchronously; control is returned to you immediately while X-Plane loads the object. The sim will not stop flying while the object loads. For large objects, it may be several seconds before the load finishes.",
          "name": "XPLMLoadObjectAsync",
          "parameters": [
            {
              "full_declaration": "const char *         inPath",
              "name": "inPath",
              "type": "const char *"
            },
            {
              "full_declaration": "void *               inRefcon",
              "name": "inRefcon",
              "type": "void *"
            }
          ],
          "signature": "XPLM_API voidXPLMLoadObjectAsync(\n                         const char *         inPath,XPLMObjectLoaded_finCallback,\n                         void *               inRefcon);"
        },
        {
          "deprecated": true,
          "description": "Deprecation Warning: use XPLMInstancing to draw 3-d objects by creating instances, rather than these APIs from draw callbacks.",
          "name": "XPLMDrawObjects",
          "parameters": [
            {
              "full_declaration": "int                  inCount",
              "name": "inCount",
              "type": "int"
            },
            {
              "full_declaration": "XPLMDrawInfo_t*     inLocations",
              "name": "inLocations",
              "type": "XPLMDrawInfo_t*"
            },
            {
              "full_declaration": "int                  lighting",
              "name": "lighting",
              "type": "int"
            },
            {
              "full_declaration": "int                  earth_relative",
              "name": "earth_relative",
              "type": "int"
            }
          ],
          "signature": "XPLM_API voidXPLMDrawObjects(XPLMObjectRefinObject,\n                         int                  inCount,XPLMDrawInfo_t*     inLocations,\n                         int                  lighting,\n                         int                  earth_relative);"
        },
        {
          "description": "This routine marks an object as no longer being used by your plugin. Objects are reference counted: once no plugins are using an object, it is purged from memory. Make sure to callXPLMUnloadObjectonce for each successful call toXPLMLoadObject.",
          "name": "XPLMUnloadObject",
          "parameters": [],
          "signature": "XPLM_API voidXPLMUnloadObject(XPLMObjectRefinObject);"
        },
        {
          "description": "This routine looks up a virtual path in the library system and returns all matching elements. You provide a callback - one virtual path may match many objects in the library.XPLMLookupObjectsreturns the number of objects found.",
          "name": "XPLMLookupObjects",
          "parameters": [
            {
              "full_declaration": "const char *         inPath",
              "name": "inPath",
              "type": "const char *"
            },
            {
              "full_declaration": "float                inLatitude",
              "name": "inLatitude",
              "type": "float"
            },
            {
              "full_declaration": "float                inLongitude",
              "name": "inLongitude",
              "type": "float"
            },
            {
              "full_declaration": "void *               ref",
              "name": "ref",
              "type": "void *"
            }
          ],
          "signature": "XPLM_API intXPLMLookupObjects(\n                         const char *         inPath,\n                         float                inLatitude,\n                         float                inLongitude,XPLMLibraryEnumerator_fenumerator,\n                         void *               ref);"
        },
        {
          "name": "XPLMProbeType",
          "type": "enum",
          "values": [
            {
              "description": "The Y probe gives you the location of the tallest physicalscenery along the Y axis going through the queried point.",
              "name": "xplm_ProbeY",
              "value": "\"0\""
            }
          ]
        },
        {
          "name": "XPLMProbeResult",
          "type": "enum",
          "values": [
            {
              "description": "The probe hit terrain and returned valid values.",
              "name": "xplm_ProbeHitTerrain",
              "value": "\"0\""
            },
            {
              "description": "An error in the API call. Either the probe struct size is bad, the probe is invalid, or the type is mismatched for the specific query call.",
              "name": "xplm_ProbeError",
              "value": "\"1\""
            },
            {
              "description": "The probe call succeeded but there is no terrain under this point (perhaps it is off the side of the planet?)",
              "name": "xplm_ProbeMissed",
              "value": "\"2\""
            }
          ]
        },
        {
          "name": "voidXPLMDestroyProbe",
          "signature": "XPLM_API voidXPLMDestroyProbe(XPLMProbeRefinProbe);",
          "source": "code_block_extraction",
          "type": "function"
        },
        {
          "name": "floatXPLMGetMagneticVariation",
          "signature": "XPLM_API floatXPLMGetMagneticVariation(\n                         double               latitude,\n                         double               longitude);",
          "source": "code_block_extraction",
          "type": "function"
        },
        {
          "name": "floatXPLMDegTrueToDegMagnetic",
          "signature": "XPLM_API floatXPLMDegTrueToDegMagnetic(\n                         float                headingDegreesTrue);",
          "source": "code_block_extraction",
          "type": "function"
        },
        {
          "name": "floatXPLMDegMagneticToDegTrue",
          "signature": "XPLM_API floatXPLMDegMagneticToDegTrue(\n                         float                headingDegreesMagnetic);",
          "source": "code_block_extraction",
          "type": "function"
        },
        {
          "name": "voidXPLMLoadObjectAsync",
          "signature": "XPLM_API voidXPLMLoadObjectAsync(\n                         const char *         inPath,XPLMObjectLoaded_finCallback,\n                         void *               inRefcon);",
          "source": "code_block_extraction",
          "type": "function"
        },
        {
          "name": "voidXPLMDrawObjects",
          "signature": "XPLM_API voidXPLMDrawObjects(XPLMObjectRefinObject,\n                         int                  inCount,XPLMDrawInfo_t*     inLocations,\n                         int                  lighting,\n                         int                  earth_relative);",
          "source": "code_block_extraction",
          "type": "function"
        },
        {
          "name": "voidXPLMUnloadObject",
          "signature": "XPLM_API voidXPLMUnloadObject(XPLMObjectRefinObject);",
          "source": "code_block_extraction",
          "type": "function"
        },
        {
          "name": "intXPLMLookupObjects",
          "signature": "XPLM_API intXPLMLookupObjects(\n                         const char *         inPath,\n                         float                inLatitude,\n                         float                inLongitude,XPLMLibraryEnumerator_fenumerator,\n                         void *               ref);",
          "source": "code_block_extraction",
          "type": "function"
        }
      ],
      "category": {
        "category": "XPLM_Scenery",
        "module": "Xplm Scenery",
        "url": "https://developer.x-plane.com/sdk/XPLMScenery/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"api\"><h1 class=\"sdk-api-title\" id=\"XPLMScenery\"><a href=\"/sdk/XPLMScenery/\">XPLMScenery</a>API</h1><p>This package contains APIs to interact with X-Plane’s scenery system.</p><div class=\"component XPLM200\"><h2 id=\"Terrain Y-Testing\">Terrain Y-Testing</h2><p>The Y-testing API allows you to locate the physical scenery mesh. This would be used to place dynamic graphics on top of the ground in a plausible way or do physics interactions.</p><p>The Y-test API works via probe objects, which are allocated by your plugin and used to query terrain. Probe objects exist both to capture which algorithm you have requested (see probe types) and also to cache query information.</p><h2>Performance Guidelines</h2><p>It is generally faster to use the same probe for nearby points and different probes for different points. Try not to allocate more than “hundreds” of probes at most. Share probes if you need more. Generally, probing operations are expensive, and should be avoided via caching when possible.</p><p>Y testing returns a location on the terrain, a normal vector, and a velocity vector. The normal vector tells you the slope of the terrain at that point. The velocity vector tells you if that terrain is moving (and is in meters/second). For example, if your Y test hits the aircraft carrier deck, this tells you the velocity of that point on the deck.</p><p>Note: the Y-testing API is limited to probing the loaded scenery area, which is approximately 300x300 km in X-Plane 9. Probes outside this area will return the height of a 0 MSL sphere.</p><div class=\"enum\"><h3 class=\"sdk-api-enum\" id=\"XPLMProbeType\"><a href=\"/sdk/XPLMProbeType/\">XPLMProbeType</a></h3><p><a href=\"/sdk/XPLMProbeType/\">XPLMProbeType</a>defines the type of terrain probe - each probe has a different algorithm. (Only one type of probe is provided right now, but future APIs will expose more flexible or powerful or useful probes.</p><p><div class=\"enumitem\"><table><thead><tr><th>Name</th><th>Value</th><th>Description</th></tr></thead><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_ProbeY\"><a href=\"/sdk/xplm_ProbeY/\">xplm_ProbeY</a></td><td>\"0\"</td><td>The Y probe gives you the location of the tallest physicalscenery along the Y axis going through the queried point.</td></tr></table></div></p></div><div class=\"enum\"><h3 class=\"sdk-api-enum\" id=\"XPLMProbeResult\"><a href=\"/sdk/XPLMProbeResult/\">XPLMProbeResult</a></h3><p>Probe results - possible results from a probe query.</p><p><div class=\"enumitem\"><table><thead><tr><th>Name</th><th>Value</th><th>Description</th></tr></thead><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_ProbeHitTerrain\"><a href=\"/sdk/xplm_ProbeHitTerrain/\">xplm_ProbeHitTerrain</a></td><td>\"0\"</td><td>The probe hit terrain and returned valid values.</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_ProbeError\"><a href=\"/sdk/xplm_ProbeError/\">xplm_ProbeError</a></td><td>\"1\"</td><td>An error in the API call. Either the probe struct size is bad, the probe is invalid, or the type is mismatched for the specific query call.</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_ProbeMissed\"><a href=\"/sdk/xplm_ProbeMissed/\">xplm_ProbeMissed</a></td><td>\"2\"</td><td>The probe call succeeded but there is no terrain under this point (perhaps it is off the side of the planet?)</td></tr></table></div></p></div><div class=\"typedef\"><h3 class=\"sdk-api-type\" id=\"XPLMProbeRef\"><a href=\"/sdk/XPLMProbeRef/\">XPLMProbeRef</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>typedef void * <a href=\"/sdk/XPLMProbeRef/\">XPLMProbeRef</a>;</code></pre><p>An<a href=\"/sdk/XPLMProbeRef/\">XPLMProbeRef</a>is an opaque handle to a probe, used for querying the terrain.</p></div><div class=\"struct\"><h3 class=\"sdk-api-struct\" id=\"XPLMProbeInfo_t\"><a href=\"/sdk/XPLMProbeInfo_t/\">XPLMProbeInfo_t</a></h3><p><a href=\"/sdk/XPLMProbeInfo_t/\">XPLMProbeInfo_t</a>contains the results of a probe call. Make sure to set structSize to the size of the struct before using it.</p><pre class=\"language-cpp\" data-manual=\"true\"><code>typedef struct {\n     // Size of structure in bytes - always set this before calling the XPLM.\n     int                       structSize;\n     // Resulting X location of the terrain point we hit, in local OpenGL coordinates.\n     float                     locationX;\n     // Resulting Y location of the terrain point we hit, in local OpenGL coordinates.\n     float                     locationY;\n     // Resulting Z location of the terrain point we hit, in local OpenGL coordinates.\n     float                     locationZ;\n     // X component of the normal vector to the terrain we found.\n     float                     normalX;\n     // Y component of the normal vector to the terrain we found.\n     float                     normalY;\n     // Z component of the normal vector to the terrain we found.\n     float                     normalZ;\n     // X component of the velocity vector of the terrain we found.\n     float                     velocityX;\n     // Y component of the velocity vector of the terrain we found.\n     float                     velocityY;\n     // Z component of the velocity vector of the terrain we found.\n     float                     velocityZ;\n     // Tells if the surface we hit is water (otherwise it is land).\n     int                       is_wet;\n} <a href=\"/sdk/XPLMProbeInfo_t/\">XPLMProbeInfo_t</a>;</code></pre></div><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPLMCreateProbe\"><a href=\"/sdk/XPLMCreateProbe/\">XPLMCreateProbe</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API <a href=\"/sdk/XPLMProbeRef/\">XPLMProbeRef</a> <a href=\"/sdk/XPLMCreateProbe/\">XPLMCreateProbe</a>(\n                         <a href=\"/sdk/XPLMProbeType/\">XPLMProbeType</a>        inProbeType);\n</code></pre><p>Creates a new probe object of a given type and returns.</p></div><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPLMDestroyProbe\"><a href=\"/sdk/XPLMDestroyProbe/\">XPLMDestroyProbe</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API void       <a href=\"/sdk/XPLMDestroyProbe/\">XPLMDestroyProbe</a>(\n                         <a href=\"/sdk/XPLMProbeRef/\">XPLMProbeRef</a>         inProbe);\n</code></pre><p>Deallocates an existing probe object.</p></div><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPLMProbeTerrainXYZ\"><a href=\"/sdk/XPLMProbeTerrainXYZ/\">XPLMProbeTerrainXYZ</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API <a href=\"/sdk/XPLMProbeResult/\">XPLMProbeResult</a> <a href=\"/sdk/XPLMProbeTerrainXYZ/\">XPLMProbeTerrainXYZ</a>(\n                         <a href=\"/sdk/XPLMProbeRef/\">XPLMProbeRef</a>         inProbe,\n                         float                inX,\n                         float                inY,\n                         float                inZ,\n                         <a href=\"/sdk/XPLMProbeInfo_t/\">XPLMProbeInfo_t</a> *    outInfo);\n</code></pre><p>Probes the terrain. Pass in the XYZ coordinate of the probe point, a probe object, and an<a href=\"/sdk/XPLMProbeInfo_t/\">XPLMProbeInfo_t</a>struct that has its structSize member set properly. Other fields are filled in if we hit terrain, and a probe result is returned.</p></div></div><div class=\"component XPLM300\"><h2 id=\"Magnetic Variation\">Magnetic Variation</h2><p>Use the magnetic variation (more properly, the “magnetic declination”) API to find the offset of magnetic north from true north at a given latitude and longitude within the simulator.</p><p>In the real world, the Earth’s magnetic field is irregular, such that true north (the direction along a meridian toward the north pole) does not necessarily match what a magnetic compass shows as north.</p><p>Using this API ensures that you present the same offsets to users as X-Plane’s built-in instruments.</p><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPLMGetMagneticVariation\"><a href=\"/sdk/XPLMGetMagneticVariation/\">XPLMGetMagneticVariation</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API float      <a href=\"/sdk/XPLMGetMagneticVariation/\">XPLMGetMagneticVariation</a>(\n                         double               latitude,\n                         double               longitude);\n</code></pre><p>Returns X-Plane’s simulated magnetic variation (declination) at the indication latitude and longitude.</p></div><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPLMDegTrueToDegMagnetic\"><a href=\"/sdk/XPLMDegTrueToDegMagnetic/\">XPLMDegTrueToDegMagnetic</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API float      <a href=\"/sdk/XPLMDegTrueToDegMagnetic/\">XPLMDegTrueToDegMagnetic</a>(\n                         float                headingDegreesTrue);\n</code></pre><p>Converts a heading in degrees relative to true north into a value relative to magnetic north at the user’s current location.</p></div><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPLMDegMagneticToDegTrue\"><a href=\"/sdk/XPLMDegMagneticToDegTrue/\">XPLMDegMagneticToDegTrue</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API float      <a href=\"/sdk/XPLMDegMagneticToDegTrue/\">XPLMDegMagneticToDegTrue</a>(\n                         float                headingDegreesMagnetic);\n</code></pre><p>Converts a heading in degrees relative to magnetic north at the user’s current location into a value relative to true north.</p></div></div><div class=\"component\"><h2 id=\"Object Drawing\">Object Drawing</h2><p>The object drawing routines let you load and draw X-Plane OBJ files. Objects are loaded by file path and managed via an opaque handle. X-Plane naturally reference counts objects, so it is important that you balance every successful call to<a href=\"/sdk/XPLMLoadObject/\">XPLMLoadObject</a>with a call to<a href=\"/sdk/XPLMUnloadObject/\">XPLMUnloadObject</a>!</p><div class=\"typedef XPLM200\"><h3 class=\"sdk-api-type\" id=\"XPLMObjectRef\"><a href=\"/sdk/XPLMObjectRef/\">XPLMObjectRef</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>typedef void * <a href=\"/sdk/XPLMObjectRef/\">XPLMObjectRef</a>;</code></pre><p>An<a href=\"/sdk/XPLMObjectRef/\">XPLMObjectRef</a>is a opaque handle to an .obj file that has been loaded into memory.</p></div><div class=\"struct XPLM200\"><h3 class=\"sdk-api-struct\" id=\"XPLMDrawInfo_t\"><a href=\"/sdk/XPLMDrawInfo_t/\">XPLMDrawInfo_t</a></h3><p>The<a href=\"/sdk/XPLMDrawInfo_t/\">XPLMDrawInfo_t</a>structure contains positioning info for one object that is to be drawn. Be sure to set structSize to the size of the structure for future expansion.</p><pre class=\"language-cpp\" data-manual=\"true\"><code>typedef struct {\n     // Set this to the size of this structure!\n     int                       structSize;\n     // X location of the object in local coordinates.\n     float                     x;\n     // Y location of the object in local coordinates.\n     float                     y;\n     // Z location of the object in local coordinates.\n     float                     z;\n     // Pitch in degres to rotate the object, positive is up.\n     float                     pitch;\n     // Heading in local coordinates to rotate the object, clockwise.\n     float                     heading;\n     // Roll to rotate the object.\n     float                     roll;\n} <a href=\"/sdk/XPLMDrawInfo_t/\">XPLMDrawInfo_t</a>;</code></pre></div><div class=\"callback XPLM210\"><h3 class=\"sdk-api-callback\" id=\"XPLMObjectLoaded_f\"><a href=\"/sdk/XPLMObjectLoaded_f/\">XPLMObjectLoaded_f</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>typedef void (* <a href=\"/sdk/XPLMObjectLoaded_f/\">XPLMObjectLoaded_f</a>)(\n                         <a href=\"/sdk/XPLMObjectRef/\">XPLMObjectRef</a>        inObject,\n                         void *               inRefcon);\n</code></pre><p>You provide this callback when loading an object asynchronously; it will be called once the object is loaded. Your refcon is passed back. The object ref passed in is the newly loaded object (ready for use) or NULL if an error occured.</p><p>If your plugin is disabled, this callback will be delivered as soon as the plugin is re-enabled. If your plugin is unloaded before this callback is ever called, the SDK will release the object handle for you.</p></div><div class=\"function XPLM200\"><h3 class=\"sdk-api-function\" id=\"XPLMLoadObject\"><a href=\"/sdk/XPLMLoadObject/\">XPLMLoadObject</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API <a href=\"/sdk/XPLMObjectRef/\">XPLMObjectRef</a> <a href=\"/sdk/XPLMLoadObject/\">XPLMLoadObject</a>(\n                         const char *         inPath);\n</code></pre><p>This routine loads an OBJ file and returns a handle to it. If X-Plane has already loaded the object, the handle to the existing object is returned. Do not assume you will get the same handle back twice, but do make sure to call unload once for every load to avoid “leaking” objects. The object will be purged from memory when no plugins and no scenery are using it.</p><p>The path for the object must be relative to the X-System base folder. If the path is in the root of the X-System folder you may need to prepend ./ to it; loading objects in the root of the X-System folder is STRONGLY discouraged - your plugin should not dump art resources in the root folder!</p><p><a href=\"/sdk/XPLMLoadObject/\">XPLMLoadObject</a>will return NULL if the object cannot be loaded (either because it is not found or the file is misformatted). This routine will load any object that can be used in the X-Plane scenery system.</p><p>It is important that the datarefs an object uses for animation already be registered before you load the object. For this reason it may be necessary to defer object loading until the sim has fully started.</p></div><div class=\"function XPLM210\"><h3 class=\"sdk-api-function\" id=\"XPLMLoadObjectAsync\"><a href=\"/sdk/XPLMLoadObjectAsync/\">XPLMLoadObjectAsync</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API void       <a href=\"/sdk/XPLMLoadObjectAsync/\">XPLMLoadObjectAsync</a>(\n                         const char *         inPath,\n                         <a href=\"/sdk/XPLMObjectLoaded_f/\">XPLMObjectLoaded_f</a>   inCallback,\n                         void *               inRefcon);\n</code></pre><p>This routine loads an object asynchronously; control is returned to you immediately while X-Plane loads the object. The sim will not stop flying while the object loads. For large objects, it may be several seconds before the load finishes.</p><p>You provide a callback function that is called once the load has completed. Note that if the object cannot be loaded, you will not find out until the callback function is called with a NULL object handle.</p><p>There is no way to cancel an asynchronous object load; you must wait for the load to complete and then release the object if it is no longer desired.</p></div><div class=\"function XPLM_DEPRECATED\"><h3 class=\"sdk-api-function\" id=\"XPLMDrawObjects\"><a href=\"/sdk/XPLMDrawObjects/\">XPLMDrawObjects</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API void       <a href=\"/sdk/XPLMDrawObjects/\">XPLMDrawObjects</a>(\n                         <a href=\"/sdk/XPLMObjectRef/\">XPLMObjectRef</a>        inObject,\n                         int                  inCount,\n                         <a href=\"/sdk/XPLMDrawInfo_t/\">XPLMDrawInfo_t</a> *     inLocations,\n                         int                  lighting,\n                         int                  earth_relative);\n</code></pre><p><strong>Deprecation Warning</strong>: use XPLMInstancing to draw 3-d objects by creating instances, rather than these APIs from draw callbacks.</p><p><a href=\"/sdk/XPLMDrawObjects/\">XPLMDrawObjects</a>draws an object from an OBJ file one or more times. You pass in the object and an array of<a href=\"/sdk/XPLMDrawInfo_t/\">XPLMDrawInfo_t</a>structs, one for each place you would like the object to be drawn.</p><p>X-Plane will attempt to cull the objects based on LOD and visibility, and will pick the appropriate LOD.</p><p>Lighting is a boolean; pass 1 to show the night version of object with night-only lights lit up. Pass 0 to show the daytime version of the object.</p><p>earth_relative controls the coordinate system. If this is 1, the rotations you specify are applied to the object after its coordinate system is transformed from local to earth-relative coordinates – that is, an object with no rotations will point toward true north and the Y axis will be up against gravity. If this is 0, the object is drawn with your rotations from local coordanates – that is, an object with no rotations is drawn pointing down the -Z axis and the Y axis of the object matches the local coordinate Y axis.</p></div><div class=\"function XPLM200\"><h3 class=\"sdk-api-function\" id=\"XPLMUnloadObject\"><a href=\"/sdk/XPLMUnloadObject/\">XPLMUnloadObject</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API void       <a href=\"/sdk/XPLMUnloadObject/\">XPLMUnloadObject</a>(\n                         <a href=\"/sdk/XPLMObjectRef/\">XPLMObjectRef</a>        inObject);\n</code></pre><p>This routine marks an object as no longer being used by your plugin. Objects are reference counted: once no plugins are using an object, it is purged from memory. Make sure to call<a href=\"/sdk/XPLMUnloadObject/\">XPLMUnloadObject</a>once for each successful call to<a href=\"/sdk/XPLMLoadObject/\">XPLMLoadObject</a>.</p></div></div><div class=\"component XPLM200\"><h2 id=\"Library Access\">Library Access</h2><p>The library access routines allow you to locate scenery objects via the X-Plane library system. Right now library access is only provided for objects, allowing plugin-drawn objects to be extended using the library system.</p><div class=\"callback\"><h3 class=\"sdk-api-callback\" id=\"XPLMLibraryEnumerator_f\"><a href=\"/sdk/XPLMLibraryEnumerator_f/\">XPLMLibraryEnumerator_f</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>typedef void (* <a href=\"/sdk/XPLMLibraryEnumerator_f/\">XPLMLibraryEnumerator_f</a>)(\n                         const char *         inFilePath,\n                         void *               inRef);\n</code></pre><p>An<a href=\"/sdk/XPLMLibraryEnumerator_f/\">XPLMLibraryEnumerator_f</a>is a callback you provide that is called once for each library element that is located. The returned paths will be relative to the X-System folder.</p></div><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPLMLookupObjects\"><a href=\"/sdk/XPLMLookupObjects/\">XPLMLookupObjects</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API int        <a href=\"/sdk/XPLMLookupObjects/\">XPLMLookupObjects</a>(\n                         const char *         inPath,\n                         float                inLatitude,\n                         float                inLongitude,\n                         <a href=\"/sdk/XPLMLibraryEnumerator_f/\">XPLMLibraryEnumerator_f</a> enumerator,\n                         void *               ref);\n</code></pre><p>This routine looks up a virtual path in the library system and returns all matching elements. You provide a callback - one virtual path may match many objects in the library.<a href=\"/sdk/XPLMLookupObjects/\">XPLMLookupObjects</a>returns the number of objects found.</p><p>The latitude and longitude parameters specify the location the object will be used. The library system allows for scenery packages to only provide objects to certain local locations. Only objects that are allowed at the latitude/longitude you provide will be returned.</p></div></div></div></div></article>",
      "code_examples": [
        {
          "char_count": 1298,
          "code": "typedef struct {\n     // Size of structure in bytes - always set this before calling the XPLM.\n     int                       structSize;\n     // Resulting X location of the terrain point we hit, in local OpenGL coordinates.\n     float                     locationX;\n     // Resulting Y location of the terrain point we hit, in local OpenGL coordinates.\n     float                     locationY;\n     // Resulting Z location of the terrain point we hit, in local OpenGL coordinates.\n     float                     locationZ;\n     // X component of the normal vector to the terrain we found.\n     float                     normalX;\n     // Y component of the normal vector to the terrain we found.\n     float                     normalY;\n     // Z component of the normal vector to the terrain we found.\n     float                     normalZ;\n     // X component of the velocity vector of the terrain we found.\n     float                     velocityX;\n     // Y component of the velocity vector of the terrain we found.\n     float                     velocityY;\n     // Z component of the velocity vector of the terrain we found.\n     float                     velocityZ;\n     // Tells if the surface we hit is water (otherwise it is land).\n     int                       is_wet;\n}XPLMProbeInfo_t;",
          "context": "XPLMProbeInfo_tcontains the results of a probe call. Make sure to set structSize to the size of the struct before using it.",
          "id": "example_1",
          "language": "c",
          "line_count": 24,
          "type": "example"
        },
        {
          "char_count": 62,
          "code": "XPLM_APIXPLMProbeRefXPLMCreateProbe(XPLMProbeTypeinProbeType);",
          "context": "XPLMCreateProbe",
          "id": "example_2",
          "language": "c",
          "line_count": 1,
          "type": "snippet"
        },
        {
          "char_count": 51,
          "code": "XPLM_API voidXPLMDestroyProbe(XPLMProbeRefinProbe);",
          "context": "XPLMDestroyProbe",
          "id": "example_3",
          "language": "c",
          "line_count": 1,
          "type": "snippet"
        },
        {
          "char_count": 245,
          "code": "XPLM_APIXPLMProbeResultXPLMProbeTerrainXYZ(XPLMProbeRefinProbe,\n                         float                inX,\n                         float                inY,\n                         float                inZ,XPLMProbeInfo_t*    outInfo);",
          "context": "XPLMProbeTerrainXYZ",
          "id": "example_4",
          "language": "c",
          "line_count": 4,
          "type": "snippet"
        },
        {
          "char_count": 153,
          "code": "XPLM_API floatXPLMGetMagneticVariation(\n                         double               latitude,\n                         double               longitude);",
          "context": "XPLMGetMagneticVariation",
          "id": "example_5",
          "language": "c",
          "line_count": 3,
          "type": "snippet"
        },
        {
          "char_count": 106,
          "code": "XPLM_API floatXPLMDegTrueToDegMagnetic(\n                         float                headingDegreesTrue);",
          "context": "XPLMDegTrueToDegMagnetic",
          "id": "example_6",
          "language": "c",
          "line_count": 2,
          "type": "snippet"
        },
        {
          "char_count": 110,
          "code": "XPLM_API floatXPLMDegMagneticToDegTrue(\n                         float                headingDegreesMagnetic);",
          "context": "XPLMDegMagneticToDegTrue",
          "id": "example_7",
          "language": "c",
          "line_count": 2,
          "type": "snippet"
        },
        {
          "char_count": 673,
          "code": "typedef struct {\n     // Set this to the size of this structure!\n     int                       structSize;\n     // X location of the object in local coordinates.\n     float                     x;\n     // Y location of the object in local coordinates.\n     float                     y;\n     // Z location of the object in local coordinates.\n     float                     z;\n     // Pitch in degres to rotate the object, positive is up.\n     float                     pitch;\n     // Heading in local coordinates to rotate the object, clockwise.\n     float                     heading;\n     // Roll to rotate the object.\n     float                     roll;\n}XPLMDrawInfo_t;",
          "context": "TheXPLMDrawInfo_tstructure contains positioning info for one object that is to be drawn. Be sure to set structSize to the size of the structure for future expansion.",
          "id": "example_9",
          "language": "c",
          "line_count": 16,
          "type": "example"
        },
        {
          "char_count": 114,
          "code": "typedef void (*XPLMObjectLoaded_f)(XPLMObjectRefinObject,\n                         void *               inRefcon);",
          "context": "XPLMObjectLoaded_f",
          "id": "example_10",
          "language": "c",
          "line_count": 2,
          "type": "snippet"
        },
        {
          "char_count": 91,
          "code": "XPLM_APIXPLMObjectRefXPLMLoadObject(\n                         const char *         inPath);",
          "context": "XPLMLoadObject",
          "id": "example_11",
          "language": "c",
          "line_count": 2,
          "type": "snippet"
        },
        {
          "char_count": 173,
          "code": "XPLM_API voidXPLMLoadObjectAsync(\n                         const char *         inPath,XPLMObjectLoaded_finCallback,\n                         void *               inRefcon);",
          "context": "XPLMLoadObjectAsync",
          "id": "example_12",
          "language": "c",
          "line_count": 3,
          "type": "snippet"
        },
        {
          "char_count": 257,
          "code": "XPLM_API voidXPLMDrawObjects(XPLMObjectRefinObject,\n                         int                  inCount,XPLMDrawInfo_t*     inLocations,\n                         int                  lighting,\n                         int                  earth_relative);",
          "context": "XPLMDrawObjects",
          "id": "example_13",
          "language": "c",
          "line_count": 4,
          "type": "snippet"
        },
        {
          "char_count": 53,
          "code": "XPLM_API voidXPLMUnloadObject(XPLMObjectRefinObject);",
          "context": "XPLMUnloadObject",
          "id": "example_14",
          "language": "c",
          "line_count": 1,
          "type": "snippet"
        },
        {
          "char_count": 152,
          "code": "typedef void (*XPLMLibraryEnumerator_f)(\n                         const char *         inFilePath,\n                         void *               inRef);",
          "context": "XPLMLibraryEnumerator_f",
          "id": "example_15",
          "language": "c",
          "line_count": 3,
          "type": "snippet"
        },
        {
          "char_count": 287,
          "code": "XPLM_API intXPLMLookupObjects(\n                         const char *         inPath,\n                         float                inLatitude,\n                         float                inLongitude,XPLMLibraryEnumerator_fenumerator,\n                         void *               ref);",
          "context": "XPLMLookupObjects",
          "id": "example_16",
          "language": "c",
          "line_count": 5,
          "type": "snippet"
        }
      ],
      "cross_references": [],
      "markdown": "# [XPLMScenery](/sdk/XPLMScenery/)API\n\nThis package contains APIs to interact with X-Plane’s scenery system.\n\n## Terrain Y-Testing\n\nThe Y-testing API allows you to locate the physical scenery mesh. This would be\nused to place dynamic graphics on top of the ground in a plausible way or do\nphysics interactions.\n\nThe Y-test API works via probe objects, which are allocated by your plugin and\nused to query terrain. Probe objects exist both to capture which algorithm you\nhave requested (see probe types) and also to cache query information.\n\n## Performance Guidelines\n\nIt is generally faster to use the same probe for nearby points and different\nprobes for different points. Try not to allocate more than “hundreds” of probes\nat most. Share probes if you need more. Generally, probing operations are\nexpensive, and should be avoided via caching when possible.\n\nY testing returns a location on the terrain, a normal vector, and a velocity\nvector. The normal vector tells you the slope of the terrain at that point. The\nvelocity vector tells you if that terrain is moving (and is in meters/second).\nFor example, if your Y test hits the aircraft carrier deck, this tells you the\nvelocity of that point on the deck.\n\nNote: the Y-testing API is limited to probing the loaded scenery area, which is\napproximately 300x300 km in X-Plane 9. Probes outside this area will return the\nheight of a 0 MSL sphere.\n\n### [XPLMProbeType](/sdk/XPLMProbeType/)\n\n[XPLMProbeType](/sdk/XPLMProbeType/)defines the type of terrain probe - each\nprobe has a different algorithm. (Only one type of probe is provided right now,\nbut future APIs will expose more flexible or powerful or useful probes.\n\n| Name | Value | Description |\n| --- | --- | --- |\n| [xplm_ProbeY](/sdk/xplm_ProbeY/) | \"0\" | The Y probe gives you the location of\nthe tallest physicalscenery along the Y axis going through the queried point. |\n\n### [XPLMProbeResult](/sdk/XPLMProbeResult/)\n\nProbe results - possible results from a probe query.\n\n| Name | Value | Description |\n| --- | --- | --- |\n| [xplm_ProbeHitTerrain](/sdk/xplm_ProbeHitTerrain/) | \"0\" | The probe hit\nterrain and returned valid values. |\n| [xplm_ProbeError](/sdk/xplm_ProbeError/) | \"1\" | An error in the API call.\nEither the probe struct size is bad, the probe is invalid, or the type is\nmismatched for the specific query call. |\n| [xplm_ProbeMissed](/sdk/xplm_ProbeMissed/) | \"2\" | The probe call succeeded\nbut there is no terrain under this point (perhaps it is off the side of the\nplanet?) |\n\n### [XPLMProbeRef](/sdk/XPLMProbeRef/)\n\n```cpp\ntypedef void * XPLMProbeRef;\n```\n\nAn[XPLMProbeRef](/sdk/XPLMProbeRef/)is an opaque handle to a probe, used for\nquerying the terrain.\n\n### [XPLMProbeInfo_t](/sdk/XPLMProbeInfo_t/)\n\n[XPLMProbeInfo_t](/sdk/XPLMProbeInfo_t/)contains the results of a probe call.\nMake sure to set structSize to the size of the struct before using it.\n\n```cpp\ntypedef struct {\n     // Size of structure in bytes - always set this before calling the XPLM.\n     int                       structSize;\n     // Resulting X location of the terrain point we hit, in local OpenGL coordinates.\n     float                     locationX;\n     // Resulting Y location of the terrain point we hit, in local OpenGL coordinates.\n     float                     locationY;\n     // Resulting Z location of the terrain point we hit, in local OpenGL coordinates.\n     float                     locationZ;\n     // X component of the normal vector to the terrain we found.\n     float                     normalX;\n     // Y component of the normal vector to the terrain we found.\n     float                     normalY;\n     // Z component of the normal vector to the terrain we found.\n     float                     normalZ;\n     // X component of the velocity vector of the terrain we found.\n     float                     velocityX;\n     // Y component of the velocity vector of the terrain we found.\n     float                     velocityY;\n     // Z component of the velocity vector of the terrain we found.\n     float                     velocityZ;\n     // Tells if the surface we hit is water (otherwise it is land).\n     int                       is_wet;\n} XPLMProbeInfo_t;\n```\n\n### [XPLMCreateProbe](/sdk/XPLMCreateProbe/)\n\n```cpp\nXPLM_API XPLMProbeRef XPLMCreateProbe(\n                         XPLMProbeType        inProbeType);\n\n```\n\nCreates a new probe object of a given type and returns.\n\n### [XPLMDestroyProbe](/sdk/XPLMDestroyProbe/)\n\n```cpp\nXPLM_API void       XPLMDestroyProbe(\n                         XPLMProbeRef         inProbe);\n\n```\n\nDeallocates an existing probe object.\n\n### [XPLMProbeTerrainXYZ](/sdk/XPLMProbeTerrainXYZ/)\n\n```cpp\nXPLM_API XPLMProbeResult XPLMProbeTerrainXYZ(\n                         XPLMProbeRef         inProbe,\n                         float                inX,\n                         float                inY,\n                         float                inZ,\n                         XPLMProbeInfo_t *    outInfo);\n\n```\n\nProbes the terrain. Pass in the XYZ coordinate of the probe point, a probe\nobject, and an[XPLMProbeInfo_t](/sdk/XPLMProbeInfo_t/)struct that has its\nstructSize member set properly. Other fields are filled in if we hit terrain,\nand a probe result is returned.\n\n## Magnetic Variation\n\nUse the magnetic variation (more properly, the “magnetic declination”) API to\nfind the offset of magnetic north from true north at a given latitude and\nlongitude within the simulator.\n\nIn the real world, the Earth’s magnetic field is irregular, such that true north\n(the direction along a meridian toward the north pole) does not necessarily\nmatch what a magnetic compass shows as north.\n\nUsing this API ensures that you present the same offsets to users as X-Plane’s\nbuilt-in instruments.\n\n### [XPLMGetMagneticVariation](/sdk/XPLMGetMagneticVariation/)\n\n```cpp\nXPLM_API float      XPLMGetMagneticVariation(\n                         double               latitude,\n                         double               longitude);\n\n```\n\nReturns X-Plane’s simulated magnetic variation (declination) at the indication\nlatitude and longitude.\n\n### [XPLMDegTrueToDegMagnetic](/sdk/XPLMDegTrueToDegMagnetic/)\n\n```cpp\nXPLM_API float      XPLMDegTrueToDegMagnetic(\n                         float                headingDegreesTrue);\n\n```\n\nConverts a heading in degrees relative to true north into a value relative to\nmagnetic north at the user’s current location.\n\n### [XPLMDegMagneticToDegTrue](/sdk/XPLMDegMagneticToDegTrue/)\n\n```cpp\nXPLM_API float      XPLMDegMagneticToDegTrue(\n                         float                headingDegreesMagnetic);\n\n```\n\nConverts a heading in degrees relative to magnetic north at the user’s current\nlocation into a value relative to true north.\n\n## Object Drawing\n\nThe object drawing routines let you load and draw X-Plane OBJ files. Objects are\nloaded by file path and managed via an opaque handle. X-Plane naturally\nreference counts objects, so it is important that you balance every successful\ncall to[XPLMLoadObject](/sdk/XPLMLoadObject/)with a call\nto[XPLMUnloadObject](/sdk/XPLMUnloadObject/)!\n\n### [XPLMObjectRef](/sdk/XPLMObjectRef/)\n\n```cpp\ntypedef void * XPLMObjectRef;\n```\n\nAn[XPLMObjectRef](/sdk/XPLMObjectRef/)is a opaque handle to an .obj file that\nhas been loaded into memory.\n\n### [XPLMDrawInfo_t](/sdk/XPLMDrawInfo_t/)\n\nThe[XPLMDrawInfo_t](/sdk/XPLMDrawInfo_t/)structure contains positioning info for\none object that is to be drawn. Be sure to set structSize to the size of the\nstructure for future expansion.\n\n```cpp\ntypedef struct {\n     // Set this to the size of this structure!\n     int                       structSize;\n     // X location of the object in local coordinates.\n     float                     x;\n     // Y location of the object in local coordinates.\n     float                     y;\n     // Z location of the object in local coordinates.\n     float                     z;\n     // Pitch in degres to rotate the object, positive is up.\n     float                     pitch;\n     // Heading in local coordinates to rotate the object, clockwise.\n     float                     heading;\n     // Roll to rotate the object.\n     float                     roll;\n} XPLMDrawInfo_t;\n```\n\n### [XPLMObjectLoaded_f](/sdk/XPLMObjectLoaded_f/)\n\n```cpp\ntypedef void (* XPLMObjectLoaded_f)(\n                         XPLMObjectRef        inObject,\n                         void *               inRefcon);\n\n```\n\nYou provide this callback when loading an object asynchronously; it will be\ncalled once the object is loaded. Your refcon is passed back. The object ref\npassed in is the newly loaded object (ready for use) or NULL if an error\noccured.\n\nIf your plugin is disabled, this callback will be delivered as soon as the\nplugin is re-enabled. If your plugin is unloaded before this callback is ever\ncalled, the SDK will release the object handle for you.\n\n### [XPLMLoadObject](/sdk/XPLMLoadObject/)\n\n```cpp\nXPLM_API XPLMObjectRef XPLMLoadObject(\n                         const char *         inPath);\n\n```\n\nThis routine loads an OBJ file and returns a handle to it. If X-Plane has\nalready loaded the object, the handle to the existing object is returned. Do not\nassume you will get the same handle back twice, but do make sure to call unload\nonce for every load to avoid “leaking” objects. The object will be purged from\nmemory when no plugins and no scenery are using it.\n\nThe path for the object must be relative to the X-System base folder. If the\npath is in the root of the X-System folder you may need to prepend ./ to it;\nloading objects in the root of the X-System folder is STRONGLY discouraged -\nyour plugin should not dump art resources in the root folder!\n\n[XPLMLoadObject](/sdk/XPLMLoadObject/)will return NULL if the object cannot be\nloaded (either because it is not found or the file is misformatted). This\nroutine will load any object that can be used in the X-Plane scenery system.\n\nIt is important that the datarefs an object uses for animation already be\nregistered before you load the object. For this reason it may be necessary to\ndefer object loading until the sim has fully started.\n\n### [XPLMLoadObjectAsync](/sdk/XPLMLoadObjectAsync/)\n\n```cpp\nXPLM_API void       XPLMLoadObjectAsync(\n                         const char *         inPath,\n                         XPLMObjectLoaded_f   inCallback,\n                         void *               inRefcon);\n\n```\n\nThis routine loads an object asynchronously; control is returned to you\nimmediately while X-Plane loads the object. The sim will not stop flying while\nthe object loads. For large objects, it may be several seconds before the load\nfinishes.\n\nYou provide a callback function that is called once the load has completed. Note\nthat if the object cannot be loaded, you will not find out until the callback\nfunction is called with a NULL object handle.\n\nThere is no way to cancel an asynchronous object load; you must wait for the\nload to complete and then release the object if it is no longer desired.\n\n### [XPLMDrawObjects](/sdk/XPLMDrawObjects/)\n\n```cpp\nXPLM_API void       XPLMDrawObjects(\n                         XPLMObjectRef        inObject,\n                         int                  inCount,\n                         XPLMDrawInfo_t *     inLocations,\n                         int                  lighting,\n                         int                  earth_relative);\n\n```\n\n**Deprecation Warning**: use XPLMInstancing to draw 3-d objects by creating\ninstances, rather than these APIs from draw callbacks.\n\n[XPLMDrawObjects](/sdk/XPLMDrawObjects/)draws an object from an OBJ file one or\nmore times. You pass in the object and an array\nof[XPLMDrawInfo_t](/sdk/XPLMDrawInfo_t/)structs, one for each place you would\nlike the object to be drawn.\n\nX-Plane will attempt to cull the objects based on LOD and visibility, and will\npick the appropriate LOD.\n\nLighting is a boolean; pass 1 to show the night version of object with\nnight-only lights lit up. Pass 0 to show the daytime version of the object.\n\nearth_relative controls the coordinate system. If this is 1, the rotations you\nspecify are applied to the object after its coordinate system is transformed\nfrom local to earth-relative coordinates – that is, an object with no rotations\nwill point toward true north and the Y axis will be up against gravity. If this\nis 0, the object is drawn with your rotations from local coordanates – that is,\nan object with no rotations is drawn pointing down the -Z axis and the Y axis of\nthe object matches the local coordinate Y axis.\n\n### [XPLMUnloadObject](/sdk/XPLMUnloadObject/)\n\n```cpp\nXPLM_API void       XPLMUnloadObject(\n                         XPLMObjectRef        inObject);\n\n```\n\nThis routine marks an object as no longer being used by your plugin. Objects are\nreference counted: once no plugins are using an object, it is purged from\nmemory. Make sure to call[XPLMUnloadObject](/sdk/XPLMUnloadObject/)once for each\nsuccessful call to[XPLMLoadObject](/sdk/XPLMLoadObject/).\n\n## Library Access\n\nThe library access routines allow you to locate scenery objects via the X-Plane\nlibrary system. Right now library access is only provided for objects, allowing\nplugin-drawn objects to be extended using the library system.\n\n### [XPLMLibraryEnumerator_f](/sdk/XPLMLibraryEnumerator_f/)\n\n```cpp\ntypedef void (* XPLMLibraryEnumerator_f)(\n                         const char *         inFilePath,\n                         void *               inRef);\n\n```\n\nAn[XPLMLibraryEnumerator_f](/sdk/XPLMLibraryEnumerator_f/)is a callback you\nprovide that is called once for each library element that is located. The\nreturned paths will be relative to the X-System folder.\n\n### [XPLMLookupObjects](/sdk/XPLMLookupObjects/)\n\n```cpp\nXPLM_API int        XPLMLookupObjects(\n                         const char *         inPath,\n                         float                inLatitude,\n                         float                inLongitude,\n                         XPLMLibraryEnumerator_f enumerator,\n                         void *               ref);\n\n```\n\nThis routine looks up a virtual path in the library system and returns all\nmatching elements. You provide a callback - one virtual path may match many\nobjects in the library.[XPLMLookupObjects](/sdk/XPLMLookupObjects/)returns the\nnumber of objects found.\n\nThe latitude and longitude parameters specify the location the object will be\nused. The library system allows for scenery packages to only provide objects to\ncertain local locations. Only objects that are allowed at the latitude/longitude\nyou provide will be returned.",
      "own_functions": [
        "XPLMCreateProbe",
        "XPLMDestroyProbe",
        "XPLMProbeTerrainXYZ",
        "XPLMGetMagneticVariation",
        "XPLMDegTrueToDegMagnetic",
        "XPLMDegMagneticToDegTrue",
        "XPLMLoadObject",
        "XPLMLoadObjectAsync",
        "XPLMDrawObjects",
        "XPLMUnloadObject",
        "XPLMLookupObjects",
        "XPLMProbeType",
        "XPLMProbeResult",
        "voidXPLMDestroyProbe",
        "floatXPLMGetMagneticVariation",
        "floatXPLMDegTrueToDegMagnetic",
        "floatXPLMDegMagneticToDegTrue",
        "voidXPLMLoadObjectAsync",
        "voidXPLMDrawObjects",
        "voidXPLMUnloadObject",
        "intXPLMLookupObjects"
      ],
      "processing_timestamp": "2025-06-25T20:39:24.421787+00:00",
      "title": "XPLMScenery | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMScenery/"
    },
    "https://developer.x-plane.com/sdk/XPLMScheduleFlightLoop/": {
      "api_signatures": [
        {
          "description": "This routine schedules a flight loop callback for future execution. If inInterval is negative, it is run in a certain number of frames based on the absolute value of the input. If the interval is positive, it is a duration in seconds.",
          "name": "XPLMScheduleFlightLoop",
          "parameters": [
            {
              "full_declaration": "float                inInterval",
              "name": "inInterval",
              "type": "float"
            },
            {
              "full_declaration": "int                  inRelativeToNow",
              "name": "inRelativeToNow",
              "type": "int"
            }
          ],
          "signature": "XPLM_API voidXPLMScheduleFlightLoop(XPLMFlightLoopIDinFlightLoopID,\n                         float                inInterval,\n                         int                  inRelativeToNow);"
        },
        {
          "name": "voidXPLMScheduleFlightLoop",
          "signature": "XPLM_API voidXPLMScheduleFlightLoop(XPLMFlightLoopIDinFlightLoopID,\n                         float                inInterval,\n                         int                  inRelativeToNow);",
          "source": "code_block_extraction",
          "type": "function"
        }
      ],
      "category": {
        "category": "XPLM_Processing",
        "module": "Xplm Processing",
        "url": "https://developer.x-plane.com/sdk/XPLMScheduleFlightLoop/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"function XPLM210\"><h3 class=\"sdk-api-function\" id=\"XPLMScheduleFlightLoop\"><a href=\"/sdk/XPLMScheduleFlightLoop/\">XPLMScheduleFlightLoop</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API void       <a href=\"/sdk/XPLMScheduleFlightLoop/\">XPLMScheduleFlightLoop</a>(\n                         <a href=\"/sdk/XPLMFlightLoopID/\">XPLMFlightLoopID</a>     inFlightLoopID,\n                         float                inInterval,\n                         int                  inRelativeToNow);\n</code></pre><p>This routine schedules a flight loop callback for future execution. If inInterval is negative, it is run in a certain number of frames based on the absolute value of the input. If the interval is positive, it is a duration in seconds.</p><p>If inRelativeToNow is true, times are interpreted relative to the time this routine is called; otherwise they are relative to the last call time or the time the flight loop was registered (if never called).</p></div></div></article>",
      "code_examples": [
        {
          "char_count": 189,
          "code": "XPLM_API voidXPLMScheduleFlightLoop(XPLMFlightLoopIDinFlightLoopID,\n                         float                inInterval,\n                         int                  inRelativeToNow);",
          "context": "XPLMScheduleFlightLoop",
          "id": "example_0",
          "language": "c",
          "line_count": 3,
          "type": "snippet"
        }
      ],
      "cross_references": [],
      "markdown": "### [XPLMScheduleFlightLoop](/sdk/XPLMScheduleFlightLoop/)\n\n```cpp\nXPLM_API void       XPLMScheduleFlightLoop(\n                         XPLMFlightLoopID     inFlightLoopID,\n                         float                inInterval,\n                         int                  inRelativeToNow);\n\n```\n\nThis routine schedules a flight loop callback for future execution. If\ninInterval is negative, it is run in a certain number of frames based on the\nabsolute value of the input. If the interval is positive, it is a duration in\nseconds.\n\nIf inRelativeToNow is true, times are interpreted relative to the time this\nroutine is called; otherwise they are relative to the last call time or the time\nthe flight loop was registered (if never called).",
      "own_functions": [
        "XPLMScheduleFlightLoop",
        "voidXPLMScheduleFlightLoop"
      ],
      "processing_timestamp": "2025-06-25T20:39:24.364893+00:00",
      "title": "XPLMScheduleFlightLoop | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMScheduleFlightLoop/"
    },
    "https://developer.x-plane.com/sdk/XPLMSendMessageToPlugin/": {
      "api_signatures": [
        {
          "description": "This function sends a message to another plug-in or X-Plane. PassXPLM_NO_PLUGIN_IDto broadcast to all plug-ins. Only enabled plug-ins with a message receive function receive the message.",
          "name": "XPLMSendMessageToPlugin",
          "parameters": [
            {
              "full_declaration": "int                  inMessage",
              "name": "inMessage",
              "type": "int"
            },
            {
              "full_declaration": "void *               inParam",
              "name": "inParam",
              "type": "void *"
            }
          ],
          "signature": "XPLM_API voidXPLMSendMessageToPlugin(XPLMPluginIDinPlugin,\n                         int                  inMessage,\n                         void *               inParam);"
        },
        {
          "name": "voidXPLMSendMessageToPlugin",
          "signature": "XPLM_API voidXPLMSendMessageToPlugin(XPLMPluginIDinPlugin,\n                         int                  inMessage,\n                         void *               inParam);",
          "source": "code_block_extraction",
          "type": "function"
        }
      ],
      "category": {
        "category": "XPLM_Plugin",
        "module": "Xplm Plugin",
        "url": "https://developer.x-plane.com/sdk/XPLMSendMessageToPlugin/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPLMSendMessageToPlugin\"><a href=\"/sdk/XPLMSendMessageToPlugin/\">XPLMSendMessageToPlugin</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API void       <a href=\"/sdk/XPLMSendMessageToPlugin/\">XPLMSendMessageToPlugin</a>(\n                         <a href=\"/sdk/XPLMPluginID/\">XPLMPluginID</a>         inPlugin,\n                         int                  inMessage,\n                         void *               inParam);\n</code></pre><p>This function sends a message to another plug-in or X-Plane. Pass<a href=\"/sdk/XPLM_NO_PLUGIN_ID/\">XPLM_NO_PLUGIN_ID</a>to broadcast to all plug-ins. Only enabled plug-ins with a message receive function receive the message.</p></div></div></article>",
      "code_examples": [
        {
          "char_count": 171,
          "code": "XPLM_API voidXPLMSendMessageToPlugin(XPLMPluginIDinPlugin,\n                         int                  inMessage,\n                         void *               inParam);",
          "context": "XPLMSendMessageToPlugin",
          "id": "example_0",
          "language": "c",
          "line_count": 3,
          "type": "snippet"
        }
      ],
      "cross_references": [
        "XPLMPlugin"
      ],
      "markdown": "### [XPLMSendMessageToPlugin](/sdk/XPLMSendMessageToPlugin/)\n\n```cpp\nXPLM_API void       XPLMSendMessageToPlugin(\n                         XPLMPluginID         inPlugin,\n                         int                  inMessage,\n                         void *               inParam);\n\n```\n\nThis function sends a message to another plug-in or X-Plane.\nPass[XPLM_NO_PLUGIN_ID](/sdk/XPLM_NO_PLUGIN_ID/)to broadcast to all plug-ins.\nOnly enabled plug-ins with a message receive function receive the message.",
      "own_functions": [
        "XPLMSendMessageToPlugin",
        "voidXPLMSendMessageToPlugin"
      ],
      "processing_timestamp": "2025-06-25T20:39:24.258991+00:00",
      "title": "XPLMSendMessageToPlugin | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMSendMessageToPlugin/"
    },
    "https://developer.x-plane.com/sdk/XPLMSetActiveAircraftCount/": {
      "api_signatures": [
        {
          "description": "This routine sets the number of active planes. If you pass in a number higher than the total number of planes availables, only the total number of planes available is actually used.",
          "name": "XPLMSetActiveAircraftCount",
          "parameters": [
            {
              "full_declaration": "int                  inCount",
              "name": "inCount",
              "type": "int"
            }
          ],
          "signature": "XPLM_API voidXPLMSetActiveAircraftCount(\n                         int                  inCount);"
        },
        {
          "name": "voidXPLMSetActiveAircraftCount",
          "signature": "XPLM_API voidXPLMSetActiveAircraftCount(\n                         int                  inCount);",
          "source": "code_block_extraction",
          "type": "function"
        }
      ],
      "category": {
        "category": "XPLM_Planes",
        "module": "Xplm Planes",
        "url": "https://developer.x-plane.com/sdk/XPLMSetActiveAircraftCount/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPLMSetActiveAircraftCount\"><a href=\"/sdk/XPLMSetActiveAircraftCount/\">XPLMSetActiveAircraftCount</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API void       <a href=\"/sdk/XPLMSetActiveAircraftCount/\">XPLMSetActiveAircraftCount</a>(\n                         int                  inCount);\n</code></pre><p>This routine sets the number of active planes. If you pass in a number higher than the total number of planes availables, only the total number of planes available is actually used.</p></div></div></article>",
      "code_examples": [
        {
          "char_count": 96,
          "code": "XPLM_API voidXPLMSetActiveAircraftCount(\n                         int                  inCount);",
          "context": "XPLMSetActiveAircraftCount",
          "id": "example_0",
          "language": "c",
          "line_count": 2,
          "type": "snippet"
        }
      ],
      "cross_references": [],
      "markdown": "### [XPLMSetActiveAircraftCount](/sdk/XPLMSetActiveAircraftCount/)\n\n```cpp\nXPLM_API void       XPLMSetActiveAircraftCount(\n                         int                  inCount);\n\n```\n\nThis routine sets the number of active planes. If you pass in a number higher\nthan the total number of planes availables, only the total number of planes\navailable is actually used.",
      "own_functions": [
        "XPLMSetActiveAircraftCount",
        "voidXPLMSetActiveAircraftCount"
      ],
      "processing_timestamp": "2025-06-25T20:39:24.163420+00:00",
      "title": "XPLMSetActiveAircraftCount | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMSetActiveAircraftCount/"
    },
    "https://developer.x-plane.com/sdk/XPLMSetAircraftModel/": {
      "api_signatures": [
        {
          "description": "This routine loads an aircraft model. It may only be called if you have exclusive access to the airplane APIs. Pass in the path of the model with the .acf extension. The index is zero based, but you may not pass in 0 (useXPLMSetUsersAircraftto load the user’s aircracft).",
          "name": "XPLMSetAircraftModel",
          "parameters": [
            {
              "full_declaration": "int                  inIndex",
              "name": "inIndex",
              "type": "int"
            },
            {
              "full_declaration": "const char *         inAircraftPath",
              "name": "inAircraftPath",
              "type": "const char *"
            }
          ],
          "signature": "XPLM_API voidXPLMSetAircraftModel(\n                         int                  inIndex,\n                         const char *         inAircraftPath);"
        },
        {
          "name": "voidXPLMSetAircraftModel",
          "signature": "XPLM_API voidXPLMSetAircraftModel(\n                         int                  inIndex,\n                         const char *         inAircraftPath);",
          "source": "code_block_extraction",
          "type": "function"
        }
      ],
      "category": {
        "category": "XPLM_Instance",
        "module": "Xplm Instance",
        "url": "https://developer.x-plane.com/sdk/XPLMSetAircraftModel/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPLMSetAircraftModel\"><a href=\"/sdk/XPLMSetAircraftModel/\">XPLMSetAircraftModel</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API void       <a href=\"/sdk/XPLMSetAircraftModel/\">XPLMSetAircraftModel</a>(\n                         int                  inIndex,\n                         const char *         inAircraftPath);\n</code></pre><p>This routine loads an aircraft model. It may only be called if you have exclusive access to the airplane APIs. Pass in the path of the model with the .acf extension. The index is zero based, but you may not pass in 0 (use<a href=\"/sdk/XPLMSetUsersAircraft/\">XPLMSetUsersAircraft</a>to load the user’s aircracft).</p></div></div></article>",
      "code_examples": [
        {
          "char_count": 152,
          "code": "XPLM_API voidXPLMSetAircraftModel(\n                         int                  inIndex,\n                         const char *         inAircraftPath);",
          "context": "XPLMSetAircraftModel",
          "id": "example_0",
          "language": "c",
          "line_count": 3,
          "type": "snippet"
        }
      ],
      "cross_references": [
        "XPLMSetUsersAircraft"
      ],
      "markdown": "### [XPLMSetAircraftModel](/sdk/XPLMSetAircraftModel/)\n\n```cpp\nXPLM_API void       XPLMSetAircraftModel(\n                         int                  inIndex,\n                         const char *         inAircraftPath);\n\n```\n\nThis routine loads an aircraft model. It may only be called if you have\nexclusive access to the airplane APIs. Pass in the path of the model with the\n.acf extension. The index is zero based, but you may not pass in 0\n(use[XPLMSetUsersAircraft](/sdk/XPLMSetUsersAircraft/)to load the user’s\naircracft).",
      "own_functions": [
        "XPLMSetAircraftModel",
        "voidXPLMSetAircraftModel"
      ],
      "processing_timestamp": "2025-06-25T20:39:23.755754+00:00",
      "title": "XPLMSetAircraftModel | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMSetAircraftModel/"
    },
    "https://developer.x-plane.com/sdk/XPLMSetAudioCone/": {
      "api_signatures": [
        {
          "description": "Set a directional cone for an active FMOD channel. The orientation vector is in local coordinates. This will set the sound to 3D if it is not already.",
          "name": "XPLMSetAudioCone",
          "parameters": [
            {
              "full_declaration": "FMOD_CHANNEL*        fmod_channel",
              "name": "fmod_channel",
              "type": "FMOD_CHANNEL*"
            },
            {
              "full_declaration": "float                inside_angle",
              "name": "inside_angle",
              "type": "float"
            },
            {
              "full_declaration": "float                outside_angle",
              "name": "outside_angle",
              "type": "float"
            },
            {
              "full_declaration": "float                outside_volume",
              "name": "outside_volume",
              "type": "float"
            },
            {
              "full_declaration": "FMOD_VECTOR*         orientation",
              "name": "orientation",
              "type": "FMOD_VECTOR*"
            }
          ],
          "signature": "XPLM_API FMOD_RESULTXPLMSetAudioCone(\n                         FMOD_CHANNEL*        fmod_channel,\n                         float                inside_angle,\n                         float                outside_angle,\n                         float                outside_volume,\n                         FMOD_VECTOR*         orientation);"
        },
        {
          "name": "FMOD_RESULTXPLMSetAudioCone",
          "signature": "XPLM_API FMOD_RESULTXPLMSetAudioCone(\n                         FMOD_CHANNEL*        fmod_channel,\n                         float                inside_angle,\n                         float                outside_angle,\n                         float                outside_volume,\n                         FMOD_VECTOR*         orientation);",
          "source": "code_block_extraction",
          "type": "function"
        }
      ],
      "category": {
        "category": "XPLM_Sound",
        "module": "Xplm Sound",
        "url": "https://developer.x-plane.com/sdk/XPLMSetAudioCone/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPLMSetAudioCone\"><a href=\"/sdk/XPLMSetAudioCone/\">XPLMSetAudioCone</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API FMOD_RESULT <a href=\"/sdk/XPLMSetAudioCone/\">XPLMSetAudioCone</a>(\n                         FMOD_CHANNEL*        fmod_channel,\n                         float                inside_angle,\n                         float                outside_angle,\n                         float                outside_volume,\n                         FMOD_VECTOR*         orientation);\n</code></pre><p>Set a directional cone for an active FMOD channel. The orientation vector is in local coordinates. This will set the sound to 3D if it is not already.</p></div></div></article>",
      "code_examples": [
        {
          "char_count": 340,
          "code": "XPLM_API FMOD_RESULTXPLMSetAudioCone(\n                         FMOD_CHANNEL*        fmod_channel,\n                         float                inside_angle,\n                         float                outside_angle,\n                         float                outside_volume,\n                         FMOD_VECTOR*         orientation);",
          "context": "XPLMSetAudioCone",
          "id": "example_0",
          "language": "c",
          "line_count": 6,
          "type": "snippet"
        }
      ],
      "cross_references": [],
      "markdown": "### [XPLMSetAudioCone](/sdk/XPLMSetAudioCone/)\n\n```cpp\nXPLM_API FMOD_RESULT XPLMSetAudioCone(\n                         FMOD_CHANNEL*        fmod_channel,\n                         float                inside_angle,\n                         float                outside_angle,\n                         float                outside_volume,\n                         FMOD_VECTOR*         orientation);\n\n```\n\nSet a directional cone for an active FMOD channel. The orientation vector is in\nlocal coordinates. This will set the sound to 3D if it is not already.",
      "own_functions": [
        "XPLMSetAudioCone",
        "FMOD_RESULTXPLMSetAudioCone"
      ],
      "processing_timestamp": "2025-06-25T20:39:24.442933+00:00",
      "title": "XPLMSetAudioCone | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMSetAudioCone/"
    },
    "https://developer.x-plane.com/sdk/XPLMSetAudioFadeDistance/": {
      "api_signatures": [
        {
          "description": "Set the minimum and maximum fade distances for a given sound. This is highly unlikely to be 0 - please see https://documentation.help/FMOD-Studio-API/FMOD_Sound_Set3DMinMaxDistance.html for full details. This will set the sound to 3D if it is not already. You can set a 3D sound back to 2D by passing negative values for both min amd max.",
          "name": "XPLMSetAudioFadeDistance",
          "parameters": [
            {
              "full_declaration": "FMOD_CHANNEL*        fmod_channel",
              "name": "fmod_channel",
              "type": "FMOD_CHANNEL*"
            },
            {
              "full_declaration": "float                min_fade_distance",
              "name": "min_fade_distance",
              "type": "float"
            },
            {
              "full_declaration": "float                max_fade_distance",
              "name": "max_fade_distance",
              "type": "float"
            }
          ],
          "signature": "XPLM_API FMOD_RESULTXPLMSetAudioFadeDistance(\n                         FMOD_CHANNEL*        fmod_channel,\n                         float                min_fade_distance,\n                         float                max_fade_distance);"
        },
        {
          "name": "FMOD_RESULTXPLMSetAudioFadeDistance",
          "signature": "XPLM_API FMOD_RESULTXPLMSetAudioFadeDistance(\n                         FMOD_CHANNEL*        fmod_channel,\n                         float                min_fade_distance,\n                         float                max_fade_distance);",
          "source": "code_block_extraction",
          "type": "function"
        }
      ],
      "category": {
        "category": "XPLM_Sound",
        "module": "Xplm Sound",
        "url": "https://developer.x-plane.com/sdk/XPLMSetAudioFadeDistance/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPLMSetAudioFadeDistance\"><a href=\"/sdk/XPLMSetAudioFadeDistance/\">XPLMSetAudioFadeDistance</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API FMOD_RESULT <a href=\"/sdk/XPLMSetAudioFadeDistance/\">XPLMSetAudioFadeDistance</a>(\n                         FMOD_CHANNEL*        fmod_channel,\n                         float                min_fade_distance,\n                         float                max_fade_distance);\n</code></pre><p>Set the minimum and maximum fade distances for a given sound. This is highly unlikely to be 0 - please see https://documentation.help/FMOD-Studio-API/FMOD_Sound_Set3DMinMaxDistance.html for full details. This will set the sound to 3D if it is not already. You can set a 3D sound back to 2D by passing negative values for both min amd max.</p></div></div></article>",
      "code_examples": [
        {
          "char_count": 236,
          "code": "XPLM_API FMOD_RESULTXPLMSetAudioFadeDistance(\n                         FMOD_CHANNEL*        fmod_channel,\n                         float                min_fade_distance,\n                         float                max_fade_distance);",
          "context": "XPLMSetAudioFadeDistance",
          "id": "example_0",
          "language": "c",
          "line_count": 4,
          "type": "snippet"
        }
      ],
      "cross_references": [],
      "markdown": "### [XPLMSetAudioFadeDistance](/sdk/XPLMSetAudioFadeDistance/)\n\n```cpp\nXPLM_API FMOD_RESULT XPLMSetAudioFadeDistance(\n                         FMOD_CHANNEL*        fmod_channel,\n                         float                min_fade_distance,\n                         float                max_fade_distance);\n\n```\n\nSet the minimum and maximum fade distances for a given sound. This is highly\nunlikely to be 0 - please see\nhttps://documentation.help/FMOD-Studio-API/FMOD_Sound_Set3DMinMaxDistance.html\nfor full details. This will set the sound to 3D if it is not already. You can\nset a 3D sound back to 2D by passing negative values for both min amd max.",
      "own_functions": [
        "XPLMSetAudioFadeDistance",
        "FMOD_RESULTXPLMSetAudioFadeDistance"
      ],
      "processing_timestamp": "2025-06-25T20:39:24.445933+00:00",
      "title": "XPLMSetAudioFadeDistance | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMSetAudioFadeDistance/"
    },
    "https://developer.x-plane.com/sdk/XPLMSetAudioPitch/": {
      "api_signatures": [
        {
          "description": "Change the current pitch of an active FMOD channel.",
          "name": "XPLMSetAudioPitch",
          "parameters": [
            {
              "full_declaration": "FMOD_CHANNEL*        fmod_channel",
              "name": "fmod_channel",
              "type": "FMOD_CHANNEL*"
            },
            {
              "full_declaration": "float                audio_pitch_hz",
              "name": "audio_pitch_hz",
              "type": "float"
            }
          ],
          "signature": "XPLM_API FMOD_RESULTXPLMSetAudioPitch(\n                         FMOD_CHANNEL*        fmod_channel,\n                         float                audio_pitch_hz);"
        },
        {
          "name": "FMOD_RESULTXPLMSetAudioPitch",
          "signature": "XPLM_API FMOD_RESULTXPLMSetAudioPitch(\n                         FMOD_CHANNEL*        fmod_channel,\n                         float                audio_pitch_hz);",
          "source": "code_block_extraction",
          "type": "function"
        }
      ],
      "category": {
        "category": "XPLM_Sound",
        "module": "Xplm Sound",
        "url": "https://developer.x-plane.com/sdk/XPLMSetAudioPitch/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPLMSetAudioPitch\"><a href=\"/sdk/XPLMSetAudioPitch/\">XPLMSetAudioPitch</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API FMOD_RESULT <a href=\"/sdk/XPLMSetAudioPitch/\">XPLMSetAudioPitch</a>(\n                         FMOD_CHANNEL*        fmod_channel,\n                         float                audio_pitch_hz);\n</code></pre><p>Change the current pitch of an active FMOD channel.</p></div></div></article>",
      "code_examples": [
        {
          "char_count": 161,
          "code": "XPLM_API FMOD_RESULTXPLMSetAudioPitch(\n                         FMOD_CHANNEL*        fmod_channel,\n                         float                audio_pitch_hz);",
          "context": "XPLMSetAudioPitch",
          "id": "example_0",
          "language": "c",
          "line_count": 3,
          "type": "snippet"
        }
      ],
      "cross_references": [],
      "markdown": "### [XPLMSetAudioPitch](/sdk/XPLMSetAudioPitch/)\n\n```cpp\nXPLM_API FMOD_RESULT XPLMSetAudioPitch(\n                         FMOD_CHANNEL*        fmod_channel,\n                         float                audio_pitch_hz);\n\n```\n\nChange the current pitch of an active FMOD channel.",
      "own_functions": [
        "XPLMSetAudioPitch",
        "FMOD_RESULTXPLMSetAudioPitch"
      ],
      "processing_timestamp": "2025-06-25T20:39:24.447932+00:00",
      "title": "XPLMSetAudioPitch | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMSetAudioPitch/"
    },
    "https://developer.x-plane.com/sdk/XPLMSetAudioPosition/": {
      "api_signatures": [
        {
          "description": "Move the given audio channel (i.e. a single sound) to a specific location in local co-ordinates. This will set the sound to 3D if it is not already.",
          "name": "XPLMSetAudioPosition",
          "parameters": [
            {
              "full_declaration": "FMOD_CHANNEL*        fmod_channel",
              "name": "fmod_channel",
              "type": "FMOD_CHANNEL*"
            },
            {
              "full_declaration": "FMOD_VECTOR*         position",
              "name": "position",
              "type": "FMOD_VECTOR*"
            },
            {
              "full_declaration": "FMOD_VECTOR*         velocity",
              "name": "velocity",
              "type": "FMOD_VECTOR*"
            }
          ],
          "signature": "XPLM_API FMOD_RESULTXPLMSetAudioPosition(\n                         FMOD_CHANNEL*        fmod_channel,\n                         FMOD_VECTOR*         position,\n                         FMOD_VECTOR*         velocity);"
        },
        {
          "name": "FMOD_RESULTXPLMSetAudioPosition",
          "signature": "XPLM_API FMOD_RESULTXPLMSetAudioPosition(\n                         FMOD_CHANNEL*        fmod_channel,\n                         FMOD_VECTOR*         position,\n                         FMOD_VECTOR*         velocity);",
          "source": "code_block_extraction",
          "type": "function"
        }
      ],
      "category": {
        "category": "XPLM_Sound",
        "module": "Xplm Sound",
        "url": "https://developer.x-plane.com/sdk/XPLMSetAudioPosition/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPLMSetAudioPosition\"><a href=\"/sdk/XPLMSetAudioPosition/\">XPLMSetAudioPosition</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API FMOD_RESULT <a href=\"/sdk/XPLMSetAudioPosition/\">XPLMSetAudioPosition</a>(\n                         FMOD_CHANNEL*        fmod_channel,\n                         FMOD_VECTOR*         position,\n                         FMOD_VECTOR*         velocity);\n</code></pre><p>Move the given audio channel (i.e. a single sound) to a specific location in local co-ordinates. This will set the sound to 3D if it is not already.</p></div></div></article>",
      "code_examples": [
        {
          "char_count": 214,
          "code": "XPLM_API FMOD_RESULTXPLMSetAudioPosition(\n                         FMOD_CHANNEL*        fmod_channel,\n                         FMOD_VECTOR*         position,\n                         FMOD_VECTOR*         velocity);",
          "context": "XPLMSetAudioPosition",
          "id": "example_0",
          "language": "c",
          "line_count": 4,
          "type": "snippet"
        }
      ],
      "cross_references": [],
      "markdown": "### [XPLMSetAudioPosition](/sdk/XPLMSetAudioPosition/)\n\n```cpp\nXPLM_API FMOD_RESULT XPLMSetAudioPosition(\n                         FMOD_CHANNEL*        fmod_channel,\n                         FMOD_VECTOR*         position,\n                         FMOD_VECTOR*         velocity);\n\n```\n\nMove the given audio channel (i.e. a single sound) to a specific location in\nlocal co-ordinates. This will set the sound to 3D if it is not already.",
      "own_functions": [
        "XPLMSetAudioPosition",
        "FMOD_RESULTXPLMSetAudioPosition"
      ],
      "processing_timestamp": "2025-06-25T20:39:24.449934+00:00",
      "title": "XPLMSetAudioPosition | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMSetAudioPosition/"
    },
    "https://developer.x-plane.com/sdk/XPLMSetAudioVolume/": {
      "api_signatures": [
        {
          "description": "Set the current volume of an active FMOD channel. This should be used to handle changes in the audio source volume, not for fading with distance. Values from 0 to 1 are normal, above 1 can be used to artificially amplify a sound.",
          "name": "XPLMSetAudioVolume",
          "parameters": [
            {
              "full_declaration": "FMOD_CHANNEL*        fmod_channel",
              "name": "fmod_channel",
              "type": "FMOD_CHANNEL*"
            },
            {
              "full_declaration": "float                source_volume",
              "name": "source_volume",
              "type": "float"
            }
          ],
          "signature": "XPLM_API FMOD_RESULTXPLMSetAudioVolume(\n                         FMOD_CHANNEL*        fmod_channel,\n                         float                source_volume);"
        },
        {
          "name": "FMOD_RESULTXPLMSetAudioVolume",
          "signature": "XPLM_API FMOD_RESULTXPLMSetAudioVolume(\n                         FMOD_CHANNEL*        fmod_channel,\n                         float                source_volume);",
          "source": "code_block_extraction",
          "type": "function"
        }
      ],
      "category": {
        "category": "XPLM_Sound",
        "module": "Xplm Sound",
        "url": "https://developer.x-plane.com/sdk/XPLMSetAudioVolume/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPLMSetAudioVolume\"><a href=\"/sdk/XPLMSetAudioVolume/\">XPLMSetAudioVolume</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API FMOD_RESULT <a href=\"/sdk/XPLMSetAudioVolume/\">XPLMSetAudioVolume</a>(\n                         FMOD_CHANNEL*        fmod_channel,\n                         float                source_volume);\n</code></pre><p>Set the current volume of an active FMOD channel. This should be used to handle changes in the audio source volume, not for fading with distance. Values from 0 to 1 are normal, above 1 can be used to artificially amplify a sound.</p></div></div></article>",
      "code_examples": [
        {
          "char_count": 161,
          "code": "XPLM_API FMOD_RESULTXPLMSetAudioVolume(\n                         FMOD_CHANNEL*        fmod_channel,\n                         float                source_volume);",
          "context": "XPLMSetAudioVolume",
          "id": "example_0",
          "language": "c",
          "line_count": 3,
          "type": "snippet"
        }
      ],
      "cross_references": [],
      "markdown": "### [XPLMSetAudioVolume](/sdk/XPLMSetAudioVolume/)\n\n```cpp\nXPLM_API FMOD_RESULT XPLMSetAudioVolume(\n                         FMOD_CHANNEL*        fmod_channel,\n                         float                source_volume);\n\n```\n\nSet the current volume of an active FMOD channel. This should be used to handle\nchanges in the audio source volume, not for fading with distance. Values from 0\nto 1 are normal, above 1 can be used to artificially amplify a sound.",
      "own_functions": [
        "XPLMSetAudioVolume",
        "FMOD_RESULTXPLMSetAudioVolume"
      ],
      "processing_timestamp": "2025-06-25T20:39:24.450933+00:00",
      "title": "XPLMSetAudioVolume | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMSetAudioVolume/"
    },
    "https://developer.x-plane.com/sdk/XPLMSetAvionicsBrightnessRheo/": {
      "api_signatures": [
        {
          "description": "Sets the brightness setting’s value, between 0 and 1, for the screen of the cockpit device with the given handle.",
          "name": "XPLMSetAvionicsBrightnessRheo",
          "parameters": [
            {
              "full_declaration": "float                brightness",
              "name": "brightness",
              "type": "float"
            }
          ],
          "signature": "XPLM_API voidXPLMSetAvionicsBrightnessRheo(XPLMAvionicsIDinHandle,\n                         float                brightness);"
        },
        {
          "name": "voidXPLMSetAvionicsBrightnessRheo",
          "signature": "XPLM_API voidXPLMSetAvionicsBrightnessRheo(XPLMAvionicsIDinHandle,\n                         float                brightness);",
          "source": "code_block_extraction",
          "type": "function"
        }
      ],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/XPLMSetAvionicsBrightnessRheo/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"function XPLM410\"><h3 class=\"sdk-api-function\" id=\"XPLMSetAvionicsBrightnessRheo\"><a href=\"/sdk/XPLMSetAvionicsBrightnessRheo/\">XPLMSetAvionicsBrightnessRheo</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API void       <a href=\"/sdk/XPLMSetAvionicsBrightnessRheo/\">XPLMSetAvionicsBrightnessRheo</a>(\n                         <a href=\"/sdk/XPLMAvionicsID/\">XPLMAvionicsID</a>       inHandle,\n                         float                brightness);\n</code></pre><p>Sets the brightness setting’s value, between 0 and 1, for the screen of the cockpit device with the given handle.</p><p>If the device is bound to the current aircraft, this is a shortcut to setting the brightness rheostat value using the<code>sim/cockpit2/switches/instrument_brightness_ratio[]</code>dataref; this sets the slot in the<code>instrument_brightness_ratio</code>array to which the device is bound.</p><p>If the device is not currently bound, the device keeps track of its own screen brightness rheostat, allowing you to control the brightness even though it isn’t connected to the<code>instrument_brightness_ratio</code>dataref.</p></div></div></article>",
      "code_examples": [
        {
          "char_count": 125,
          "code": "XPLM_API voidXPLMSetAvionicsBrightnessRheo(XPLMAvionicsIDinHandle,\n                         float                brightness);",
          "context": "XPLMSetAvionicsBrightnessRheo",
          "id": "example_0",
          "language": "c",
          "line_count": 2,
          "type": "snippet"
        }
      ],
      "cross_references": [],
      "markdown": "### [XPLMSetAvionicsBrightnessRheo](/sdk/XPLMSetAvionicsBrightnessRheo/)\n\n```cpp\nXPLM_API void       XPLMSetAvionicsBrightnessRheo(\n                         XPLMAvionicsID       inHandle,\n                         float                brightness);\n\n```\n\nSets the brightness setting’s value, between 0 and 1, for the screen of the\ncockpit device with the given handle.\n\nIf the device is bound to the current aircraft, this is a shortcut to setting\nthe brightness rheostat value using\nthe`sim/cockpit2/switches/instrument_brightness_ratio[]`dataref; this sets the\nslot in the`instrument_brightness_ratio`array to which the device is bound.\n\nIf the device is not currently bound, the device keeps track of its own screen\nbrightness rheostat, allowing you to control the brightness even though it isn’t\nconnected to the`instrument_brightness_ratio`dataref.",
      "own_functions": [
        "XPLMSetAvionicsBrightnessRheo",
        "voidXPLMSetAvionicsBrightnessRheo"
      ],
      "processing_timestamp": "2025-06-25T20:39:22.411960+00:00",
      "title": "XPLMSetAvionicsBrightnessRheo | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMSetAvionicsBrightnessRheo/"
    },
    "https://developer.x-plane.com/sdk/XPLMSetAvionicsGeometry/": {
      "api_signatures": [
        {
          "description": "Sets the size and position of a cockpit device’s popup window in the X-Plane coordinate system.",
          "name": "XPLMSetAvionicsGeometry",
          "parameters": [
            {
              "full_declaration": "int                  inLeft",
              "name": "inLeft",
              "type": "int"
            },
            {
              "full_declaration": "int                  inTop",
              "name": "inTop",
              "type": "int"
            },
            {
              "full_declaration": "int                  inRight",
              "name": "inRight",
              "type": "int"
            },
            {
              "full_declaration": "int                  inBottom",
              "name": "inBottom",
              "type": "int"
            }
          ],
          "signature": "XPLM_API voidXPLMSetAvionicsGeometry(XPLMAvionicsIDinHandle,\n                         int                  inLeft,\n                         int                  inTop,\n                         int                  inRight,\n                         int                  inBottom);"
        },
        {
          "name": "voidXPLMSetAvionicsGeometry",
          "signature": "XPLM_API voidXPLMSetAvionicsGeometry(XPLMAvionicsIDinHandle,\n                         int                  inLeft,\n                         int                  inTop,\n                         int                  inRight,\n                         int                  inBottom);",
          "source": "code_block_extraction",
          "type": "function"
        }
      ],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/XPLMSetAvionicsGeometry/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"function XPLM410\"><h3 class=\"sdk-api-function\" id=\"XPLMSetAvionicsGeometry\"><a href=\"/sdk/XPLMSetAvionicsGeometry/\">XPLMSetAvionicsGeometry</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API void       <a href=\"/sdk/XPLMSetAvionicsGeometry/\">XPLMSetAvionicsGeometry</a>(\n                         <a href=\"/sdk/XPLMAvionicsID/\">XPLMAvionicsID</a>       inHandle,\n                         int                  inLeft,\n                         int                  inTop,\n                         int                  inRight,\n                         int                  inBottom);\n</code></pre><p>Sets the size and position of a cockpit device’s popup window in the X-Plane coordinate system.</p></div></div></article>",
      "code_examples": [
        {
          "char_count": 279,
          "code": "XPLM_API voidXPLMSetAvionicsGeometry(XPLMAvionicsIDinHandle,\n                         int                  inLeft,\n                         int                  inTop,\n                         int                  inRight,\n                         int                  inBottom);",
          "context": "XPLMSetAvionicsGeometry",
          "id": "example_0",
          "language": "c",
          "line_count": 5,
          "type": "snippet"
        }
      ],
      "cross_references": [],
      "markdown": "### [XPLMSetAvionicsGeometry](/sdk/XPLMSetAvionicsGeometry/)\n\n```cpp\nXPLM_API void       XPLMSetAvionicsGeometry(\n                         XPLMAvionicsID       inHandle,\n                         int                  inLeft,\n                         int                  inTop,\n                         int                  inRight,\n                         int                  inBottom);\n\n```\n\nSets the size and position of a cockpit device’s popup window in the X-Plane\ncoordinate system.",
      "own_functions": [
        "XPLMSetAvionicsGeometry",
        "voidXPLMSetAvionicsGeometry"
      ],
      "processing_timestamp": "2025-06-25T20:39:22.407959+00:00",
      "title": "XPLMSetAvionicsGeometry | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMSetAvionicsGeometry/"
    },
    "https://developer.x-plane.com/sdk/XPLMSetAvionicsGeometryOS/": {
      "api_signatures": [
        {
          "description": "Sets the size and position of a cockpit device’s popped-out window.",
          "name": "XPLMSetAvionicsGeometryOS",
          "parameters": [
            {
              "full_declaration": "int                  inLeft",
              "name": "inLeft",
              "type": "int"
            },
            {
              "full_declaration": "int                  inTop",
              "name": "inTop",
              "type": "int"
            },
            {
              "full_declaration": "int                  inRight",
              "name": "inRight",
              "type": "int"
            },
            {
              "full_declaration": "int                  inBottom",
              "name": "inBottom",
              "type": "int"
            }
          ],
          "signature": "XPLM_API voidXPLMSetAvionicsGeometryOS(XPLMAvionicsIDinHandle,\n                         int                  inLeft,\n                         int                  inTop,\n                         int                  inRight,\n                         int                  inBottom);"
        },
        {
          "name": "voidXPLMSetAvionicsGeometryOS",
          "signature": "XPLM_API voidXPLMSetAvionicsGeometryOS(XPLMAvionicsIDinHandle,\n                         int                  inLeft,\n                         int                  inTop,\n                         int                  inRight,\n                         int                  inBottom);",
          "source": "code_block_extraction",
          "type": "function"
        }
      ],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/XPLMSetAvionicsGeometryOS/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"function XPLM410\"><h3 class=\"sdk-api-function\" id=\"XPLMSetAvionicsGeometryOS\"><a href=\"/sdk/XPLMSetAvionicsGeometryOS/\">XPLMSetAvionicsGeometryOS</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API void       <a href=\"/sdk/XPLMSetAvionicsGeometryOS/\">XPLMSetAvionicsGeometryOS</a>(\n                         <a href=\"/sdk/XPLMAvionicsID/\">XPLMAvionicsID</a>       inHandle,\n                         int                  inLeft,\n                         int                  inTop,\n                         int                  inRight,\n                         int                  inBottom);\n</code></pre><p>Sets the size and position of a cockpit device’s popped-out window.</p></div></div></article>",
      "code_examples": [
        {
          "char_count": 281,
          "code": "XPLM_API voidXPLMSetAvionicsGeometryOS(XPLMAvionicsIDinHandle,\n                         int                  inLeft,\n                         int                  inTop,\n                         int                  inRight,\n                         int                  inBottom);",
          "context": "XPLMSetAvionicsGeometryOS",
          "id": "example_0",
          "language": "c",
          "line_count": 5,
          "type": "snippet"
        }
      ],
      "cross_references": [
        "XPLMSetAvionicsGeometry"
      ],
      "markdown": "### [XPLMSetAvionicsGeometryOS](/sdk/XPLMSetAvionicsGeometryOS/)\n\n```cpp\nXPLM_API void       XPLMSetAvionicsGeometryOS(\n                         XPLMAvionicsID       inHandle,\n                         int                  inLeft,\n                         int                  inTop,\n                         int                  inRight,\n                         int                  inBottom);\n\n```\n\nSets the size and position of a cockpit device’s popped-out window.",
      "own_functions": [
        "XPLMSetAvionicsGeometryOS",
        "voidXPLMSetAvionicsGeometryOS"
      ],
      "processing_timestamp": "2025-06-25T20:39:22.405959+00:00",
      "title": "XPLMSetAvionicsGeometryOS | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMSetAvionicsGeometryOS/"
    },
    "https://developer.x-plane.com/sdk/XPLMSetAvionicsPopupVisible/": {
      "api_signatures": [
        {
          "description": "Shows or hides the popup window for a cockpit device.",
          "name": "XPLMSetAvionicsPopupVisible",
          "parameters": [
            {
              "full_declaration": "int                  inVisible",
              "name": "inVisible",
              "type": "int"
            }
          ],
          "signature": "XPLM_API voidXPLMSetAvionicsPopupVisible(XPLMAvionicsIDinHandle,\n                         int                  inVisible);"
        },
        {
          "name": "voidXPLMSetAvionicsPopupVisible",
          "signature": "XPLM_API voidXPLMSetAvionicsPopupVisible(XPLMAvionicsIDinHandle,\n                         int                  inVisible);",
          "source": "code_block_extraction",
          "type": "function"
        }
      ],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/XPLMSetAvionicsPopupVisible/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"function XPLM410\"><h3 class=\"sdk-api-function\" id=\"XPLMSetAvionicsPopupVisible\"><a href=\"/sdk/XPLMSetAvionicsPopupVisible/\">XPLMSetAvionicsPopupVisible</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API void       <a href=\"/sdk/XPLMSetAvionicsPopupVisible/\">XPLMSetAvionicsPopupVisible</a>(\n                         <a href=\"/sdk/XPLMAvionicsID/\">XPLMAvionicsID</a>       inHandle,\n                         int                  inVisible);\n</code></pre><p>Shows or hides the popup window for a cockpit device.</p></div></div></article>",
      "code_examples": [
        {
          "char_count": 122,
          "code": "XPLM_API voidXPLMSetAvionicsPopupVisible(XPLMAvionicsIDinHandle,\n                         int                  inVisible);",
          "context": "XPLMSetAvionicsPopupVisible",
          "id": "example_0",
          "language": "c",
          "line_count": 2,
          "type": "snippet"
        }
      ],
      "cross_references": [],
      "markdown": "### [XPLMSetAvionicsPopupVisible](/sdk/XPLMSetAvionicsPopupVisible/)\n\n```cpp\nXPLM_API void       XPLMSetAvionicsPopupVisible(\n                         XPLMAvionicsID       inHandle,\n                         int                  inVisible);\n\n```\n\nShows or hides the popup window for a cockpit device.",
      "own_functions": [
        "XPLMSetAvionicsPopupVisible",
        "voidXPLMSetAvionicsPopupVisible"
      ],
      "processing_timestamp": "2025-06-25T20:39:22.413959+00:00",
      "title": "XPLMSetAvionicsPopupVisible | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMSetAvionicsPopupVisible/"
    },
    "https://developer.x-plane.com/sdk/XPLMSetDatab/": {
      "api_signatures": [
        {
          "description": "Write part or all of a byte array dataref. The values passed by inValues are written into the dataref starting at inOffset. Up to inCount values are written; however if the values would write “off the end” of the dataref array, then fewer values are written.",
          "name": "XPLMSetDatab",
          "parameters": [
            {
              "full_declaration": "void *               inValue",
              "name": "inValue",
              "type": "void *"
            },
            {
              "full_declaration": "int                  inOffset",
              "name": "inOffset",
              "type": "int"
            },
            {
              "full_declaration": "int                  inLength",
              "name": "inLength",
              "type": "int"
            }
          ],
          "signature": "XPLM_API voidXPLMSetDatab(XPLMDataRefinDataRef,\n                         void *               inValue,\n                         int                  inOffset,\n                         int                  inLength);"
        },
        {
          "name": "voidXPLMSetDatab",
          "signature": "XPLM_API voidXPLMSetDatab(XPLMDataRefinDataRef,\n                         void *               inValue,\n                         int                  inOffset,\n                         int                  inLength);",
          "source": "code_block_extraction",
          "type": "function"
        }
      ],
      "category": {
        "category": "XPLM_DataAccess",
        "module": "Xplm Dataaccess",
        "url": "https://developer.x-plane.com/sdk/XPLMSetDatab/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPLMSetDatab\"><a href=\"/sdk/XPLMSetDatab/\">XPLMSetDatab</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API void       <a href=\"/sdk/XPLMSetDatab/\">XPLMSetDatab</a>(\n                         <a href=\"/sdk/XPLMDataRef/\">XPLMDataRef</a>          inDataRef,\n                         void *               inValue,\n                         int                  inOffset,\n                         int                  inLength);\n</code></pre><p>Write part or all of a byte array dataref. The values passed by inValues are written into the dataref starting at inOffset. Up to inCount values are written; however if the values would write “off the end” of the dataref array, then fewer values are written.</p><p>Note: the semantics of array datarefs are entirely implemented by the plugin (or X-Plane) that provides the dataref, not the SDK itself; the above description is how these datarefs are intended to work, but a rogue plugin may have different behavior.</p></div></div></article>",
      "code_examples": [
        {
          "char_count": 215,
          "code": "XPLM_API voidXPLMSetDatab(XPLMDataRefinDataRef,\n                         void *               inValue,\n                         int                  inOffset,\n                         int                  inLength);",
          "context": "XPLMSetDatab",
          "id": "example_0",
          "language": "c",
          "line_count": 4,
          "type": "snippet"
        }
      ],
      "cross_references": [],
      "markdown": "### [XPLMSetDatab](/sdk/XPLMSetDatab/)\n\n```cpp\nXPLM_API void       XPLMSetDatab(\n                         XPLMDataRef          inDataRef,\n                         void *               inValue,\n                         int                  inOffset,\n                         int                  inLength);\n\n```\n\nWrite part or all of a byte array dataref. The values passed by inValues are\nwritten into the dataref starting at inOffset. Up to inCount values are written;\nhowever if the values would write “off the end” of the dataref array, then fewer\nvalues are written.\n\nNote: the semantics of array datarefs are entirely implemented by the plugin (or\nX-Plane) that provides the dataref, not the SDK itself; the above description is\nhow these datarefs are intended to work, but a rogue plugin may have different\nbehavior.",
      "own_functions": [
        "XPLMSetDatab",
        "voidXPLMSetDatab"
      ],
      "processing_timestamp": "2025-06-25T20:39:23.390834+00:00",
      "title": "XPLMSetDatab | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMSetDatab/"
    },
    "https://developer.x-plane.com/sdk/XPLMSetDatab_f/": {
      "api_signatures": [],
      "category": {
        "category": "XPLM_DataAccess",
        "module": "Xplm Dataaccess",
        "url": "https://developer.x-plane.com/sdk/XPLMSetDatab_f/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"callback\"><h3 class=\"sdk-api-callback\" id=\"XPLMSetDatab_f\"><a href=\"/sdk/XPLMSetDatab_f/\">XPLMSetDatab_f</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>typedef void (* <a href=\"/sdk/XPLMSetDatab_f/\">XPLMSetDatab_f</a>)(\n                         void *               inRefcon,\n                         void *               inValue,\n                         int                  inOffset,\n                         int                  inLength);\n</code></pre></div></div></article>",
      "code_examples": [
        {
          "char_count": 255,
          "code": "typedef void (*XPLMSetDatab_f)(\n                         void *               inRefcon,\n                         void *               inValue,\n                         int                  inOffset,\n                         int                  inLength);",
          "context": "XPLMSetDatab_f",
          "id": "example_0",
          "language": "c",
          "line_count": 5,
          "type": "snippet"
        }
      ],
      "cross_references": [
        "XPLMSetDatab"
      ],
      "markdown": "### [XPLMSetDatab_f](/sdk/XPLMSetDatab_f/)\n\n```cpp\ntypedef void (* XPLMSetDatab_f)(\n                         void *               inRefcon,\n                         void *               inValue,\n                         int                  inOffset,\n                         int                  inLength);\n\n```",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:23.398689+00:00",
      "title": "XPLMSetDatab_f | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMSetDatab_f/"
    },
    "https://developer.x-plane.com/sdk/XPLMSetDatad/": {
      "api_signatures": [
        {
          "description": "Write a new value to a double precision floating point dataref. This routine is a no-op if the plugin publishing the dataref is disabled, the dataref is NULL, or the dataref is not writable.",
          "name": "XPLMSetDatad",
          "parameters": [
            {
              "full_declaration": "double               inValue",
              "name": "inValue",
              "type": "double"
            }
          ],
          "signature": "XPLM_API voidXPLMSetDatad(XPLMDataRefinDataRef,\n                         double               inValue);"
        },
        {
          "name": "voidXPLMSetDatad",
          "signature": "XPLM_API voidXPLMSetDatad(XPLMDataRefinDataRef,\n                         double               inValue);",
          "source": "code_block_extraction",
          "type": "function"
        }
      ],
      "category": {
        "category": "XPLM_DataAccess",
        "module": "Xplm Dataaccess",
        "url": "https://developer.x-plane.com/sdk/XPLMSetDatad/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPLMSetDatad\"><a href=\"/sdk/XPLMSetDatad/\">XPLMSetDatad</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API void       <a href=\"/sdk/XPLMSetDatad/\">XPLMSetDatad</a>(\n                         <a href=\"/sdk/XPLMDataRef/\">XPLMDataRef</a>          inDataRef,\n                         double               inValue);\n</code></pre><p>Write a new value to a double precision floating point dataref. This routine is a no-op if the plugin publishing the dataref is disabled, the dataref is NULL, or the dataref is not writable.</p></div></div></article>",
      "code_examples": [
        {
          "char_count": 103,
          "code": "XPLM_API voidXPLMSetDatad(XPLMDataRefinDataRef,\n                         double               inValue);",
          "context": "XPLMSetDatad",
          "id": "example_0",
          "language": "c",
          "line_count": 2,
          "type": "snippet"
        }
      ],
      "cross_references": [],
      "markdown": "### [XPLMSetDatad](/sdk/XPLMSetDatad/)\n\n```cpp\nXPLM_API void       XPLMSetDatad(\n                         XPLMDataRef          inDataRef,\n                         double               inValue);\n\n```\n\nWrite a new value to a double precision floating point dataref. This routine is\na no-op if the plugin publishing the dataref is disabled, the dataref is NULL,\nor the dataref is not writable.",
      "own_functions": [
        "XPLMSetDatad",
        "voidXPLMSetDatad"
      ],
      "processing_timestamp": "2025-06-25T20:39:23.396687+00:00",
      "title": "XPLMSetDatad | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMSetDatad/"
    },
    "https://developer.x-plane.com/sdk/XPLMSetDatad_f/": {
      "api_signatures": [],
      "category": {
        "category": "XPLM_DataAccess",
        "module": "Xplm Dataaccess",
        "url": "https://developer.x-plane.com/sdk/XPLMSetDatad_f/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"callback\"><h3 class=\"sdk-api-callback\" id=\"XPLMSetDatad_f\"><a href=\"/sdk/XPLMSetDatad_f/\">XPLMSetDatad_f</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>typedef void (* <a href=\"/sdk/XPLMSetDatad_f/\">XPLMSetDatad_f</a>)(\n                         void *               inRefcon,\n                         double               inValue);\n</code></pre></div></div></article>",
      "code_examples": [
        {
          "char_count": 143,
          "code": "typedef void (*XPLMSetDatad_f)(\n                         void *               inRefcon,\n                         double               inValue);",
          "context": "XPLMSetDatad_f",
          "id": "example_0",
          "language": "c",
          "line_count": 3,
          "type": "snippet"
        }
      ],
      "cross_references": [
        "XPLMSetDatad"
      ],
      "markdown": "### [XPLMSetDatad_f](/sdk/XPLMSetDatad_f/)\n\n```cpp\ntypedef void (* XPLMSetDatad_f)(\n                         void *               inRefcon,\n                         double               inValue);\n\n```",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:23.393683+00:00",
      "title": "XPLMSetDatad_f | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMSetDatad_f/"
    },
    "https://developer.x-plane.com/sdk/XPLMSetDataf/": {
      "api_signatures": [
        {
          "description": "Write a new value to a single precision floating point dataref. This routine is a no-op if the plugin publishing the dataref is disabled, the dataref is NULL, or the dataref is not writable.",
          "name": "XPLMSetDataf",
          "parameters": [
            {
              "full_declaration": "float                inValue",
              "name": "inValue",
              "type": "float"
            }
          ],
          "signature": "XPLM_API voidXPLMSetDataf(XPLMDataRefinDataRef,\n                         float                inValue);"
        },
        {
          "name": "voidXPLMSetDataf",
          "signature": "XPLM_API voidXPLMSetDataf(XPLMDataRefinDataRef,\n                         float                inValue);",
          "source": "code_block_extraction",
          "type": "function"
        }
      ],
      "category": {
        "category": "XPLM_DataAccess",
        "module": "Xplm Dataaccess",
        "url": "https://developer.x-plane.com/sdk/XPLMSetDataf/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPLMSetDataf\"><a href=\"/sdk/XPLMSetDataf/\">XPLMSetDataf</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API void       <a href=\"/sdk/XPLMSetDataf/\">XPLMSetDataf</a>(\n                         <a href=\"/sdk/XPLMDataRef/\">XPLMDataRef</a>          inDataRef,\n                         float                inValue);\n</code></pre><p>Write a new value to a single precision floating point dataref. This routine is a no-op if the plugin publishing the dataref is disabled, the dataref is NULL, or the dataref is not writable.</p></div></div></article>",
      "code_examples": [
        {
          "char_count": 103,
          "code": "XPLM_API voidXPLMSetDataf(XPLMDataRefinDataRef,\n                         float                inValue);",
          "context": "XPLMSetDataf",
          "id": "example_0",
          "language": "c",
          "line_count": 2,
          "type": "snippet"
        }
      ],
      "cross_references": [],
      "markdown": "### [XPLMSetDataf](/sdk/XPLMSetDataf/)\n\n```cpp\nXPLM_API void       XPLMSetDataf(\n                         XPLMDataRef          inDataRef,\n                         float                inValue);\n\n```\n\nWrite a new value to a single precision floating point dataref. This routine is\na no-op if the plugin publishing the dataref is disabled, the dataref is NULL,\nor the dataref is not writable.",
      "own_functions": [
        "XPLMSetDataf",
        "voidXPLMSetDataf"
      ],
      "processing_timestamp": "2025-06-25T20:39:23.400688+00:00",
      "title": "XPLMSetDataf | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMSetDataf/"
    },
    "https://developer.x-plane.com/sdk/XPLMSetDataf_f/": {
      "api_signatures": [],
      "category": {
        "category": "XPLM_DataAccess",
        "module": "Xplm Dataaccess",
        "url": "https://developer.x-plane.com/sdk/XPLMSetDataf_f/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"callback\"><h3 class=\"sdk-api-callback\" id=\"XPLMSetDataf_f\"><a href=\"/sdk/XPLMSetDataf_f/\">XPLMSetDataf_f</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>typedef void (* <a href=\"/sdk/XPLMSetDataf_f/\">XPLMSetDataf_f</a>)(\n                         void *               inRefcon,\n                         float                inValue);\n</code></pre></div></div></article>",
      "code_examples": [
        {
          "char_count": 143,
          "code": "typedef void (*XPLMSetDataf_f)(\n                         void *               inRefcon,\n                         float                inValue);",
          "context": "XPLMSetDataf_f",
          "id": "example_0",
          "language": "c",
          "line_count": 3,
          "type": "snippet"
        }
      ],
      "cross_references": [
        "XPLMSetDataf"
      ],
      "markdown": "### [XPLMSetDataf_f](/sdk/XPLMSetDataf_f/)\n\n```cpp\ntypedef void (* XPLMSetDataf_f)(\n                         void *               inRefcon,\n                         float                inValue);\n\n```",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:23.401687+00:00",
      "title": "XPLMSetDataf_f | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMSetDataf_f/"
    },
    "https://developer.x-plane.com/sdk/XPLMSetDatai/": {
      "api_signatures": [
        {
          "description": "Write a new value to an integer dataref. This routine is a no-op if the plugin publishing the dataref is disabled, the dataref is NULL, or the dataref is not writable.",
          "name": "XPLMSetDatai",
          "parameters": [
            {
              "full_declaration": "int                  inValue",
              "name": "inValue",
              "type": "int"
            }
          ],
          "signature": "XPLM_API voidXPLMSetDatai(XPLMDataRefinDataRef,\n                         int                  inValue);"
        },
        {
          "name": "voidXPLMSetDatai",
          "signature": "XPLM_API voidXPLMSetDatai(XPLMDataRefinDataRef,\n                         int                  inValue);",
          "source": "code_block_extraction",
          "type": "function"
        }
      ],
      "category": {
        "category": "XPLM_DataAccess",
        "module": "Xplm Dataaccess",
        "url": "https://developer.x-plane.com/sdk/XPLMSetDatai/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPLMSetDatai\"><a href=\"/sdk/XPLMSetDatai/\">XPLMSetDatai</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API void       <a href=\"/sdk/XPLMSetDatai/\">XPLMSetDatai</a>(\n                         <a href=\"/sdk/XPLMDataRef/\">XPLMDataRef</a>          inDataRef,\n                         int                  inValue);\n</code></pre><p>Write a new value to an integer dataref. This routine is a no-op if the plugin publishing the dataref is disabled, the dataref is NULL, or the dataref is not writable.</p></div></div></article>",
      "code_examples": [
        {
          "char_count": 103,
          "code": "XPLM_API voidXPLMSetDatai(XPLMDataRefinDataRef,\n                         int                  inValue);",
          "context": "XPLMSetDatai",
          "id": "example_0",
          "language": "cpp",
          "line_count": 2,
          "type": "snippet"
        }
      ],
      "cross_references": [],
      "markdown": "### [XPLMSetDatai](/sdk/XPLMSetDatai/)\n\n```cpp\nXPLM_API void       XPLMSetDatai(\n                         XPLMDataRef          inDataRef,\n                         int                  inValue);\n\n```\n\nWrite a new value to an integer dataref. This routine is a no-op if the plugin\npublishing the dataref is disabled, the dataref is NULL, or the dataref is not\nwritable.",
      "own_functions": [
        "XPLMSetDatai",
        "voidXPLMSetDatai"
      ],
      "processing_timestamp": "2025-06-25T20:39:23.405688+00:00",
      "title": "XPLMSetDatai | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMSetDatai/"
    },
    "https://developer.x-plane.com/sdk/XPLMSetDatai_f/": {
      "api_signatures": [],
      "category": {
        "category": "XPLM_DataAccess",
        "module": "Xplm Dataaccess",
        "url": "https://developer.x-plane.com/sdk/XPLMSetDatai_f/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"callback\"><h3 class=\"sdk-api-callback\" id=\"XPLMSetDatai_f\"><a href=\"/sdk/XPLMSetDatai_f/\">XPLMSetDatai_f</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>typedef void (* <a href=\"/sdk/XPLMSetDatai_f/\">XPLMSetDatai_f</a>)(\n                         void *               inRefcon,\n                         int                  inValue);\n</code></pre></div></div></article>",
      "code_examples": [
        {
          "char_count": 143,
          "code": "typedef void (*XPLMSetDatai_f)(\n                         void *               inRefcon,\n                         int                  inValue);",
          "context": "XPLMSetDatai_f",
          "id": "example_0",
          "language": "c",
          "line_count": 3,
          "type": "snippet"
        }
      ],
      "cross_references": [
        "XPLMSetDatai"
      ],
      "markdown": "### [XPLMSetDatai_f](/sdk/XPLMSetDatai_f/)\n\n```cpp\ntypedef void (* XPLMSetDatai_f)(\n                         void *               inRefcon,\n                         int                  inValue);\n\n```",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:23.403689+00:00",
      "title": "XPLMSetDatai_f | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMSetDatai_f/"
    },
    "https://developer.x-plane.com/sdk/XPLMSetDatavf/": {
      "api_signatures": [
        {
          "description": "Write part or all of a single precision floating point array dataref. The values passed by inValues are written into the dataref starting at inOffset. Up to inCount values are written; however if the values would write past the end of the dataref array, then fewer values are written.",
          "name": "XPLMSetDatavf",
          "parameters": [
            {
              "full_declaration": "float *              inValues",
              "name": "inValues",
              "type": "float *"
            },
            {
              "full_declaration": "int                  inoffset",
              "name": "inoffset",
              "type": "int"
            },
            {
              "full_declaration": "int                  inCount",
              "name": "inCount",
              "type": "int"
            }
          ],
          "signature": "XPLM_API voidXPLMSetDatavf(XPLMDataRefinDataRef,\n                         float *              inValues,\n                         int                  inoffset,\n                         int                  inCount);"
        },
        {
          "name": "voidXPLMSetDatavf",
          "signature": "XPLM_API voidXPLMSetDatavf(XPLMDataRefinDataRef,\n                         float *              inValues,\n                         int                  inoffset,\n                         int                  inCount);",
          "source": "code_block_extraction",
          "type": "function"
        }
      ],
      "category": {
        "category": "XPLM_DataAccess",
        "module": "Xplm Dataaccess",
        "url": "https://developer.x-plane.com/sdk/XPLMSetDatavf/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPLMSetDatavf\"><a href=\"/sdk/XPLMSetDatavf/\">XPLMSetDatavf</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API void       <a href=\"/sdk/XPLMSetDatavf/\">XPLMSetDatavf</a>(\n                         <a href=\"/sdk/XPLMDataRef/\">XPLMDataRef</a>          inDataRef,\n                         float *              inValues,\n                         int                  inoffset,\n                         int                  inCount);\n</code></pre><p>Write part or all of a single precision floating point array dataref. The values passed by inValues are written into the dataref starting at inOffset. Up to inCount values are written; however if the values would write past the end of the dataref array, then fewer values are written.</p><p>Note: the semantics of array datarefs are entirely implemented by the plugin (or X-Plane) that provides the dataref, not the SDK itself; the above description is how these datarefs are intended to work, but a rogue plugin may have different behavior.</p></div></div></article>",
      "code_examples": [
        {
          "char_count": 216,
          "code": "XPLM_API voidXPLMSetDatavf(XPLMDataRefinDataRef,\n                         float *              inValues,\n                         int                  inoffset,\n                         int                  inCount);",
          "context": "XPLMSetDatavf",
          "id": "example_0",
          "language": "c",
          "line_count": 4,
          "type": "snippet"
        }
      ],
      "cross_references": [],
      "markdown": "### [XPLMSetDatavf](/sdk/XPLMSetDatavf/)\n\n```cpp\nXPLM_API void       XPLMSetDatavf(\n                         XPLMDataRef          inDataRef,\n                         float *              inValues,\n                         int                  inoffset,\n                         int                  inCount);\n\n```\n\nWrite part or all of a single precision floating point array dataref. The values\npassed by inValues are written into the dataref starting at inOffset. Up to\ninCount values are written; however if the values would write past the end of\nthe dataref array, then fewer values are written.\n\nNote: the semantics of array datarefs are entirely implemented by the plugin (or\nX-Plane) that provides the dataref, not the SDK itself; the above description is\nhow these datarefs are intended to work, but a rogue plugin may have different\nbehavior.",
      "own_functions": [
        "XPLMSetDatavf",
        "voidXPLMSetDatavf"
      ],
      "processing_timestamp": "2025-06-25T20:39:23.407686+00:00",
      "title": "XPLMSetDatavf | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMSetDatavf/"
    },
    "https://developer.x-plane.com/sdk/XPLMSetDatavf_f/": {
      "api_signatures": [],
      "category": {
        "category": "XPLM_DataAccess",
        "module": "Xplm Dataaccess",
        "url": "https://developer.x-plane.com/sdk/XPLMSetDatavf_f/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"callback\"><h3 class=\"sdk-api-callback\" id=\"XPLMSetDatavf_f\"><a href=\"/sdk/XPLMSetDatavf_f/\">XPLMSetDatavf_f</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>typedef void (* <a href=\"/sdk/XPLMSetDatavf_f/\">XPLMSetDatavf_f</a>)(\n                         void *               inRefcon,\n                         float *              inValues,\n                         int                  inOffset,\n                         int                  inCount);\n</code></pre></div></div></article>",
      "code_examples": [
        {
          "char_count": 256,
          "code": "typedef void (*XPLMSetDatavf_f)(\n                         void *               inRefcon,\n                         float *              inValues,\n                         int                  inOffset,\n                         int                  inCount);",
          "context": "XPLMSetDatavf_f",
          "id": "example_0",
          "language": "c",
          "line_count": 5,
          "type": "snippet"
        }
      ],
      "cross_references": [
        "XPLMSetDatavf"
      ],
      "markdown": "### [XPLMSetDatavf_f](/sdk/XPLMSetDatavf_f/)\n\n```cpp\ntypedef void (* XPLMSetDatavf_f)(\n                         void *               inRefcon,\n                         float *              inValues,\n                         int                  inOffset,\n                         int                  inCount);\n\n```",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:23.409737+00:00",
      "title": "XPLMSetDatavf_f | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMSetDatavf_f/"
    },
    "https://developer.x-plane.com/sdk/XPLMSetDatavi/": {
      "api_signatures": [
        {
          "description": "Write part or all of an integer array dataref. The values passed by inValues are written into the dataref starting at inOffset. Up to inCount values are written; however if the values would write past the end of the dataref array, then fewer values are written.",
          "name": "XPLMSetDatavi",
          "parameters": [
            {
              "full_declaration": "int *                inValues",
              "name": "inValues",
              "type": "int *"
            },
            {
              "full_declaration": "int                  inoffset",
              "name": "inoffset",
              "type": "int"
            },
            {
              "full_declaration": "int                  inCount",
              "name": "inCount",
              "type": "int"
            }
          ],
          "signature": "XPLM_API voidXPLMSetDatavi(XPLMDataRefinDataRef,\n                         int *                inValues,\n                         int                  inoffset,\n                         int                  inCount);"
        },
        {
          "name": "voidXPLMSetDatavi",
          "signature": "XPLM_API voidXPLMSetDatavi(XPLMDataRefinDataRef,\n                         int *                inValues,\n                         int                  inoffset,\n                         int                  inCount);",
          "source": "code_block_extraction",
          "type": "function"
        }
      ],
      "category": {
        "category": "XPLM_DataAccess",
        "module": "Xplm Dataaccess",
        "url": "https://developer.x-plane.com/sdk/XPLMSetDatavi/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPLMSetDatavi\"><a href=\"/sdk/XPLMSetDatavi/\">XPLMSetDatavi</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API void       <a href=\"/sdk/XPLMSetDatavi/\">XPLMSetDatavi</a>(\n                         <a href=\"/sdk/XPLMDataRef/\">XPLMDataRef</a>          inDataRef,\n                         int *                inValues,\n                         int                  inoffset,\n                         int                  inCount);\n</code></pre><p>Write part or all of an integer array dataref. The values passed by inValues are written into the dataref starting at inOffset. Up to inCount values are written; however if the values would write past the end of the dataref array, then fewer values are written.</p><p>Note: the semantics of array datarefs are entirely implemented by the plugin (or X-Plane) that provides the dataref, not the SDK itself; the above description is how these datarefs are intended to work, but a rogue plugin may have different behavior.</p></div></div></article>",
      "code_examples": [
        {
          "char_count": 216,
          "code": "XPLM_API voidXPLMSetDatavi(XPLMDataRefinDataRef,\n                         int *                inValues,\n                         int                  inoffset,\n                         int                  inCount);",
          "context": "XPLMSetDatavi",
          "id": "example_0",
          "language": "c",
          "line_count": 4,
          "type": "snippet"
        }
      ],
      "cross_references": [],
      "markdown": "### [XPLMSetDatavi](/sdk/XPLMSetDatavi/)\n\n```cpp\nXPLM_API void       XPLMSetDatavi(\n                         XPLMDataRef          inDataRef,\n                         int *                inValues,\n                         int                  inoffset,\n                         int                  inCount);\n\n```\n\nWrite part or all of an integer array dataref. The values passed by inValues are\nwritten into the dataref starting at inOffset. Up to inCount values are written;\nhowever if the values would write past the end of the dataref array, then fewer\nvalues are written.\n\nNote: the semantics of array datarefs are entirely implemented by the plugin (or\nX-Plane) that provides the dataref, not the SDK itself; the above description is\nhow these datarefs are intended to work, but a rogue plugin may have different\nbehavior.",
      "own_functions": [
        "XPLMSetDatavi",
        "voidXPLMSetDatavi"
      ],
      "processing_timestamp": "2025-06-25T20:39:23.411735+00:00",
      "title": "XPLMSetDatavi | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMSetDatavi/"
    },
    "https://developer.x-plane.com/sdk/XPLMSetDatavi_f/": {
      "api_signatures": [],
      "category": {
        "category": "XPLM_DataAccess",
        "module": "Xplm Dataaccess",
        "url": "https://developer.x-plane.com/sdk/XPLMSetDatavi_f/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"callback\"><h3 class=\"sdk-api-callback\" id=\"XPLMSetDatavi_f\"><a href=\"/sdk/XPLMSetDatavi_f/\">XPLMSetDatavi_f</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>typedef void (* <a href=\"/sdk/XPLMSetDatavi_f/\">XPLMSetDatavi_f</a>)(\n                         void *               inRefcon,\n                         int *                inValues,\n                         int                  inOffset,\n                         int                  inCount);\n</code></pre></div></div></article>",
      "code_examples": [
        {
          "char_count": 256,
          "code": "typedef void (*XPLMSetDatavi_f)(\n                         void *               inRefcon,\n                         int *                inValues,\n                         int                  inOffset,\n                         int                  inCount);",
          "context": "XPLMSetDatavi_f",
          "id": "example_0",
          "language": "c",
          "line_count": 5,
          "type": "snippet"
        }
      ],
      "cross_references": [
        "XPLMSetDatavi"
      ],
      "markdown": "### [XPLMSetDatavi_f](/sdk/XPLMSetDatavi_f/)\n\n```cpp\ntypedef void (* XPLMSetDatavi_f)(\n                         void *               inRefcon,\n                         int *                inValues,\n                         int                  inOffset,\n                         int                  inCount);\n\n```",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:23.412736+00:00",
      "title": "XPLMSetDatavi_f | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMSetDatavi_f/"
    },
    "https://developer.x-plane.com/sdk/XPLMSetDestinationFMSEntry/": {
      "api_signatures": [
        {
          "description": "This routine changes which entry the FMS is flying the aircraft toward. The track is from the n-1'th point to the n'th point.",
          "name": "XPLMSetDestinationFMSEntry",
          "parameters": [
            {
              "full_declaration": "int                  inIndex",
              "name": "inIndex",
              "type": "int"
            }
          ],
          "signature": "XPLM_API voidXPLMSetDestinationFMSEntry(\n                         int                  inIndex);"
        },
        {
          "name": "voidXPLMSetDestinationFMSEntry",
          "signature": "XPLM_API voidXPLMSetDestinationFMSEntry(\n                         int                  inIndex);",
          "source": "code_block_extraction",
          "type": "function"
        }
      ],
      "category": {
        "category": "XPLM_Navigation",
        "module": "Xplm Navigation",
        "url": "https://developer.x-plane.com/sdk/XPLMSetDestinationFMSEntry/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPLMSetDestinationFMSEntry\"><a href=\"/sdk/XPLMSetDestinationFMSEntry/\">XPLMSetDestinationFMSEntry</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API void       <a href=\"/sdk/XPLMSetDestinationFMSEntry/\">XPLMSetDestinationFMSEntry</a>(\n                         int                  inIndex);\n</code></pre><p>This routine changes which entry the FMS is flying the aircraft toward. The track is from the n-1'th point to the n'th point.</p></div></div></article>",
      "code_examples": [
        {
          "char_count": 96,
          "code": "XPLM_API voidXPLMSetDestinationFMSEntry(\n                         int                  inIndex);",
          "context": "XPLMSetDestinationFMSEntry",
          "id": "example_0",
          "language": "c",
          "line_count": 2,
          "type": "snippet"
        }
      ],
      "cross_references": [],
      "markdown": "### [XPLMSetDestinationFMSEntry](/sdk/XPLMSetDestinationFMSEntry/)\n\n```cpp\nXPLM_API void       XPLMSetDestinationFMSEntry(\n                         int                  inIndex);\n\n```\n\nThis routine changes which entry the FMS is flying the aircraft toward. The\ntrack is from the n-1'th point to the n'th point.",
      "own_functions": [
        "XPLMSetDestinationFMSEntry",
        "voidXPLMSetDestinationFMSEntry"
      ],
      "processing_timestamp": "2025-06-25T20:39:24.018315+00:00",
      "title": "XPLMSetDestinationFMSEntry | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMSetDestinationFMSEntry/"
    },
    "https://developer.x-plane.com/sdk/XPLMSetDestinationFMSFlightPlanEntry/": {
      "api_signatures": [
        {
          "description": "This routine changes which entry the FMS is flying the aircraft toward. The track is from the n-1'th point to the n'th point.",
          "name": "XPLMSetDestinationFMSFlightPlanEntry",
          "parameters": [
            {
              "full_declaration": "int                  inIndex",
              "name": "inIndex",
              "type": "int"
            }
          ],
          "signature": "XPLM_API voidXPLMSetDestinationFMSFlightPlanEntry(XPLMNavFlightPlaninFlightPlan,\n                         int                  inIndex);"
        },
        {
          "name": "voidXPLMSetDestinationFMSFlightPlanEntry",
          "signature": "XPLM_API voidXPLMSetDestinationFMSFlightPlanEntry(XPLMNavFlightPlaninFlightPlan,\n                         int                  inIndex);",
          "source": "code_block_extraction",
          "type": "function"
        }
      ],
      "category": {
        "category": "XPLM_Navigation",
        "module": "Xplm Navigation",
        "url": "https://developer.x-plane.com/sdk/XPLMSetDestinationFMSFlightPlanEntry/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"function XPLM410\"><h3 class=\"sdk-api-function\" id=\"XPLMSetDestinationFMSFlightPlanEntry\"><a href=\"/sdk/XPLMSetDestinationFMSFlightPlanEntry/\">XPLMSetDestinationFMSFlightPlanEntry</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API void       <a href=\"/sdk/XPLMSetDestinationFMSFlightPlanEntry/\">XPLMSetDestinationFMSFlightPlanEntry</a>(\n                         <a href=\"/sdk/XPLMNavFlightPlan/\">XPLMNavFlightPlan</a>    inFlightPlan,\n                         int                  inIndex);\n</code></pre><p>This routine changes which entry the FMS is flying the aircraft toward. The track is from the n-1'th point to the n'th point.</p></div></div></article>",
      "code_examples": [
        {
          "char_count": 136,
          "code": "XPLM_API voidXPLMSetDestinationFMSFlightPlanEntry(XPLMNavFlightPlaninFlightPlan,\n                         int                  inIndex);",
          "context": "XPLMSetDestinationFMSFlightPlanEntry",
          "id": "example_0",
          "language": "c",
          "line_count": 2,
          "type": "snippet"
        }
      ],
      "cross_references": [
        "XPLMNavFlightPlan"
      ],
      "markdown": "### [XPLMSetDestinationFMSFlightPlanEntry](/sdk/XPLMSetDestinationFMSFlightPlanEntry/)\n\n```cpp\nXPLM_API void       XPLMSetDestinationFMSFlightPlanEntry(\n                         XPLMNavFlightPlan    inFlightPlan,\n                         int                  inIndex);\n\n```\n\nThis routine changes which entry the FMS is flying the aircraft toward. The\ntrack is from the n-1'th point to the n'th point.",
      "own_functions": [
        "XPLMSetDestinationFMSFlightPlanEntry",
        "voidXPLMSetDestinationFMSFlightPlanEntry"
      ],
      "processing_timestamp": "2025-06-25T20:39:24.068082+00:00",
      "title": "XPLMSetDestinationFMSFlightPlanEntry | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMSetDestinationFMSFlightPlanEntry/"
    },
    "https://developer.x-plane.com/sdk/XPLMSetDirectToFMSFlightPlanEntry/": {
      "api_signatures": [
        {
          "description": "This routine changes which entry the FMS is flying the aircraft toward. The track is from the current position of the aircraft directly to the n'th point, ignoring the point before it.",
          "name": "XPLMSetDirectToFMSFlightPlanEntry",
          "parameters": [
            {
              "full_declaration": "int                  inIndex",
              "name": "inIndex",
              "type": "int"
            }
          ],
          "signature": "XPLM_API voidXPLMSetDirectToFMSFlightPlanEntry(XPLMNavFlightPlaninFlightPlan,\n                         int                  inIndex);"
        },
        {
          "name": "voidXPLMSetDirectToFMSFlightPlanEntry",
          "signature": "XPLM_API voidXPLMSetDirectToFMSFlightPlanEntry(XPLMNavFlightPlaninFlightPlan,\n                         int                  inIndex);",
          "source": "code_block_extraction",
          "type": "function"
        }
      ],
      "category": {
        "category": "XPLM_Navigation",
        "module": "Xplm Navigation",
        "url": "https://developer.x-plane.com/sdk/XPLMSetDirectToFMSFlightPlanEntry/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"function XPLM410\"><h3 class=\"sdk-api-function\" id=\"XPLMSetDirectToFMSFlightPlanEntry\"><a href=\"/sdk/XPLMSetDirectToFMSFlightPlanEntry/\">XPLMSetDirectToFMSFlightPlanEntry</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API void       <a href=\"/sdk/XPLMSetDirectToFMSFlightPlanEntry/\">XPLMSetDirectToFMSFlightPlanEntry</a>(\n                         <a href=\"/sdk/XPLMNavFlightPlan/\">XPLMNavFlightPlan</a>    inFlightPlan,\n                         int                  inIndex);\n</code></pre><p>This routine changes which entry the FMS is flying the aircraft toward. The track is from the current position of the aircraft directly to the n'th point, ignoring the point before it.</p></div></div></article>",
      "code_examples": [
        {
          "char_count": 133,
          "code": "XPLM_API voidXPLMSetDirectToFMSFlightPlanEntry(XPLMNavFlightPlaninFlightPlan,\n                         int                  inIndex);",
          "context": "XPLMSetDirectToFMSFlightPlanEntry",
          "id": "example_0",
          "language": "c",
          "line_count": 2,
          "type": "snippet"
        }
      ],
      "cross_references": [
        "XPLMNavFlightPlan"
      ],
      "markdown": "### [XPLMSetDirectToFMSFlightPlanEntry](/sdk/XPLMSetDirectToFMSFlightPlanEntry/)\n\n```cpp\nXPLM_API void       XPLMSetDirectToFMSFlightPlanEntry(\n                         XPLMNavFlightPlan    inFlightPlan,\n                         int                  inIndex);\n\n```\n\nThis routine changes which entry the FMS is flying the aircraft toward. The\ntrack is from the current position of the aircraft directly to the n'th point,\nignoring the point before it.",
      "own_functions": [
        "XPLMSetDirectToFMSFlightPlanEntry",
        "voidXPLMSetDirectToFMSFlightPlanEntry"
      ],
      "processing_timestamp": "2025-06-25T20:39:24.074083+00:00",
      "title": "XPLMSetDirectToFMSFlightPlanEntry | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMSetDirectToFMSFlightPlanEntry/"
    },
    "https://developer.x-plane.com/sdk/XPLMSetDisplayedFMSEntry/": {
      "api_signatures": [
        {
          "description": "This routine changes which entry the FMS is showing to the index specified.",
          "name": "XPLMSetDisplayedFMSEntry",
          "parameters": [
            {
              "full_declaration": "int                  inIndex",
              "name": "inIndex",
              "type": "int"
            }
          ],
          "signature": "XPLM_API voidXPLMSetDisplayedFMSEntry(\n                         int                  inIndex);"
        },
        {
          "name": "voidXPLMSetDisplayedFMSEntry",
          "signature": "XPLM_API voidXPLMSetDisplayedFMSEntry(\n                         int                  inIndex);",
          "source": "code_block_extraction",
          "type": "function"
        }
      ],
      "category": {
        "category": "XPLM_Navigation",
        "module": "Xplm Navigation",
        "url": "https://developer.x-plane.com/sdk/XPLMSetDisplayedFMSEntry/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPLMSetDisplayedFMSEntry\"><a href=\"/sdk/XPLMSetDisplayedFMSEntry/\">XPLMSetDisplayedFMSEntry</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API void       <a href=\"/sdk/XPLMSetDisplayedFMSEntry/\">XPLMSetDisplayedFMSEntry</a>(\n                         int                  inIndex);\n</code></pre><p>This routine changes which entry the FMS is showing to the index specified.</p></div></div></article>",
      "code_examples": [
        {
          "char_count": 94,
          "code": "XPLM_API voidXPLMSetDisplayedFMSEntry(\n                         int                  inIndex);",
          "context": "XPLMSetDisplayedFMSEntry",
          "id": "example_0",
          "language": "c",
          "line_count": 2,
          "type": "snippet"
        }
      ],
      "cross_references": [],
      "markdown": "### [XPLMSetDisplayedFMSEntry](/sdk/XPLMSetDisplayedFMSEntry/)\n\n```cpp\nXPLM_API void       XPLMSetDisplayedFMSEntry(\n                         int                  inIndex);\n\n```\n\nThis routine changes which entry the FMS is showing to the index specified.",
      "own_functions": [
        "XPLMSetDisplayedFMSEntry",
        "voidXPLMSetDisplayedFMSEntry"
      ],
      "processing_timestamp": "2025-06-25T20:39:24.072081+00:00",
      "title": "XPLMSetDisplayedFMSEntry | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMSetDisplayedFMSEntry/"
    },
    "https://developer.x-plane.com/sdk/XPLMSetDisplayedFMSFlightPlanEntry/": {
      "api_signatures": [
        {
          "description": "This routine changes which entry the FMS is showing to the index specified.",
          "name": "XPLMSetDisplayedFMSFlightPlanEntry",
          "parameters": [
            {
              "full_declaration": "int                  inIndex",
              "name": "inIndex",
              "type": "int"
            }
          ],
          "signature": "XPLM_API voidXPLMSetDisplayedFMSFlightPlanEntry(XPLMNavFlightPlaninFlightPlan,\n                         int                  inIndex);"
        },
        {
          "name": "voidXPLMSetDisplayedFMSFlightPlanEntry",
          "signature": "XPLM_API voidXPLMSetDisplayedFMSFlightPlanEntry(XPLMNavFlightPlaninFlightPlan,\n                         int                  inIndex);",
          "source": "code_block_extraction",
          "type": "function"
        }
      ],
      "category": {
        "category": "XPLM_Navigation",
        "module": "Xplm Navigation",
        "url": "https://developer.x-plane.com/sdk/XPLMSetDisplayedFMSFlightPlanEntry/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"function XPLM410\"><h3 class=\"sdk-api-function\" id=\"XPLMSetDisplayedFMSFlightPlanEntry\"><a href=\"/sdk/XPLMSetDisplayedFMSFlightPlanEntry/\">XPLMSetDisplayedFMSFlightPlanEntry</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API void       <a href=\"/sdk/XPLMSetDisplayedFMSFlightPlanEntry/\">XPLMSetDisplayedFMSFlightPlanEntry</a>(\n                         <a href=\"/sdk/XPLMNavFlightPlan/\">XPLMNavFlightPlan</a>    inFlightPlan,\n                         int                  inIndex);\n</code></pre><p>This routine changes which entry the FMS is showing to the index specified.</p></div></div></article>",
      "code_examples": [
        {
          "char_count": 134,
          "code": "XPLM_API voidXPLMSetDisplayedFMSFlightPlanEntry(XPLMNavFlightPlaninFlightPlan,\n                         int                  inIndex);",
          "context": "XPLMSetDisplayedFMSFlightPlanEntry",
          "id": "example_0",
          "language": "c",
          "line_count": 2,
          "type": "snippet"
        }
      ],
      "cross_references": [
        "XPLMNavFlightPlan"
      ],
      "markdown": "### [XPLMSetDisplayedFMSFlightPlanEntry](/sdk/XPLMSetDisplayedFMSFlightPlanEntry/)\n\n```cpp\nXPLM_API void       XPLMSetDisplayedFMSFlightPlanEntry(\n                         XPLMNavFlightPlan    inFlightPlan,\n                         int                  inIndex);\n\n```\n\nThis routine changes which entry the FMS is showing to the index specified.",
      "own_functions": [
        "XPLMSetDisplayedFMSFlightPlanEntry",
        "voidXPLMSetDisplayedFMSFlightPlanEntry"
      ],
      "processing_timestamp": "2025-06-25T20:39:24.070084+00:00",
      "title": "XPLMSetDisplayedFMSFlightPlanEntry | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMSetDisplayedFMSFlightPlanEntry/"
    },
    "https://developer.x-plane.com/sdk/XPLMSetErrorCallback/": {
      "api_signatures": [
        {
          "description": "XPLMSetErrorCallbackinstalls an error-reporting callback for your plugin. Normally the plugin system performs minimum diagnostics to maximize performance. When you install an error callback, you will receive calls due to certain plugin errors, such as passing bad parameters or incorrect data.",
          "name": "XPLMSetErrorCallback",
          "parameters": [],
          "signature": "XPLM_API voidXPLMSetErrorCallback(XPLMError_finCallback);"
        },
        {
          "name": "voidXPLMSetErrorCallback",
          "signature": "XPLM_API voidXPLMSetErrorCallback(XPLMError_finCallback);",
          "source": "code_block_extraction",
          "type": "function"
        }
      ],
      "category": {
        "category": "XPLM_Processing",
        "module": "Xplm Processing",
        "url": "https://developer.x-plane.com/sdk/XPLMSetErrorCallback/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"function XPLM200\"><h3 class=\"sdk-api-function\" id=\"XPLMSetErrorCallback\"><a href=\"/sdk/XPLMSetErrorCallback/\">XPLMSetErrorCallback</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API void       <a href=\"/sdk/XPLMSetErrorCallback/\">XPLMSetErrorCallback</a>(\n                         <a href=\"/sdk/XPLMError_f/\">XPLMError_f</a>          inCallback);\n</code></pre><p><a href=\"/sdk/XPLMSetErrorCallback/\">XPLMSetErrorCallback</a>installs an error-reporting callback for your plugin. Normally the plugin system performs minimum diagnostics to maximize performance. When you install an error callback, you will receive calls due to certain plugin errors, such as passing bad parameters or incorrect data.</p><p>Important: the error callback determines<em>programming</em>errors, e.g. bad API parameters. Every error that is returned by the error callback represents a mistake in your plugin that you should fix. Error callbacks are not used to report expected run-time problems (e.g. disk I/O errors).</p><p>The intention is for you to install the error callback during debug sections and put a break-point inside your callback. This will cause you to break into the debugger from within the SDK at the point in your plugin where you made an illegal call.</p><p>Installing an error callback may activate error checking code that would not normally run, and this may adversely affect performance, so do not leave error callbacks installed in shipping plugins. Since the only useful response to an error is to change code, error callbacks are not useful “in the field”.</p></div></div></article>",
      "code_examples": [
        {
          "char_count": 57,
          "code": "XPLM_API voidXPLMSetErrorCallback(XPLMError_finCallback);",
          "context": "XPLMSetErrorCallback",
          "id": "example_0",
          "language": "c",
          "line_count": 1,
          "type": "snippet"
        }
      ],
      "cross_references": [],
      "markdown": "### [XPLMSetErrorCallback](/sdk/XPLMSetErrorCallback/)\n\n```cpp\nXPLM_API void       XPLMSetErrorCallback(\n                         XPLMError_f          inCallback);\n\n```\n\n[XPLMSetErrorCallback](/sdk/XPLMSetErrorCallback/)installs an error-reporting\ncallback for your plugin. Normally the plugin system performs minimum\ndiagnostics to maximize performance. When you install an error callback, you\nwill receive calls due to certain plugin errors, such as passing bad parameters\nor incorrect data.\n\nImportant: the error callback determines*programming*errors, e.g. bad API\nparameters. Every error that is returned by the error callback represents a\nmistake in your plugin that you should fix. Error callbacks are not used to\nreport expected run-time problems (e.g. disk I/O errors).\n\nThe intention is for you to install the error callback during debug sections and\nput a break-point inside your callback. This will cause you to break into the\ndebugger from within the SDK at the point in your plugin where you made an\nillegal call.\n\nInstalling an error callback may activate error checking code that would not\nnormally run, and this may adversely affect performance, so do not leave error\ncallbacks installed in shipping plugins. Since the only useful response to an\nerror is to change code, error callbacks are not useful “in the field”.",
      "own_functions": [
        "XPLMSetErrorCallback",
        "voidXPLMSetErrorCallback"
      ],
      "processing_timestamp": "2025-06-25T20:39:24.362802+00:00",
      "title": "XPLMSetErrorCallback | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMSetErrorCallback/"
    },
    "https://developer.x-plane.com/sdk/XPLMSetFMSEntryInfo/": {
      "api_signatures": [
        {
          "description": "This routine changes an entry in the FMS to have the destination navaid passed in and the altitude specified. Use this only for airports, fixes, and radio-beacon navaids. Currently of radio beacons, the FMS can only support VORs and NDBs. Use the routines below to clear or fly to a lat/lon.",
          "name": "XPLMSetFMSEntryInfo",
          "parameters": [
            {
              "full_declaration": "int                  inIndex",
              "name": "inIndex",
              "type": "int"
            },
            {
              "full_declaration": "int                  inAltitude",
              "name": "inAltitude",
              "type": "int"
            }
          ],
          "signature": "XPLM_API voidXPLMSetFMSEntryInfo(\n                         int                  inIndex,XPLMNavRefinRef,\n                         int                  inAltitude);"
        },
        {
          "name": "voidXPLMSetFMSEntryInfo",
          "signature": "XPLM_API voidXPLMSetFMSEntryInfo(\n                         int                  inIndex,XPLMNavRefinRef,\n                         int                  inAltitude);",
          "source": "code_block_extraction",
          "type": "function"
        }
      ],
      "category": {
        "category": "XPLM_Navigation",
        "module": "Xplm Navigation",
        "url": "https://developer.x-plane.com/sdk/XPLMSetFMSEntryInfo/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPLMSetFMSEntryInfo\"><a href=\"/sdk/XPLMSetFMSEntryInfo/\">XPLMSetFMSEntryInfo</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API void       <a href=\"/sdk/XPLMSetFMSEntryInfo/\">XPLMSetFMSEntryInfo</a>(\n                         int                  inIndex,\n                         <a href=\"/sdk/XPLMNavRef/\">XPLMNavRef</a>           inRef,\n                         int                  inAltitude);\n</code></pre><p>This routine changes an entry in the FMS to have the destination navaid passed in and the altitude specified. Use this only for airports, fixes, and radio-beacon navaids. Currently of radio beacons, the FMS can only support VORs and NDBs. Use the routines below to clear or fly to a lat/lon.</p></div></div></article>",
      "code_examples": [
        {
          "char_count": 163,
          "code": "XPLM_API voidXPLMSetFMSEntryInfo(\n                         int                  inIndex,XPLMNavRefinRef,\n                         int                  inAltitude);",
          "context": "XPLMSetFMSEntryInfo",
          "id": "example_0",
          "language": "c",
          "line_count": 3,
          "type": "snippet"
        }
      ],
      "cross_references": [],
      "markdown": "### [XPLMSetFMSEntryInfo](/sdk/XPLMSetFMSEntryInfo/)\n\n```cpp\nXPLM_API void       XPLMSetFMSEntryInfo(\n                         int                  inIndex,\n                         XPLMNavRef           inRef,\n                         int                  inAltitude);\n\n```\n\nThis routine changes an entry in the FMS to have the destination navaid passed\nin and the altitude specified. Use this only for airports, fixes, and\nradio-beacon navaids. Currently of radio beacons, the FMS can only support VORs\nand NDBs. Use the routines below to clear or fly to a lat/lon.",
      "own_functions": [
        "XPLMSetFMSEntryInfo",
        "voidXPLMSetFMSEntryInfo"
      ],
      "processing_timestamp": "2025-06-25T20:39:24.076083+00:00",
      "title": "XPLMSetFMSEntryInfo | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMSetFMSEntryInfo/"
    },
    "https://developer.x-plane.com/sdk/XPLMSetFMSEntryLatLon/": {
      "api_signatures": [
        {
          "description": "This routine changes the entry in the FMS to a lat/lon entry with the given coordinates.",
          "name": "XPLMSetFMSEntryLatLon",
          "parameters": [
            {
              "full_declaration": "int                  inIndex",
              "name": "inIndex",
              "type": "int"
            },
            {
              "full_declaration": "float                inLat",
              "name": "inLat",
              "type": "float"
            },
            {
              "full_declaration": "float                inLon",
              "name": "inLon",
              "type": "float"
            },
            {
              "full_declaration": "int                  inAltitude",
              "name": "inAltitude",
              "type": "int"
            }
          ],
          "signature": "XPLM_API voidXPLMSetFMSEntryLatLon(\n                         int                  inIndex,\n                         float                inLat,\n                         float                inLon,\n                         int                  inAltitude);"
        },
        {
          "name": "voidXPLMSetFMSEntryLatLon",
          "signature": "XPLM_API voidXPLMSetFMSEntryLatLon(\n                         int                  inIndex,\n                         float                inLat,\n                         float                inLon,\n                         int                  inAltitude);",
          "source": "code_block_extraction",
          "type": "function"
        }
      ],
      "category": {
        "category": "XPLM_Navigation",
        "module": "Xplm Navigation",
        "url": "https://developer.x-plane.com/sdk/XPLMSetFMSEntryLatLon/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPLMSetFMSEntryLatLon\"><a href=\"/sdk/XPLMSetFMSEntryLatLon/\">XPLMSetFMSEntryLatLon</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API void       <a href=\"/sdk/XPLMSetFMSEntryLatLon/\">XPLMSetFMSEntryLatLon</a>(\n                         int                  inIndex,\n                         float                inLat,\n                         float                inLon,\n                         int                  inAltitude);\n</code></pre><p>This routine changes the entry in the FMS to a lat/lon entry with the given coordinates.</p></div></div></article>",
      "code_examples": [
        {
          "char_count": 255,
          "code": "XPLM_API voidXPLMSetFMSEntryLatLon(\n                         int                  inIndex,\n                         float                inLat,\n                         float                inLon,\n                         int                  inAltitude);",
          "context": "XPLMSetFMSEntryLatLon",
          "id": "example_0",
          "language": "c",
          "line_count": 5,
          "type": "snippet"
        }
      ],
      "cross_references": [],
      "markdown": "### [XPLMSetFMSEntryLatLon](/sdk/XPLMSetFMSEntryLatLon/)\n\n```cpp\nXPLM_API void       XPLMSetFMSEntryLatLon(\n                         int                  inIndex,\n                         float                inLat,\n                         float                inLon,\n                         int                  inAltitude);\n\n```\n\nThis routine changes the entry in the FMS to a lat/lon entry with the given\ncoordinates.",
      "own_functions": [
        "XPLMSetFMSEntryLatLon",
        "voidXPLMSetFMSEntryLatLon"
      ],
      "processing_timestamp": "2025-06-25T20:39:24.078082+00:00",
      "title": "XPLMSetFMSEntryLatLon | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMSetFMSEntryLatLon/"
    },
    "https://developer.x-plane.com/sdk/XPLMSetFMSFlightPlanEntryInfo/": {
      "api_signatures": [
        {
          "description": "This routine changes an entry in the FMS to have the destination navaid passed in and the altitude specified. Use this only for airports, fixes, and radio-beacon navaids. Currently of radio beacons, the FMS can only support VORs, NDBs and TACANs. Use the routines below to clear or fly to a lat/lon.",
          "name": "XPLMSetFMSFlightPlanEntryInfo",
          "parameters": [
            {
              "full_declaration": "int                  inIndex",
              "name": "inIndex",
              "type": "int"
            },
            {
              "full_declaration": "int                  inAltitude",
              "name": "inAltitude",
              "type": "int"
            }
          ],
          "signature": "XPLM_API voidXPLMSetFMSFlightPlanEntryInfo(XPLMNavFlightPlaninFlightPlan,\n                         int                  inIndex,XPLMNavRefinRef,\n                         int                  inAltitude);"
        },
        {
          "name": "voidXPLMSetFMSFlightPlanEntryInfo",
          "signature": "XPLM_API voidXPLMSetFMSFlightPlanEntryInfo(XPLMNavFlightPlaninFlightPlan,\n                         int                  inIndex,XPLMNavRefinRef,\n                         int                  inAltitude);",
          "source": "code_block_extraction",
          "type": "function"
        }
      ],
      "category": {
        "category": "XPLM_Navigation",
        "module": "Xplm Navigation",
        "url": "https://developer.x-plane.com/sdk/XPLMSetFMSFlightPlanEntryInfo/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"function XPLM410\"><h3 class=\"sdk-api-function\" id=\"XPLMSetFMSFlightPlanEntryInfo\"><a href=\"/sdk/XPLMSetFMSFlightPlanEntryInfo/\">XPLMSetFMSFlightPlanEntryInfo</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API void       <a href=\"/sdk/XPLMSetFMSFlightPlanEntryInfo/\">XPLMSetFMSFlightPlanEntryInfo</a>(\n                         <a href=\"/sdk/XPLMNavFlightPlan/\">XPLMNavFlightPlan</a>    inFlightPlan,\n                         int                  inIndex,\n                         <a href=\"/sdk/XPLMNavRef/\">XPLMNavRef</a>           inRef,\n                         int                  inAltitude);\n</code></pre><p>This routine changes an entry in the FMS to have the destination navaid passed in and the altitude specified. Use this only for airports, fixes, and radio-beacon navaids. Currently of radio beacons, the FMS can only support VORs, NDBs and TACANs. Use the routines below to clear or fly to a lat/lon.</p></div></div></article>",
      "code_examples": [
        {
          "char_count": 203,
          "code": "XPLM_API voidXPLMSetFMSFlightPlanEntryInfo(XPLMNavFlightPlaninFlightPlan,\n                         int                  inIndex,XPLMNavRefinRef,\n                         int                  inAltitude);",
          "context": "XPLMSetFMSFlightPlanEntryInfo",
          "id": "example_0",
          "language": "c",
          "line_count": 3,
          "type": "snippet"
        }
      ],
      "cross_references": [
        "XPLMNavFlightPlan"
      ],
      "markdown": "### [XPLMSetFMSFlightPlanEntryInfo](/sdk/XPLMSetFMSFlightPlanEntryInfo/)\n\n```cpp\nXPLM_API void       XPLMSetFMSFlightPlanEntryInfo(\n                         XPLMNavFlightPlan    inFlightPlan,\n                         int                  inIndex,\n                         XPLMNavRef           inRef,\n                         int                  inAltitude);\n\n```\n\nThis routine changes an entry in the FMS to have the destination navaid passed\nin and the altitude specified. Use this only for airports, fixes, and\nradio-beacon navaids. Currently of radio beacons, the FMS can only support VORs,\nNDBs and TACANs. Use the routines below to clear or fly to a lat/lon.",
      "own_functions": [
        "XPLMSetFMSFlightPlanEntryInfo",
        "voidXPLMSetFMSFlightPlanEntryInfo"
      ],
      "processing_timestamp": "2025-06-25T20:39:24.093136+00:00",
      "title": "XPLMSetFMSFlightPlanEntryInfo | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMSetFMSFlightPlanEntryInfo/"
    },
    "https://developer.x-plane.com/sdk/XPLMSetFMSFlightPlanEntryLatLon/": {
      "api_signatures": [
        {
          "description": "This routine changes the entry in the FMS to a lat/lon entry with the given coordinates.",
          "name": "XPLMSetFMSFlightPlanEntryLatLon",
          "parameters": [
            {
              "full_declaration": "int                  inIndex",
              "name": "inIndex",
              "type": "int"
            },
            {
              "full_declaration": "float                inLat",
              "name": "inLat",
              "type": "float"
            },
            {
              "full_declaration": "float                inLon",
              "name": "inLon",
              "type": "float"
            },
            {
              "full_declaration": "int                  inAltitude",
              "name": "inAltitude",
              "type": "int"
            }
          ],
          "signature": "XPLM_API voidXPLMSetFMSFlightPlanEntryLatLon(XPLMNavFlightPlaninFlightPlan,\n                         int                  inIndex,\n                         float                inLat,\n                         float                inLon,\n                         int                  inAltitude);"
        },
        {
          "name": "voidXPLMSetFMSFlightPlanEntryLatLon",
          "signature": "XPLM_API voidXPLMSetFMSFlightPlanEntryLatLon(XPLMNavFlightPlaninFlightPlan,\n                         int                  inIndex,\n                         float                inLat,\n                         float                inLon,\n                         int                  inAltitude);",
          "source": "code_block_extraction",
          "type": "function"
        }
      ],
      "category": {
        "category": "XPLM_Navigation",
        "module": "Xplm Navigation",
        "url": "https://developer.x-plane.com/sdk/XPLMSetFMSFlightPlanEntryLatLon/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"function XPLM410\"><h3 class=\"sdk-api-function\" id=\"XPLMSetFMSFlightPlanEntryLatLon\"><a href=\"/sdk/XPLMSetFMSFlightPlanEntryLatLon/\">XPLMSetFMSFlightPlanEntryLatLon</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API void       <a href=\"/sdk/XPLMSetFMSFlightPlanEntryLatLon/\">XPLMSetFMSFlightPlanEntryLatLon</a>(\n                         <a href=\"/sdk/XPLMNavFlightPlan/\">XPLMNavFlightPlan</a>    inFlightPlan,\n                         int                  inIndex,\n                         float                inLat,\n                         float                inLon,\n                         int                  inAltitude);\n</code></pre><p>This routine changes the entry in the FMS to a lat/lon entry with the given coordinates.</p></div></div></article>",
      "code_examples": [
        {
          "char_count": 295,
          "code": "XPLM_API voidXPLMSetFMSFlightPlanEntryLatLon(XPLMNavFlightPlaninFlightPlan,\n                         int                  inIndex,\n                         float                inLat,\n                         float                inLon,\n                         int                  inAltitude);",
          "context": "XPLMSetFMSFlightPlanEntryLatLon",
          "id": "example_0",
          "language": "c",
          "line_count": 5,
          "type": "snippet"
        }
      ],
      "cross_references": [
        "XPLMNavFlightPlan"
      ],
      "markdown": "### [XPLMSetFMSFlightPlanEntryLatLon](/sdk/XPLMSetFMSFlightPlanEntryLatLon/)\n\n```cpp\nXPLM_API void       XPLMSetFMSFlightPlanEntryLatLon(\n                         XPLMNavFlightPlan    inFlightPlan,\n                         int                  inIndex,\n                         float                inLat,\n                         float                inLon,\n                         int                  inAltitude);\n\n```\n\nThis routine changes the entry in the FMS to a lat/lon entry with the given\ncoordinates.",
      "own_functions": [
        "XPLMSetFMSFlightPlanEntryLatLon",
        "voidXPLMSetFMSFlightPlanEntryLatLon"
      ],
      "processing_timestamp": "2025-06-25T20:39:24.081081+00:00",
      "title": "XPLMSetFMSFlightPlanEntryLatLon | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMSetFMSFlightPlanEntryLatLon/"
    },
    "https://developer.x-plane.com/sdk/XPLMSetFMSFlightPlanEntryLatLonWithId/": {
      "api_signatures": [
        {
          "description": "This routine changes the entry in the FMS to a lat/lon entry with the given coordinates. You can specify the display ID of the waypoint.",
          "name": "XPLMSetFMSFlightPlanEntryLatLonWithId",
          "parameters": [
            {
              "full_declaration": "int                  inIndex",
              "name": "inIndex",
              "type": "int"
            },
            {
              "full_declaration": "float                inLat",
              "name": "inLat",
              "type": "float"
            },
            {
              "full_declaration": "float                inLon",
              "name": "inLon",
              "type": "float"
            },
            {
              "full_declaration": "int                  inAltitude",
              "name": "inAltitude",
              "type": "int"
            },
            {
              "full_declaration": "const char*          inId",
              "name": "inId",
              "type": "const char*"
            },
            {
              "full_declaration": "unsigned int         inIdLength",
              "name": "inIdLength",
              "type": "unsigned int"
            }
          ],
          "signature": "XPLM_API voidXPLMSetFMSFlightPlanEntryLatLonWithId(XPLMNavFlightPlaninFlightPlan,\n                         int                  inIndex,\n                         float                inLat,\n                         float                inLon,\n                         int                  inAltitude,\n                         const char*          inId,\n                         unsigned int         inIdLength);"
        },
        {
          "name": "voidXPLMSetFMSFlightPlanEntryLatLonWithId",
          "signature": "XPLM_API voidXPLMSetFMSFlightPlanEntryLatLonWithId(XPLMNavFlightPlaninFlightPlan,\n                         int                  inIndex,\n                         float                inLat,\n                         float                inLon,\n                         int                  inAltitude,\n                         const char*          inId,\n                         unsigned int         inIdLength);",
          "source": "code_block_extraction",
          "type": "function"
        }
      ],
      "category": {
        "category": "XPLM_Navigation",
        "module": "Xplm Navigation",
        "url": "https://developer.x-plane.com/sdk/XPLMSetFMSFlightPlanEntryLatLonWithId/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"function XPLM410\"><h3 class=\"sdk-api-function\" id=\"XPLMSetFMSFlightPlanEntryLatLonWithId\"><a href=\"/sdk/XPLMSetFMSFlightPlanEntryLatLonWithId/\">XPLMSetFMSFlightPlanEntryLatLonWithId</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API void       <a href=\"/sdk/XPLMSetFMSFlightPlanEntryLatLonWithId/\">XPLMSetFMSFlightPlanEntryLatLonWithId</a>(\n                         <a href=\"/sdk/XPLMNavFlightPlan/\">XPLMNavFlightPlan</a>    inFlightPlan,\n                         int                  inIndex,\n                         float                inLat,\n                         float                inLon,\n                         int                  inAltitude,\n                         const char*          inId,\n                         unsigned int         inIdLength);\n</code></pre><p>This routine changes the entry in the FMS to a lat/lon entry with the given coordinates. You can specify the display ID of the waypoint.</p></div></div></article>",
      "code_examples": [
        {
          "char_count": 411,
          "code": "XPLM_API voidXPLMSetFMSFlightPlanEntryLatLonWithId(XPLMNavFlightPlaninFlightPlan,\n                         int                  inIndex,\n                         float                inLat,\n                         float                inLon,\n                         int                  inAltitude,\n                         const char*          inId,\n                         unsigned int         inIdLength);",
          "context": "XPLMSetFMSFlightPlanEntryLatLonWithId",
          "id": "example_0",
          "language": "c",
          "line_count": 7,
          "type": "snippet"
        }
      ],
      "cross_references": [
        "XPLMNavFlightPlan",
        "unsigned",
        "XPLMSetFMSFlightPlanEntryLatLon"
      ],
      "markdown": "### [XPLMSetFMSFlightPlanEntryLatLonWithId](/sdk/XPLMSetFMSFlightPlanEntryLatLonWithId/)\n\n```cpp\nXPLM_API void       XPLMSetFMSFlightPlanEntryLatLonWithId(\n                         XPLMNavFlightPlan    inFlightPlan,\n                         int                  inIndex,\n                         float                inLat,\n                         float                inLon,\n                         int                  inAltitude,\n                         const char*          inId,\n                         unsigned int         inIdLength);\n\n```\n\nThis routine changes the entry in the FMS to a lat/lon entry with the given\ncoordinates. You can specify the display ID of the waypoint.",
      "own_functions": [
        "XPLMSetFMSFlightPlanEntryLatLonWithId",
        "voidXPLMSetFMSFlightPlanEntryLatLonWithId"
      ],
      "processing_timestamp": "2025-06-25T20:39:24.091138+00:00",
      "title": "XPLMSetFMSFlightPlanEntryLatLonWithId | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMSetFMSFlightPlanEntryLatLonWithId/"
    },
    "https://developer.x-plane.com/sdk/XPLMSetFlightLoopCallbackInterval/": {
      "api_signatures": [
        {
          "description": "This routine sets when a callback will be called. Do NOT call it from your callback; use the return value of the callback to change your callback interval from inside your callback.",
          "name": "XPLMSetFlightLoopCallbackInterval",
          "parameters": [
            {
              "full_declaration": "float                inInterval",
              "name": "inInterval",
              "type": "float"
            },
            {
              "full_declaration": "int                  inRelativeToNow",
              "name": "inRelativeToNow",
              "type": "int"
            },
            {
              "full_declaration": "void *               inRefcon",
              "name": "inRefcon",
              "type": "void *"
            }
          ],
          "signature": "XPLM_API voidXPLMSetFlightLoopCallbackInterval(XPLMFlightLoop_finFlightLoop,\n                         float                inInterval,\n                         int                  inRelativeToNow,\n                         void *               inRefcon);"
        },
        {
          "name": "voidXPLMSetFlightLoopCallbackInterval",
          "signature": "XPLM_API voidXPLMSetFlightLoopCallbackInterval(XPLMFlightLoop_finFlightLoop,\n                         float                inInterval,\n                         int                  inRelativeToNow,\n                         void *               inRefcon);",
          "source": "code_block_extraction",
          "type": "function"
        }
      ],
      "category": {
        "category": "XPLM_Processing",
        "module": "Xplm Processing",
        "url": "https://developer.x-plane.com/sdk/XPLMSetFlightLoopCallbackInterval/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPLMSetFlightLoopCallbackInterval\"><a href=\"/sdk/XPLMSetFlightLoopCallbackInterval/\">XPLMSetFlightLoopCallbackInterval</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API void       <a href=\"/sdk/XPLMSetFlightLoopCallbackInterval/\">XPLMSetFlightLoopCallbackInterval</a>(\n                         <a href=\"/sdk/XPLMFlightLoop_f/\">XPLMFlightLoop_f</a>     inFlightLoop,\n                         float                inInterval,\n                         int                  inRelativeToNow,\n                         void *               inRefcon);\n</code></pre><p>This routine sets when a callback will be called. Do NOT call it from your callback; use the return value of the callback to change your callback interval from inside your callback.</p><p>inInterval is formatted the same way as in<a href=\"/sdk/XPLMRegisterFlightLoopCallback/\">XPLMRegisterFlightLoopCallback</a>; positive for seconds, negative for cycles, and 0 for deactivating the callback. If inRelativeToNow is 1, times are from the time of this call; otherwise they are from the time the callback was last called (or the time it was registered if it has never been called.</p></div></div></article>",
      "code_examples": [
        {
          "char_count": 254,
          "code": "XPLM_API voidXPLMSetFlightLoopCallbackInterval(XPLMFlightLoop_finFlightLoop,\n                         float                inInterval,\n                         int                  inRelativeToNow,\n                         void *               inRefcon);",
          "context": "XPLMSetFlightLoopCallbackInterval",
          "id": "example_0",
          "language": "c",
          "line_count": 4,
          "type": "snippet"
        }
      ],
      "cross_references": [
        "XPLMRegisterFlightLoopCallback"
      ],
      "markdown": "### [XPLMSetFlightLoopCallbackInterval](/sdk/XPLMSetFlightLoopCallbackInterval/)\n\n```cpp\nXPLM_API void       XPLMSetFlightLoopCallbackInterval(\n                         XPLMFlightLoop_f     inFlightLoop,\n                         float                inInterval,\n                         int                  inRelativeToNow,\n                         void *               inRefcon);\n\n```\n\nThis routine sets when a callback will be called. Do NOT call it from your\ncallback; use the return value of the callback to change your callback interval\nfrom inside your callback.\n\ninInterval is formatted the same way as\nin[XPLMRegisterFlightLoopCallback](/sdk/XPLMRegisterFlightLoopCallback/);\npositive for seconds, negative for cycles, and 0 for deactivating the callback.\nIf inRelativeToNow is 1, times are from the time of this call; otherwise they\nare from the time the callback was last called (or the time it was registered if\nit has never been called.",
      "own_functions": [
        "XPLMSetFlightLoopCallbackInterval",
        "voidXPLMSetFlightLoopCallbackInterval"
      ],
      "processing_timestamp": "2025-06-25T20:39:24.359611+00:00",
      "title": "XPLMSetFlightLoopCallbackInterval | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMSetFlightLoopCallbackInterval/"
    },
    "https://developer.x-plane.com/sdk/XPLMSetGraphicsState/": {
      "api_signatures": [
        {
          "description": "XPLMSetGraphicsStatechanges OpenGL’s fixed function pipeline state. You are not responsible for restoring any state that is accessed viaXPLMSetGraphicsState, but you are responsible for not accessing this state directly.",
          "name": "XPLMSetGraphicsState",
          "parameters": [
            {
              "full_declaration": "int                  inEnableFog",
              "name": "inEnableFog",
              "type": "int"
            },
            {
              "full_declaration": "int                  inNumberTexUnits",
              "name": "inNumberTexUnits",
              "type": "int"
            },
            {
              "full_declaration": "int                  inEnableLighting",
              "name": "inEnableLighting",
              "type": "int"
            },
            {
              "full_declaration": "int                  inEnableAlphaTesting",
              "name": "inEnableAlphaTesting",
              "type": "int"
            },
            {
              "full_declaration": "int                  inEnableAlphaBlending",
              "name": "inEnableAlphaBlending",
              "type": "int"
            },
            {
              "full_declaration": "int                  inEnableDepthTesting",
              "name": "inEnableDepthTesting",
              "type": "int"
            },
            {
              "full_declaration": "int                  inEnableDepthWriting",
              "name": "inEnableDepthWriting",
              "type": "int"
            }
          ],
          "signature": "XPLM_API voidXPLMSetGraphicsState(\n                         int                  inEnableFog,\n                         int                  inNumberTexUnits,\n                         int                  inEnableLighting,\n                         int                  inEnableAlphaTesting,\n                         int                  inEnableAlphaBlending,\n                         int                  inEnableDepthTesting,\n                         int                  inEnableDepthWriting);"
        },
        {
          "name": "voidXPLMSetGraphicsState",
          "signature": "XPLM_API voidXPLMSetGraphicsState(\n                         int                  inEnableFog,\n                         int                  inNumberTexUnits,\n                         int                  inEnableLighting,\n                         int                  inEnableAlphaTesting,\n                         int                  inEnableAlphaBlending,\n                         int                  inEnableDepthTesting,\n                         int                  inEnableDepthWriting);",
          "source": "code_block_extraction",
          "type": "function"
        }
      ],
      "category": {
        "category": "XPLM_Graphics",
        "module": "Xplm Graphics",
        "url": "https://developer.x-plane.com/sdk/XPLMSetGraphicsState/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPLMSetGraphicsState\"><a href=\"/sdk/XPLMSetGraphicsState/\">XPLMSetGraphicsState</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API void       <a href=\"/sdk/XPLMSetGraphicsState/\">XPLMSetGraphicsState</a>(\n                         int                  inEnableFog,\n                         int                  inNumberTexUnits,\n                         int                  inEnableLighting,\n                         int                  inEnableAlphaTesting,\n                         int                  inEnableAlphaBlending,\n                         int                  inEnableDepthTesting,\n                         int                  inEnableDepthWriting);\n</code></pre><p><a href=\"/sdk/XPLMSetGraphicsState/\">XPLMSetGraphicsState</a>changes OpenGL’s fixed function pipeline state. You are not responsible for restoring any state that is accessed via<a href=\"/sdk/XPLMSetGraphicsState/\">XPLMSetGraphicsState</a>, but you are responsible for not accessing this state directly.</p><ul><li>inEnableFog - enables or disables fog, equivalent to: glEnable(GL_FOG);</li><li>inNumberTexUnits - enables or disables a number of multitexturing units. If the number is 0, 2d texturing is disabled entirely, as in glDisable(GL_TEXTURE_2D); Otherwise, 2d texturing is enabled, and a number of multitexturing units are enabled sequentially, starting with unit 0, e.g. glActiveTextureARB(GL_TEXTURE0_ARB); glEnable (GL_TEXTURE_2D);</li><li>inEnableLighting - enables or disables OpenGL lighting, e.g. glEnable(GL_LIGHTING); glEnable(GL_LIGHT0);</li><li>inEnableAlphaTesting - enables or disables the alpha test per pixel, e.g. glEnable(GL_ALPHA_TEST);</li><li>inEnableAlphaBlending - enables or disables alpha blending per pixel, e.g. glEnable(GL_BLEND);</li><li>inEnableDepthTesting - enables per pixel depth testing, as in glEnable(GL_DEPTH_TEST);</li><li>inEnableDepthWriting - enables writing back of depth information to the depth buffer, as in glDepthMask(GL_TRUE);</li></ul><p>The purpose of this function is to change OpenGL state while keeping X-Plane aware of the state changes; this keeps X-Plane from getting surprised by OGL state changes, and prevents X-Plane and plug-ins from having to set all state before all draws;<a href=\"/sdk/XPLMSetGraphicsState/\">XPLMSetGraphicsState</a>internally skips calls to change state that is already properly enabled.</p><p>X-Plane does not have a ‘default’ OGL state for plug-ins with respect to the above state vector; plug-ins should totally set OGL state using this API before drawing. Use<a href=\"/sdk/XPLMSetGraphicsState/\">XPLMSetGraphicsState</a>instead of any of the above OpenGL calls.</p><p>WARNING: Any routine that performs drawing (e.g.<a href=\"/sdk/XPLMDrawString/\">XPLMDrawString</a>or widget code) may change X-Plane’s state. Always set state before drawing after unknown code has executed.</p><p><em>Deprecation Warnings</em>: X-Plane’s lighting and fog environment is significantly more complex than the fixed function pipeline can express; do not assume that lighting and fog state is a good approximation for 3-d drawing. Prefer to use XPLMInstancing to draw objects. All calls to<a href=\"/sdk/XPLMSetGraphicsState/\">XPLMSetGraphicsState</a>should have no fog or lighting.</p></div></div></article>",
      "code_examples": [
        {
          "char_count": 495,
          "code": "XPLM_API voidXPLMSetGraphicsState(\n                         int                  inEnableFog,\n                         int                  inNumberTexUnits,\n                         int                  inEnableLighting,\n                         int                  inEnableAlphaTesting,\n                         int                  inEnableAlphaBlending,\n                         int                  inEnableDepthTesting,\n                         int                  inEnableDepthWriting);",
          "context": "XPLMSetGraphicsState",
          "id": "example_0",
          "language": "c",
          "line_count": 8,
          "type": "snippet"
        }
      ],
      "cross_references": [
        "XPLMDrawString"
      ],
      "markdown": "### [XPLMSetGraphicsState](/sdk/XPLMSetGraphicsState/)\n\n```cpp\nXPLM_API void       XPLMSetGraphicsState(\n                         int                  inEnableFog,\n                         int                  inNumberTexUnits,\n                         int                  inEnableLighting,\n                         int                  inEnableAlphaTesting,\n                         int                  inEnableAlphaBlending,\n                         int                  inEnableDepthTesting,\n                         int                  inEnableDepthWriting);\n\n```\n\n[XPLMSetGraphicsState](/sdk/XPLMSetGraphicsState/)changes OpenGL’s fixed\nfunction pipeline state. You are not responsible for restoring any state that is\naccessed via[XPLMSetGraphicsState](/sdk/XPLMSetGraphicsState/), but you are\nresponsible for not accessing this state directly.\n\n- inEnableFog - enables or disables fog, equivalent to: glEnable(GL_FOG);\n- inNumberTexUnits - enables or disables a number of multitexturing units. If the number is 0, 2d texturing is disabled entirely, as in glDisable(GL_TEXTURE_2D); Otherwise, 2d texturing is enabled, and a number of multitexturing units are enabled sequentially, starting with unit 0, e.g. glActiveTextureARB(GL_TEXTURE0_ARB); glEnable (GL_TEXTURE_2D);\n- inEnableLighting - enables or disables OpenGL lighting, e.g. glEnable(GL_LIGHTING); glEnable(GL_LIGHT0);\n- inEnableAlphaTesting - enables or disables the alpha test per pixel, e.g. glEnable(GL_ALPHA_TEST);\n- inEnableAlphaBlending - enables or disables alpha blending per pixel, e.g. glEnable(GL_BLEND);\n- inEnableDepthTesting - enables per pixel depth testing, as in glEnable(GL_DEPTH_TEST);\n- inEnableDepthWriting - enables writing back of depth information to the depth buffer, as in glDepthMask(GL_TRUE);\n\nThe purpose of this function is to change OpenGL state while keeping X-Plane\naware of the state changes; this keeps X-Plane from getting surprised by OGL\nstate changes, and prevents X-Plane and plug-ins from having to set all state\nbefore all draws;[XPLMSetGraphicsState](/sdk/XPLMSetGraphicsState/)internally\nskips calls to change state that is already properly enabled.\n\nX-Plane does not have a ‘default’ OGL state for plug-ins with respect to the\nabove state vector; plug-ins should totally set OGL state using this API before\ndrawing. Use[XPLMSetGraphicsState](/sdk/XPLMSetGraphicsState/)instead of any of\nthe above OpenGL calls.\n\nWARNING: Any routine that performs drawing\n(e.g.[XPLMDrawString](/sdk/XPLMDrawString/)or widget code) may change X-Plane’s\nstate. Always set state before drawing after unknown code has executed.\n\n*Deprecation Warnings*: X-Plane’s lighting and fog environment is significantly\nmore complex than the fixed function pipeline can express; do not assume that\nlighting and fog state is a good approximation for 3-d drawing. Prefer to use\nXPLMInstancing to draw objects. All calls\nto[XPLMSetGraphicsState](/sdk/XPLMSetGraphicsState/)should have no fog or\nlighting.",
      "own_functions": [
        "XPLMSetGraphicsState",
        "voidXPLMSetGraphicsState"
      ],
      "processing_timestamp": "2025-06-25T20:39:23.666170+00:00",
      "title": "XPLMSetGraphicsState | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMSetGraphicsState/"
    },
    "https://developer.x-plane.com/sdk/XPLMSetHotKeyCombination/": {
      "api_signatures": [
        {
          "description": "Remaps a hot key’s keystrokes. You may remap another plugin’s keystrokes.",
          "name": "XPLMSetHotKeyCombination",
          "parameters": [
            {
              "full_declaration": "char                 inVirtualKey",
              "name": "inVirtualKey",
              "type": "char"
            }
          ],
          "signature": "XPLM_API voidXPLMSetHotKeyCombination(XPLMHotKeyIDinHotKey,\n                         char                 inVirtualKey,XPLMKeyFlagsinFlags);"
        },
        {
          "name": "voidXPLMSetHotKeyCombination",
          "signature": "XPLM_API voidXPLMSetHotKeyCombination(XPLMHotKeyIDinHotKey,\n                         char                 inVirtualKey,XPLMKeyFlagsinFlags);",
          "source": "code_block_extraction",
          "type": "function"
        }
      ],
      "category": {
        "category": "XPLM_Utilities",
        "module": "Xplm Utilities",
        "url": "https://developer.x-plane.com/sdk/XPLMSetHotKeyCombination/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPLMSetHotKeyCombination\"><a href=\"/sdk/XPLMSetHotKeyCombination/\">XPLMSetHotKeyCombination</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API void       <a href=\"/sdk/XPLMSetHotKeyCombination/\">XPLMSetHotKeyCombination</a>(\n                         <a href=\"/sdk/XPLMHotKeyID/\">XPLMHotKeyID</a>         inHotKey,\n                         char                 inVirtualKey,\n                         <a href=\"/sdk/XPLMKeyFlags/\">XPLMKeyFlags</a>         inFlags);\n</code></pre><p>Remaps a hot key’s keystrokes. You may remap another plugin’s keystrokes.</p></div></div></article>",
      "code_examples": [
        {
          "char_count": 140,
          "code": "XPLM_API voidXPLMSetHotKeyCombination(XPLMHotKeyIDinHotKey,\n                         char                 inVirtualKey,XPLMKeyFlagsinFlags);",
          "context": "XPLMSetHotKeyCombination",
          "id": "example_0",
          "language": "c",
          "line_count": 2,
          "type": "snippet"
        }
      ],
      "cross_references": [
        "XPLMKeyFlags"
      ],
      "markdown": "### [XPLMSetHotKeyCombination](/sdk/XPLMSetHotKeyCombination/)\n\n```cpp\nXPLM_API void       XPLMSetHotKeyCombination(\n                         XPLMHotKeyID         inHotKey,\n                         char                 inVirtualKey,\n                         XPLMKeyFlags         inFlags);\n\n```\n\nRemaps a hot key’s keystrokes. You may remap another plugin’s keystrokes.",
      "own_functions": [
        "XPLMSetHotKeyCombination",
        "voidXPLMSetHotKeyCombination"
      ],
      "processing_timestamp": "2025-06-25T20:39:24.540749+00:00",
      "title": "XPLMSetHotKeyCombination | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMSetHotKeyCombination/"
    },
    "https://developer.x-plane.com/sdk/XPLMSetMenuItemName/": {
      "api_signatures": [
        {
          "description": "This routine changes the name of an existing menu item. Pass in the menu ID and the index of the menu item.",
          "name": "XPLMSetMenuItemName",
          "parameters": [
            {
              "full_declaration": "int                  inIndex",
              "name": "inIndex",
              "type": "int"
            },
            {
              "full_declaration": "const char *         inItemName",
              "name": "inItemName",
              "type": "const char *"
            },
            {
              "full_declaration": "int                  inDeprecatedAndIgnored",
              "name": "inDeprecatedAndIgnored",
              "type": "int"
            }
          ],
          "signature": "XPLM_API voidXPLMSetMenuItemName(XPLMMenuIDinMenu,\n                         int                  inIndex,\n                         const char *         inItemName,\n                         int                  inDeprecatedAndIgnored);"
        },
        {
          "name": "voidXPLMSetMenuItemName",
          "signature": "XPLM_API voidXPLMSetMenuItemName(XPLMMenuIDinMenu,\n                         int                  inIndex,\n                         const char *         inItemName,\n                         int                  inDeprecatedAndIgnored);",
          "source": "code_block_extraction",
          "type": "function"
        }
      ],
      "category": {
        "category": "XPLM_Menus",
        "module": "Xplm Menus",
        "url": "https://developer.x-plane.com/sdk/XPLMSetMenuItemName/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPLMSetMenuItemName\"><a href=\"/sdk/XPLMSetMenuItemName/\">XPLMSetMenuItemName</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API void       <a href=\"/sdk/XPLMSetMenuItemName/\">XPLMSetMenuItemName</a>(\n                         <a href=\"/sdk/XPLMMenuID/\">XPLMMenuID</a>           inMenu,\n                         int                  inIndex,\n                         const char *         inItemName,\n                         int                  inDeprecatedAndIgnored);\n</code></pre><p>This routine changes the name of an existing menu item. Pass in the menu ID and the index of the menu item.</p></div></div></article>",
      "code_examples": [
        {
          "char_count": 234,
          "code": "XPLM_API voidXPLMSetMenuItemName(XPLMMenuIDinMenu,\n                         int                  inIndex,\n                         const char *         inItemName,\n                         int                  inDeprecatedAndIgnored);",
          "context": "XPLMSetMenuItemName",
          "id": "example_0",
          "language": "c",
          "line_count": 4,
          "type": "snippet"
        }
      ],
      "cross_references": [],
      "markdown": "### [XPLMSetMenuItemName](/sdk/XPLMSetMenuItemName/)\n\n```cpp\nXPLM_API void       XPLMSetMenuItemName(\n                         XPLMMenuID           inMenu,\n                         int                  inIndex,\n                         const char *         inItemName,\n                         int                  inDeprecatedAndIgnored);\n\n```\n\nThis routine changes the name of an existing menu item. Pass in the menu ID and\nthe index of the menu item.",
      "own_functions": [
        "XPLMSetMenuItemName",
        "voidXPLMSetMenuItemName"
      ],
      "processing_timestamp": "2025-06-25T20:39:23.935820+00:00",
      "title": "XPLMSetMenuItemName | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMSetMenuItemName/"
    },
    "https://developer.x-plane.com/sdk/XPLMSetUsersAircraft/": {
      "api_signatures": [
        {
          "description": "This routine changes the user’s aircraft. Note that this will reinitialize the user to be on the nearest airport’s first runway. Pass in a full path (hard drive and everything including the .acf extension) to the .acf file.",
          "name": "XPLMSetUsersAircraft",
          "parameters": [
            {
              "full_declaration": "const char *         inAircraftPath",
              "name": "inAircraftPath",
              "type": "const char *"
            }
          ],
          "signature": "XPLM_API voidXPLMSetUsersAircraft(\n                         const char *         inAircraftPath);"
        },
        {
          "name": "voidXPLMSetUsersAircraft",
          "signature": "XPLM_API voidXPLMSetUsersAircraft(\n                         const char *         inAircraftPath);",
          "source": "code_block_extraction",
          "type": "function"
        }
      ],
      "category": {
        "category": "XPLM_Planes",
        "module": "Xplm Planes",
        "url": "https://developer.x-plane.com/sdk/XPLMSetUsersAircraft/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPLMSetUsersAircraft\"><a href=\"/sdk/XPLMSetUsersAircraft/\">XPLMSetUsersAircraft</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API void       <a href=\"/sdk/XPLMSetUsersAircraft/\">XPLMSetUsersAircraft</a>(\n                         const char *         inAircraftPath);\n</code></pre><p>This routine changes the user’s aircraft. Note that this will reinitialize the user to be on the nearest airport’s first runway. Pass in a full path (hard drive and everything including the .acf extension) to the .acf file.</p></div></div></article>",
      "code_examples": [
        {
          "char_count": 97,
          "code": "XPLM_API voidXPLMSetUsersAircraft(\n                         const char *         inAircraftPath);",
          "context": "XPLMSetUsersAircraft",
          "id": "example_0",
          "language": "c",
          "line_count": 2,
          "type": "snippet"
        }
      ],
      "cross_references": [],
      "markdown": "### [XPLMSetUsersAircraft](/sdk/XPLMSetUsersAircraft/)\n\n```cpp\nXPLM_API void       XPLMSetUsersAircraft(\n                         const char *         inAircraftPath);\n\n```\n\nThis routine changes the user’s aircraft. Note that this will reinitialize the\nuser to be on the nearest airport’s first runway. Pass in a full path (hard\ndrive and everything including the .acf extension) to the .acf file.",
      "own_functions": [
        "XPLMSetUsersAircraft",
        "voidXPLMSetUsersAircraft"
      ],
      "processing_timestamp": "2025-06-25T20:39:24.162421+00:00",
      "title": "XPLMSetUsersAircraft | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMSetUsersAircraft/"
    },
    "https://developer.x-plane.com/sdk/XPLMSetWindowGeometry/": {
      "api_signatures": [
        {
          "description": "This routine allows you to set the position and size of a window.",
          "name": "XPLMSetWindowGeometry",
          "parameters": [
            {
              "full_declaration": "int                  inLeft",
              "name": "inLeft",
              "type": "int"
            },
            {
              "full_declaration": "int                  inTop",
              "name": "inTop",
              "type": "int"
            },
            {
              "full_declaration": "int                  inRight",
              "name": "inRight",
              "type": "int"
            },
            {
              "full_declaration": "int                  inBottom",
              "name": "inBottom",
              "type": "int"
            }
          ],
          "signature": "XPLM_API voidXPLMSetWindowGeometry(XPLMWindowIDinWindowID,\n                         int                  inLeft,\n                         int                  inTop,\n                         int                  inRight,\n                         int                  inBottom);"
        },
        {
          "name": "voidXPLMSetWindowGeometry",
          "signature": "XPLM_API voidXPLMSetWindowGeometry(XPLMWindowIDinWindowID,\n                         int                  inLeft,\n                         int                  inTop,\n                         int                  inRight,\n                         int                  inBottom);",
          "source": "code_block_extraction",
          "type": "function"
        }
      ],
      "category": {
        "category": "XPLM_Display",
        "module": "Xplm Display",
        "url": "https://developer.x-plane.com/sdk/XPLMSetWindowGeometry/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPLMSetWindowGeometry\"><a href=\"/sdk/XPLMSetWindowGeometry/\">XPLMSetWindowGeometry</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API void       <a href=\"/sdk/XPLMSetWindowGeometry/\">XPLMSetWindowGeometry</a>(\n                         <a href=\"/sdk/XPLMWindowID/\">XPLMWindowID</a>         inWindowID,\n                         int                  inLeft,\n                         int                  inTop,\n                         int                  inRight,\n                         int                  inBottom);\n</code></pre><p>This routine allows you to set the position and size of a window.</p><p>The units and coordinate system match those of<a href=\"/sdk/XPLMGetWindowGeometry/\">XPLMGetWindowGeometry</a>(). That is, modern windows use global desktop boxel coordinates, while legacy windows use pixels relative to the main X-Plane display.</p><p>Note that this only applies to “floating” windows (that is, windows that are drawn within the X-Plane simulation windows, rather than being “popped out” into their own first-class operating system windows). To set the position of windows whose positioning mode is<a href=\"/sdk/xplm_WindowPopOut/\">xplm_WindowPopOut</a>, you’ll need to instead use<a href=\"/sdk/XPLMSetWindowGeometryOS/\">XPLMSetWindowGeometryOS</a>().</p></div></div></article>",
      "code_examples": [
        {
          "char_count": 277,
          "code": "XPLM_API voidXPLMSetWindowGeometry(XPLMWindowIDinWindowID,\n                         int                  inLeft,\n                         int                  inTop,\n                         int                  inRight,\n                         int                  inBottom);",
          "context": "XPLMSetWindowGeometry",
          "id": "example_0",
          "language": "c",
          "line_count": 5,
          "type": "snippet"
        }
      ],
      "cross_references": [
        "XPLMSetWindowGeometryOS",
        "XPLMGetWindowGeometry"
      ],
      "markdown": "### [XPLMSetWindowGeometry](/sdk/XPLMSetWindowGeometry/)\n\n```cpp\nXPLM_API void       XPLMSetWindowGeometry(\n                         XPLMWindowID         inWindowID,\n                         int                  inLeft,\n                         int                  inTop,\n                         int                  inRight,\n                         int                  inBottom);\n\n```\n\nThis routine allows you to set the position and size of a window.\n\nThe units and coordinate system match those\nof[XPLMGetWindowGeometry](/sdk/XPLMGetWindowGeometry/)(). That is, modern\nwindows use global desktop boxel coordinates, while legacy windows use pixels\nrelative to the main X-Plane display.\n\nNote that this only applies to “floating” windows (that is, windows that are\ndrawn within the X-Plane simulation windows, rather than being “popped out” into\ntheir own first-class operating system windows). To set the position of windows\nwhose positioning mode is[xplm_WindowPopOut](/sdk/xplm_WindowPopOut/), you’ll\nneed to instead use[XPLMSetWindowGeometryOS](/sdk/XPLMSetWindowGeometryOS/)().",
      "own_functions": [
        "XPLMSetWindowGeometry",
        "voidXPLMSetWindowGeometry"
      ],
      "processing_timestamp": "2025-06-25T20:39:23.539607+00:00",
      "title": "XPLMSetWindowGeometry | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMSetWindowGeometry/"
    },
    "https://developer.x-plane.com/sdk/XPLMSetWindowGeometryOS/": {
      "api_signatures": [
        {
          "description": "This routine allows you to set the position and size, in operating system pixel coordinates, of a popped out window (that is, a window whose positioning mode isxplm_WindowPopOut, which exists outside the X-Plane simulation window, in its own first-class operating system window).",
          "name": "XPLMSetWindowGeometryOS",
          "parameters": [
            {
              "full_declaration": "int                  inLeft",
              "name": "inLeft",
              "type": "int"
            },
            {
              "full_declaration": "int                  inTop",
              "name": "inTop",
              "type": "int"
            },
            {
              "full_declaration": "int                  inRight",
              "name": "inRight",
              "type": "int"
            },
            {
              "full_declaration": "int                  inBottom",
              "name": "inBottom",
              "type": "int"
            }
          ],
          "signature": "XPLM_API voidXPLMSetWindowGeometryOS(XPLMWindowIDinWindowID,\n                         int                  inLeft,\n                         int                  inTop,\n                         int                  inRight,\n                         int                  inBottom);"
        },
        {
          "name": "voidXPLMSetWindowGeometryOS",
          "signature": "XPLM_API voidXPLMSetWindowGeometryOS(XPLMWindowIDinWindowID,\n                         int                  inLeft,\n                         int                  inTop,\n                         int                  inRight,\n                         int                  inBottom);",
          "source": "code_block_extraction",
          "type": "function"
        }
      ],
      "category": {
        "category": "XPLM_Display",
        "module": "Xplm Display",
        "url": "https://developer.x-plane.com/sdk/XPLMSetWindowGeometryOS/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"function XPLM300\"><h3 class=\"sdk-api-function\" id=\"XPLMSetWindowGeometryOS\"><a href=\"/sdk/XPLMSetWindowGeometryOS/\">XPLMSetWindowGeometryOS</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API void       <a href=\"/sdk/XPLMSetWindowGeometryOS/\">XPLMSetWindowGeometryOS</a>(\n                         <a href=\"/sdk/XPLMWindowID/\">XPLMWindowID</a>         inWindowID,\n                         int                  inLeft,\n                         int                  inTop,\n                         int                  inRight,\n                         int                  inBottom);\n</code></pre><p>This routine allows you to set the position and size, in operating system pixel coordinates, of a popped out window (that is, a window whose positioning mode is<a href=\"/sdk/xplm_WindowPopOut/\">xplm_WindowPopOut</a>, which exists outside the X-Plane simulation window, in its own first-class operating system window).</p><p>Note that you are responsible for ensuring both that your window is popped out (using<a href=\"/sdk/XPLMWindowIsPoppedOut/\">XPLMWindowIsPoppedOut</a>()) and that a monitor really exists at the OS coordinates you provide (using<a href=\"/sdk/XPLMGetAllMonitorBoundsOS/\">XPLMGetAllMonitorBoundsOS</a>()).</p></div></div></article>",
      "code_examples": [
        {
          "char_count": 279,
          "code": "XPLM_API voidXPLMSetWindowGeometryOS(XPLMWindowIDinWindowID,\n                         int                  inLeft,\n                         int                  inTop,\n                         int                  inRight,\n                         int                  inBottom);",
          "context": "XPLMSetWindowGeometryOS",
          "id": "example_0",
          "language": "c",
          "line_count": 5,
          "type": "snippet"
        }
      ],
      "cross_references": [
        "XPLMGetAllMonitorBoundsOS",
        "XPLMWindowIsPoppedOut",
        "XPLMSetWindowGeometry"
      ],
      "markdown": "### [XPLMSetWindowGeometryOS](/sdk/XPLMSetWindowGeometryOS/)\n\n```cpp\nXPLM_API void       XPLMSetWindowGeometryOS(\n                         XPLMWindowID         inWindowID,\n                         int                  inLeft,\n                         int                  inTop,\n                         int                  inRight,\n                         int                  inBottom);\n\n```\n\nThis routine allows you to set the position and size, in operating system pixel\ncoordinates, of a popped out window (that is, a window whose positioning mode\nis[xplm_WindowPopOut](/sdk/xplm_WindowPopOut/), which exists outside the X-Plane\nsimulation window, in its own first-class operating system window).\n\nNote that you are responsible for ensuring both that your window is popped out\n(using[XPLMWindowIsPoppedOut](/sdk/XPLMWindowIsPoppedOut/)()) and that a monitor\nreally exists at the OS coordinates you provide\n(using[XPLMGetAllMonitorBoundsOS](/sdk/XPLMGetAllMonitorBoundsOS/)()).",
      "own_functions": [
        "XPLMSetWindowGeometryOS",
        "voidXPLMSetWindowGeometryOS"
      ],
      "processing_timestamp": "2025-06-25T20:39:23.542182+00:00",
      "title": "XPLMSetWindowGeometryOS | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMSetWindowGeometryOS/"
    },
    "https://developer.x-plane.com/sdk/XPLMSetWindowGeometryVR/": {
      "api_signatures": [
        {
          "description": "This routine allows you to set the size, in boxels, of a window in VR (that is, a window whose positioning mode isxplm_WindowVR).",
          "name": "XPLMSetWindowGeometryVR",
          "parameters": [
            {
              "full_declaration": "int                  widthBoxels",
              "name": "widthBoxels",
              "type": "int"
            },
            {
              "full_declaration": "int                  heightBoxels",
              "name": "heightBoxels",
              "type": "int"
            }
          ],
          "signature": "XPLM_API voidXPLMSetWindowGeometryVR(XPLMWindowIDinWindowID,\n                         int                  widthBoxels,\n                         int                  heightBoxels);"
        },
        {
          "name": "voidXPLMSetWindowGeometryVR",
          "signature": "XPLM_API voidXPLMSetWindowGeometryVR(XPLMWindowIDinWindowID,\n                         int                  widthBoxels,\n                         int                  heightBoxels);",
          "source": "code_block_extraction",
          "type": "function"
        }
      ],
      "category": {
        "category": "XPLM_Display",
        "module": "Xplm Display",
        "url": "https://developer.x-plane.com/sdk/XPLMSetWindowGeometryVR/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"function XPLM301\"><h3 class=\"sdk-api-function\" id=\"XPLMSetWindowGeometryVR\"><a href=\"/sdk/XPLMSetWindowGeometryVR/\">XPLMSetWindowGeometryVR</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API void       <a href=\"/sdk/XPLMSetWindowGeometryVR/\">XPLMSetWindowGeometryVR</a>(\n                         <a href=\"/sdk/XPLMWindowID/\">XPLMWindowID</a>         inWindowID,\n                         int                  widthBoxels,\n                         int                  heightBoxels);\n</code></pre><p>This routine allows you to set the size, in boxels, of a window in VR (that is, a window whose positioning mode is<a href=\"/sdk/xplm_WindowVR/\">xplm_WindowVR</a>).</p><p>Note that you are responsible for ensuring your window is in VR (using<a href=\"/sdk/XPLMWindowIsInVR/\">XPLMWindowIsInVR</a>()).</p></div></div></article>",
      "code_examples": [
        {
          "char_count": 180,
          "code": "XPLM_API voidXPLMSetWindowGeometryVR(XPLMWindowIDinWindowID,\n                         int                  widthBoxels,\n                         int                  heightBoxels);",
          "context": "XPLMSetWindowGeometryVR",
          "id": "example_0",
          "language": "cpp",
          "line_count": 3,
          "type": "snippet"
        }
      ],
      "cross_references": [
        "XPLMWindowIsInVR",
        "XPLMSetWindowGeometry"
      ],
      "markdown": "### [XPLMSetWindowGeometryVR](/sdk/XPLMSetWindowGeometryVR/)\n\n```cpp\nXPLM_API void       XPLMSetWindowGeometryVR(\n                         XPLMWindowID         inWindowID,\n                         int                  widthBoxels,\n                         int                  heightBoxels);\n\n```\n\nThis routine allows you to set the size, in boxels, of a window in VR (that is,\na window whose positioning mode is[xplm_WindowVR](/sdk/xplm_WindowVR/)).\n\nNote that you are responsible for ensuring your window is in VR\n(using[XPLMWindowIsInVR](/sdk/XPLMWindowIsInVR/)()).",
      "own_functions": [
        "XPLMSetWindowGeometryVR",
        "voidXPLMSetWindowGeometryVR"
      ],
      "processing_timestamp": "2025-06-25T20:39:23.537016+00:00",
      "title": "XPLMSetWindowGeometryVR | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMSetWindowGeometryVR/"
    },
    "https://developer.x-plane.com/sdk/XPLMSetWindowGravity/": {
      "api_signatures": [
        {
          "description": "A window’s “gravity” controls how the window shifts as the whole X-Plane window resizes. A gravity of 1 means the window maintains its positioning relative to the right or top edges, 0 the left/bottom, and 0.5 keeps it centered.",
          "name": "XPLMSetWindowGravity",
          "parameters": [
            {
              "full_declaration": "float                inLeftGravity",
              "name": "inLeftGravity",
              "type": "float"
            },
            {
              "full_declaration": "float                inTopGravity",
              "name": "inTopGravity",
              "type": "float"
            },
            {
              "full_declaration": "float                inRightGravity",
              "name": "inRightGravity",
              "type": "float"
            },
            {
              "full_declaration": "float                inBottomGravity",
              "name": "inBottomGravity",
              "type": "float"
            }
          ],
          "signature": "XPLM_API voidXPLMSetWindowGravity(XPLMWindowIDinWindowID,\n                         float                inLeftGravity,\n                         float                inTopGravity,\n                         float                inRightGravity,\n                         float                inBottomGravity);"
        },
        {
          "name": "voidXPLMSetWindowGravity",
          "signature": "XPLM_API voidXPLMSetWindowGravity(XPLMWindowIDinWindowID,\n                         float                inLeftGravity,\n                         float                inTopGravity,\n                         float                inRightGravity,\n                         float                inBottomGravity);",
          "source": "code_block_extraction",
          "type": "function"
        }
      ],
      "category": {
        "category": "XPLM_Display",
        "module": "Xplm Display",
        "url": "https://developer.x-plane.com/sdk/XPLMSetWindowGravity/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"function XPLM300\"><h3 class=\"sdk-api-function\" id=\"XPLMSetWindowGravity\"><a href=\"/sdk/XPLMSetWindowGravity/\">XPLMSetWindowGravity</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API void       <a href=\"/sdk/XPLMSetWindowGravity/\">XPLMSetWindowGravity</a>(\n                         <a href=\"/sdk/XPLMWindowID/\">XPLMWindowID</a>         inWindowID,\n                         float                inLeftGravity,\n                         float                inTopGravity,\n                         float                inRightGravity,\n                         float                inBottomGravity);\n</code></pre><p>A window’s “gravity” controls how the window shifts as the whole X-Plane window resizes. A gravity of 1 means the window maintains its positioning relative to the right or top edges, 0 the left/bottom, and 0.5 keeps it centered.</p><p>Default gravity is (0, 1, 0, 1), meaning your window will maintain its position relative to the top left and will not change size as its containing window grows.</p><p>If you wanted, say, a window that sticks to the top of the screen (with a constant height), but which grows to take the full width of the window, you would pass (0, 1, 1, 1). Because your left and right edges would maintain their positioning relative to their respective edges of the screen, the whole width of your window would change with the X-Plane window.</p><p>Only applies to modern windows. (Windows created using the deprecated<a href=\"/sdk/XPLMCreateWindow/\">XPLMCreateWindow</a>(), or windows compiled against a pre-XPLM300 version of the SDK will simply get the default gravity.)</p></div></div></article>",
      "code_examples": [
        {
          "char_count": 304,
          "code": "XPLM_API voidXPLMSetWindowGravity(XPLMWindowIDinWindowID,\n                         float                inLeftGravity,\n                         float                inTopGravity,\n                         float                inRightGravity,\n                         float                inBottomGravity);",
          "context": "XPLMSetWindowGravity",
          "id": "example_0",
          "language": "c",
          "line_count": 5,
          "type": "snippet"
        }
      ],
      "cross_references": [
        "XPLMCreateWindow"
      ],
      "markdown": "### [XPLMSetWindowGravity](/sdk/XPLMSetWindowGravity/)\n\n```cpp\nXPLM_API void       XPLMSetWindowGravity(\n                         XPLMWindowID         inWindowID,\n                         float                inLeftGravity,\n                         float                inTopGravity,\n                         float                inRightGravity,\n                         float                inBottomGravity);\n\n```\n\nA window’s “gravity” controls how the window shifts as the whole X-Plane window\nresizes. A gravity of 1 means the window maintains its positioning relative to\nthe right or top edges, 0 the left/bottom, and 0.5 keeps it centered.\n\nDefault gravity is (0, 1, 0, 1), meaning your window will maintain its position\nrelative to the top left and will not change size as its containing window\ngrows.\n\nIf you wanted, say, a window that sticks to the top of the screen (with a\nconstant height), but which grows to take the full width of the window, you\nwould pass (0, 1, 1, 1). Because your left and right edges would maintain their\npositioning relative to their respective edges of the screen, the whole width of\nyour window would change with the X-Plane window.\n\nOnly applies to modern windows. (Windows created using the\ndeprecated[XPLMCreateWindow](/sdk/XPLMCreateWindow/)(), or windows compiled\nagainst a pre-XPLM300 version of the SDK will simply get the default gravity.)",
      "own_functions": [
        "XPLMSetWindowGravity",
        "voidXPLMSetWindowGravity"
      ],
      "processing_timestamp": "2025-06-25T20:39:23.544780+00:00",
      "title": "XPLMSetWindowGravity | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMSetWindowGravity/"
    },
    "https://developer.x-plane.com/sdk/XPLMSetWindowIsVisible/": {
      "api_signatures": [
        {
          "description": "This routine shows or hides a window.",
          "name": "XPLMSetWindowIsVisible",
          "parameters": [
            {
              "full_declaration": "int                  inIsVisible",
              "name": "inIsVisible",
              "type": "int"
            }
          ],
          "signature": "XPLM_API voidXPLMSetWindowIsVisible(XPLMWindowIDinWindowID,\n                         int                  inIsVisible);"
        },
        {
          "name": "voidXPLMSetWindowIsVisible",
          "signature": "XPLM_API voidXPLMSetWindowIsVisible(XPLMWindowIDinWindowID,\n                         int                  inIsVisible);",
          "source": "code_block_extraction",
          "type": "function"
        }
      ],
      "category": {
        "category": "XPLM_Display",
        "module": "Xplm Display",
        "url": "https://developer.x-plane.com/sdk/XPLMSetWindowIsVisible/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPLMSetWindowIsVisible\"><a href=\"/sdk/XPLMSetWindowIsVisible/\">XPLMSetWindowIsVisible</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API void       <a href=\"/sdk/XPLMSetWindowIsVisible/\">XPLMSetWindowIsVisible</a>(\n                         <a href=\"/sdk/XPLMWindowID/\">XPLMWindowID</a>         inWindowID,\n                         int                  inIsVisible);\n</code></pre><p>This routine shows or hides a window.</p></div></div></article>",
      "code_examples": [
        {
          "char_count": 119,
          "code": "XPLM_API voidXPLMSetWindowIsVisible(XPLMWindowIDinWindowID,\n                         int                  inIsVisible);",
          "context": "XPLMSetWindowIsVisible",
          "id": "example_0",
          "language": "cpp",
          "line_count": 2,
          "type": "snippet"
        }
      ],
      "cross_references": [],
      "markdown": "### [XPLMSetWindowIsVisible](/sdk/XPLMSetWindowIsVisible/)\n\n```cpp\nXPLM_API void       XPLMSetWindowIsVisible(\n                         XPLMWindowID         inWindowID,\n                         int                  inIsVisible);\n\n```\n\nThis routine shows or hides a window.",
      "own_functions": [
        "XPLMSetWindowIsVisible",
        "voidXPLMSetWindowIsVisible"
      ],
      "processing_timestamp": "2025-06-25T20:39:23.546302+00:00",
      "title": "XPLMSetWindowIsVisible | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMSetWindowIsVisible/"
    },
    "https://developer.x-plane.com/sdk/XPLMSetWindowPositioningMode/": {
      "api_signatures": [
        {
          "description": "Sets the policy for how X-Plane will position your window.",
          "name": "XPLMSetWindowPositioningMode",
          "parameters": [
            {
              "full_declaration": "int                  inMonitorIndex",
              "name": "inMonitorIndex",
              "type": "int"
            }
          ],
          "signature": "XPLM_API voidXPLMSetWindowPositioningMode(XPLMWindowIDinWindowID,XPLMWindowPositioningModeinPositioningMode,\n                         int                  inMonitorIndex);"
        },
        {
          "name": "voidXPLMSetWindowPositioningMode",
          "signature": "XPLM_API voidXPLMSetWindowPositioningMode(XPLMWindowIDinWindowID,XPLMWindowPositioningModeinPositioningMode,\n                         int                  inMonitorIndex);",
          "source": "code_block_extraction",
          "type": "function"
        }
      ],
      "category": {
        "category": "XPLM_Display",
        "module": "Xplm Display",
        "url": "https://developer.x-plane.com/sdk/XPLMSetWindowPositioningMode/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"function XPLM300\"><h3 class=\"sdk-api-function\" id=\"XPLMSetWindowPositioningMode\"><a href=\"/sdk/XPLMSetWindowPositioningMode/\">XPLMSetWindowPositioningMode</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API void       <a href=\"/sdk/XPLMSetWindowPositioningMode/\">XPLMSetWindowPositioningMode</a>(\n                         <a href=\"/sdk/XPLMWindowID/\">XPLMWindowID</a>         inWindowID,\n                         <a href=\"/sdk/XPLMWindowPositioningMode/\">XPLMWindowPositioningMode</a> inPositioningMode,\n                         int                  inMonitorIndex);\n</code></pre><p>Sets the policy for how X-Plane will position your window.</p><p>Some positioning modes apply to a particular monitor. For those modes, you can pass a negative monitor index to position the window on the main X-Plane monitor (the screen with the X-Plane menu bar at the top). Or, if you have a specific monitor you want to position your window on, you can pass a real monitor index as received from, e.g.,<a href=\"/sdk/XPLMGetAllMonitorBoundsOS/\">XPLMGetAllMonitorBoundsOS</a>().</p><p>Only applies to modern windows. (Windows created using the deprecated<a href=\"/sdk/XPLMCreateWindow/\">XPLMCreateWindow</a>(), or windows compiled against a pre-XPLM300 version of the SDK will always use<a href=\"/sdk/xplm_WindowPositionFree/\">xplm_WindowPositionFree</a>.)</p></div></div></article>",
      "code_examples": [
        {
          "char_count": 171,
          "code": "XPLM_API voidXPLMSetWindowPositioningMode(XPLMWindowIDinWindowID,XPLMWindowPositioningModeinPositioningMode,\n                         int                  inMonitorIndex);",
          "context": "XPLMSetWindowPositioningMode",
          "id": "example_0",
          "language": "c",
          "line_count": 2,
          "type": "snippet"
        }
      ],
      "cross_references": [
        "XPLMGetAllMonitorBoundsOS",
        "XPLMCreateWindow",
        "XPLMWindowPositioningMode"
      ],
      "markdown": "### [XPLMSetWindowPositioningMode](/sdk/XPLMSetWindowPositioningMode/)\n\n```cpp\nXPLM_API void       XPLMSetWindowPositioningMode(\n                         XPLMWindowID         inWindowID,\n                         XPLMWindowPositioningMode inPositioningMode,\n                         int                  inMonitorIndex);\n\n```\n\nSets the policy for how X-Plane will position your window.\n\nSome positioning modes apply to a particular monitor. For those modes, you can\npass a negative monitor index to position the window on the main X-Plane monitor\n(the screen with the X-Plane menu bar at the top). Or, if you have a specific\nmonitor you want to position your window on, you can pass a real monitor index\nas received from,\ne.g.,[XPLMGetAllMonitorBoundsOS](/sdk/XPLMGetAllMonitorBoundsOS/)().\n\nOnly applies to modern windows. (Windows created using the\ndeprecated[XPLMCreateWindow](/sdk/XPLMCreateWindow/)(), or windows compiled\nagainst a pre-XPLM300 version of the SDK will always\nuse[xplm_WindowPositionFree](/sdk/xplm_WindowPositionFree/).)",
      "own_functions": [
        "XPLMSetWindowPositioningMode",
        "voidXPLMSetWindowPositioningMode"
      ],
      "processing_timestamp": "2025-06-25T20:39:23.551300+00:00",
      "title": "XPLMSetWindowPositioningMode | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMSetWindowPositioningMode/"
    },
    "https://developer.x-plane.com/sdk/XPLMSetWindowRefCon/": {
      "api_signatures": [
        {
          "description": "Sets a window’s reference constant. Use this to pass data to yourself in the callbacks.",
          "name": "XPLMSetWindowRefCon",
          "parameters": [
            {
              "full_declaration": "void *               inRefcon",
              "name": "inRefcon",
              "type": "void *"
            }
          ],
          "signature": "XPLM_API voidXPLMSetWindowRefCon(XPLMWindowIDinWindowID,\n                         void *               inRefcon);"
        },
        {
          "name": "voidXPLMSetWindowRefCon",
          "signature": "XPLM_API voidXPLMSetWindowRefCon(XPLMWindowIDinWindowID,\n                         void *               inRefcon);",
          "source": "code_block_extraction",
          "type": "function"
        }
      ],
      "category": {
        "category": "XPLM_Display",
        "module": "Xplm Display",
        "url": "https://developer.x-plane.com/sdk/XPLMSetWindowRefCon/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPLMSetWindowRefCon\"><a href=\"/sdk/XPLMSetWindowRefCon/\">XPLMSetWindowRefCon</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API void       <a href=\"/sdk/XPLMSetWindowRefCon/\">XPLMSetWindowRefCon</a>(\n                         <a href=\"/sdk/XPLMWindowID/\">XPLMWindowID</a>         inWindowID,\n                         void *               inRefcon);\n</code></pre><p>Sets a window’s reference constant. Use this to pass data to yourself in the callbacks.</p></div></div></article>",
      "code_examples": [
        {
          "char_count": 113,
          "code": "XPLM_API voidXPLMSetWindowRefCon(XPLMWindowIDinWindowID,\n                         void *               inRefcon);",
          "context": "XPLMSetWindowRefCon",
          "id": "example_0",
          "language": "c",
          "line_count": 2,
          "type": "snippet"
        }
      ],
      "cross_references": [],
      "markdown": "### [XPLMSetWindowRefCon](/sdk/XPLMSetWindowRefCon/)\n\n```cpp\nXPLM_API void       XPLMSetWindowRefCon(\n                         XPLMWindowID         inWindowID,\n                         void *               inRefcon);\n\n```\n\nSets a window’s reference constant. Use this to pass data to yourself in the\ncallbacks.",
      "own_functions": [
        "XPLMSetWindowRefCon",
        "voidXPLMSetWindowRefCon"
      ],
      "processing_timestamp": "2025-06-25T20:39:23.553805+00:00",
      "title": "XPLMSetWindowRefCon | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMSetWindowRefCon/"
    },
    "https://developer.x-plane.com/sdk/XPLMSetWindowResizingLimits/": {
      "api_signatures": [
        {
          "description": "Sets the minimum and maximum size of the client rectangle of the given window. (That is, it does not include any window styling that you might have asked X-Plane to apply on your behalf.) All resizing operations are constrained to these sizes.",
          "name": "XPLMSetWindowResizingLimits",
          "parameters": [
            {
              "full_declaration": "int                  inMinWidthBoxels",
              "name": "inMinWidthBoxels",
              "type": "int"
            },
            {
              "full_declaration": "int                  inMinHeightBoxels",
              "name": "inMinHeightBoxels",
              "type": "int"
            },
            {
              "full_declaration": "int                  inMaxWidthBoxels",
              "name": "inMaxWidthBoxels",
              "type": "int"
            },
            {
              "full_declaration": "int                  inMaxHeightBoxels",
              "name": "inMaxHeightBoxels",
              "type": "int"
            }
          ],
          "signature": "XPLM_API voidXPLMSetWindowResizingLimits(XPLMWindowIDinWindowID,\n                         int                  inMinWidthBoxels,\n                         int                  inMinHeightBoxels,\n                         int                  inMaxWidthBoxels,\n                         int                  inMaxHeightBoxels);"
        },
        {
          "name": "voidXPLMSetWindowResizingLimits",
          "signature": "XPLM_API voidXPLMSetWindowResizingLimits(XPLMWindowIDinWindowID,\n                         int                  inMinWidthBoxels,\n                         int                  inMinHeightBoxels,\n                         int                  inMaxWidthBoxels,\n                         int                  inMaxHeightBoxels);",
          "source": "code_block_extraction",
          "type": "function"
        }
      ],
      "category": {
        "category": "XPLM_Display",
        "module": "Xplm Display",
        "url": "https://developer.x-plane.com/sdk/XPLMSetWindowResizingLimits/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"function XPLM300\"><h3 class=\"sdk-api-function\" id=\"XPLMSetWindowResizingLimits\"><a href=\"/sdk/XPLMSetWindowResizingLimits/\">XPLMSetWindowResizingLimits</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API void       <a href=\"/sdk/XPLMSetWindowResizingLimits/\">XPLMSetWindowResizingLimits</a>(\n                         <a href=\"/sdk/XPLMWindowID/\">XPLMWindowID</a>         inWindowID,\n                         int                  inMinWidthBoxels,\n                         int                  inMinHeightBoxels,\n                         int                  inMaxWidthBoxels,\n                         int                  inMaxHeightBoxels);\n</code></pre><p>Sets the minimum and maximum size of the client rectangle of the given window. (That is, it does not include any window styling that you might have asked X-Plane to apply on your behalf.) All resizing operations are constrained to these sizes.</p><p>Only applies to modern windows. (Windows created using the deprecated<a href=\"/sdk/XPLMCreateWindow/\">XPLMCreateWindow</a>(), or windows compiled against a pre-XPLM300 version of the SDK will have no minimum or maximum size.)</p></div></div></article>",
      "code_examples": [
        {
          "char_count": 323,
          "code": "XPLM_API voidXPLMSetWindowResizingLimits(XPLMWindowIDinWindowID,\n                         int                  inMinWidthBoxels,\n                         int                  inMinHeightBoxels,\n                         int                  inMaxWidthBoxels,\n                         int                  inMaxHeightBoxels);",
          "context": "XPLMSetWindowResizingLimits",
          "id": "example_0",
          "language": "c",
          "line_count": 5,
          "type": "snippet"
        }
      ],
      "cross_references": [
        "XPLMCreateWindow"
      ],
      "markdown": "### [XPLMSetWindowResizingLimits](/sdk/XPLMSetWindowResizingLimits/)\n\n```cpp\nXPLM_API void       XPLMSetWindowResizingLimits(\n                         XPLMWindowID         inWindowID,\n                         int                  inMinWidthBoxels,\n                         int                  inMinHeightBoxels,\n                         int                  inMaxWidthBoxels,\n                         int                  inMaxHeightBoxels);\n\n```\n\nSets the minimum and maximum size of the client rectangle of the given window.\n(That is, it does not include any window styling that you might have asked\nX-Plane to apply on your behalf.) All resizing operations are constrained to\nthese sizes.\n\nOnly applies to modern windows. (Windows created using the\ndeprecated[XPLMCreateWindow](/sdk/XPLMCreateWindow/)(), or windows compiled\nagainst a pre-XPLM300 version of the SDK will have no minimum or maximum size.)",
      "own_functions": [
        "XPLMSetWindowResizingLimits",
        "voidXPLMSetWindowResizingLimits"
      ],
      "processing_timestamp": "2025-06-25T20:39:23.548300+00:00",
      "title": "XPLMSetWindowResizingLimits | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMSetWindowResizingLimits/"
    },
    "https://developer.x-plane.com/sdk/XPLMSetWindowTitle/": {
      "api_signatures": [
        {
          "description": "Sets the name for a window. This only applies to windows that opted-in to styling as an X-Plane 11 floating window (i.e., with styling modexplm_WindowDecorationRoundRectangle) when they were created usingXPLMCreateWindowEx().",
          "name": "XPLMSetWindowTitle",
          "parameters": [
            {
              "full_declaration": "const char *         inWindowTitle",
              "name": "inWindowTitle",
              "type": "const char *"
            }
          ],
          "signature": "XPLM_API voidXPLMSetWindowTitle(XPLMWindowIDinWindowID,\n                         const char *         inWindowTitle);"
        },
        {
          "name": "voidXPLMSetWindowTitle",
          "signature": "XPLM_API voidXPLMSetWindowTitle(XPLMWindowIDinWindowID,\n                         const char *         inWindowTitle);",
          "source": "code_block_extraction",
          "type": "function"
        }
      ],
      "category": {
        "category": "XPLM_Display",
        "module": "Xplm Display",
        "url": "https://developer.x-plane.com/sdk/XPLMSetWindowTitle/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"function XPLM300\"><h3 class=\"sdk-api-function\" id=\"XPLMSetWindowTitle\"><a href=\"/sdk/XPLMSetWindowTitle/\">XPLMSetWindowTitle</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API void       <a href=\"/sdk/XPLMSetWindowTitle/\">XPLMSetWindowTitle</a>(\n                         <a href=\"/sdk/XPLMWindowID/\">XPLMWindowID</a>         inWindowID,\n                         const char *         inWindowTitle);\n</code></pre><p>Sets the name for a window. This only applies to windows that opted-in to styling as an X-Plane 11 floating window (i.e., with styling mode<a href=\"/sdk/xplm_WindowDecorationRoundRectangle/\">xplm_WindowDecorationRoundRectangle</a>) when they were created using<a href=\"/sdk/XPLMCreateWindowEx/\">XPLMCreateWindowEx</a>().</p></div></div></article>",
      "code_examples": [
        {
          "char_count": 117,
          "code": "XPLM_API voidXPLMSetWindowTitle(XPLMWindowIDinWindowID,\n                         const char *         inWindowTitle);",
          "context": "XPLMSetWindowTitle",
          "id": "example_0",
          "language": "c",
          "line_count": 2,
          "type": "snippet"
        }
      ],
      "cross_references": [
        "XPLMCreateWindowEx",
        "XPLMCreateWindow"
      ],
      "markdown": "### [XPLMSetWindowTitle](/sdk/XPLMSetWindowTitle/)\n\n```cpp\nXPLM_API void       XPLMSetWindowTitle(\n                         XPLMWindowID         inWindowID,\n                         const char *         inWindowTitle);\n\n```\n\nSets the name for a window. This only applies to windows that opted-in to\nstyling as an X-Plane 11 floating window (i.e., with styling\nmode[xplm_WindowDecorationRoundRectangle](/sdk/xplm_WindowDecorationRoundRectangle/))\nwhen they were created using[XPLMCreateWindowEx](/sdk/XPLMCreateWindowEx/)().",
      "own_functions": [
        "XPLMSetWindowTitle",
        "voidXPLMSetWindowTitle"
      ],
      "processing_timestamp": "2025-06-25T20:39:23.555809+00:00",
      "title": "XPLMSetWindowTitle | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMSetWindowTitle/"
    },
    "https://developer.x-plane.com/sdk/XPLMShareData/": {
      "api_signatures": [
        {
          "description": "This routine connects a plug-in to shared data, creating the shared data if necessary. inDataName is a standard path for the dataref, and inDataType specifies the type. This function will create the data if it does not exist. If the data already exists but the type does not match, an error is returned, so it is important that plug-in authors collaborate to establish public standards for shared data.",
          "name": "XPLMShareData",
          "parameters": [
            {
              "full_declaration": "const char *         inDataName",
              "name": "inDataName",
              "type": "const char *"
            },
            {
              "full_declaration": "void *               inNotificationRefcon",
              "name": "inNotificationRefcon",
              "type": "void *"
            }
          ],
          "signature": "XPLM_API intXPLMShareData(\n                         const char *         inDataName,XPLMDataTypeIDinDataType,XPLMDataChanged_finNotificationFunc,\n                         void *               inNotificationRefcon);"
        },
        {
          "name": "intXPLMShareData",
          "signature": "XPLM_API intXPLMShareData(\n                         const char *         inDataName,XPLMDataTypeIDinDataType,XPLMDataChanged_finNotificationFunc,\n                         void *               inNotificationRefcon);",
          "source": "code_block_extraction",
          "type": "function"
        }
      ],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/XPLMShareData/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPLMShareData\"><a href=\"/sdk/XPLMShareData/\">XPLMShareData</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API int        <a href=\"/sdk/XPLMShareData/\">XPLMShareData</a>(\n                         const char *         inDataName,\n                         <a href=\"/sdk/XPLMDataTypeID/\">XPLMDataTypeID</a>       inDataType,\n                         <a href=\"/sdk/XPLMDataChanged_f/\">XPLMDataChanged_f</a>    inNotificationFunc,\n                         void *               inNotificationRefcon);\n</code></pre><p>This routine connects a plug-in to shared data, creating the shared data if necessary. inDataName is a standard path for the dataref, and inDataType specifies the type. This function will create the data if it does not exist. If the data already exists but the type does not match, an error is returned, so it is important that plug-in authors collaborate to establish public standards for shared data.</p><p>If a notificationFunc is passed in and is not NULL, that notification function will be called whenever the data is modified. The notification refcon will be passed to it. This allows your plug-in to know which shared data was changed if multiple shared data are handled by one callback, or if the plug-in does not use global variables.</p><p>A one is returned for successfully creating or finding the shared data; a zero if the data already exists but is of the wrong type.</p></div></div></article>",
      "code_examples": [
        {
          "char_count": 214,
          "code": "XPLM_API intXPLMShareData(\n                         const char *         inDataName,XPLMDataTypeIDinDataType,XPLMDataChanged_finNotificationFunc,\n                         void *               inNotificationRefcon);",
          "context": "XPLMShareData",
          "id": "example_0",
          "language": "c",
          "line_count": 3,
          "type": "snippet"
        }
      ],
      "cross_references": [
        "XPLMDataTypeID"
      ],
      "markdown": "### [XPLMShareData](/sdk/XPLMShareData/)\n\n```cpp\nXPLM_API int        XPLMShareData(\n                         const char *         inDataName,\n                         XPLMDataTypeID       inDataType,\n                         XPLMDataChanged_f    inNotificationFunc,\n                         void *               inNotificationRefcon);\n\n```\n\nThis routine connects a plug-in to shared data, creating the shared data if\nnecessary. inDataName is a standard path for the dataref, and inDataType\nspecifies the type. This function will create the data if it does not exist. If\nthe data already exists but the type does not match, an error is returned, so it\nis important that plug-in authors collaborate to establish public standards for\nshared data.\n\nIf a notificationFunc is passed in and is not NULL, that notification function\nwill be called whenever the data is modified. The notification refcon will be\npassed to it. This allows your plug-in to know which shared data was changed if\nmultiple shared data are handled by one callback, or if the plug-in does not use\nglobal variables.\n\nA one is returned for successfully creating or finding the shared data; a zero\nif the data already exists but is of the wrong type.",
      "own_functions": [
        "XPLMShareData",
        "intXPLMShareData"
      ],
      "processing_timestamp": "2025-06-25T20:39:22.418031+00:00",
      "title": "XPLMShareData | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMShareData/"
    },
    "https://developer.x-plane.com/sdk/XPLMSimulateKeyPress/": {
      "api_signatures": [
        {
          "description": "This function simulates a key being pressed for X-Plane. The keystroke goes directly to X-Plane; it is never sent to any plug-ins. However, since this is a raw key stroke it may be mapped by the keys file or enter text into a field.",
          "name": "XPLMSimulateKeyPress",
          "parameters": [
            {
              "full_declaration": "int                  inKeyType",
              "name": "inKeyType",
              "type": "int"
            },
            {
              "full_declaration": "int                  inKey",
              "name": "inKey",
              "type": "int"
            }
          ],
          "signature": "XPLM_API voidXPLMSimulateKeyPress(\n                         int                  inKeyType,\n                         int                  inKey);"
        },
        {
          "name": "voidXPLMSimulateKeyPress",
          "signature": "XPLM_API voidXPLMSimulateKeyPress(\n                         int                  inKeyType,\n                         int                  inKey);",
          "source": "code_block_extraction",
          "type": "function"
        }
      ],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/XPLMSimulateKeyPress/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPLMSimulateKeyPress\"><a href=\"/sdk/XPLMSimulateKeyPress/\">XPLMSimulateKeyPress</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API void       <a href=\"/sdk/XPLMSimulateKeyPress/\">XPLMSimulateKeyPress</a>(\n                         int                  inKeyType,\n                         int                  inKey);\n</code></pre><p>This function simulates a key being pressed for X-Plane. The keystroke goes directly to X-Plane; it is never sent to any plug-ins. However, since this is a raw key stroke it may be mapped by the keys file or enter text into a field.</p><p>Deprecated: use<a href=\"/sdk/XPLMCommandOnce/\">XPLMCommandOnce</a></p></div></div></article>",
      "code_examples": [
        {
          "char_count": 145,
          "code": "XPLM_API voidXPLMSimulateKeyPress(\n                         int                  inKeyType,\n                         int                  inKey);",
          "context": "XPLMSimulateKeyPress",
          "id": "example_0",
          "language": "c",
          "line_count": 3,
          "type": "snippet"
        }
      ],
      "cross_references": [
        "XPLMCommandOnce"
      ],
      "markdown": "### [XPLMSimulateKeyPress](/sdk/XPLMSimulateKeyPress/)\n\n```cpp\nXPLM_API void       XPLMSimulateKeyPress(\n                         int                  inKeyType,\n                         int                  inKey);\n\n```\n\nThis function simulates a key being pressed for X-Plane. The keystroke goes\ndirectly to X-Plane; it is never sent to any plug-ins. However, since this is a\nraw key stroke it may be mapped by the keys file or enter text into a field.\n\nDeprecated: use[XPLMCommandOnce](/sdk/XPLMCommandOnce/)",
      "own_functions": [
        "XPLMSimulateKeyPress",
        "voidXPLMSimulateKeyPress"
      ],
      "processing_timestamp": "2025-06-25T20:39:22.416029+00:00",
      "title": "XPLMSimulateKeyPress | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMSimulateKeyPress/"
    },
    "https://developer.x-plane.com/sdk/XPLMSound/": {
      "api_signatures": [
        {
          "description": "Get a handle to the FMOD Studio, allowing you to load/process whatever else you need. This also gives access to the underlying system via FMOD::Studio::System::getCoreSystem() / FMOD_Studio_System_GetCoreSystem() . When a separate output device is being used for the radio, this will always return the FMOD::Studio that is running the environment output, as before. If you want to specifically target the headset output device, you can obtain that FMOD::Studio by getting one of the radio-specific output channelgroups and using the getSystem() call on that.",
          "name": "XPLMGetFMODStudio",
          "parameters": [],
          "signature": "XPLM_API FMOD_STUDIO_SYSTEM*XPLMGetFMODStudio(void);"
        },
        {
          "description": "Get a reference to a particular channel group - that is, an output channel. See the table above for values.",
          "name": "XPLMGetFMODChannelGroup",
          "parameters": [],
          "signature": "XPLM_API FMOD_CHANNELGROUP*XPLMGetFMODChannelGroup(XPLMAudioBusaudioType);"
        },
        {
          "description": "Play an in-memory audio buffer on a given audio bus. The resulting FMOD channel is returned. PAY ATTENTION TO THE CALLBACK - when the sample completes or is stopped by X-Plane, the channel will go away. It’s up to you to listen for the callback and invalidate any copy of the channel pointer you have lying around. The callback is optional because if you have no intention of interacting with the sound after it’s launched, then you don’t need to keep the channel pointer at all. The sound is not started instantly. Instead, it will be started the next time X-Plane refreshes the sound system, typically at the start of the next frame. This allows you to set the initial position for the sound, if required. The callback will be called on the main thread, and will be called only once per sound. If the call fails and you provide a callback function, you will get a callback with an FMOD status code.",
          "name": "XPLMPlayPCMOnBus",
          "parameters": [],
          "signature": "XPLM_API FMOD_CHANNEL*XPLMPlayPCMOnBus(\n                         void *               audioBuffer,\n                         uint32_t             bufferSize,\n                         FMOD_SOUND_FORMAT    soundFormat,\n                         int                  freqHz,\n                         int                  numChannels,\n                         int                  loop,XPLMAudioBusaudioType,XPLMPCMComplete_finCallback,\n                         void *               inRefcon);    /* Can be NULL */"
        },
        {
          "description": "Stop playing an active FMOD channel. If you defined a completion callback, this will be called. After this, the FMOD::Channel* will no longer be valid and must not be used in any future calls.",
          "name": "XPLMStopAudio",
          "parameters": [
            {
              "full_declaration": "FMOD_CHANNEL*        fmod_channel",
              "name": "fmod_channel",
              "type": "FMOD_CHANNEL*"
            }
          ],
          "signature": "XPLM_API FMOD_RESULTXPLMStopAudio(\n                         FMOD_CHANNEL*        fmod_channel);"
        },
        {
          "description": "Move the given audio channel (i.e. a single sound) to a specific location in local co-ordinates. This will set the sound to 3D if it is not already.",
          "name": "XPLMSetAudioPosition",
          "parameters": [
            {
              "full_declaration": "FMOD_CHANNEL*        fmod_channel",
              "name": "fmod_channel",
              "type": "FMOD_CHANNEL*"
            },
            {
              "full_declaration": "FMOD_VECTOR*         position",
              "name": "position",
              "type": "FMOD_VECTOR*"
            },
            {
              "full_declaration": "FMOD_VECTOR*         velocity",
              "name": "velocity",
              "type": "FMOD_VECTOR*"
            }
          ],
          "signature": "XPLM_API FMOD_RESULTXPLMSetAudioPosition(\n                         FMOD_CHANNEL*        fmod_channel,\n                         FMOD_VECTOR*         position,\n                         FMOD_VECTOR*         velocity);"
        },
        {
          "description": "Set the minimum and maximum fade distances for a given sound. This is highly unlikely to be 0 - please see https://documentation.help/FMOD-Studio-API/FMOD_Sound_Set3DMinMaxDistance.html for full details. This will set the sound to 3D if it is not already. You can set a 3D sound back to 2D by passing negative values for both min amd max.",
          "name": "XPLMSetAudioFadeDistance",
          "parameters": [
            {
              "full_declaration": "FMOD_CHANNEL*        fmod_channel",
              "name": "fmod_channel",
              "type": "FMOD_CHANNEL*"
            },
            {
              "full_declaration": "float                min_fade_distance",
              "name": "min_fade_distance",
              "type": "float"
            },
            {
              "full_declaration": "float                max_fade_distance",
              "name": "max_fade_distance",
              "type": "float"
            }
          ],
          "signature": "XPLM_API FMOD_RESULTXPLMSetAudioFadeDistance(\n                         FMOD_CHANNEL*        fmod_channel,\n                         float                min_fade_distance,\n                         float                max_fade_distance);"
        },
        {
          "description": "Set the current volume of an active FMOD channel. This should be used to handle changes in the audio source volume, not for fading with distance. Values from 0 to 1 are normal, above 1 can be used to artificially amplify a sound.",
          "name": "XPLMSetAudioVolume",
          "parameters": [
            {
              "full_declaration": "FMOD_CHANNEL*        fmod_channel",
              "name": "fmod_channel",
              "type": "FMOD_CHANNEL*"
            },
            {
              "full_declaration": "float                source_volume",
              "name": "source_volume",
              "type": "float"
            }
          ],
          "signature": "XPLM_API FMOD_RESULTXPLMSetAudioVolume(\n                         FMOD_CHANNEL*        fmod_channel,\n                         float                source_volume);"
        },
        {
          "description": "Change the current pitch of an active FMOD channel.",
          "name": "XPLMSetAudioPitch",
          "parameters": [
            {
              "full_declaration": "FMOD_CHANNEL*        fmod_channel",
              "name": "fmod_channel",
              "type": "FMOD_CHANNEL*"
            },
            {
              "full_declaration": "float                audio_pitch_hz",
              "name": "audio_pitch_hz",
              "type": "float"
            }
          ],
          "signature": "XPLM_API FMOD_RESULTXPLMSetAudioPitch(\n                         FMOD_CHANNEL*        fmod_channel,\n                         float                audio_pitch_hz);"
        },
        {
          "description": "Set a directional cone for an active FMOD channel. The orientation vector is in local coordinates. This will set the sound to 3D if it is not already.",
          "name": "XPLMSetAudioCone",
          "parameters": [
            {
              "full_declaration": "FMOD_CHANNEL*        fmod_channel",
              "name": "fmod_channel",
              "type": "FMOD_CHANNEL*"
            },
            {
              "full_declaration": "float                inside_angle",
              "name": "inside_angle",
              "type": "float"
            },
            {
              "full_declaration": "float                outside_angle",
              "name": "outside_angle",
              "type": "float"
            },
            {
              "full_declaration": "float                outside_volume",
              "name": "outside_volume",
              "type": "float"
            },
            {
              "full_declaration": "FMOD_VECTOR*         orientation",
              "name": "orientation",
              "type": "FMOD_VECTOR*"
            }
          ],
          "signature": "XPLM_API FMOD_RESULTXPLMSetAudioCone(\n                         FMOD_CHANNEL*        fmod_channel,\n                         float                inside_angle,\n                         float                outside_angle,\n                         float                outside_volume,\n                         FMOD_VECTOR*         orientation);"
        },
        {
          "name": "XPLMAudioBus",
          "type": "enum",
          "values": [
            {
              "description": "Incoming speech on COM1",
              "name": "xplm_AudioRadioCom1",
              "value": "\"0\""
            },
            {
              "description": "Incoming speech on COM2",
              "name": "xplm_AudioRadioCom2",
              "value": "\"1\""
            },
            {
              "description": "Pilot's own speech",
              "name": "xplm_AudioRadioPilot",
              "value": "\"2\""
            },
            {
              "description": "Copilot's own speech",
              "name": "xplm_AudioRadioCopilot",
              "value": "\"3\""
            },
            {
              "description": "Dedicated ground vehicle cable",
              "name": "xplm_AudioGround",
              "value": "\"9\""
            },
            {
              "description": "Master bus. Not normally to be used directly.",
              "name": "xplm_Master",
              "value": "\"10\""
            }
          ]
        },
        {
          "name": "XPLMBankID",
          "type": "enum",
          "values": [
            {
              "description": "Master bank. Handles all aircraft and environmental audio.",
              "name": "xplm_MasterBank",
              "value": "\"0\""
            },
            {
              "description": "Radio bank. Handles COM1/COM2/GND/Pilot/Copilot.",
              "name": "xplm_RadioBank",
              "value": "\"1\""
            }
          ]
        },
        {
          "name": "FMOD_RESULTXPLMStopAudio",
          "signature": "XPLM_API FMOD_RESULTXPLMStopAudio(\n                         FMOD_CHANNEL*        fmod_channel);",
          "source": "code_block_extraction",
          "type": "function"
        },
        {
          "name": "FMOD_RESULTXPLMSetAudioPosition",
          "signature": "XPLM_API FMOD_RESULTXPLMSetAudioPosition(\n                         FMOD_CHANNEL*        fmod_channel,\n                         FMOD_VECTOR*         position,\n                         FMOD_VECTOR*         velocity);",
          "source": "code_block_extraction",
          "type": "function"
        },
        {
          "name": "FMOD_RESULTXPLMSetAudioFadeDistance",
          "signature": "XPLM_API FMOD_RESULTXPLMSetAudioFadeDistance(\n                         FMOD_CHANNEL*        fmod_channel,\n                         float                min_fade_distance,\n                         float                max_fade_distance);",
          "source": "code_block_extraction",
          "type": "function"
        },
        {
          "name": "FMOD_RESULTXPLMSetAudioVolume",
          "signature": "XPLM_API FMOD_RESULTXPLMSetAudioVolume(\n                         FMOD_CHANNEL*        fmod_channel,\n                         float                source_volume);",
          "source": "code_block_extraction",
          "type": "function"
        },
        {
          "name": "FMOD_RESULTXPLMSetAudioPitch",
          "signature": "XPLM_API FMOD_RESULTXPLMSetAudioPitch(\n                         FMOD_CHANNEL*        fmod_channel,\n                         float                audio_pitch_hz);",
          "source": "code_block_extraction",
          "type": "function"
        },
        {
          "name": "FMOD_RESULTXPLMSetAudioCone",
          "signature": "XPLM_API FMOD_RESULTXPLMSetAudioCone(\n                         FMOD_CHANNEL*        fmod_channel,\n                         float                inside_angle,\n                         float                outside_angle,\n                         float                outside_volume,\n                         FMOD_VECTOR*         orientation);",
          "source": "code_block_extraction",
          "type": "function"
        }
      ],
      "category": {
        "category": "XPLM_Sound",
        "module": "Xplm Sound",
        "url": "https://developer.x-plane.com/sdk/XPLMSound/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"api\"><h1 class=\"sdk-api-title\" id=\"XPLMSound\"><a href=\"/sdk/XPLMSound/\">XPLMSound</a>API</h1><p>This provides a minimal interface into the FMOD audio system. On the simplest level, you can request that X-Plane plays an in-memory audio buffer. This will work without linking to FMOD yourself. If you want to do anything more, such as modifying the sound, or loading banks and triggering your own events, you can get a pointer to the FMOD Studio instance.</p><div class=\"component XPLM400\"><h2 id=\"FMOD ACCESS\">FMOD ACCESS</h2><div class=\"enum\"><h3 class=\"sdk-api-enum\" id=\"XPLMAudioBus\"><a href=\"/sdk/XPLMAudioBus/\">XPLMAudioBus</a></h3><p>This enumeration states the type of audio you wish to play - that is, the part of the simulated environment that the audio belongs in. If you use FMOD directly, note that COM1, COM2, Pilot and GND exist in a different FMOD bank so you may see these channels being unloaded/reloaded independently of the others. They may also be using a different FMOD::System if the user has selected a dedicated headset output device.</p><p><div class=\"enumitem\"><table><thead><tr><th>Name</th><th>Value</th><th>Description</th></tr></thead><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_AudioRadioCom1\"><a href=\"/sdk/xplm_AudioRadioCom1/\">xplm_AudioRadioCom1</a></td><td>\"0\"</td><td>Incoming speech on COM1</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_AudioRadioCom2\"><a href=\"/sdk/xplm_AudioRadioCom2/\">xplm_AudioRadioCom2</a></td><td>\"1\"</td><td>Incoming speech on COM2</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_AudioRadioPilot\"><a href=\"/sdk/xplm_AudioRadioPilot/\">xplm_AudioRadioPilot</a></td><td>\"2\"</td><td>Pilot's own speech</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_AudioRadioCopilot\"><a href=\"/sdk/xplm_AudioRadioCopilot/\">xplm_AudioRadioCopilot</a></td><td>\"3\"</td><td>Copilot's own speech</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_AudioExteriorAircraft\"><a href=\"/sdk/xplm_AudioExteriorAircraft/\">xplm_AudioExteriorAircraft</a></td><td>\"4\"</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_AudioExteriorEnvironment\"><a href=\"/sdk/xplm_AudioExteriorEnvironment/\">xplm_AudioExteriorEnvironment</a></td><td>\"5\"</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_AudioExteriorUnprocessed\"><a href=\"/sdk/xplm_AudioExteriorUnprocessed/\">xplm_AudioExteriorUnprocessed</a></td><td>\"6\"</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_AudioInterior\"><a href=\"/sdk/xplm_AudioInterior/\">xplm_AudioInterior</a></td><td>\"7\"</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_AudioUI\"><a href=\"/sdk/xplm_AudioUI/\">xplm_AudioUI</a></td><td>\"8\"</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_AudioGround\"><a href=\"/sdk/xplm_AudioGround/\">xplm_AudioGround</a></td><td>\"9\"</td><td>Dedicated ground vehicle cable</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_Master\"><a href=\"/sdk/xplm_Master/\">xplm_Master</a></td><td>\"10\"</td><td>Master bus. Not normally to be used directly.</td></tr></table></div></p></div><div class=\"enum\"><h3 class=\"sdk-api-enum\" id=\"XPLMBankID\"><a href=\"/sdk/XPLMBankID/\">XPLMBankID</a></h3><p>These values are returned as the parameter of the “<a href=\"/sdk/XPLM_MSG_FMOD_BANK_LOADED/\">XPLM_MSG_FMOD_BANK_LOADED</a>” and “<a href=\"/sdk/XPLM_MSG_FMOD_BANK_UNLOADING/\">XPLM_MSG_FMOD_BANK_UNLOADING</a>” messages.</p><p><div class=\"enumitem\"><table><thead><tr><th>Name</th><th>Value</th><th>Description</th></tr></thead><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_MasterBank\"><a href=\"/sdk/xplm_MasterBank/\">xplm_MasterBank</a></td><td>\"0\"</td><td>Master bank. Handles all aircraft and environmental audio.</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_RadioBank\"><a href=\"/sdk/xplm_RadioBank/\">xplm_RadioBank</a></td><td>\"1\"</td><td>Radio bank. Handles COM1/COM2/GND/Pilot/Copilot.</td></tr></table></div></p></div><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPLMGetFMODStudio\"><a href=\"/sdk/XPLMGetFMODStudio/\">XPLMGetFMODStudio</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API FMOD_STUDIO_SYSTEM* <a href=\"/sdk/XPLMGetFMODStudio/\">XPLMGetFMODStudio</a>(void);\n</code></pre><p>Get a handle to the FMOD Studio, allowing you to load/process whatever else you need. This also gives access to the underlying system via FMOD::Studio::System::getCoreSystem() / FMOD_Studio_System_GetCoreSystem() . When a separate output device is being used for the radio, this will always return the FMOD::Studio that is running the environment output, as before. If you want to specifically target the headset output device, you can obtain that FMOD::Studio by getting one of the radio-specific output channelgroups and using the getSystem() call on that.</p></div><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPLMGetFMODChannelGroup\"><a href=\"/sdk/XPLMGetFMODChannelGroup/\">XPLMGetFMODChannelGroup</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API FMOD_CHANNELGROUP* <a href=\"/sdk/XPLMGetFMODChannelGroup/\">XPLMGetFMODChannelGroup</a>(\n                         <a href=\"/sdk/XPLMAudioBus/\">XPLMAudioBus</a>         audioType);\n</code></pre><p>Get a reference to a particular channel group - that is, an output channel. See the table above for values.</p></div><div class=\"callback\"><h3 class=\"sdk-api-callback\" id=\"XPLMPCMComplete_f\"><a href=\"/sdk/XPLMPCMComplete_f/\">XPLMPCMComplete_f</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>typedef void (* <a href=\"/sdk/XPLMPCMComplete_f/\">XPLMPCMComplete_f</a>)(\n                         void *               inRefcon,\n                         FMOD_RESULT          status);\n</code></pre><p>If you use<a href=\"/sdk/XPLMPlayPCMOnBus/\">XPLMPlayPCMOnBus</a>() you may use this optional callback to find out when the FMOD::Channel is complete, if you need to deallocate memory for example.</p></div><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPLMPlayPCMOnBus\"><a href=\"/sdk/XPLMPlayPCMOnBus/\">XPLMPlayPCMOnBus</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API FMOD_CHANNEL* <a href=\"/sdk/XPLMPlayPCMOnBus/\">XPLMPlayPCMOnBus</a>(\n                         void *               audioBuffer,\n                         uint32_t             bufferSize,\n                         FMOD_SOUND_FORMAT    soundFormat,\n                         int                  freqHz,\n                         int                  numChannels,\n                         int                  loop,\n                         <a href=\"/sdk/XPLMAudioBus/\">XPLMAudioBus</a>         audioType,\n                         <a href=\"/sdk/XPLMPCMComplete_f/\">XPLMPCMComplete_f</a>    inCallback,\n                         void *               inRefcon);    /* Can be NULL */\n</code></pre><p>Play an in-memory audio buffer on a given audio bus. The resulting FMOD channel is returned. PAY ATTENTION TO THE CALLBACK - when the sample completes or is stopped by X-Plane, the channel will go away. It’s up to you to listen for the callback and invalidate any copy of the channel pointer you have lying around. The callback is optional because if you have no intention of interacting with the sound after it’s launched, then you don’t need to keep the channel pointer at all. The sound is not started instantly. Instead, it will be started the next time X-Plane refreshes the sound system, typically at the start of the next frame. This allows you to set the initial position for the sound, if required. The callback will be called on the main thread, and will be called only once per sound. If the call fails and you provide a callback function, you will get a callback with an FMOD status code.</p></div><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPLMStopAudio\"><a href=\"/sdk/XPLMStopAudio/\">XPLMStopAudio</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API FMOD_RESULT <a href=\"/sdk/XPLMStopAudio/\">XPLMStopAudio</a>(\n                         FMOD_CHANNEL*        fmod_channel);\n</code></pre><p>Stop playing an active FMOD channel. If you defined a completion callback, this will be called. After this, the FMOD::Channel* will no longer be valid and must not be used in any future calls.</p></div><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPLMSetAudioPosition\"><a href=\"/sdk/XPLMSetAudioPosition/\">XPLMSetAudioPosition</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API FMOD_RESULT <a href=\"/sdk/XPLMSetAudioPosition/\">XPLMSetAudioPosition</a>(\n                         FMOD_CHANNEL*        fmod_channel,\n                         FMOD_VECTOR*         position,\n                         FMOD_VECTOR*         velocity);\n</code></pre><p>Move the given audio channel (i.e. a single sound) to a specific location in local co-ordinates. This will set the sound to 3D if it is not already.</p></div><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPLMSetAudioFadeDistance\"><a href=\"/sdk/XPLMSetAudioFadeDistance/\">XPLMSetAudioFadeDistance</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API FMOD_RESULT <a href=\"/sdk/XPLMSetAudioFadeDistance/\">XPLMSetAudioFadeDistance</a>(\n                         FMOD_CHANNEL*        fmod_channel,\n                         float                min_fade_distance,\n                         float                max_fade_distance);\n</code></pre><p>Set the minimum and maximum fade distances for a given sound. This is highly unlikely to be 0 - please see https://documentation.help/FMOD-Studio-API/FMOD_Sound_Set3DMinMaxDistance.html for full details. This will set the sound to 3D if it is not already. You can set a 3D sound back to 2D by passing negative values for both min amd max.</p></div><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPLMSetAudioVolume\"><a href=\"/sdk/XPLMSetAudioVolume/\">XPLMSetAudioVolume</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API FMOD_RESULT <a href=\"/sdk/XPLMSetAudioVolume/\">XPLMSetAudioVolume</a>(\n                         FMOD_CHANNEL*        fmod_channel,\n                         float                source_volume);\n</code></pre><p>Set the current volume of an active FMOD channel. This should be used to handle changes in the audio source volume, not for fading with distance. Values from 0 to 1 are normal, above 1 can be used to artificially amplify a sound.</p></div><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPLMSetAudioPitch\"><a href=\"/sdk/XPLMSetAudioPitch/\">XPLMSetAudioPitch</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API FMOD_RESULT <a href=\"/sdk/XPLMSetAudioPitch/\">XPLMSetAudioPitch</a>(\n                         FMOD_CHANNEL*        fmod_channel,\n                         float                audio_pitch_hz);\n</code></pre><p>Change the current pitch of an active FMOD channel.</p></div><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPLMSetAudioCone\"><a href=\"/sdk/XPLMSetAudioCone/\">XPLMSetAudioCone</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API FMOD_RESULT <a href=\"/sdk/XPLMSetAudioCone/\">XPLMSetAudioCone</a>(\n                         FMOD_CHANNEL*        fmod_channel,\n                         float                inside_angle,\n                         float                outside_angle,\n                         float                outside_volume,\n                         FMOD_VECTOR*         orientation);\n</code></pre><p>Set a directional cone for an active FMOD channel. The orientation vector is in local coordinates. This will set the sound to 3D if it is not already.</p></div></div></div></div></article>",
      "code_examples": [
        {
          "char_count": 52,
          "code": "XPLM_API FMOD_STUDIO_SYSTEM*XPLMGetFMODStudio(void);",
          "context": "XPLMGetFMODStudio",
          "id": "example_0",
          "language": "c",
          "line_count": 1,
          "type": "snippet"
        },
        {
          "char_count": 74,
          "code": "XPLM_API FMOD_CHANNELGROUP*XPLMGetFMODChannelGroup(XPLMAudioBusaudioType);",
          "context": "XPLMGetFMODChannelGroup",
          "id": "example_1",
          "language": "c",
          "line_count": 1,
          "type": "snippet"
        },
        {
          "char_count": 145,
          "code": "typedef void (*XPLMPCMComplete_f)(\n                         void *               inRefcon,\n                         FMOD_RESULT          status);",
          "context": "XPLMPCMComplete_f",
          "id": "example_2",
          "language": "c",
          "line_count": 3,
          "type": "snippet"
        },
        {
          "char_count": 508,
          "code": "XPLM_API FMOD_CHANNEL*XPLMPlayPCMOnBus(\n                         void *               audioBuffer,\n                         uint32_t             bufferSize,\n                         FMOD_SOUND_FORMAT    soundFormat,\n                         int                  freqHz,\n                         int                  numChannels,\n                         int                  loop,XPLMAudioBusaudioType,XPLMPCMComplete_finCallback,\n                         void *               inRefcon);    /* Can be NULL */",
          "context": "XPLMPlayPCMOnBus",
          "id": "example_3",
          "language": "c",
          "line_count": 8,
          "type": "snippet"
        },
        {
          "char_count": 95,
          "code": "XPLM_API FMOD_RESULTXPLMStopAudio(\n                         FMOD_CHANNEL*        fmod_channel);",
          "context": "XPLMStopAudio",
          "id": "example_4",
          "language": "c",
          "line_count": 2,
          "type": "snippet"
        },
        {
          "char_count": 214,
          "code": "XPLM_API FMOD_RESULTXPLMSetAudioPosition(\n                         FMOD_CHANNEL*        fmod_channel,\n                         FMOD_VECTOR*         position,\n                         FMOD_VECTOR*         velocity);",
          "context": "XPLMSetAudioPosition",
          "id": "example_5",
          "language": "c",
          "line_count": 4,
          "type": "snippet"
        },
        {
          "char_count": 236,
          "code": "XPLM_API FMOD_RESULTXPLMSetAudioFadeDistance(\n                         FMOD_CHANNEL*        fmod_channel,\n                         float                min_fade_distance,\n                         float                max_fade_distance);",
          "context": "XPLMSetAudioFadeDistance",
          "id": "example_6",
          "language": "c",
          "line_count": 4,
          "type": "snippet"
        },
        {
          "char_count": 161,
          "code": "XPLM_API FMOD_RESULTXPLMSetAudioVolume(\n                         FMOD_CHANNEL*        fmod_channel,\n                         float                source_volume);",
          "context": "XPLMSetAudioVolume",
          "id": "example_7",
          "language": "c",
          "line_count": 3,
          "type": "snippet"
        },
        {
          "char_count": 161,
          "code": "XPLM_API FMOD_RESULTXPLMSetAudioPitch(\n                         FMOD_CHANNEL*        fmod_channel,\n                         float                audio_pitch_hz);",
          "context": "XPLMSetAudioPitch",
          "id": "example_8",
          "language": "c",
          "line_count": 3,
          "type": "snippet"
        },
        {
          "char_count": 340,
          "code": "XPLM_API FMOD_RESULTXPLMSetAudioCone(\n                         FMOD_CHANNEL*        fmod_channel,\n                         float                inside_angle,\n                         float                outside_angle,\n                         float                outside_volume,\n                         FMOD_VECTOR*         orientation);",
          "context": "XPLMSetAudioCone",
          "id": "example_9",
          "language": "c",
          "line_count": 6,
          "type": "snippet"
        }
      ],
      "cross_references": [],
      "markdown": "# [XPLMSound](/sdk/XPLMSound/)API\n\nThis provides a minimal interface into the FMOD audio system. On the simplest\nlevel, you can request that X-Plane plays an in-memory audio buffer. This will\nwork without linking to FMOD yourself. If you want to do anything more, such as\nmodifying the sound, or loading banks and triggering your own events, you can\nget a pointer to the FMOD Studio instance.\n\n## FMOD ACCESS\n\n### [XPLMAudioBus](/sdk/XPLMAudioBus/)\n\nThis enumeration states the type of audio you wish to play - that is, the part\nof the simulated environment that the audio belongs in. If you use FMOD\ndirectly, note that COM1, COM2, Pilot and GND exist in a different FMOD bank so\nyou may see these channels being unloaded/reloaded independently of the others.\nThey may also be using a different FMOD::System if the user has selected a\ndedicated headset output device.\n\n| Name | Value | Description |\n| --- | --- | --- |\n| [xplm_AudioRadioCom1](/sdk/xplm_AudioRadioCom1/) | \"0\" | Incoming speech on\nCOM1 |\n| [xplm_AudioRadioCom2](/sdk/xplm_AudioRadioCom2/) | \"1\" | Incoming speech on\nCOM2 |\n| [xplm_AudioRadioPilot](/sdk/xplm_AudioRadioPilot/) | \"2\" | Pilot's own speech\n|\n| [xplm_AudioRadioCopilot](/sdk/xplm_AudioRadioCopilot/) | \"3\" | Copilot's own\nspeech |\n| [xplm_AudioExteriorAircraft](/sdk/xplm_AudioExteriorAircraft/) | \"4\" |\n| [xplm_AudioExteriorEnvironment](/sdk/xplm_AudioExteriorEnvironment/) | \"5\" |\n| [xplm_AudioExteriorUnprocessed](/sdk/xplm_AudioExteriorUnprocessed/) | \"6\" |\n| [xplm_AudioInterior](/sdk/xplm_AudioInterior/) | \"7\" |\n| [xplm_AudioUI](/sdk/xplm_AudioUI/) | \"8\" |\n| [xplm_AudioGround](/sdk/xplm_AudioGround/) | \"9\" | Dedicated ground vehicle\ncable |\n| [xplm_Master](/sdk/xplm_Master/) | \"10\" | Master bus. Not normally to be used\ndirectly. |\n\n### [XPLMBankID](/sdk/XPLMBankID/)\n\nThese values are returned as the parameter of the\n“[XPLM_MSG_FMOD_BANK_LOADED](/sdk/XPLM_MSG_FMOD_BANK_LOADED/)” and\n“[XPLM_MSG_FMOD_BANK_UNLOADING](/sdk/XPLM_MSG_FMOD_BANK_UNLOADING/)” messages.\n\n| Name | Value | Description |\n| --- | --- | --- |\n| [xplm_MasterBank](/sdk/xplm_MasterBank/) | \"0\" | Master bank. Handles all\naircraft and environmental audio. |\n| [xplm_RadioBank](/sdk/xplm_RadioBank/) | \"1\" | Radio bank. Handles\nCOM1/COM2/GND/Pilot/Copilot. |\n\n### [XPLMGetFMODStudio](/sdk/XPLMGetFMODStudio/)\n\n```cpp\nXPLM_API FMOD_STUDIO_SYSTEM* XPLMGetFMODStudio(void);\n\n```\n\nGet a handle to the FMOD Studio, allowing you to load/process whatever else you\nneed. This also gives access to the underlying system via\nFMOD::Studio::System::getCoreSystem() / FMOD_Studio_System_GetCoreSystem() .\nWhen a separate output device is being used for the radio, this will always\nreturn the FMOD::Studio that is running the environment output, as before. If\nyou want to specifically target the headset output device, you can obtain that\nFMOD::Studio by getting one of the radio-specific output channelgroups and using\nthe getSystem() call on that.\n\n### [XPLMGetFMODChannelGroup](/sdk/XPLMGetFMODChannelGroup/)\n\n```cpp\nXPLM_API FMOD_CHANNELGROUP* XPLMGetFMODChannelGroup(\n                         XPLMAudioBus         audioType);\n\n```\n\nGet a reference to a particular channel group - that is, an output channel. See\nthe table above for values.\n\n### [XPLMPCMComplete_f](/sdk/XPLMPCMComplete_f/)\n\n```cpp\ntypedef void (* XPLMPCMComplete_f)(\n                         void *               inRefcon,\n                         FMOD_RESULT          status);\n\n```\n\nIf you use[XPLMPlayPCMOnBus](/sdk/XPLMPlayPCMOnBus/)() you may use this optional\ncallback to find out when the FMOD::Channel is complete, if you need to\ndeallocate memory for example.\n\n### [XPLMPlayPCMOnBus](/sdk/XPLMPlayPCMOnBus/)\n\n```cpp\nXPLM_API FMOD_CHANNEL* XPLMPlayPCMOnBus(\n                         void *               audioBuffer,\n                         uint32_t             bufferSize,\n                         FMOD_SOUND_FORMAT    soundFormat,\n                         int                  freqHz,\n                         int                  numChannels,\n                         int                  loop,\n                         XPLMAudioBus         audioType,\n                         XPLMPCMComplete_f    inCallback,\n                         void *               inRefcon);    /* Can be NULL */\n\n```\n\nPlay an in-memory audio buffer on a given audio bus. The resulting FMOD channel\nis returned. PAY ATTENTION TO THE CALLBACK - when the sample completes or is\nstopped by X-Plane, the channel will go away. It’s up to you to listen for the\ncallback and invalidate any copy of the channel pointer you have lying around.\nThe callback is optional because if you have no intention of interacting with\nthe sound after it’s launched, then you don’t need to keep the channel pointer\nat all. The sound is not started instantly. Instead, it will be started the next\ntime X-Plane refreshes the sound system, typically at the start of the next\nframe. This allows you to set the initial position for the sound, if required.\nThe callback will be called on the main thread, and will be called only once per\nsound. If the call fails and you provide a callback function, you will get a\ncallback with an FMOD status code.\n\n### [XPLMStopAudio](/sdk/XPLMStopAudio/)\n\n```cpp\nXPLM_API FMOD_RESULT XPLMStopAudio(\n                         FMOD_CHANNEL*        fmod_channel);\n\n```\n\nStop playing an active FMOD channel. If you defined a completion callback, this\nwill be called. After this, the FMOD::Channel* will no longer be valid and must\nnot be used in any future calls.\n\n### [XPLMSetAudioPosition](/sdk/XPLMSetAudioPosition/)\n\n```cpp\nXPLM_API FMOD_RESULT XPLMSetAudioPosition(\n                         FMOD_CHANNEL*        fmod_channel,\n                         FMOD_VECTOR*         position,\n                         FMOD_VECTOR*         velocity);\n\n```\n\nMove the given audio channel (i.e. a single sound) to a specific location in\nlocal co-ordinates. This will set the sound to 3D if it is not already.\n\n### [XPLMSetAudioFadeDistance](/sdk/XPLMSetAudioFadeDistance/)\n\n```cpp\nXPLM_API FMOD_RESULT XPLMSetAudioFadeDistance(\n                         FMOD_CHANNEL*        fmod_channel,\n                         float                min_fade_distance,\n                         float                max_fade_distance);\n\n```\n\nSet the minimum and maximum fade distances for a given sound. This is highly\nunlikely to be 0 - please see\nhttps://documentation.help/FMOD-Studio-API/FMOD_Sound_Set3DMinMaxDistance.html\nfor full details. This will set the sound to 3D if it is not already. You can\nset a 3D sound back to 2D by passing negative values for both min amd max.\n\n### [XPLMSetAudioVolume](/sdk/XPLMSetAudioVolume/)\n\n```cpp\nXPLM_API FMOD_RESULT XPLMSetAudioVolume(\n                         FMOD_CHANNEL*        fmod_channel,\n                         float                source_volume);\n\n```\n\nSet the current volume of an active FMOD channel. This should be used to handle\nchanges in the audio source volume, not for fading with distance. Values from 0\nto 1 are normal, above 1 can be used to artificially amplify a sound.\n\n### [XPLMSetAudioPitch](/sdk/XPLMSetAudioPitch/)\n\n```cpp\nXPLM_API FMOD_RESULT XPLMSetAudioPitch(\n                         FMOD_CHANNEL*        fmod_channel,\n                         float                audio_pitch_hz);\n\n```\n\nChange the current pitch of an active FMOD channel.\n\n### [XPLMSetAudioCone](/sdk/XPLMSetAudioCone/)\n\n```cpp\nXPLM_API FMOD_RESULT XPLMSetAudioCone(\n                         FMOD_CHANNEL*        fmod_channel,\n                         float                inside_angle,\n                         float                outside_angle,\n                         float                outside_volume,\n                         FMOD_VECTOR*         orientation);\n\n```\n\nSet a directional cone for an active FMOD channel. The orientation vector is in\nlocal coordinates. This will set the sound to 3D if it is not already.",
      "own_functions": [
        "XPLMGetFMODStudio",
        "XPLMGetFMODChannelGroup",
        "XPLMPlayPCMOnBus",
        "XPLMStopAudio",
        "XPLMSetAudioPosition",
        "XPLMSetAudioFadeDistance",
        "XPLMSetAudioVolume",
        "XPLMSetAudioPitch",
        "XPLMSetAudioCone",
        "XPLMAudioBus",
        "XPLMBankID",
        "FMOD_RESULTXPLMStopAudio",
        "FMOD_RESULTXPLMSetAudioPosition",
        "FMOD_RESULTXPLMSetAudioFadeDistance",
        "FMOD_RESULTXPLMSetAudioVolume",
        "FMOD_RESULTXPLMSetAudioPitch",
        "FMOD_RESULTXPLMSetAudioCone"
      ],
      "processing_timestamp": "2025-06-25T20:39:24.472483+00:00",
      "title": "XPLMSound | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMSound/"
    },
    "https://developer.x-plane.com/sdk/XPLMSpeakString/": {
      "api_signatures": [
        {
          "description": "This function displays the string in a translucent overlay over the current display and also speaks the string if text-to-speech is enabled. The string is spoken asynchronously, this function returns immediately. This function may not speak or print depending on user preferences.",
          "name": "XPLMSpeakString",
          "parameters": [
            {
              "full_declaration": "const char *         inString",
              "name": "inString",
              "type": "const char *"
            }
          ],
          "signature": "XPLM_API voidXPLMSpeakString(\n                         const char *         inString);"
        },
        {
          "name": "voidXPLMSpeakString",
          "signature": "XPLM_API voidXPLMSpeakString(\n                         const char *         inString);",
          "source": "code_block_extraction",
          "type": "function"
        }
      ],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/XPLMSpeakString/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPLMSpeakString\"><a href=\"/sdk/XPLMSpeakString/\">XPLMSpeakString</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API void       <a href=\"/sdk/XPLMSpeakString/\">XPLMSpeakString</a>(\n                         const char *         inString);\n</code></pre><p>This function displays the string in a translucent overlay over the current display and also speaks the string if text-to-speech is enabled. The string is spoken asynchronously, this function returns immediately. This function may not speak or print depending on user preferences.</p></div></div></article>",
      "code_examples": [
        {
          "char_count": 86,
          "code": "XPLM_API voidXPLMSpeakString(\n                         const char *         inString);",
          "context": "XPLMSpeakString",
          "id": "example_0",
          "language": "c",
          "line_count": 2,
          "type": "snippet"
        }
      ],
      "cross_references": [],
      "markdown": "### [XPLMSpeakString](/sdk/XPLMSpeakString/)\n\n```cpp\nXPLM_API void       XPLMSpeakString(\n                         const char *         inString);\n\n```\n\nThis function displays the string in a translucent overlay over the current\ndisplay and also speaks the string if text-to-speech is enabled. The string is\nspoken asynchronously, this function returns immediately. This function may not\nspeak or print depending on user preferences.",
      "own_functions": [
        "XPLMSpeakString",
        "voidXPLMSpeakString"
      ],
      "processing_timestamp": "2025-06-25T20:39:22.420030+00:00",
      "title": "XPLMSpeakString | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMSpeakString/"
    },
    "https://developer.x-plane.com/sdk/XPLMStopAudio/": {
      "api_signatures": [
        {
          "description": "Stop playing an active FMOD channel. If you defined a completion callback, this will be called. After this, the FMOD::Channel* will no longer be valid and must not be used in any future calls.",
          "name": "XPLMStopAudio",
          "parameters": [
            {
              "full_declaration": "FMOD_CHANNEL*        fmod_channel",
              "name": "fmod_channel",
              "type": "FMOD_CHANNEL*"
            }
          ],
          "signature": "XPLM_API FMOD_RESULTXPLMStopAudio(\n                         FMOD_CHANNEL*        fmod_channel);"
        },
        {
          "name": "FMOD_RESULTXPLMStopAudio",
          "signature": "XPLM_API FMOD_RESULTXPLMStopAudio(\n                         FMOD_CHANNEL*        fmod_channel);",
          "source": "code_block_extraction",
          "type": "function"
        }
      ],
      "category": {
        "category": "XPLM_Sound",
        "module": "Xplm Sound",
        "url": "https://developer.x-plane.com/sdk/XPLMStopAudio/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPLMStopAudio\"><a href=\"/sdk/XPLMStopAudio/\">XPLMStopAudio</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API FMOD_RESULT <a href=\"/sdk/XPLMStopAudio/\">XPLMStopAudio</a>(\n                         FMOD_CHANNEL*        fmod_channel);\n</code></pre><p>Stop playing an active FMOD channel. If you defined a completion callback, this will be called. After this, the FMOD::Channel* will no longer be valid and must not be used in any future calls.</p></div></div></article>",
      "code_examples": [
        {
          "char_count": 95,
          "code": "XPLM_API FMOD_RESULTXPLMStopAudio(\n                         FMOD_CHANNEL*        fmod_channel);",
          "context": "XPLMStopAudio",
          "id": "example_0",
          "language": "c",
          "line_count": 2,
          "type": "snippet"
        }
      ],
      "cross_references": [],
      "markdown": "### [XPLMStopAudio](/sdk/XPLMStopAudio/)\n\n```cpp\nXPLM_API FMOD_RESULT XPLMStopAudio(\n                         FMOD_CHANNEL*        fmod_channel);\n\n```\n\nStop playing an active FMOD channel. If you defined a completion callback, this\nwill be called. After this, the FMOD::Channel* will no longer be valid and must\nnot be used in any future calls.",
      "own_functions": [
        "XPLMStopAudio",
        "FMOD_RESULTXPLMStopAudio"
      ],
      "processing_timestamp": "2025-06-25T20:39:24.452933+00:00",
      "title": "XPLMStopAudio | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMStopAudio/"
    },
    "https://developer.x-plane.com/sdk/XPLMTakeAvionicsKeyboardFocus/": {
      "api_signatures": [
        {
          "description": "This routine gives keyboard focus to the popup window of a custom cockpit device, if it is visible.",
          "name": "XPLMTakeAvionicsKeyboardFocus",
          "parameters": [],
          "signature": "XPLM_API voidXPLMTakeAvionicsKeyboardFocus(XPLMAvionicsIDinHandle);"
        },
        {
          "name": "voidXPLMTakeAvionicsKeyboardFocus",
          "signature": "XPLM_API voidXPLMTakeAvionicsKeyboardFocus(XPLMAvionicsIDinHandle);",
          "source": "code_block_extraction",
          "type": "function"
        }
      ],
      "category": {
        "category": "XPLM_Utilities",
        "module": "Xplm Utilities",
        "url": "https://developer.x-plane.com/sdk/XPLMTakeAvionicsKeyboardFocus/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"function XPLM410\"><h3 class=\"sdk-api-function\" id=\"XPLMTakeAvionicsKeyboardFocus\"><a href=\"/sdk/XPLMTakeAvionicsKeyboardFocus/\">XPLMTakeAvionicsKeyboardFocus</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API void       <a href=\"/sdk/XPLMTakeAvionicsKeyboardFocus/\">XPLMTakeAvionicsKeyboardFocus</a>(\n                         <a href=\"/sdk/XPLMAvionicsID/\">XPLMAvionicsID</a>       inHandle);\n</code></pre><p>This routine gives keyboard focus to the popup window of a custom cockpit device, if it is visible.</p></div></div></article>",
      "code_examples": [
        {
          "char_count": 67,
          "code": "XPLM_API voidXPLMTakeAvionicsKeyboardFocus(XPLMAvionicsIDinHandle);",
          "context": "XPLMTakeAvionicsKeyboardFocus",
          "id": "example_0",
          "language": "c",
          "line_count": 1,
          "type": "snippet"
        }
      ],
      "cross_references": [],
      "markdown": "### [XPLMTakeAvionicsKeyboardFocus](/sdk/XPLMTakeAvionicsKeyboardFocus/)\n\n```cpp\nXPLM_API void       XPLMTakeAvionicsKeyboardFocus(\n                         XPLMAvionicsID       inHandle);\n\n```\n\nThis routine gives keyboard focus to the popup window of a custom cockpit\ndevice, if it is visible.",
      "own_functions": [
        "XPLMTakeAvionicsKeyboardFocus",
        "voidXPLMTakeAvionicsKeyboardFocus"
      ],
      "processing_timestamp": "2025-06-25T20:39:24.537746+00:00",
      "title": "XPLMTakeAvionicsKeyboardFocus | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMTakeAvionicsKeyboardFocus/"
    },
    "https://developer.x-plane.com/sdk/XPLMTakeKeyboardFocus/": {
      "api_signatures": [
        {
          "description": "This routine gives a specific window keyboard focus. Keystrokes will be sent to that window. Pass a window ID of 0 to remove keyboard focus from any plugin-created windows and instead pass keyboard strokes directly to X-Plane.",
          "name": "XPLMTakeKeyboardFocus",
          "parameters": [],
          "signature": "XPLM_API voidXPLMTakeKeyboardFocus(XPLMWindowIDinWindow);"
        },
        {
          "name": "voidXPLMTakeKeyboardFocus",
          "signature": "XPLM_API voidXPLMTakeKeyboardFocus(XPLMWindowIDinWindow);",
          "source": "code_block_extraction",
          "type": "function"
        }
      ],
      "category": {
        "category": "XPLM_Utilities",
        "module": "Xplm Utilities",
        "url": "https://developer.x-plane.com/sdk/XPLMTakeKeyboardFocus/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPLMTakeKeyboardFocus\"><a href=\"/sdk/XPLMTakeKeyboardFocus/\">XPLMTakeKeyboardFocus</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API void       <a href=\"/sdk/XPLMTakeKeyboardFocus/\">XPLMTakeKeyboardFocus</a>(\n                         <a href=\"/sdk/XPLMWindowID/\">XPLMWindowID</a>         inWindow);\n</code></pre><p>This routine gives a specific window keyboard focus. Keystrokes will be sent to that window. Pass a window ID of 0 to remove keyboard focus from any plugin-created windows and instead pass keyboard strokes directly to X-Plane.</p></div></div></article>",
      "code_examples": [
        {
          "char_count": 57,
          "code": "XPLM_API voidXPLMTakeKeyboardFocus(XPLMWindowIDinWindow);",
          "context": "XPLMTakeKeyboardFocus",
          "id": "example_0",
          "language": "c",
          "line_count": 1,
          "type": "snippet"
        }
      ],
      "cross_references": [],
      "markdown": "### [XPLMTakeKeyboardFocus](/sdk/XPLMTakeKeyboardFocus/)\n\n```cpp\nXPLM_API void       XPLMTakeKeyboardFocus(\n                         XPLMWindowID         inWindow);\n\n```\n\nThis routine gives a specific window keyboard focus. Keystrokes will be sent to\nthat window. Pass a window ID of 0 to remove keyboard focus from any\nplugin-created windows and instead pass keyboard strokes directly to X-Plane.",
      "own_functions": [
        "XPLMTakeKeyboardFocus",
        "voidXPLMTakeKeyboardFocus"
      ],
      "processing_timestamp": "2025-06-25T20:39:24.542748+00:00",
      "title": "XPLMTakeKeyboardFocus | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMTakeKeyboardFocus/"
    },
    "https://developer.x-plane.com/sdk/XPLMTextureID/": {
      "api_signatures": [
        {
          "name": "XPLMTextureID",
          "type": "enum",
          "values": [
            {
              "description": "The bitmap that contains window outlines, button outlines, fonts, etc.",
              "name": "xplm_Tex_GeneralInterface",
              "value": "\"0\""
            },
            {
              "description": "The exterior paint for the user's aircraft (daytime).",
              "name": "xplm_Tex_AircraftPaint",
              "value": "\"1\""
            },
            {
              "description": "The exterior light map for the user's aircraft.",
              "name": "xplm_Tex_AircraftLiteMap",
              "value": "\"2\""
            }
          ]
        }
      ],
      "category": {
        "category": "XPLM_Display",
        "module": "Xplm Display",
        "url": "https://developer.x-plane.com/sdk/XPLMTextureID/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enum\"><h3 class=\"sdk-api-enum\" id=\"XPLMTextureID\"><a href=\"/sdk/XPLMTextureID/\">XPLMTextureID</a></h3><p>XPLM Texture IDs name well-known textures in the sim for you to use. This allows you to recycle textures from X-Plane, saving VRAM.</p><p><em>Warning</em>: do not use these enums. The only remaining use they have is to access the legacy compatibility v10 UI texture; if you need this, get it via the Widgets library.</p><p><div class=\"enumitem\"><table><thead><tr><th>Name</th><th>Value</th><th>Description</th></tr></thead><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_Tex_GeneralInterface\"><a href=\"/sdk/xplm_Tex_GeneralInterface/\">xplm_Tex_GeneralInterface</a></td><td>\"0\"</td><td>The bitmap that contains window outlines, button outlines, fonts, etc.</td></tr><tr class=\"enumitem XPLM_DEPRECATED\"><td class=\"sdk-api-enum-item\" id=\"xplm_Tex_AircraftPaint\"><a href=\"/sdk/xplm_Tex_AircraftPaint/\">xplm_Tex_AircraftPaint</a></td><td>\"1\"</td><td>The exterior paint for the user's aircraft (daytime).</td></tr><tr class=\"enumitem XPLM_DEPRECATED\"><td class=\"sdk-api-enum-item\" id=\"xplm_Tex_AircraftLiteMap\"><a href=\"/sdk/xplm_Tex_AircraftLiteMap/\">xplm_Tex_AircraftLiteMap</a></td><td>\"2\"</td><td>The exterior light map for the user's aircraft.</td></tr></table></div></p></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "### [XPLMTextureID](/sdk/XPLMTextureID/)\n\nXPLM Texture IDs name well-known textures in the sim for you to use. This allows\nyou to recycle textures from X-Plane, saving VRAM.\n\n*Warning*: do not use these enums. The only remaining use they have is to access\nthe legacy compatibility v10 UI texture; if you need this, get it via the\nWidgets library.\n\n| Name | Value | Description |\n| --- | --- | --- |\n| [xplm_Tex_GeneralInterface](/sdk/xplm_Tex_GeneralInterface/) | \"0\" | The\nbitmap that contains window outlines, button outlines, fonts, etc. |\n| [xplm_Tex_AircraftPaint](/sdk/xplm_Tex_AircraftPaint/) | \"1\" | The exterior\npaint for the user's aircraft (daytime). |\n| [xplm_Tex_AircraftLiteMap](/sdk/xplm_Tex_AircraftLiteMap/) | \"2\" | The\nexterior light map for the user's aircraft. |",
      "own_functions": [
        "XPLMTextureID"
      ],
      "processing_timestamp": "2025-06-25T20:39:23.559858+00:00",
      "title": "XPLMTextureID | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMTextureID/"
    },
    "https://developer.x-plane.com/sdk/XPLMUnloadObject/": {
      "api_signatures": [
        {
          "description": "This routine marks an object as no longer being used by your plugin. Objects are reference counted: once no plugins are using an object, it is purged from memory. Make sure to callXPLMUnloadObjectonce for each successful call toXPLMLoadObject.",
          "name": "XPLMUnloadObject",
          "parameters": [],
          "signature": "XPLM_API voidXPLMUnloadObject(XPLMObjectRefinObject);"
        },
        {
          "name": "voidXPLMUnloadObject",
          "signature": "XPLM_API voidXPLMUnloadObject(XPLMObjectRefinObject);",
          "source": "code_block_extraction",
          "type": "function"
        }
      ],
      "category": {
        "category": "XPLM_Instance",
        "module": "Xplm Instance",
        "url": "https://developer.x-plane.com/sdk/XPLMUnloadObject/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"function XPLM200\"><h3 class=\"sdk-api-function\" id=\"XPLMUnloadObject\"><a href=\"/sdk/XPLMUnloadObject/\">XPLMUnloadObject</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API void       <a href=\"/sdk/XPLMUnloadObject/\">XPLMUnloadObject</a>(\n                         <a href=\"/sdk/XPLMObjectRef/\">XPLMObjectRef</a>        inObject);\n</code></pre><p>This routine marks an object as no longer being used by your plugin. Objects are reference counted: once no plugins are using an object, it is purged from memory. Make sure to call<a href=\"/sdk/XPLMUnloadObject/\">XPLMUnloadObject</a>once for each successful call to<a href=\"/sdk/XPLMLoadObject/\">XPLMLoadObject</a>.</p></div></div></article>",
      "code_examples": [
        {
          "char_count": 53,
          "code": "XPLM_API voidXPLMUnloadObject(XPLMObjectRefinObject);",
          "context": "XPLMUnloadObject",
          "id": "example_0",
          "language": "c",
          "line_count": 1,
          "type": "snippet"
        }
      ],
      "cross_references": [
        "XPLMLoadObject"
      ],
      "markdown": "### [XPLMUnloadObject](/sdk/XPLMUnloadObject/)\n\n```cpp\nXPLM_API void       XPLMUnloadObject(\n                         XPLMObjectRef        inObject);\n\n```\n\nThis routine marks an object as no longer being used by your plugin. Objects are\nreference counted: once no plugins are using an object, it is purged from\nmemory. Make sure to call[XPLMUnloadObject](/sdk/XPLMUnloadObject/)once for each\nsuccessful call to[XPLMLoadObject](/sdk/XPLMLoadObject/).",
      "own_functions": [
        "XPLMUnloadObject",
        "voidXPLMUnloadObject"
      ],
      "processing_timestamp": "2025-06-25T20:39:23.751414+00:00",
      "title": "XPLMUnloadObject | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMUnloadObject/"
    },
    "https://developer.x-plane.com/sdk/XPLMUnregisterAvionicsCallbacks/": {
      "api_signatures": [
        {
          "description": "This routine unregisters your callbacks for a built-in device. You should only call this for handles you acquired fromXPLMRegisterAvionicsCallbacksEx(). They will no longer be called.",
          "name": "XPLMUnregisterAvionicsCallbacks",
          "parameters": [],
          "signature": "XPLM_API voidXPLMUnregisterAvionicsCallbacks(XPLMAvionicsIDinAvionicsId);"
        },
        {
          "name": "voidXPLMUnregisterAvionicsCallbacks",
          "signature": "XPLM_API voidXPLMUnregisterAvionicsCallbacks(XPLMAvionicsIDinAvionicsId);",
          "source": "code_block_extraction",
          "type": "function"
        }
      ],
      "category": {
        "category": "XPLM_Processing",
        "module": "Xplm Processing",
        "url": "https://developer.x-plane.com/sdk/XPLMUnregisterAvionicsCallbacks/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPLMUnregisterAvionicsCallbacks\"><a href=\"/sdk/XPLMUnregisterAvionicsCallbacks/\">XPLMUnregisterAvionicsCallbacks</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API void       <a href=\"/sdk/XPLMUnregisterAvionicsCallbacks/\">XPLMUnregisterAvionicsCallbacks</a>(\n                         <a href=\"/sdk/XPLMAvionicsID/\">XPLMAvionicsID</a>       inAvionicsId);\n</code></pre><p>This routine unregisters your callbacks for a built-in device. You should only call this for handles you acquired from<a href=\"/sdk/XPLMRegisterAvionicsCallbacksEx/\">XPLMRegisterAvionicsCallbacksEx</a>(). They will no longer be called.</p></div></div></article>",
      "code_examples": [
        {
          "char_count": 73,
          "code": "XPLM_API voidXPLMUnregisterAvionicsCallbacks(XPLMAvionicsIDinAvionicsId);",
          "context": "XPLMUnregisterAvionicsCallbacks",
          "id": "example_0",
          "language": "c",
          "line_count": 1,
          "type": "snippet"
        }
      ],
      "cross_references": [
        "XPLMRegisterAvionicsCallbacksEx"
      ],
      "markdown": "### [XPLMUnregisterAvionicsCallbacks](/sdk/XPLMUnregisterAvionicsCallbacks/)\n\n```cpp\nXPLM_API void       XPLMUnregisterAvionicsCallbacks(\n                         XPLMAvionicsID       inAvionicsId);\n\n```\n\nThis routine unregisters your callbacks for a built-in device. You should only\ncall this for handles you acquired\nfrom[XPLMRegisterAvionicsCallbacksEx](/sdk/XPLMRegisterAvionicsCallbacksEx/)().\nThey will no longer be called.",
      "own_functions": [
        "XPLMUnregisterAvionicsCallbacks",
        "voidXPLMUnregisterAvionicsCallbacks"
      ],
      "processing_timestamp": "2025-06-25T20:39:24.366962+00:00",
      "title": "XPLMUnregisterAvionicsCallbacks | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMUnregisterAvionicsCallbacks/"
    },
    "https://developer.x-plane.com/sdk/XPLMUnregisterCommandHandler/": {
      "api_signatures": [
        {
          "description": "XPLMUnregisterCommandHandlerremoves a command callback registered withXPLMRegisterCommandHandler.",
          "name": "XPLMUnregisterCommandHandler",
          "parameters": [
            {
              "full_declaration": "int                  inBefore",
              "name": "inBefore",
              "type": "int"
            },
            {
              "full_declaration": "void *               inRefcon",
              "name": "inRefcon",
              "type": "void *"
            }
          ],
          "signature": "XPLM_API voidXPLMUnregisterCommandHandler(XPLMCommandRefinComand,XPLMCommandCallback_finHandler,\n                         int                  inBefore,\n                         void *               inRefcon);"
        },
        {
          "name": "voidXPLMUnregisterCommandHandler",
          "signature": "XPLM_API voidXPLMUnregisterCommandHandler(XPLMCommandRefinComand,XPLMCommandCallback_finHandler,\n                         int                  inBefore,\n                         void *               inRefcon);",
          "source": "code_block_extraction",
          "type": "function"
        }
      ],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/XPLMUnregisterCommandHandler/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPLMUnregisterCommandHandler\"><a href=\"/sdk/XPLMUnregisterCommandHandler/\">XPLMUnregisterCommandHandler</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API void       <a href=\"/sdk/XPLMUnregisterCommandHandler/\">XPLMUnregisterCommandHandler</a>(\n                         <a href=\"/sdk/XPLMCommandRef/\">XPLMCommandRef</a>       inComand,\n                         <a href=\"/sdk/XPLMCommandCallback_f/\">XPLMCommandCallback_f</a> inHandler,\n                         int                  inBefore,\n                         void *               inRefcon);\n</code></pre><p><a href=\"/sdk/XPLMUnregisterCommandHandler/\">XPLMUnregisterCommandHandler</a>removes a command callback registered with<a href=\"/sdk/XPLMRegisterCommandHandler/\">XPLMRegisterCommandHandler</a>.</p></div></div></article>",
      "code_examples": [
        {
          "char_count": 209,
          "code": "XPLM_API voidXPLMUnregisterCommandHandler(XPLMCommandRefinComand,XPLMCommandCallback_finHandler,\n                         int                  inBefore,\n                         void *               inRefcon);",
          "context": "XPLMUnregisterCommandHandler",
          "id": "example_0",
          "language": "c",
          "line_count": 3,
          "type": "snippet"
        }
      ],
      "cross_references": [
        "XPLMRegisterCommandHandler"
      ],
      "markdown": "### [XPLMUnregisterCommandHandler](/sdk/XPLMUnregisterCommandHandler/)\n\n```cpp\nXPLM_API void       XPLMUnregisterCommandHandler(\n                         XPLMCommandRef       inComand,\n                         XPLMCommandCallback_f inHandler,\n                         int                  inBefore,\n                         void *               inRefcon);\n\n```\n\n[XPLMUnregisterCommandHandler](/sdk/XPLMUnregisterCommandHandler/)removes a\ncommand callback registered\nwith[XPLMRegisterCommandHandler](/sdk/XPLMRegisterCommandHandler/).",
      "own_functions": [
        "XPLMUnregisterCommandHandler",
        "voidXPLMUnregisterCommandHandler"
      ],
      "processing_timestamp": "2025-06-25T20:39:22.422030+00:00",
      "title": "XPLMUnregisterCommandHandler | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMUnregisterCommandHandler/"
    },
    "https://developer.x-plane.com/sdk/XPLMUnregisterDataAccessor/": {
      "api_signatures": [
        {
          "description": "Use this routine to unregister any data accessors you may have registered. You unregister a dataref by theXPLMDataRefyou get back from registration. Once you unregister a dataref, your function pointer will not be called anymore.",
          "name": "XPLMUnregisterDataAccessor",
          "parameters": [],
          "signature": "XPLM_API voidXPLMUnregisterDataAccessor(XPLMDataRefinDataRef);"
        },
        {
          "name": "voidXPLMUnregisterDataAccessor",
          "signature": "XPLM_API voidXPLMUnregisterDataAccessor(XPLMDataRefinDataRef);",
          "source": "code_block_extraction",
          "type": "function"
        }
      ],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/XPLMUnregisterDataAccessor/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPLMUnregisterDataAccessor\"><a href=\"/sdk/XPLMUnregisterDataAccessor/\">XPLMUnregisterDataAccessor</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API void       <a href=\"/sdk/XPLMUnregisterDataAccessor/\">XPLMUnregisterDataAccessor</a>(\n                         <a href=\"/sdk/XPLMDataRef/\">XPLMDataRef</a>          inDataRef);\n</code></pre><p>Use this routine to unregister any data accessors you may have registered. You unregister a dataref by the<a href=\"/sdk/XPLMDataRef/\">XPLMDataRef</a>you get back from registration. Once you unregister a dataref, your function pointer will not be called anymore.</p></div></div></article>",
      "code_examples": [
        {
          "char_count": 62,
          "code": "XPLM_API voidXPLMUnregisterDataAccessor(XPLMDataRefinDataRef);",
          "context": "XPLMUnregisterDataAccessor",
          "id": "example_0",
          "language": "c",
          "line_count": 1,
          "type": "snippet"
        }
      ],
      "cross_references": [],
      "markdown": "### [XPLMUnregisterDataAccessor](/sdk/XPLMUnregisterDataAccessor/)\n\n```cpp\nXPLM_API void       XPLMUnregisterDataAccessor(\n                         XPLMDataRef          inDataRef);\n\n```\n\nUse this routine to unregister any data accessors you may have registered. You\nunregister a dataref by the[XPLMDataRef](/sdk/XPLMDataRef/)you get back from\nregistration. Once you unregister a dataref, your function pointer will not be\ncalled anymore.",
      "own_functions": [
        "XPLMUnregisterDataAccessor",
        "voidXPLMUnregisterDataAccessor"
      ],
      "processing_timestamp": "2025-06-25T20:39:22.424030+00:00",
      "title": "XPLMUnregisterDataAccessor | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMUnregisterDataAccessor/"
    },
    "https://developer.x-plane.com/sdk/XPLMUnregisterDrawCallback/": {
      "api_signatures": [
        {
          "description": "This routine unregisters a draw callback. You must unregister a callback for each time you register a callback if you have registered it multiple times with different refcons. The routine returns 1 if it can find the callback to unregister, 0 otherwise.",
          "name": "XPLMUnregisterDrawCallback",
          "parameters": [
            {
              "full_declaration": "int                  inWantsBefore",
              "name": "inWantsBefore",
              "type": "int"
            },
            {
              "full_declaration": "void *               inRefcon",
              "name": "inRefcon",
              "type": "void *"
            }
          ],
          "signature": "XPLM_API intXPLMUnregisterDrawCallback(XPLMDrawCallback_finCallback,XPLMDrawingPhaseinPhase,\n                         int                  inWantsBefore,\n                         void *               inRefcon);"
        },
        {
          "name": "intXPLMUnregisterDrawCallback",
          "signature": "XPLM_API intXPLMUnregisterDrawCallback(XPLMDrawCallback_finCallback,XPLMDrawingPhaseinPhase,\n                         int                  inWantsBefore,\n                         void *               inRefcon);",
          "source": "code_block_extraction",
          "type": "function"
        }
      ],
      "category": {
        "category": "XPLM_Display",
        "module": "Xplm Display",
        "url": "https://developer.x-plane.com/sdk/XPLMUnregisterDrawCallback/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPLMUnregisterDrawCallback\"><a href=\"/sdk/XPLMUnregisterDrawCallback/\">XPLMUnregisterDrawCallback</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API int        <a href=\"/sdk/XPLMUnregisterDrawCallback/\">XPLMUnregisterDrawCallback</a>(\n                         <a href=\"/sdk/XPLMDrawCallback_f/\">XPLMDrawCallback_f</a>   inCallback,\n                         <a href=\"/sdk/XPLMDrawingPhase/\">XPLMDrawingPhase</a>     inPhase,\n                         int                  inWantsBefore,\n                         void *               inRefcon);\n</code></pre><p>This routine unregisters a draw callback. You must unregister a callback for each time you register a callback if you have registered it multiple times with different refcons. The routine returns 1 if it can find the callback to unregister, 0 otherwise.</p><p>Note that this function will likely be removed during the X-Plane 11 run as part of the transition to Vulkan/Metal/etc. See the<a href=\"/sdk/XPLMInstance/\">XPLMInstance</a>API for future-proof drawing of 3-D objects.</p></div></div></article>",
      "code_examples": [
        {
          "char_count": 210,
          "code": "XPLM_API intXPLMUnregisterDrawCallback(XPLMDrawCallback_finCallback,XPLMDrawingPhaseinPhase,\n                         int                  inWantsBefore,\n                         void *               inRefcon);",
          "context": "XPLMUnregisterDrawCallback",
          "id": "example_0",
          "language": "c",
          "line_count": 3,
          "type": "snippet"
        }
      ],
      "cross_references": [
        "XPLMInstance",
        "XPLMDrawingPhase"
      ],
      "markdown": "### [XPLMUnregisterDrawCallback](/sdk/XPLMUnregisterDrawCallback/)\n\n```cpp\nXPLM_API int        XPLMUnregisterDrawCallback(\n                         XPLMDrawCallback_f   inCallback,\n                         XPLMDrawingPhase     inPhase,\n                         int                  inWantsBefore,\n                         void *               inRefcon);\n\n```\n\nThis routine unregisters a draw callback. You must unregister a callback for\neach time you register a callback if you have registered it multiple times with\ndifferent refcons. The routine returns 1 if it can find the callback to\nunregister, 0 otherwise.\n\nNote that this function will likely be removed during the X-Plane 11 run as part\nof the transition to Vulkan/Metal/etc. See\nthe[XPLMInstance](/sdk/XPLMInstance/)API for future-proof drawing of 3-D\nobjects.",
      "own_functions": [
        "XPLMUnregisterDrawCallback",
        "intXPLMUnregisterDrawCallback"
      ],
      "processing_timestamp": "2025-06-25T20:39:23.561860+00:00",
      "title": "XPLMUnregisterDrawCallback | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMUnregisterDrawCallback/"
    },
    "https://developer.x-plane.com/sdk/XPLMUnregisterFlightLoopCallback/": {
      "api_signatures": [
        {
          "description": "This routine unregisters your flight loop callback. Do NOT call it from your flight loop callback. Once your flight loop callback is unregistered, it will not be called again.",
          "name": "XPLMUnregisterFlightLoopCallback",
          "parameters": [
            {
              "full_declaration": "void *               inRefcon",
              "name": "inRefcon",
              "type": "void *"
            }
          ],
          "signature": "XPLM_API voidXPLMUnregisterFlightLoopCallback(XPLMFlightLoop_finFlightLoop,\n                         void *               inRefcon);"
        },
        {
          "name": "voidXPLMUnregisterFlightLoopCallback",
          "signature": "XPLM_API voidXPLMUnregisterFlightLoopCallback(XPLMFlightLoop_finFlightLoop,\n                         void *               inRefcon);",
          "source": "code_block_extraction",
          "type": "function"
        }
      ],
      "category": {
        "category": "XPLM_Processing",
        "module": "Xplm Processing",
        "url": "https://developer.x-plane.com/sdk/XPLMUnregisterFlightLoopCallback/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPLMUnregisterFlightLoopCallback\"><a href=\"/sdk/XPLMUnregisterFlightLoopCallback/\">XPLMUnregisterFlightLoopCallback</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API void       <a href=\"/sdk/XPLMUnregisterFlightLoopCallback/\">XPLMUnregisterFlightLoopCallback</a>(\n                         <a href=\"/sdk/XPLMFlightLoop_f/\">XPLMFlightLoop_f</a>     inFlightLoop,\n                         void *               inRefcon);\n</code></pre><p>This routine unregisters your flight loop callback. Do NOT call it from your flight loop callback. Once your flight loop callback is unregistered, it will not be called again.</p><p>Only use this on flight loops registered via<a href=\"/sdk/XPLMRegisterFlightLoopCallback/\">XPLMRegisterFlightLoopCallback</a>.</p></div></div></article>",
      "code_examples": [
        {
          "char_count": 132,
          "code": "XPLM_API voidXPLMUnregisterFlightLoopCallback(XPLMFlightLoop_finFlightLoop,\n                         void *               inRefcon);",
          "context": "XPLMUnregisterFlightLoopCallback",
          "id": "example_0",
          "language": "c",
          "line_count": 2,
          "type": "snippet"
        }
      ],
      "cross_references": [
        "XPLMRegisterFlightLoopCallback"
      ],
      "markdown": "### [XPLMUnregisterFlightLoopCallback](/sdk/XPLMUnregisterFlightLoopCallback/)\n\n```cpp\nXPLM_API void       XPLMUnregisterFlightLoopCallback(\n                         XPLMFlightLoop_f     inFlightLoop,\n                         void *               inRefcon);\n\n```\n\nThis routine unregisters your flight loop callback. Do NOT call it from your\nflight loop callback. Once your flight loop callback is unregistered, it will\nnot be called again.\n\nOnly use this on flight loops registered\nvia[XPLMRegisterFlightLoopCallback](/sdk/XPLMRegisterFlightLoopCallback/).",
      "own_functions": [
        "XPLMUnregisterFlightLoopCallback",
        "voidXPLMUnregisterFlightLoopCallback"
      ],
      "processing_timestamp": "2025-06-25T20:39:24.369043+00:00",
      "title": "XPLMUnregisterFlightLoopCallback | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMUnregisterFlightLoopCallback/"
    },
    "https://developer.x-plane.com/sdk/XPLMUnregisterHotKey/": {
      "api_signatures": [
        {
          "description": "Unregisters a hot key. You can only unregister your own hot keys.",
          "name": "XPLMUnregisterHotKey",
          "parameters": [],
          "signature": "XPLM_API voidXPLMUnregisterHotKey(XPLMHotKeyIDinHotKey);"
        },
        {
          "name": "voidXPLMUnregisterHotKey",
          "signature": "XPLM_API voidXPLMUnregisterHotKey(XPLMHotKeyIDinHotKey);",
          "source": "code_block_extraction",
          "type": "function"
        }
      ],
      "category": {
        "category": "XPLM_Utilities",
        "module": "Xplm Utilities",
        "url": "https://developer.x-plane.com/sdk/XPLMUnregisterHotKey/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPLMUnregisterHotKey\"><a href=\"/sdk/XPLMUnregisterHotKey/\">XPLMUnregisterHotKey</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API void       <a href=\"/sdk/XPLMUnregisterHotKey/\">XPLMUnregisterHotKey</a>(\n                         <a href=\"/sdk/XPLMHotKeyID/\">XPLMHotKeyID</a>         inHotKey);\n</code></pre><p>Unregisters a hot key. You can only unregister your own hot keys.</p></div></div></article>",
      "code_examples": [
        {
          "char_count": 56,
          "code": "XPLM_API voidXPLMUnregisterHotKey(XPLMHotKeyIDinHotKey);",
          "context": "XPLMUnregisterHotKey",
          "id": "example_0",
          "language": "c",
          "line_count": 1,
          "type": "snippet"
        }
      ],
      "cross_references": [],
      "markdown": "### [XPLMUnregisterHotKey](/sdk/XPLMUnregisterHotKey/)\n\n```cpp\nXPLM_API void       XPLMUnregisterHotKey(\n                         XPLMHotKeyID         inHotKey);\n\n```\n\nUnregisters a hot key. You can only unregister your own hot keys.",
      "own_functions": [
        "XPLMUnregisterHotKey",
        "voidXPLMUnregisterHotKey"
      ],
      "processing_timestamp": "2025-06-25T20:39:24.543748+00:00",
      "title": "XPLMUnregisterHotKey | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMUnregisterHotKey/"
    },
    "https://developer.x-plane.com/sdk/XPLMUnregisterKeySniffer/": {
      "api_signatures": [
        {
          "description": "This routine unregisters a key sniffer. You must unregister a key sniffer for every time you register one with the exact same signature. Returns 1 if successful.",
          "name": "XPLMUnregisterKeySniffer",
          "parameters": [
            {
              "full_declaration": "int                  inBeforeWindows",
              "name": "inBeforeWindows",
              "type": "int"
            },
            {
              "full_declaration": "void *               inRefcon",
              "name": "inRefcon",
              "type": "void *"
            }
          ],
          "signature": "XPLM_API intXPLMUnregisterKeySniffer(XPLMKeySniffer_finCallback,\n                         int                  inBeforeWindows,\n                         void *               inRefcon);"
        },
        {
          "name": "intXPLMUnregisterKeySniffer",
          "signature": "XPLM_API intXPLMUnregisterKeySniffer(XPLMKeySniffer_finCallback,\n                         int                  inBeforeWindows,\n                         void *               inRefcon);",
          "source": "code_block_extraction",
          "type": "function"
        }
      ],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/XPLMUnregisterKeySniffer/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPLMUnregisterKeySniffer\"><a href=\"/sdk/XPLMUnregisterKeySniffer/\">XPLMUnregisterKeySniffer</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API int        <a href=\"/sdk/XPLMUnregisterKeySniffer/\">XPLMUnregisterKeySniffer</a>(\n                         <a href=\"/sdk/XPLMKeySniffer_f/\">XPLMKeySniffer_f</a>     inCallback,\n                         int                  inBeforeWindows,\n                         void *               inRefcon);\n</code></pre><p>This routine unregisters a key sniffer. You must unregister a key sniffer for every time you register one with the exact same signature. Returns 1 if successful.</p></div></div></article>",
      "code_examples": [
        {
          "char_count": 184,
          "code": "XPLM_API intXPLMUnregisterKeySniffer(XPLMKeySniffer_finCallback,\n                         int                  inBeforeWindows,\n                         void *               inRefcon);",
          "context": "XPLMUnregisterKeySniffer",
          "id": "example_0",
          "language": "c",
          "line_count": 3,
          "type": "snippet"
        }
      ],
      "cross_references": [],
      "markdown": "### [XPLMUnregisterKeySniffer](/sdk/XPLMUnregisterKeySniffer/)\n\n```cpp\nXPLM_API int        XPLMUnregisterKeySniffer(\n                         XPLMKeySniffer_f     inCallback,\n                         int                  inBeforeWindows,\n                         void *               inRefcon);\n\n```\n\nThis routine unregisters a key sniffer. You must unregister a key sniffer for\nevery time you register one with the exact same signature. Returns 1 if\nsuccessful.",
      "own_functions": [
        "XPLMUnregisterKeySniffer",
        "intXPLMUnregisterKeySniffer"
      ],
      "processing_timestamp": "2025-06-25T20:39:22.426030+00:00",
      "title": "XPLMUnregisterKeySniffer | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMUnregisterKeySniffer/"
    },
    "https://developer.x-plane.com/sdk/XPLMUnshareData/": {
      "api_signatures": [
        {
          "description": "This routine removes your notification function for shared data. Call it when done with the data to stop receiving change notifications. Arguments must matchXPLMShareData. The actual memory will not necessarily be freed, since other plug-ins could be using it.",
          "name": "XPLMUnshareData",
          "parameters": [
            {
              "full_declaration": "const char *         inDataName",
              "name": "inDataName",
              "type": "const char *"
            },
            {
              "full_declaration": "void *               inNotificationRefcon",
              "name": "inNotificationRefcon",
              "type": "void *"
            }
          ],
          "signature": "XPLM_API intXPLMUnshareData(\n                         const char *         inDataName,XPLMDataTypeIDinDataType,XPLMDataChanged_finNotificationFunc,\n                         void *               inNotificationRefcon);"
        },
        {
          "name": "intXPLMUnshareData",
          "signature": "XPLM_API intXPLMUnshareData(\n                         const char *         inDataName,XPLMDataTypeIDinDataType,XPLMDataChanged_finNotificationFunc,\n                         void *               inNotificationRefcon);",
          "source": "code_block_extraction",
          "type": "function"
        }
      ],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/XPLMUnshareData/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPLMUnshareData\"><a href=\"/sdk/XPLMUnshareData/\">XPLMUnshareData</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API int        <a href=\"/sdk/XPLMUnshareData/\">XPLMUnshareData</a>(\n                         const char *         inDataName,\n                         <a href=\"/sdk/XPLMDataTypeID/\">XPLMDataTypeID</a>       inDataType,\n                         <a href=\"/sdk/XPLMDataChanged_f/\">XPLMDataChanged_f</a>    inNotificationFunc,\n                         void *               inNotificationRefcon);\n</code></pre><p>This routine removes your notification function for shared data. Call it when done with the data to stop receiving change notifications. Arguments must match<a href=\"/sdk/XPLMShareData/\">XPLMShareData</a>. The actual memory will not necessarily be freed, since other plug-ins could be using it.</p></div></div></article>",
      "code_examples": [
        {
          "char_count": 216,
          "code": "XPLM_API intXPLMUnshareData(\n                         const char *         inDataName,XPLMDataTypeIDinDataType,XPLMDataChanged_finNotificationFunc,\n                         void *               inNotificationRefcon);",
          "context": "XPLMUnshareData",
          "id": "example_0",
          "language": "c",
          "line_count": 3,
          "type": "snippet"
        }
      ],
      "cross_references": [
        "XPLMDataTypeID",
        "XPLMShareData"
      ],
      "markdown": "### [XPLMUnshareData](/sdk/XPLMUnshareData/)\n\n```cpp\nXPLM_API int        XPLMUnshareData(\n                         const char *         inDataName,\n                         XPLMDataTypeID       inDataType,\n                         XPLMDataChanged_f    inNotificationFunc,\n                         void *               inNotificationRefcon);\n\n```\n\nThis routine removes your notification function for shared data. Call it when\ndone with the data to stop receiving change notifications. Arguments must\nmatch[XPLMShareData](/sdk/XPLMShareData/). The actual memory will not\nnecessarily be freed, since other plug-ins could be using it.",
      "own_functions": [
        "XPLMUnshareData",
        "intXPLMUnshareData"
      ],
      "processing_timestamp": "2025-06-25T20:39:22.433031+00:00",
      "title": "XPLMUnshareData | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMUnshareData/"
    },
    "https://developer.x-plane.com/sdk/XPLMWeather/": {
      "api_signatures": [
        {
          "description": "Get the last-downloaded METAR report for an airport by ICAO code. Note that the actual weather at that airport may have evolved significantly since the last downloaded METAR. outMETAR must point to a char buffer of at least 150 characters. This call is not intended to be used per-frame. This call does not return the current weather at the airport, and returns an empty string if the system is not in real-weather mode.",
          "name": "XPLMGetMETARForAirport",
          "parameters": [
            {
              "full_declaration": "const char *         airport_id",
              "name": "airport_id",
              "type": "const char *"
            },
            {
              "full_declaration": "XPLMFixedString150_t* outMETAR",
              "name": "outMETAR",
              "type": "XPLMFixedString150_t*"
            }
          ],
          "signature": "XPLM_API voidXPLMGetMETARForAirport(\n                         const char *         airport_id,XPLMFixedString150_t* outMETAR);"
        },
        {
          "description": "Get the current weather conditions at a given location. Note that this does not work world-wide, only within the surrounding region. Return 1 if detailed weather (i.e. an airport-specific METAR) was found, 0 if not. In both cases, the structure will contain the best data available. This call is not intended to be used per-frame.",
          "name": "XPLMGetWeatherAtLocation",
          "parameters": [
            {
              "full_declaration": "double               latitude",
              "name": "latitude",
              "type": "double"
            },
            {
              "full_declaration": "double               longitude",
              "name": "longitude",
              "type": "double"
            },
            {
              "full_declaration": "double               altitude_m",
              "name": "altitude_m",
              "type": "double"
            },
            {
              "full_declaration": "XPLMWeatherInfo_t*  out_info",
              "name": "out_info",
              "type": "XPLMWeatherInfo_t*"
            }
          ],
          "signature": "XPLM_API intXPLMGetWeatherAtLocation(\n                         double               latitude,\n                         double               longitude,\n                         double               altitude_m,XPLMWeatherInfo_t*  out_info);"
        },
        {
          "name": "voidXPLMGetMETARForAirport",
          "signature": "XPLM_API voidXPLMGetMETARForAirport(\n                         const char *         airport_id,XPLMFixedString150_t* outMETAR);",
          "source": "code_block_extraction",
          "type": "function"
        },
        {
          "name": "intXPLMGetWeatherAtLocation",
          "signature": "XPLM_API intXPLMGetWeatherAtLocation(\n                         double               latitude,\n                         double               longitude,\n                         double               altitude_m,XPLMWeatherInfo_t*  out_info);",
          "source": "code_block_extraction",
          "type": "function"
        }
      ],
      "category": {
        "category": "XPLM_Navigation",
        "module": "Xplm Navigation",
        "url": "https://developer.x-plane.com/sdk/XPLMWeather/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"api\"><h1 class=\"sdk-api-title\" id=\"XPLMWeather\"><a href=\"/sdk/XPLMWeather/\">XPLMWeather</a>API</h1><p>This provides access to the X-Plane 12 enhanced weather system.</p><div class=\"component\"><h2 id=\"WEATHER ACCESS\">WEATHER ACCESS</h2><div class=\"struct\"><h3 class=\"sdk-api-struct\" id=\"XPLMWeatherInfoWinds_t\"><a href=\"/sdk/XPLMWeatherInfoWinds_t/\">XPLMWeatherInfoWinds_t</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>typedef struct {\n     // Altitude MSL, meters\n     float                     alt_msl;\n     // Wind speed, meters/sec\n     float                     speed;\n     // Direction (true)\n     float                     direction;\n     // Gust speed, meters/sec\n     float                     gust_speed;\n     // Shear arc, degrees i.e. 50% of this arc in either direction from base\n     float                     shear;\n     // Clear-air turbulence ratio\n     float                     turbulence;\n} <a href=\"/sdk/XPLMWeatherInfoWinds_t/\">XPLMWeatherInfoWinds_t</a>;</code></pre></div><div class=\"struct\"><h3 class=\"sdk-api-struct\" id=\"XPLMWeatherInfoClouds_t\"><a href=\"/sdk/XPLMWeatherInfoClouds_t/\">XPLMWeatherInfoClouds_t</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>typedef struct {\n     // Cloud type, float enum\n     float                     cloud_type;\n     // Coverage ratio\n     float                     coverage;\n     // Altitude MSL, meters\n     float                     alt_top;\n     // Altitude MSL, meters\n     float                     alt_base;\n} <a href=\"/sdk/XPLMWeatherInfoClouds_t/\">XPLMWeatherInfoClouds_t</a>;</code></pre></div><div class=\"struct\"><h3 class=\"sdk-api-struct\" id=\"XPLMWeatherInfo_t\"><a href=\"/sdk/XPLMWeatherInfo_t/\">XPLMWeatherInfo_t</a></h3><p>Basic weather conditions at a specific point.</p><pre class=\"language-cpp\" data-manual=\"true\"><code>typedef struct {\n     // The size of the struct.\n     int                       structSize;\n     // Temperature at the given altitude in Celsius\n     float                     temperature_alt;\n     // Dewpoint at the given altitude in Celsius\n     float                     dewpoint_alt;\n     // Pressure at the given altitude in Pascals\n     float                     pressure_alt;\n     // Precipitation rate at the given altitude\n     float                     precip_rate_alt;\n     // Wind direction at the given altitude\n     float                     wind_dir_alt;\n     // Wind speed at the given altitude, meters/sec\n     float                     wind_spd_alt;\n     // Turbulence ratio at the given altitude\n     float                     turbulence_alt;\n     // Height of water waves in meters\n     float                     wave_height;\n     // Length of water waves in meters\n     float                     wave_length;\n     // Direction from which water waves are coming\n     int                       wave_dir;\n     // Speed of wave advance in meters/sec\n     float                     wave_speed;\n     // Base visibility at 0 altitude, meters\n     float                     visibility;\n     // Base precipitation ratio at 0 altitude\n     float                     precip_rate;\n     // Climb rate due to thermals, meters/sec\n     float                     thermal_climb;\n     // Pressure at 0 altitude in Pascals\n     float                     pressure_sl;\n     // Defined wind layers. Not all layers are always defined.\n     <a href=\"/sdk/XPLMWeatherInfoWinds_t/\">XPLMWeatherInfoWinds_t</a>    wind_layers[13];\n     // Defined cloud layers. Not all layers are always defined.\n     <a href=\"/sdk/XPLMWeatherInfoClouds_t/\">XPLMWeatherInfoClouds_t</a>   cloud_layers[3];\n} <a href=\"/sdk/XPLMWeatherInfo_t/\">XPLMWeatherInfo_t</a>;</code></pre></div><div class=\"function XPLM400\"><h3 class=\"sdk-api-function\" id=\"XPLMGetMETARForAirport\"><a href=\"/sdk/XPLMGetMETARForAirport/\">XPLMGetMETARForAirport</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API void       <a href=\"/sdk/XPLMGetMETARForAirport/\">XPLMGetMETARForAirport</a>(\n                         const char *         airport_id,\n                         <a href=\"/sdk/XPLMFixedString150_t/\">XPLMFixedString150_t</a> * outMETAR);\n</code></pre><p>Get the last-downloaded METAR report for an airport by ICAO code. Note that the actual weather at that airport may have evolved significantly since the last downloaded METAR. outMETAR must point to a char buffer of at least 150 characters. This call is not intended to be used per-frame. This call does not return the current weather at the airport, and returns an empty string if the system is not in real-weather mode.</p></div><div class=\"function XPLM400\"><h3 class=\"sdk-api-function\" id=\"XPLMGetWeatherAtLocation\"><a href=\"/sdk/XPLMGetWeatherAtLocation/\">XPLMGetWeatherAtLocation</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API int        <a href=\"/sdk/XPLMGetWeatherAtLocation/\">XPLMGetWeatherAtLocation</a>(\n                         double               latitude,\n                         double               longitude,\n                         double               altitude_m,\n                         <a href=\"/sdk/XPLMWeatherInfo_t/\">XPLMWeatherInfo_t</a> *  out_info);\n</code></pre><p>Get the current weather conditions at a given location. Note that this does not work world-wide, only within the surrounding region. Return 1 if detailed weather (i.e. an airport-specific METAR) was found, 0 if not. In both cases, the structure will contain the best data available. This call is not intended to be used per-frame.</p></div></div></div></div></article>",
      "code_examples": [
        {
          "char_count": 514,
          "code": "typedef struct {\n     // Altitude MSL, meters\n     float                     alt_msl;\n     // Wind speed, meters/sec\n     float                     speed;\n     // Direction (true)\n     float                     direction;\n     // Gust speed, meters/sec\n     float                     gust_speed;\n     // Shear arc, degrees i.e. 50% of this arc in either direction from base\n     float                     shear;\n     // Clear-air turbulence ratio\n     float                     turbulence;\n}XPLMWeatherInfoWinds_t;",
          "context": "XPLMWeatherInfoWinds_t",
          "id": "example_0",
          "language": "c",
          "line_count": 14,
          "type": "example"
        },
        {
          "char_count": 319,
          "code": "typedef struct {\n     // Cloud type, float enum\n     float                     cloud_type;\n     // Coverage ratio\n     float                     coverage;\n     // Altitude MSL, meters\n     float                     alt_top;\n     // Altitude MSL, meters\n     float                     alt_base;\n}XPLMWeatherInfoClouds_t;",
          "context": "XPLMWeatherInfoClouds_t",
          "id": "example_1",
          "language": "c",
          "line_count": 10,
          "type": "snippet"
        },
        {
          "char_count": 1694,
          "code": "typedef struct {\n     // The size of the struct.\n     int                       structSize;\n     // Temperature at the given altitude in Celsius\n     float                     temperature_alt;\n     // Dewpoint at the given altitude in Celsius\n     float                     dewpoint_alt;\n     // Pressure at the given altitude in Pascals\n     float                     pressure_alt;\n     // Precipitation rate at the given altitude\n     float                     precip_rate_alt;\n     // Wind direction at the given altitude\n     float                     wind_dir_alt;\n     // Wind speed at the given altitude, meters/sec\n     float                     wind_spd_alt;\n     // Turbulence ratio at the given altitude\n     float                     turbulence_alt;\n     // Height of water waves in meters\n     float                     wave_height;\n     // Length of water waves in meters\n     float                     wave_length;\n     // Direction from which water waves are coming\n     int                       wave_dir;\n     // Speed of wave advance in meters/sec\n     float                     wave_speed;\n     // Base visibility at 0 altitude, meters\n     float                     visibility;\n     // Base precipitation ratio at 0 altitude\n     float                     precip_rate;\n     // Climb rate due to thermals, meters/sec\n     float                     thermal_climb;\n     // Pressure at 0 altitude in Pascals\n     float                     pressure_sl;\n     // Defined wind layers. Not all layers are always defined.XPLMWeatherInfoWinds_twind_layers[13];\n     // Defined cloud layers. Not all layers are always defined.XPLMWeatherInfoClouds_tcloud_layers[3];\n}XPLMWeatherInfo_t;",
          "context": "Basic weather conditions at a specific point.",
          "id": "example_2",
          "language": "c",
          "line_count": 36,
          "type": "example"
        },
        {
          "char_count": 126,
          "code": "XPLM_API voidXPLMGetMETARForAirport(\n                         const char *         airport_id,XPLMFixedString150_t* outMETAR);",
          "context": "XPLMGetMETARForAirport",
          "id": "example_3",
          "language": "c",
          "line_count": 2,
          "type": "snippet"
        },
        {
          "char_count": 238,
          "code": "XPLM_API intXPLMGetWeatherAtLocation(\n                         double               latitude,\n                         double               longitude,\n                         double               altitude_m,XPLMWeatherInfo_t*  out_info);",
          "context": "XPLMGetWeatherAtLocation",
          "id": "example_4",
          "language": "c",
          "line_count": 4,
          "type": "snippet"
        }
      ],
      "cross_references": [],
      "markdown": "# [XPLMWeather](/sdk/XPLMWeather/)API\n\nThis provides access to the X-Plane 12 enhanced weather system.\n\n## WEATHER ACCESS\n\n### [XPLMWeatherInfoWinds_t](/sdk/XPLMWeatherInfoWinds_t/)\n\n```cpp\ntypedef struct {\n     // Altitude MSL, meters\n     float                     alt_msl;\n     // Wind speed, meters/sec\n     float                     speed;\n     // Direction (true)\n     float                     direction;\n     // Gust speed, meters/sec\n     float                     gust_speed;\n     // Shear arc, degrees i.e. 50% of this arc in either direction from base\n     float                     shear;\n     // Clear-air turbulence ratio\n     float                     turbulence;\n} XPLMWeatherInfoWinds_t;\n```\n\n### [XPLMWeatherInfoClouds_t](/sdk/XPLMWeatherInfoClouds_t/)\n\n```cpp\ntypedef struct {\n     // Cloud type, float enum\n     float                     cloud_type;\n     // Coverage ratio\n     float                     coverage;\n     // Altitude MSL, meters\n     float                     alt_top;\n     // Altitude MSL, meters\n     float                     alt_base;\n} XPLMWeatherInfoClouds_t;\n```\n\n### [XPLMWeatherInfo_t](/sdk/XPLMWeatherInfo_t/)\n\nBasic weather conditions at a specific point.\n\n```cpp\ntypedef struct {\n     // The size of the struct.\n     int                       structSize;\n     // Temperature at the given altitude in Celsius\n     float                     temperature_alt;\n     // Dewpoint at the given altitude in Celsius\n     float                     dewpoint_alt;\n     // Pressure at the given altitude in Pascals\n     float                     pressure_alt;\n     // Precipitation rate at the given altitude\n     float                     precip_rate_alt;\n     // Wind direction at the given altitude\n     float                     wind_dir_alt;\n     // Wind speed at the given altitude, meters/sec\n     float                     wind_spd_alt;\n     // Turbulence ratio at the given altitude\n     float                     turbulence_alt;\n     // Height of water waves in meters\n     float                     wave_height;\n     // Length of water waves in meters\n     float                     wave_length;\n     // Direction from which water waves are coming\n     int                       wave_dir;\n     // Speed of wave advance in meters/sec\n     float                     wave_speed;\n     // Base visibility at 0 altitude, meters\n     float                     visibility;\n     // Base precipitation ratio at 0 altitude\n     float                     precip_rate;\n     // Climb rate due to thermals, meters/sec\n     float                     thermal_climb;\n     // Pressure at 0 altitude in Pascals\n     float                     pressure_sl;\n     // Defined wind layers. Not all layers are always defined.\n     XPLMWeatherInfoWinds_t    wind_layers[13];\n     // Defined cloud layers. Not all layers are always defined.\n     XPLMWeatherInfoClouds_t   cloud_layers[3];\n} XPLMWeatherInfo_t;\n```\n\n### [XPLMGetMETARForAirport](/sdk/XPLMGetMETARForAirport/)\n\n```cpp\nXPLM_API void       XPLMGetMETARForAirport(\n                         const char *         airport_id,\n                         XPLMFixedString150_t * outMETAR);\n\n```\n\nGet the last-downloaded METAR report for an airport by ICAO code. Note that the\nactual weather at that airport may have evolved significantly since the last\ndownloaded METAR. outMETAR must point to a char buffer of at least 150\ncharacters. This call is not intended to be used per-frame. This call does not\nreturn the current weather at the airport, and returns an empty string if the\nsystem is not in real-weather mode.\n\n### [XPLMGetWeatherAtLocation](/sdk/XPLMGetWeatherAtLocation/)\n\n```cpp\nXPLM_API int        XPLMGetWeatherAtLocation(\n                         double               latitude,\n                         double               longitude,\n                         double               altitude_m,\n                         XPLMWeatherInfo_t *  out_info);\n\n```\n\nGet the current weather conditions at a given location. Note that this does not\nwork world-wide, only within the surrounding region. Return 1 if detailed\nweather (i.e. an airport-specific METAR) was found, 0 if not. In both cases, the\nstructure will contain the best data available. This call is not intended to be\nused per-frame.",
      "own_functions": [
        "XPLMGetMETARForAirport",
        "XPLMGetWeatherAtLocation",
        "voidXPLMGetMETARForAirport",
        "intXPLMGetWeatherAtLocation"
      ],
      "processing_timestamp": "2025-06-25T20:39:24.089137+00:00",
      "title": "XPLMWeather | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMWeather/"
    },
    "https://developer.x-plane.com/sdk/XPLMWeatherInfoClouds_t/": {
      "api_signatures": [],
      "category": {
        "category": "XPLM_Navigation",
        "module": "Xplm Navigation",
        "url": "https://developer.x-plane.com/sdk/XPLMWeatherInfoClouds_t/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"struct\"><h3 class=\"sdk-api-struct\" id=\"XPLMWeatherInfoClouds_t\"><a href=\"/sdk/XPLMWeatherInfoClouds_t/\">XPLMWeatherInfoClouds_t</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>typedef struct {\n     // Cloud type, float enum\n     float                     cloud_type;\n     // Coverage ratio\n     float                     coverage;\n     // Altitude MSL, meters\n     float                     alt_top;\n     // Altitude MSL, meters\n     float                     alt_base;\n} <a href=\"/sdk/XPLMWeatherInfoClouds_t/\">XPLMWeatherInfoClouds_t</a>;</code></pre></div></div></article>",
      "code_examples": [
        {
          "char_count": 319,
          "code": "typedef struct {\n     // Cloud type, float enum\n     float                     cloud_type;\n     // Coverage ratio\n     float                     coverage;\n     // Altitude MSL, meters\n     float                     alt_top;\n     // Altitude MSL, meters\n     float                     alt_base;\n}XPLMWeatherInfoClouds_t;",
          "context": "XPLMWeatherInfoClouds_t",
          "id": "example_0",
          "language": "c",
          "line_count": 10,
          "type": "snippet"
        }
      ],
      "cross_references": [],
      "markdown": "### [XPLMWeatherInfoClouds_t](/sdk/XPLMWeatherInfoClouds_t/)\n\n```cpp\ntypedef struct {\n     // Cloud type, float enum\n     float                     cloud_type;\n     // Coverage ratio\n     float                     coverage;\n     // Altitude MSL, meters\n     float                     alt_top;\n     // Altitude MSL, meters\n     float                     alt_base;\n} XPLMWeatherInfoClouds_t;\n```",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:24.079083+00:00",
      "title": "XPLMWeatherInfoClouds_t | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMWeatherInfoClouds_t/"
    },
    "https://developer.x-plane.com/sdk/XPLMWeatherInfoWinds_t/": {
      "api_signatures": [],
      "category": {
        "category": "XPLM_Navigation",
        "module": "Xplm Navigation",
        "url": "https://developer.x-plane.com/sdk/XPLMWeatherInfoWinds_t/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"struct\"><h3 class=\"sdk-api-struct\" id=\"XPLMWeatherInfoWinds_t\"><a href=\"/sdk/XPLMWeatherInfoWinds_t/\">XPLMWeatherInfoWinds_t</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>typedef struct {\n     // Altitude MSL, meters\n     float                     alt_msl;\n     // Wind speed, meters/sec\n     float                     speed;\n     // Direction (true)\n     float                     direction;\n     // Gust speed, meters/sec\n     float                     gust_speed;\n     // Shear arc, degrees i.e. 50% of this arc in either direction from base\n     float                     shear;\n     // Clear-air turbulence ratio\n     float                     turbulence;\n} <a href=\"/sdk/XPLMWeatherInfoWinds_t/\">XPLMWeatherInfoWinds_t</a>;</code></pre></div></div></article>",
      "code_examples": [
        {
          "char_count": 514,
          "code": "typedef struct {\n     // Altitude MSL, meters\n     float                     alt_msl;\n     // Wind speed, meters/sec\n     float                     speed;\n     // Direction (true)\n     float                     direction;\n     // Gust speed, meters/sec\n     float                     gust_speed;\n     // Shear arc, degrees i.e. 50% of this arc in either direction from base\n     float                     shear;\n     // Clear-air turbulence ratio\n     float                     turbulence;\n}XPLMWeatherInfoWinds_t;",
          "context": "XPLMWeatherInfoWinds_t",
          "id": "example_0",
          "language": "c",
          "line_count": 14,
          "type": "example"
        }
      ],
      "cross_references": [],
      "markdown": "### [XPLMWeatherInfoWinds_t](/sdk/XPLMWeatherInfoWinds_t/)\n\n```cpp\ntypedef struct {\n     // Altitude MSL, meters\n     float                     alt_msl;\n     // Wind speed, meters/sec\n     float                     speed;\n     // Direction (true)\n     float                     direction;\n     // Gust speed, meters/sec\n     float                     gust_speed;\n     // Shear arc, degrees i.e. 50% of this arc in either direction from base\n     float                     shear;\n     // Clear-air turbulence ratio\n     float                     turbulence;\n} XPLMWeatherInfoWinds_t;\n```",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:24.098139+00:00",
      "title": "XPLMWeatherInfoWinds_t | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMWeatherInfoWinds_t/"
    },
    "https://developer.x-plane.com/sdk/XPLMWeatherInfo_t/": {
      "api_signatures": [],
      "category": {
        "category": "XPLM_Navigation",
        "module": "Xplm Navigation",
        "url": "https://developer.x-plane.com/sdk/XPLMWeatherInfo_t/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"struct\"><h3 class=\"sdk-api-struct\" id=\"XPLMWeatherInfo_t\"><a href=\"/sdk/XPLMWeatherInfo_t/\">XPLMWeatherInfo_t</a></h3><p>Basic weather conditions at a specific point.</p><pre class=\"language-cpp\" data-manual=\"true\"><code>typedef struct {\n     // The size of the struct.\n     int                       structSize;\n     // Temperature at the given altitude in Celsius\n     float                     temperature_alt;\n     // Dewpoint at the given altitude in Celsius\n     float                     dewpoint_alt;\n     // Pressure at the given altitude in Pascals\n     float                     pressure_alt;\n     // Precipitation rate at the given altitude\n     float                     precip_rate_alt;\n     // Wind direction at the given altitude\n     float                     wind_dir_alt;\n     // Wind speed at the given altitude, meters/sec\n     float                     wind_spd_alt;\n     // Turbulence ratio at the given altitude\n     float                     turbulence_alt;\n     // Height of water waves in meters\n     float                     wave_height;\n     // Length of water waves in meters\n     float                     wave_length;\n     // Direction from which water waves are coming\n     int                       wave_dir;\n     // Speed of wave advance in meters/sec\n     float                     wave_speed;\n     // Base visibility at 0 altitude, meters\n     float                     visibility;\n     // Base precipitation ratio at 0 altitude\n     float                     precip_rate;\n     // Climb rate due to thermals, meters/sec\n     float                     thermal_climb;\n     // Pressure at 0 altitude in Pascals\n     float                     pressure_sl;\n     // Defined wind layers. Not all layers are always defined.\n     <a href=\"/sdk/XPLMWeatherInfoWinds_t/\">XPLMWeatherInfoWinds_t</a>    wind_layers[13];\n     // Defined cloud layers. Not all layers are always defined.\n     <a href=\"/sdk/XPLMWeatherInfoClouds_t/\">XPLMWeatherInfoClouds_t</a>   cloud_layers[3];\n} <a href=\"/sdk/XPLMWeatherInfo_t/\">XPLMWeatherInfo_t</a>;</code></pre></div></div></article>",
      "code_examples": [
        {
          "char_count": 1694,
          "code": "typedef struct {\n     // The size of the struct.\n     int                       structSize;\n     // Temperature at the given altitude in Celsius\n     float                     temperature_alt;\n     // Dewpoint at the given altitude in Celsius\n     float                     dewpoint_alt;\n     // Pressure at the given altitude in Pascals\n     float                     pressure_alt;\n     // Precipitation rate at the given altitude\n     float                     precip_rate_alt;\n     // Wind direction at the given altitude\n     float                     wind_dir_alt;\n     // Wind speed at the given altitude, meters/sec\n     float                     wind_spd_alt;\n     // Turbulence ratio at the given altitude\n     float                     turbulence_alt;\n     // Height of water waves in meters\n     float                     wave_height;\n     // Length of water waves in meters\n     float                     wave_length;\n     // Direction from which water waves are coming\n     int                       wave_dir;\n     // Speed of wave advance in meters/sec\n     float                     wave_speed;\n     // Base visibility at 0 altitude, meters\n     float                     visibility;\n     // Base precipitation ratio at 0 altitude\n     float                     precip_rate;\n     // Climb rate due to thermals, meters/sec\n     float                     thermal_climb;\n     // Pressure at 0 altitude in Pascals\n     float                     pressure_sl;\n     // Defined wind layers. Not all layers are always defined.XPLMWeatherInfoWinds_twind_layers[13];\n     // Defined cloud layers. Not all layers are always defined.XPLMWeatherInfoClouds_tcloud_layers[3];\n}XPLMWeatherInfo_t;",
          "context": "Basic weather conditions at a specific point.",
          "id": "example_0",
          "language": "c",
          "line_count": 36,
          "type": "example"
        }
      ],
      "cross_references": [],
      "markdown": "### [XPLMWeatherInfo_t](/sdk/XPLMWeatherInfo_t/)\n\nBasic weather conditions at a specific point.\n\n```cpp\ntypedef struct {\n     // The size of the struct.\n     int                       structSize;\n     // Temperature at the given altitude in Celsius\n     float                     temperature_alt;\n     // Dewpoint at the given altitude in Celsius\n     float                     dewpoint_alt;\n     // Pressure at the given altitude in Pascals\n     float                     pressure_alt;\n     // Precipitation rate at the given altitude\n     float                     precip_rate_alt;\n     // Wind direction at the given altitude\n     float                     wind_dir_alt;\n     // Wind speed at the given altitude, meters/sec\n     float                     wind_spd_alt;\n     // Turbulence ratio at the given altitude\n     float                     turbulence_alt;\n     // Height of water waves in meters\n     float                     wave_height;\n     // Length of water waves in meters\n     float                     wave_length;\n     // Direction from which water waves are coming\n     int                       wave_dir;\n     // Speed of wave advance in meters/sec\n     float                     wave_speed;\n     // Base visibility at 0 altitude, meters\n     float                     visibility;\n     // Base precipitation ratio at 0 altitude\n     float                     precip_rate;\n     // Climb rate due to thermals, meters/sec\n     float                     thermal_climb;\n     // Pressure at 0 altitude in Pascals\n     float                     pressure_sl;\n     // Defined wind layers. Not all layers are always defined.\n     XPLMWeatherInfoWinds_t    wind_layers[13];\n     // Defined cloud layers. Not all layers are always defined.\n     XPLMWeatherInfoClouds_t   cloud_layers[3];\n} XPLMWeatherInfo_t;\n```",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:24.095137+00:00",
      "title": "XPLMWeatherInfo_t | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMWeatherInfo_t/"
    },
    "https://developer.x-plane.com/sdk/XPLMWindowDecoration/": {
      "api_signatures": [
        {
          "name": "XPLMWindowDecoration",
          "type": "enum",
          "values": [
            {
              "description": "X-Plane will draw no decoration for your window, and apply no automatic click handlers. The window will not stop click from passing through its bounds. This is suitable for \"windows\" which request, say, the full screen bounds, then only draw in a small portion of the available area.",
              "name": "xplm_WindowDecorationNone",
              "value": "\"0\""
            },
            {
              "description": "The default decoration for \"native\" windows, like the map. Provides a solid background, as well as click handlers for resizing and dragging the window.",
              "name": "xplm_WindowDecorationRoundRectangle",
              "value": "\"1\""
            },
            {
              "description": "X-Plane will draw no decoration for your window, nor will it provide resize handlers for your window edges, but it will stop clicks from passing through your windows bounds.",
              "name": "xplm_WindowDecorationSelfDecorated",
              "value": "\"2\""
            },
            {
              "description": "Like self-decorated, but with resizing; X-Plane will draw no decoration for your window, but it will stop clicks from passing through your windows bounds, and provide automatic mouse handlers for resizing.",
              "name": "xplm_WindowDecorationSelfDecoratedResizable",
              "value": "\"3\""
            }
          ]
        }
      ],
      "category": {
        "category": "XPLM_Display",
        "module": "Xplm Display",
        "url": "https://developer.x-plane.com/sdk/XPLMWindowDecoration/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enum XPLM301\"><h3 class=\"sdk-api-enum\" id=\"XPLMWindowDecoration\"><a href=\"/sdk/XPLMWindowDecoration/\">XPLMWindowDecoration</a></h3><p><a href=\"/sdk/XPLMWindowDecoration/\">XPLMWindowDecoration</a>describes how “modern” windows will be displayed. This impacts both how X-Plane draws your window as well as certain mouse handlers.</p><p>Your window’s decoration can only be specified when you create the window (in the<a href=\"/sdk/XPLMCreateWindow_t/\">XPLMCreateWindow_t</a>you pass to<a href=\"/sdk/XPLMCreateWindowEx/\">XPLMCreateWindowEx</a>()).</p><p><div class=\"enumitem XPLM301\"><table><thead><tr><th>Name</th><th>Value</th><th>Description</th></tr></thead><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_WindowDecorationNone\"><a href=\"/sdk/xplm_WindowDecorationNone/\">xplm_WindowDecorationNone</a></td><td>\"0\"</td><td>X-Plane will draw no decoration for your window, and apply no automatic click handlers. The window will not stop click from passing through its bounds. This is suitable for \"windows\" which request, say, the full screen bounds, then only draw in a small portion of the available area.</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_WindowDecorationRoundRectangle\"><a href=\"/sdk/xplm_WindowDecorationRoundRectangle/\">xplm_WindowDecorationRoundRectangle</a></td><td>\"1\"</td><td>The default decoration for \"native\" windows, like the map. Provides a solid background, as well as click handlers for resizing and dragging the window.</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_WindowDecorationSelfDecorated\"><a href=\"/sdk/xplm_WindowDecorationSelfDecorated/\">xplm_WindowDecorationSelfDecorated</a></td><td>\"2\"</td><td>X-Plane will draw no decoration for your window, nor will it provide resize handlers for your window edges, but it will stop clicks from passing through your windows bounds.</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_WindowDecorationSelfDecoratedResizable\"><a href=\"/sdk/xplm_WindowDecorationSelfDecoratedResizable/\">xplm_WindowDecorationSelfDecoratedResizable</a></td><td>\"3\"</td><td>Like self-decorated, but with resizing; X-Plane will draw no decoration for your window, but it will stop clicks from passing through your windows bounds, and provide automatic mouse handlers for resizing.</td></tr></table></div></p></div></div></article>",
      "code_examples": [],
      "cross_references": [
        "XPLMCreateWindowEx",
        "XPLMCreateWindow"
      ],
      "markdown": "### [XPLMWindowDecoration](/sdk/XPLMWindowDecoration/)\n\n[XPLMWindowDecoration](/sdk/XPLMWindowDecoration/)describes how “modern” windows\nwill be displayed. This impacts both how X-Plane draws your window as well as\ncertain mouse handlers.\n\nYour window’s decoration can only be specified when you create the window (in\nthe[XPLMCreateWindow_t](/sdk/XPLMCreateWindow_t/)you pass\nto[XPLMCreateWindowEx](/sdk/XPLMCreateWindowEx/)()).\n\n| Name | Value | Description |\n| --- | --- | --- |\n| [xplm_WindowDecorationNone](/sdk/xplm_WindowDecorationNone/) | \"0\" | X-Plane\nwill draw no decoration for your window, and apply no automatic click handlers.\nThe window will not stop click from passing through its bounds. This is suitable\nfor \"windows\" which request, say, the full screen bounds, then only draw in a\nsmall portion of the available area. |\n|\n[xplm_WindowDecorationRoundRectangle](/sdk/xplm_WindowDecorationRoundRectangle/)\n| \"1\" | The default decoration for \"native\" windows, like the map. Provides a\nsolid background, as well as click handlers for resizing and dragging the\nwindow. |\n| [xplm_WindowDecorationSelfDecorated](/sdk/xplm_WindowDecorationSelfDecorated/)\n| \"2\" | X-Plane will draw no decoration for your window, nor will it provide\nresize handlers for your window edges, but it will stop clicks from passing\nthrough your windows bounds. |\n|\n[xplm_WindowDecorationSelfDecoratedResizable](/sdk/xplm_WindowDecorationSelfDecoratedResizable/)\n| \"3\" | Like self-decorated, but with resizing; X-Plane will draw no decoration\nfor your window, but it will stop clicks from passing through your windows\nbounds, and provide automatic mouse handlers for resizing. |",
      "own_functions": [
        "XPLMWindowDecoration"
      ],
      "processing_timestamp": "2025-06-25T20:39:23.566859+00:00",
      "title": "XPLMWindowDecoration | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMWindowDecoration/"
    },
    "https://developer.x-plane.com/sdk/XPLMWindowID/": {
      "api_signatures": [],
      "category": {
        "category": "XPLM_Display",
        "module": "Xplm Display",
        "url": "https://developer.x-plane.com/sdk/XPLMWindowID/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"typedef\"><h3 class=\"sdk-api-type\" id=\"XPLMWindowID\"><a href=\"/sdk/XPLMWindowID/\">XPLMWindowID</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>typedef void * <a href=\"/sdk/XPLMWindowID/\">XPLMWindowID</a>;</code></pre><p>This is an opaque identifier for a window. You use it to control your window. When you create a window (via either<a href=\"/sdk/XPLMCreateWindow/\">XPLMCreateWindow</a>() or<a href=\"/sdk/XPLMCreateWindowEx/\">XPLMCreateWindowEx</a>()), you will specify callbacks to handle drawing, mouse interaction, etc.</p></div></div></article>",
      "code_examples": [],
      "cross_references": [
        "XPLMCreateWindowEx",
        "XPLMCreateWindow"
      ],
      "markdown": "### [XPLMWindowID](/sdk/XPLMWindowID/)\n\n```cpp\ntypedef void * XPLMWindowID;\n```\n\nThis is an opaque identifier for a window. You use it to control your window.\nWhen you create a window (via either[XPLMCreateWindow](/sdk/XPLMCreateWindow/)()\nor[XPLMCreateWindowEx](/sdk/XPLMCreateWindowEx/)()), you will specify callbacks\nto handle drawing, mouse interaction, etc.",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:23.568863+00:00",
      "title": "XPLMWindowID | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMWindowID/"
    },
    "https://developer.x-plane.com/sdk/XPLMWindowIsInVR/": {
      "api_signatures": [
        {
          "description": "True if this window has been moved to the virtual reality (VR) headset, which in turn is true if and only if you have set the window’s positioning mode toxplm_WindowVR.",
          "name": "XPLMWindowIsInVR",
          "parameters": [],
          "signature": "XPLM_API intXPLMWindowIsInVR(XPLMWindowIDinWindowID);"
        },
        {
          "name": "intXPLMWindowIsInVR",
          "signature": "XPLM_API intXPLMWindowIsInVR(XPLMWindowIDinWindowID);",
          "source": "code_block_extraction",
          "type": "function"
        }
      ],
      "category": {
        "category": "XPLM_Display",
        "module": "Xplm Display",
        "url": "https://developer.x-plane.com/sdk/XPLMWindowIsInVR/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"function XPLM301\"><h3 class=\"sdk-api-function\" id=\"XPLMWindowIsInVR\"><a href=\"/sdk/XPLMWindowIsInVR/\">XPLMWindowIsInVR</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API int        <a href=\"/sdk/XPLMWindowIsInVR/\">XPLMWindowIsInVR</a>(\n                         <a href=\"/sdk/XPLMWindowID/\">XPLMWindowID</a>         inWindowID);\n</code></pre><p>True if this window has been moved to the virtual reality (VR) headset, which in turn is true if and only if you have set the window’s positioning mode to<a href=\"/sdk/xplm_WindowVR/\">xplm_WindowVR</a>.</p><p>Only applies to modern windows. (Windows created using the deprecated<a href=\"/sdk/XPLMCreateWindow/\">XPLMCreateWindow</a>(), or windows compiled against a pre-XPLM301 version of the SDK cannot be moved to VR.)</p></div></div></article>",
      "code_examples": [
        {
          "char_count": 53,
          "code": "XPLM_API intXPLMWindowIsInVR(XPLMWindowIDinWindowID);",
          "context": "XPLMWindowIsInVR",
          "id": "example_0",
          "language": "c",
          "line_count": 1,
          "type": "snippet"
        }
      ],
      "cross_references": [
        "XPLMCreateWindow"
      ],
      "markdown": "### [XPLMWindowIsInVR](/sdk/XPLMWindowIsInVR/)\n\n```cpp\nXPLM_API int        XPLMWindowIsInVR(\n                         XPLMWindowID         inWindowID);\n\n```\n\nTrue if this window has been moved to the virtual reality (VR) headset, which in\nturn is true if and only if you have set the window’s positioning mode\nto[xplm_WindowVR](/sdk/xplm_WindowVR/).\n\nOnly applies to modern windows. (Windows created using the\ndeprecated[XPLMCreateWindow](/sdk/XPLMCreateWindow/)(), or windows compiled\nagainst a pre-XPLM301 version of the SDK cannot be moved to VR.)",
      "own_functions": [
        "XPLMWindowIsInVR",
        "intXPLMWindowIsInVR"
      ],
      "processing_timestamp": "2025-06-25T20:39:23.570862+00:00",
      "title": "XPLMWindowIsInVR | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMWindowIsInVR/"
    },
    "https://developer.x-plane.com/sdk/XPLMWindowIsPoppedOut/": {
      "api_signatures": [
        {
          "description": "True if this window has been popped out (making it a first-class window in the operating system), which in turn is true if and only if you have set the window’s positioning mode toxplm_WindowPopOut.",
          "name": "XPLMWindowIsPoppedOut",
          "parameters": [],
          "signature": "XPLM_API intXPLMWindowIsPoppedOut(XPLMWindowIDinWindowID);"
        },
        {
          "name": "intXPLMWindowIsPoppedOut",
          "signature": "XPLM_API intXPLMWindowIsPoppedOut(XPLMWindowIDinWindowID);",
          "source": "code_block_extraction",
          "type": "function"
        }
      ],
      "category": {
        "category": "XPLM_Display",
        "module": "Xplm Display",
        "url": "https://developer.x-plane.com/sdk/XPLMWindowIsPoppedOut/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"function XPLM300\"><h3 class=\"sdk-api-function\" id=\"XPLMWindowIsPoppedOut\"><a href=\"/sdk/XPLMWindowIsPoppedOut/\">XPLMWindowIsPoppedOut</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API int        <a href=\"/sdk/XPLMWindowIsPoppedOut/\">XPLMWindowIsPoppedOut</a>(\n                         <a href=\"/sdk/XPLMWindowID/\">XPLMWindowID</a>         inWindowID);\n</code></pre><p>True if this window has been popped out (making it a first-class window in the operating system), which in turn is true if and only if you have set the window’s positioning mode to<a href=\"/sdk/xplm_WindowPopOut/\">xplm_WindowPopOut</a>.</p><p>Only applies to modern windows. (Windows created using the deprecated<a href=\"/sdk/XPLMCreateWindow/\">XPLMCreateWindow</a>(), or windows compiled against a pre-XPLM300 version of the SDK cannot be popped out.)</p></div></div></article>",
      "code_examples": [
        {
          "char_count": 58,
          "code": "XPLM_API intXPLMWindowIsPoppedOut(XPLMWindowIDinWindowID);",
          "context": "XPLMWindowIsPoppedOut",
          "id": "example_0",
          "language": "c",
          "line_count": 1,
          "type": "snippet"
        }
      ],
      "cross_references": [
        "XPLMCreateWindow"
      ],
      "markdown": "### [XPLMWindowIsPoppedOut](/sdk/XPLMWindowIsPoppedOut/)\n\n```cpp\nXPLM_API int        XPLMWindowIsPoppedOut(\n                         XPLMWindowID         inWindowID);\n\n```\n\nTrue if this window has been popped out (making it a first-class window in the\noperating system), which in turn is true if and only if you have set the\nwindow’s positioning mode to[xplm_WindowPopOut](/sdk/xplm_WindowPopOut/).\n\nOnly applies to modern windows. (Windows created using the\ndeprecated[XPLMCreateWindow](/sdk/XPLMCreateWindow/)(), or windows compiled\nagainst a pre-XPLM300 version of the SDK cannot be popped out.)",
      "own_functions": [
        "XPLMWindowIsPoppedOut",
        "intXPLMWindowIsPoppedOut"
      ],
      "processing_timestamp": "2025-06-25T20:39:23.577864+00:00",
      "title": "XPLMWindowIsPoppedOut | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMWindowIsPoppedOut/"
    },
    "https://developer.x-plane.com/sdk/XPLMWindowLayer/": {
      "api_signatures": [
        {
          "name": "XPLMWindowLayer",
          "type": "enum",
          "values": [
            {
              "description": "The lowest layer, used for HUD-like displays while flying.",
              "name": "xplm_WindowLayerFlightOverlay",
              "value": "\"0\""
            },
            {
              "description": "Windows that \"float\" over the sim, like the X-Plane 11 map does. If you are not sure which layer to create your window in, choose floating.",
              "name": "xplm_WindowLayerFloatingWindows",
              "value": "\"1\""
            },
            {
              "description": "An interruptive modal that covers the sim with a transparent black overlay to draw the user's focus to the alert",
              "name": "xplm_WindowLayerModal",
              "value": "\"2\""
            },
            {
              "description": "\"Growl\"-style notifications that are visible in a corner of the screen, even over modals",
              "name": "xplm_WindowLayerGrowlNotifications",
              "value": "\"3\""
            }
          ]
        }
      ],
      "category": {
        "category": "XPLM_Display",
        "module": "Xplm Display",
        "url": "https://developer.x-plane.com/sdk/XPLMWindowLayer/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enum XPLM300\"><h3 class=\"sdk-api-enum\" id=\"XPLMWindowLayer\"><a href=\"/sdk/XPLMWindowLayer/\">XPLMWindowLayer</a></h3><p><a href=\"/sdk/XPLMWindowLayer/\">XPLMWindowLayer</a>describes where in the ordering of windows X-Plane should place a particular window. Windows in higher layers cover windows in lower layers. So, a given window might be at the top of its particular layer, but it might still be obscured by a window in a higher layer. (This happens frequently when floating windows, like X-Plane’s map, are covered by a modal alert.)</p><p>Your window’s layer can only be specified when you create the window (in the<a href=\"/sdk/XPLMCreateWindow_t/\">XPLMCreateWindow_t</a>you pass to<a href=\"/sdk/XPLMCreateWindowEx/\">XPLMCreateWindowEx</a>()). For this reason, layering only applies to windows created with new X-Plane 11 GUI features. (Windows created using the older<a href=\"/sdk/XPLMCreateWindow/\">XPLMCreateWindow</a>(), or windows compiled against a pre-XPLM300 version of the SDK will simply be placed in the flight overlay window layer.)</p><p><div class=\"enumitem XPLM300\"><table><thead><tr><th>Name</th><th>Value</th><th>Description</th></tr></thead><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_WindowLayerFlightOverlay\"><a href=\"/sdk/xplm_WindowLayerFlightOverlay/\">xplm_WindowLayerFlightOverlay</a></td><td>\"0\"</td><td>The lowest layer, used for HUD-like displays while flying.</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_WindowLayerFloatingWindows\"><a href=\"/sdk/xplm_WindowLayerFloatingWindows/\">xplm_WindowLayerFloatingWindows</a></td><td>\"1\"</td><td>Windows that \"float\" over the sim, like the X-Plane 11 map does. If you are not sure which layer to create your window in, choose floating.</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_WindowLayerModal\"><a href=\"/sdk/xplm_WindowLayerModal/\">xplm_WindowLayerModal</a></td><td>\"2\"</td><td>An interruptive modal that covers the sim with a transparent black overlay to draw the user's focus to the alert</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_WindowLayerGrowlNotifications\"><a href=\"/sdk/xplm_WindowLayerGrowlNotifications/\">xplm_WindowLayerGrowlNotifications</a></td><td>\"3\"</td><td>\"Growl\"-style notifications that are visible in a corner of the screen, even over modals</td></tr></table></div></p></div></div></article>",
      "code_examples": [],
      "cross_references": [
        "XPLMCreateWindowEx",
        "XPLMCreateWindow"
      ],
      "markdown": "### [XPLMWindowLayer](/sdk/XPLMWindowLayer/)\n\n[XPLMWindowLayer](/sdk/XPLMWindowLayer/)describes where in the ordering of\nwindows X-Plane should place a particular window. Windows in higher layers cover\nwindows in lower layers. So, a given window might be at the top of its\nparticular layer, but it might still be obscured by a window in a higher layer.\n(This happens frequently when floating windows, like X-Plane’s map, are covered\nby a modal alert.)\n\nYour window’s layer can only be specified when you create the window (in\nthe[XPLMCreateWindow_t](/sdk/XPLMCreateWindow_t/)you pass\nto[XPLMCreateWindowEx](/sdk/XPLMCreateWindowEx/)()). For this reason, layering\nonly applies to windows created with new X-Plane 11 GUI features. (Windows\ncreated using the older[XPLMCreateWindow](/sdk/XPLMCreateWindow/)(), or windows\ncompiled against a pre-XPLM300 version of the SDK will simply be placed in the\nflight overlay window layer.)\n\n| Name | Value | Description |\n| --- | --- | --- |\n| [xplm_WindowLayerFlightOverlay](/sdk/xplm_WindowLayerFlightOverlay/) | \"0\" |\nThe lowest layer, used for HUD-like displays while flying. |\n| [xplm_WindowLayerFloatingWindows](/sdk/xplm_WindowLayerFloatingWindows/) | \"1\"\n| Windows that \"float\" over the sim, like the X-Plane 11 map does. If you are\nnot sure which layer to create your window in, choose floating. |\n| [xplm_WindowLayerModal](/sdk/xplm_WindowLayerModal/) | \"2\" | An interruptive\nmodal that covers the sim with a transparent black overlay to draw the user's\nfocus to the alert |\n| [xplm_WindowLayerGrowlNotifications](/sdk/xplm_WindowLayerGrowlNotifications/)\n| \"3\" | \"Growl\"-style notifications that are visible in a corner of the screen,\neven over modals |",
      "own_functions": [
        "XPLMWindowLayer"
      ],
      "processing_timestamp": "2025-06-25T20:39:23.575862+00:00",
      "title": "XPLMWindowLayer | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMWindowLayer/"
    },
    "https://developer.x-plane.com/sdk/XPLMWindowPositioningMode/": {
      "api_signatures": [
        {
          "name": "XPLMWindowPositioningMode",
          "type": "enum",
          "values": [
            {
              "description": "The default positioning mode. Set the window geometry and its future position will be determined by its window gravity, resizing limits, and user interactions.",
              "name": "xplm_WindowPositionFree",
              "value": "\"0\""
            },
            {
              "description": "Keep the window centered on the monitor you specify",
              "name": "xplm_WindowCenterOnMonitor",
              "value": "\"1\""
            },
            {
              "description": "Keep the window full screen on the monitor you specify",
              "name": "xplm_WindowFullScreenOnMonitor",
              "value": "\"2\""
            },
            {
              "description": "Like gui_window_full_screen_on_monitor, but stretches over *all* monitors and popout windows. This is an obscure one... unless you have a very good reason to need it, you probably don't!",
              "name": "xplm_WindowFullScreenOnAllMonitors",
              "value": "\"3\""
            },
            {
              "description": "A first-class window in the operating system, completely separate from the X-Plane window(s)",
              "name": "xplm_WindowPopOut",
              "value": "\"4\""
            },
            {
              "description": "A floating window visible on the VR headset",
              "name": "xplm_WindowVR",
              "value": "\"5\""
            }
          ]
        }
      ],
      "category": {
        "category": "XPLM_Display",
        "module": "Xplm Display",
        "url": "https://developer.x-plane.com/sdk/XPLMWindowPositioningMode/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enum XPLM300\"><h3 class=\"sdk-api-enum\" id=\"XPLMWindowPositioningMode\"><a href=\"/sdk/XPLMWindowPositioningMode/\">XPLMWindowPositioningMode</a></h3><p>XPLMWindowPositionMode describes how X-Plane will position your window on the user’s screen. X-Plane will maintain this positioning mode even as the user resizes their window or adds/removes full-screen monitors.</p><p>Positioning mode can only be set for “modern” windows (that is, windows created using<a href=\"/sdk/XPLMCreateWindowEx/\">XPLMCreateWindowEx</a>() and compiled against the XPLM300 SDK). Windows created using the deprecated<a href=\"/sdk/XPLMCreateWindow/\">XPLMCreateWindow</a>(), or windows compiled against a pre-XPLM300 version of the SDK will simply get the “free” positioning mode.</p><p><div class=\"enumitem XPLM300\"><table><thead><tr><th>Name</th><th>Value</th><th>Description</th></tr></thead><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_WindowPositionFree\"><a href=\"/sdk/xplm_WindowPositionFree/\">xplm_WindowPositionFree</a></td><td>\"0\"</td><td>The default positioning mode. Set the window geometry and its future position will be determined by its window gravity, resizing limits, and user interactions.</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_WindowCenterOnMonitor\"><a href=\"/sdk/xplm_WindowCenterOnMonitor/\">xplm_WindowCenterOnMonitor</a></td><td>\"1\"</td><td>Keep the window centered on the monitor you specify</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_WindowFullScreenOnMonitor\"><a href=\"/sdk/xplm_WindowFullScreenOnMonitor/\">xplm_WindowFullScreenOnMonitor</a></td><td>\"2\"</td><td>Keep the window full screen on the monitor you specify</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_WindowFullScreenOnAllMonitors\"><a href=\"/sdk/xplm_WindowFullScreenOnAllMonitors/\">xplm_WindowFullScreenOnAllMonitors</a></td><td>\"3\"</td><td>Like gui_window_full_screen_on_monitor, but stretches over *all* monitors and popout windows. This is an obscure one... unless you have a very good reason to need it, you probably don't!</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_WindowPopOut\"><a href=\"/sdk/xplm_WindowPopOut/\">xplm_WindowPopOut</a></td><td>\"4\"</td><td>A first-class window in the operating system, completely separate from the X-Plane window(s)</td></tr><tr class=\"enumitem XPLM301\"><td class=\"sdk-api-enum-item\" id=\"xplm_WindowVR\"><a href=\"/sdk/xplm_WindowVR/\">xplm_WindowVR</a></td><td>\"5\"</td><td>A floating window visible on the VR headset</td></tr></table></div></p></div></div></article>",
      "code_examples": [],
      "cross_references": [
        "XPLMCreateWindowEx",
        "XPLMCreateWindow"
      ],
      "markdown": "### [XPLMWindowPositioningMode](/sdk/XPLMWindowPositioningMode/)\n\nXPLMWindowPositionMode describes how X-Plane will position your window on the\nuser’s screen. X-Plane will maintain this positioning mode even as the user\nresizes their window or adds/removes full-screen monitors.\n\nPositioning mode can only be set for “modern” windows (that is, windows created\nusing[XPLMCreateWindowEx](/sdk/XPLMCreateWindowEx/)() and compiled against the\nXPLM300 SDK). Windows created using the\ndeprecated[XPLMCreateWindow](/sdk/XPLMCreateWindow/)(), or windows compiled\nagainst a pre-XPLM300 version of the SDK will simply get the “free” positioning\nmode.\n\n| Name | Value | Description |\n| --- | --- | --- |\n| [xplm_WindowPositionFree](/sdk/xplm_WindowPositionFree/) | \"0\" | The default\npositioning mode. Set the window geometry and its future position will be\ndetermined by its window gravity, resizing limits, and user interactions. |\n| [xplm_WindowCenterOnMonitor](/sdk/xplm_WindowCenterOnMonitor/) | \"1\" | Keep\nthe window centered on the monitor you specify |\n| [xplm_WindowFullScreenOnMonitor](/sdk/xplm_WindowFullScreenOnMonitor/) | \"2\" |\nKeep the window full screen on the monitor you specify |\n| [xplm_WindowFullScreenOnAllMonitors](/sdk/xplm_WindowFullScreenOnAllMonitors/)\n| \"3\" | Like gui_window_full_screen_on_monitor, but stretches over *all*\nmonitors and popout windows. This is an obscure one... unless you have a very\ngood reason to need it, you probably don't! |\n| [xplm_WindowPopOut](/sdk/xplm_WindowPopOut/) | \"4\" | A first-class window in\nthe operating system, completely separate from the X-Plane window(s) |\n| [xplm_WindowVR](/sdk/xplm_WindowVR/) | \"5\" | A floating window visible on the\nVR headset |",
      "own_functions": [
        "XPLMWindowPositioningMode"
      ],
      "processing_timestamp": "2025-06-25T20:39:23.584379+00:00",
      "title": "XPLMWindowPositioningMode | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMWindowPositioningMode/"
    },
    "https://developer.x-plane.com/sdk/XPLMWorldToLocal/": {
      "api_signatures": [
        {
          "description": "This routine translates coordinates from latitude, longitude, and altitude to local scene coordinates. Latitude and longitude are in decimal degrees, and altitude is in meters MSL (mean sea level). The XYZ coordinates are in meters in the local OpenGL coordinate system.",
          "name": "XPLMWorldToLocal",
          "parameters": [
            {
              "full_declaration": "double               inLatitude",
              "name": "inLatitude",
              "type": "double"
            },
            {
              "full_declaration": "double               inLongitude",
              "name": "inLongitude",
              "type": "double"
            },
            {
              "full_declaration": "double               inAltitude",
              "name": "inAltitude",
              "type": "double"
            },
            {
              "full_declaration": "double *             outX",
              "name": "outX",
              "type": "double *"
            },
            {
              "full_declaration": "double *             outY",
              "name": "outY",
              "type": "double *"
            },
            {
              "full_declaration": "double *             outZ",
              "name": "outZ",
              "type": "double *"
            }
          ],
          "signature": "XPLM_API voidXPLMWorldToLocal(\n                         double               inLatitude,\n                         double               inLongitude,\n                         double               inAltitude,\n                         double *             outX,\n                         double *             outY,\n                         double *             outZ);"
        },
        {
          "name": "voidXPLMWorldToLocal",
          "signature": "XPLM_API voidXPLMWorldToLocal(\n                         double               inLatitude,\n                         double               inLongitude,\n                         double               inAltitude,\n                         double *             outX,\n                         double *             outY,\n                         double *             outZ);",
          "source": "code_block_extraction",
          "type": "function"
        }
      ],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/XPLMWorldToLocal/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPLMWorldToLocal\"><a href=\"/sdk/XPLMWorldToLocal/\">XPLMWorldToLocal</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>XPLM_API void       <a href=\"/sdk/XPLMWorldToLocal/\">XPLMWorldToLocal</a>(\n                         double               inLatitude,\n                         double               inLongitude,\n                         double               inAltitude,\n                         double *             outX,\n                         double *             outY,\n                         double *             outZ);\n</code></pre><p>This routine translates coordinates from latitude, longitude, and altitude to local scene coordinates. Latitude and longitude are in decimal degrees, and altitude is in meters MSL (mean sea level). The XYZ coordinates are in meters in the local OpenGL coordinate system.</p></div></div></article>",
      "code_examples": [
        {
          "char_count": 362,
          "code": "XPLM_API voidXPLMWorldToLocal(\n                         double               inLatitude,\n                         double               inLongitude,\n                         double               inAltitude,\n                         double *             outX,\n                         double *             outY,\n                         double *             outZ);",
          "context": "XPLMWorldToLocal",
          "id": "example_0",
          "language": "c",
          "line_count": 7,
          "type": "snippet"
        }
      ],
      "cross_references": [],
      "markdown": "### [XPLMWorldToLocal](/sdk/XPLMWorldToLocal/)\n\n```cpp\nXPLM_API void       XPLMWorldToLocal(\n                         double               inLatitude,\n                         double               inLongitude,\n                         double               inAltitude,\n                         double *             outX,\n                         double *             outY,\n                         double *             outZ);\n\n```\n\nThis routine translates coordinates from latitude, longitude, and altitude to\nlocal scene coordinates. Latitude and longitude are in decimal degrees, and\naltitude is in meters MSL (mean sea level). The XYZ coordinates are in meters in\nthe local OpenGL coordinate system.",
      "own_functions": [
        "XPLMWorldToLocal",
        "voidXPLMWorldToLocal"
      ],
      "processing_timestamp": "2025-06-25T20:39:22.428031+00:00",
      "title": "XPLMWorldToLocal | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLMWorldToLocal/"
    },
    "https://developer.x-plane.com/sdk/XPLM_KEY_0/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/XPLM_KEY_0/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"XPLM_KEY_0\"><a href=\"/sdk/XPLM_KEY_0/\">XPLM_KEY_0</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_KEY_0/\">XPLM_KEY_0</a>           48</code></pre></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "### [XPLM_KEY_0](/sdk/XPLM_KEY_0/)\n\n```cpp\n#define XPLM_KEY_0           48\n```",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.430030+00:00",
      "title": "XPLM_KEY_0 | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLM_KEY_0/"
    },
    "https://developer.x-plane.com/sdk/XPLM_KEY_1/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/XPLM_KEY_1/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"XPLM_KEY_1\"><a href=\"/sdk/XPLM_KEY_1/\">XPLM_KEY_1</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_KEY_1/\">XPLM_KEY_1</a>           49</code></pre></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "### [XPLM_KEY_1](/sdk/XPLM_KEY_1/)\n\n```cpp\n#define XPLM_KEY_1           49\n```",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.435031+00:00",
      "title": "XPLM_KEY_1 | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLM_KEY_1/"
    },
    "https://developer.x-plane.com/sdk/XPLM_KEY_2/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/XPLM_KEY_2/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"XPLM_KEY_2\"><a href=\"/sdk/XPLM_KEY_2/\">XPLM_KEY_2</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_KEY_2/\">XPLM_KEY_2</a>           50</code></pre></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "### [XPLM_KEY_2](/sdk/XPLM_KEY_2/)\n\n```cpp\n#define XPLM_KEY_2           50\n```",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.436030+00:00",
      "title": "XPLM_KEY_2 | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLM_KEY_2/"
    },
    "https://developer.x-plane.com/sdk/XPLM_KEY_3/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/XPLM_KEY_3/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"XPLM_KEY_3\"><a href=\"/sdk/XPLM_KEY_3/\">XPLM_KEY_3</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_KEY_3/\">XPLM_KEY_3</a>           51</code></pre></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "### [XPLM_KEY_3](/sdk/XPLM_KEY_3/)\n\n```cpp\n#define XPLM_KEY_3           51\n```",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.438034+00:00",
      "title": "XPLM_KEY_3 | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLM_KEY_3/"
    },
    "https://developer.x-plane.com/sdk/XPLM_KEY_4/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/XPLM_KEY_4/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"XPLM_KEY_4\"><a href=\"/sdk/XPLM_KEY_4/\">XPLM_KEY_4</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_KEY_4/\">XPLM_KEY_4</a>           52</code></pre></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "### [XPLM_KEY_4](/sdk/XPLM_KEY_4/)\n\n```cpp\n#define XPLM_KEY_4           52\n```",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.441034+00:00",
      "title": "XPLM_KEY_4 | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLM_KEY_4/"
    },
    "https://developer.x-plane.com/sdk/XPLM_KEY_5/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/XPLM_KEY_5/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"XPLM_KEY_5\"><a href=\"/sdk/XPLM_KEY_5/\">XPLM_KEY_5</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_KEY_5/\">XPLM_KEY_5</a>           53</code></pre></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "### [XPLM_KEY_5](/sdk/XPLM_KEY_5/)\n\n```cpp\n#define XPLM_KEY_5           53\n```",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.439034+00:00",
      "title": "XPLM_KEY_5 | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLM_KEY_5/"
    },
    "https://developer.x-plane.com/sdk/XPLM_KEY_6/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/XPLM_KEY_6/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"XPLM_KEY_6\"><a href=\"/sdk/XPLM_KEY_6/\">XPLM_KEY_6</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_KEY_6/\">XPLM_KEY_6</a>           54</code></pre></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "### [XPLM_KEY_6](/sdk/XPLM_KEY_6/)\n\n```cpp\n#define XPLM_KEY_6           54\n```",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.443034+00:00",
      "title": "XPLM_KEY_6 | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLM_KEY_6/"
    },
    "https://developer.x-plane.com/sdk/XPLM_KEY_7/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/XPLM_KEY_7/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"XPLM_KEY_7\"><a href=\"/sdk/XPLM_KEY_7/\">XPLM_KEY_7</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_KEY_7/\">XPLM_KEY_7</a>           55</code></pre></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "### [XPLM_KEY_7](/sdk/XPLM_KEY_7/)\n\n```cpp\n#define XPLM_KEY_7           55\n```",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.444036+00:00",
      "title": "XPLM_KEY_7 | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLM_KEY_7/"
    },
    "https://developer.x-plane.com/sdk/XPLM_KEY_8/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/XPLM_KEY_8/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"XPLM_KEY_8\"><a href=\"/sdk/XPLM_KEY_8/\">XPLM_KEY_8</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_KEY_8/\">XPLM_KEY_8</a>           56</code></pre></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "### [XPLM_KEY_8](/sdk/XPLM_KEY_8/)\n\n```cpp\n#define XPLM_KEY_8           56\n```",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.446192+00:00",
      "title": "XPLM_KEY_8 | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLM_KEY_8/"
    },
    "https://developer.x-plane.com/sdk/XPLM_KEY_9/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/XPLM_KEY_9/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"XPLM_KEY_9\"><a href=\"/sdk/XPLM_KEY_9/\">XPLM_KEY_9</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_KEY_9/\">XPLM_KEY_9</a>           57</code></pre></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "### [XPLM_KEY_9](/sdk/XPLM_KEY_9/)\n\n```cpp\n#define XPLM_KEY_9           57\n```",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.449193+00:00",
      "title": "XPLM_KEY_9 | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLM_KEY_9/"
    },
    "https://developer.x-plane.com/sdk/XPLM_KEY_DECIMAL/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/XPLM_KEY_DECIMAL/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"XPLM_KEY_DECIMAL\"><a href=\"/sdk/XPLM_KEY_DECIMAL/\">XPLM_KEY_DECIMAL</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_KEY_DECIMAL/\">XPLM_KEY_DECIMAL</a>     46</code></pre></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "### [XPLM_KEY_DECIMAL](/sdk/XPLM_KEY_DECIMAL/)\n\n```cpp\n#define XPLM_KEY_DECIMAL     46\n```",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.448193+00:00",
      "title": "XPLM_KEY_DECIMAL | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLM_KEY_DECIMAL/"
    },
    "https://developer.x-plane.com/sdk/XPLM_KEY_DELETE/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/XPLM_KEY_DELETE/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"XPLM_KEY_DELETE\"><a href=\"/sdk/XPLM_KEY_DELETE/\">XPLM_KEY_DELETE</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_KEY_DELETE/\">XPLM_KEY_DELETE</a>      8</code></pre></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "### [XPLM_KEY_DELETE](/sdk/XPLM_KEY_DELETE/)\n\n```cpp\n#define XPLM_KEY_DELETE      8\n```",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.451193+00:00",
      "title": "XPLM_KEY_DELETE | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLM_KEY_DELETE/"
    },
    "https://developer.x-plane.com/sdk/XPLM_KEY_DOWN/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/XPLM_KEY_DOWN/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"XPLM_KEY_DOWN\"><a href=\"/sdk/XPLM_KEY_DOWN/\">XPLM_KEY_DOWN</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_KEY_DOWN/\">XPLM_KEY_DOWN</a>        31</code></pre></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "### [XPLM_KEY_DOWN](/sdk/XPLM_KEY_DOWN/)\n\n```cpp\n#define XPLM_KEY_DOWN        31\n```",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.452696+00:00",
      "title": "XPLM_KEY_DOWN | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLM_KEY_DOWN/"
    },
    "https://developer.x-plane.com/sdk/XPLM_KEY_ESCAPE/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/XPLM_KEY_ESCAPE/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"XPLM_KEY_ESCAPE\"><a href=\"/sdk/XPLM_KEY_ESCAPE/\">XPLM_KEY_ESCAPE</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_KEY_ESCAPE/\">XPLM_KEY_ESCAPE</a>      27</code></pre></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "### [XPLM_KEY_ESCAPE](/sdk/XPLM_KEY_ESCAPE/)\n\n```cpp\n#define XPLM_KEY_ESCAPE      27\n```",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.453701+00:00",
      "title": "XPLM_KEY_ESCAPE | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLM_KEY_ESCAPE/"
    },
    "https://developer.x-plane.com/sdk/XPLM_KEY_LEFT/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/XPLM_KEY_LEFT/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"XPLM_KEY_LEFT\"><a href=\"/sdk/XPLM_KEY_LEFT/\">XPLM_KEY_LEFT</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_KEY_LEFT/\">XPLM_KEY_LEFT</a>        28</code></pre></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "### [XPLM_KEY_LEFT](/sdk/XPLM_KEY_LEFT/)\n\n```cpp\n#define XPLM_KEY_LEFT        28\n```",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.455701+00:00",
      "title": "XPLM_KEY_LEFT | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLM_KEY_LEFT/"
    },
    "https://developer.x-plane.com/sdk/XPLM_KEY_RETURN/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/XPLM_KEY_RETURN/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"XPLM_KEY_RETURN\"><a href=\"/sdk/XPLM_KEY_RETURN/\">XPLM_KEY_RETURN</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_KEY_RETURN/\">XPLM_KEY_RETURN</a>      13</code></pre></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "### [XPLM_KEY_RETURN](/sdk/XPLM_KEY_RETURN/)\n\n```cpp\n#define XPLM_KEY_RETURN      13\n```",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.456701+00:00",
      "title": "XPLM_KEY_RETURN | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLM_KEY_RETURN/"
    },
    "https://developer.x-plane.com/sdk/XPLM_KEY_RIGHT/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/XPLM_KEY_RIGHT/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"XPLM_KEY_RIGHT\"><a href=\"/sdk/XPLM_KEY_RIGHT/\">XPLM_KEY_RIGHT</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_KEY_RIGHT/\">XPLM_KEY_RIGHT</a>       29</code></pre></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "### [XPLM_KEY_RIGHT](/sdk/XPLM_KEY_RIGHT/)\n\n```cpp\n#define XPLM_KEY_RIGHT       29\n```",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.458701+00:00",
      "title": "XPLM_KEY_RIGHT | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLM_KEY_RIGHT/"
    },
    "https://developer.x-plane.com/sdk/XPLM_KEY_TAB/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/XPLM_KEY_TAB/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"XPLM_KEY_TAB\"><a href=\"/sdk/XPLM_KEY_TAB/\">XPLM_KEY_TAB</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_KEY_TAB/\">XPLM_KEY_TAB</a>         9</code></pre></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "### [XPLM_KEY_TAB](/sdk/XPLM_KEY_TAB/)\n\n```cpp\n#define XPLM_KEY_TAB         9\n```",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.459701+00:00",
      "title": "XPLM_KEY_TAB | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLM_KEY_TAB/"
    },
    "https://developer.x-plane.com/sdk/XPLM_KEY_UP/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/XPLM_KEY_UP/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"XPLM_KEY_UP\"><a href=\"/sdk/XPLM_KEY_UP/\">XPLM_KEY_UP</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_KEY_UP/\">XPLM_KEY_UP</a>          30</code></pre></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "### [XPLM_KEY_UP](/sdk/XPLM_KEY_UP/)\n\n```cpp\n#define XPLM_KEY_UP          30\n```",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.461701+00:00",
      "title": "XPLM_KEY_UP | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLM_KEY_UP/"
    },
    "https://developer.x-plane.com/sdk/XPLM_MAP_IOS/": {
      "api_signatures": [],
      "category": {
        "category": "XPLM_Map",
        "module": "Xplm Map",
        "url": "https://developer.x-plane.com/sdk/XPLM_MAP_IOS/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"XPLM_MAP_IOS\"><a href=\"/sdk/XPLM_MAP_IOS/\">XPLM_MAP_IOS</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_MAP_IOS/\">XPLM_MAP_IOS</a>         \"XPLM_MAP_IOS\"</code></pre><p>Globally unique identifier for X-Plane’s Instructor Operator Station window, used as the mapToCreateLayerIn parameter in<a href=\"/sdk/XPLMCreateMapLayer_t/\">XPLMCreateMapLayer_t</a></p></div></div></article>",
      "code_examples": [],
      "cross_references": [
        "XPLMCreateMapLayer"
      ],
      "markdown": "### [XPLM_MAP_IOS](/sdk/XPLM_MAP_IOS/)\n\n```cpp\n#define XPLM_MAP_IOS         \"XPLM_MAP_IOS\"\n```\n\nGlobally unique identifier for X-Plane’s Instructor Operator Station window,\nused as the mapToCreateLayerIn parameter\nin[XPLMCreateMapLayer_t](/sdk/XPLMCreateMapLayer_t/)",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:23.860556+00:00",
      "title": "XPLM_MAP_IOS | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLM_MAP_IOS/"
    },
    "https://developer.x-plane.com/sdk/XPLM_MAP_USER_INTERFACE/": {
      "api_signatures": [],
      "category": {
        "category": "XPLM_Map",
        "module": "Xplm Map",
        "url": "https://developer.x-plane.com/sdk/XPLM_MAP_USER_INTERFACE/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"XPLM_MAP_USER_INTERFACE\"><a href=\"/sdk/XPLM_MAP_USER_INTERFACE/\">XPLM_MAP_USER_INTERFACE</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_MAP_USER_INTERFACE/\">XPLM_MAP_USER_INTERFACE</a> \"XPLM_MAP_USER_INTERFACE\"</code></pre><p>Globally unique identifier for X-Plane’s Map window, used as the mapToCreateLayerIn parameter in<a href=\"/sdk/XPLMCreateMapLayer_t/\">XPLMCreateMapLayer_t</a></p></div></div></article>",
      "code_examples": [
        {
          "char_count": 55,
          "code": "#defineXPLM_MAP_USER_INTERFACE\"XPLM_MAP_USER_INTERFACE\"",
          "context": "XPLM_MAP_USER_INTERFACE",
          "id": "example_0",
          "language": "c",
          "line_count": 1,
          "type": "snippet"
        }
      ],
      "cross_references": [
        "XPLMCreateMapLayer"
      ],
      "markdown": "### [XPLM_MAP_USER_INTERFACE](/sdk/XPLM_MAP_USER_INTERFACE/)\n\n```cpp\n#define XPLM_MAP_USER_INTERFACE \"XPLM_MAP_USER_INTERFACE\"\n```\n\nGlobally unique identifier for X-Plane’s Map window, used as the\nmapToCreateLayerIn parameter\nin[XPLMCreateMapLayer_t](/sdk/XPLMCreateMapLayer_t/)",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:23.862556+00:00",
      "title": "XPLM_MAP_USER_INTERFACE | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLM_MAP_USER_INTERFACE/"
    },
    "https://developer.x-plane.com/sdk/XPLM_MSG_AIRPLANE_COUNT_CHANGED/": {
      "api_signatures": [],
      "category": {
        "category": "XPLM_Planes",
        "module": "Xplm Planes",
        "url": "https://developer.x-plane.com/sdk/XPLM_MSG_AIRPLANE_COUNT_CHANGED/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"XPLM_MSG_AIRPLANE_COUNT_CHANGED\"><a href=\"/sdk/XPLM_MSG_AIRPLANE_COUNT_CHANGED/\">XPLM_MSG_AIRPLANE_COUNT_CHANGED</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_MSG_AIRPLANE_COUNT_CHANGED/\">XPLM_MSG_AIRPLANE_COUNT_CHANGED</a> 105</code></pre><p>This message is sent whenever the user adjusts the number of X-Plane aircraft models. You must use XPLMCountPlanes to find out how many planes are now available. This message will only be sent in XP7 and higher because in XP6 the number of aircraft is not user-adjustable. The parameter is ignored.</p></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "### [XPLM_MSG_AIRPLANE_COUNT_CHANGED](/sdk/XPLM_MSG_AIRPLANE_COUNT_CHANGED/)\n\n```cpp\n#define XPLM_MSG_AIRPLANE_COUNT_CHANGED 105\n```\n\nThis message is sent whenever the user adjusts the number of X-Plane aircraft\nmodels. You must use XPLMCountPlanes to find out how many planes are now\navailable. This message will only be sent in XP7 and higher because in XP6 the\nnumber of aircraft is not user-adjustable. The parameter is ignored.",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:24.158421+00:00",
      "title": "XPLM_MSG_AIRPLANE_COUNT_CHANGED | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLM_MSG_AIRPLANE_COUNT_CHANGED/"
    },
    "https://developer.x-plane.com/sdk/XPLM_MSG_AIRPORT_LOADED/": {
      "api_signatures": [],
      "category": {
        "category": "XPLM_Navigation",
        "module": "Xplm Navigation",
        "url": "https://developer.x-plane.com/sdk/XPLM_MSG_AIRPORT_LOADED/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"XPLM_MSG_AIRPORT_LOADED\"><a href=\"/sdk/XPLM_MSG_AIRPORT_LOADED/\">XPLM_MSG_AIRPORT_LOADED</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_MSG_AIRPORT_LOADED/\">XPLM_MSG_AIRPORT_LOADED</a> 103</code></pre><p>This messages is sent whenever the user’s plane is positioned at a new airport. The parameter is ignored.</p></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "### [XPLM_MSG_AIRPORT_LOADED](/sdk/XPLM_MSG_AIRPORT_LOADED/)\n\n```cpp\n#define XPLM_MSG_AIRPORT_LOADED 103\n```\n\nThis messages is sent whenever the user’s plane is positioned at a new airport.\nThe parameter is ignored.",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:24.097137+00:00",
      "title": "XPLM_MSG_AIRPORT_LOADED | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLM_MSG_AIRPORT_LOADED/"
    },
    "https://developer.x-plane.com/sdk/XPLM_MSG_DATAREFS_ADDED/": {
      "api_signatures": [],
      "category": {
        "category": "XPLM_DataAccess",
        "module": "Xplm Dataaccess",
        "url": "https://developer.x-plane.com/sdk/XPLM_MSG_DATAREFS_ADDED/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"define XPLM400\"><h3 class=\"sdk-api-define\" id=\"XPLM_MSG_DATAREFS_ADDED\"><a href=\"/sdk/XPLM_MSG_DATAREFS_ADDED/\">XPLM_MSG_DATAREFS_ADDED</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_MSG_DATAREFS_ADDED/\">XPLM_MSG_DATAREFS_ADDED</a> 114</code></pre><p>Sent to your plugin per-frame (at-most) when/if datarefs are added. It will include the new data ref total count so that your plugin can keep a local cache of the total, see what’s changed and know which ones to inquire about if it cares.</p><p>This message is only sent to plugins that enable the XPLM_WANTS_DATAREF_NOTIFICATIONS feature.</p></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "### [XPLM_MSG_DATAREFS_ADDED](/sdk/XPLM_MSG_DATAREFS_ADDED/)\n\n```cpp\n#define XPLM_MSG_DATAREFS_ADDED 114\n```\n\nSent to your plugin per-frame (at-most) when/if datarefs are added. It will\ninclude the new data ref total count so that your plugin can keep a local cache\nof the total, see what’s changed and know which ones to inquire about if it\ncares.\n\nThis message is only sent to plugins that enable the\nXPLM_WANTS_DATAREF_NOTIFICATIONS feature.",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:23.420788+00:00",
      "title": "XPLM_MSG_DATAREFS_ADDED | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLM_MSG_DATAREFS_ADDED/"
    },
    "https://developer.x-plane.com/sdk/XPLM_MSG_ENTERED_VR/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/XPLM_MSG_ENTERED_VR/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"define XPLM301\"><h3 class=\"sdk-api-define\" id=\"XPLM_MSG_ENTERED_VR\"><a href=\"/sdk/XPLM_MSG_ENTERED_VR/\">XPLM_MSG_ENTERED_VR</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_MSG_ENTERED_VR/\">XPLM_MSG_ENTERED_VR</a>  109</code></pre><p>Sent to your plugin right before X-Plane enters virtual reality mode (at which time any windows that are not positioned in VR mode will no longer be visible to the user). The parameter is unused and should be ignored.</p></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "### [XPLM_MSG_ENTERED_VR](/sdk/XPLM_MSG_ENTERED_VR/)\n\n```cpp\n#define XPLM_MSG_ENTERED_VR  109\n```\n\nSent to your plugin right before X-Plane enters virtual reality mode (at which\ntime any windows that are not positioned in VR mode will no longer be visible to\nthe user). The parameter is unused and should be ignored.",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.462700+00:00",
      "title": "XPLM_MSG_ENTERED_VR | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLM_MSG_ENTERED_VR/"
    },
    "https://developer.x-plane.com/sdk/XPLM_MSG_EXITING_VR/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/XPLM_MSG_EXITING_VR/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"define XPLM301\"><h3 class=\"sdk-api-define\" id=\"XPLM_MSG_EXITING_VR\"><a href=\"/sdk/XPLM_MSG_EXITING_VR/\">XPLM_MSG_EXITING_VR</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_MSG_EXITING_VR/\">XPLM_MSG_EXITING_VR</a>  110</code></pre><p>Sent to your plugin right before X-Plane leaves virtual reality mode (at which time you may want to clean up windows that are positioned in VR mode). The parameter is unused and should be ignored.</p></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "### [XPLM_MSG_EXITING_VR](/sdk/XPLM_MSG_EXITING_VR/)\n\n```cpp\n#define XPLM_MSG_EXITING_VR  110\n```\n\nSent to your plugin right before X-Plane leaves virtual reality mode (at which\ntime you may want to clean up windows that are positioned in VR mode). The\nparameter is unused and should be ignored.",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.467700+00:00",
      "title": "XPLM_MSG_EXITING_VR | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLM_MSG_EXITING_VR/"
    },
    "https://developer.x-plane.com/sdk/XPLM_MSG_FMOD_BANK_LOADED/": {
      "api_signatures": [],
      "category": {
        "category": "XPLM_Sound",
        "module": "Xplm Sound",
        "url": "https://developer.x-plane.com/sdk/XPLM_MSG_FMOD_BANK_LOADED/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"define XPLM400\"><h3 class=\"sdk-api-define\" id=\"XPLM_MSG_FMOD_BANK_LOADED\"><a href=\"/sdk/XPLM_MSG_FMOD_BANK_LOADED/\">XPLM_MSG_FMOD_BANK_LOADED</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_MSG_FMOD_BANK_LOADED/\">XPLM_MSG_FMOD_BANK_LOADED</a> 112</code></pre><p>Sent to your plugin after FMOD sound banks are loaded. The parameter is the<a href=\"/sdk/XPLMBankID/\">XPLMBankID</a>enum in<a href=\"/sdk/XPLMSound/\">XPLMSound</a>.h, 0 for the master bank and 1 for the radio bank.</p></div></div></article>",
      "code_examples": [],
      "cross_references": [
        "XPLMBankID",
        "XPLMSound"
      ],
      "markdown": "### [XPLM_MSG_FMOD_BANK_LOADED](/sdk/XPLM_MSG_FMOD_BANK_LOADED/)\n\n```cpp\n#define XPLM_MSG_FMOD_BANK_LOADED 112\n```\n\nSent to your plugin after FMOD sound banks are loaded. The parameter is\nthe[XPLMBankID](/sdk/XPLMBankID/)enum in[XPLMSound](/sdk/XPLMSound/).h, 0 for\nthe master bank and 1 for the radio bank.",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:24.474485+00:00",
      "title": "XPLM_MSG_FMOD_BANK_LOADED | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLM_MSG_FMOD_BANK_LOADED/"
    },
    "https://developer.x-plane.com/sdk/XPLM_MSG_FMOD_BANK_UNLOADING/": {
      "api_signatures": [],
      "category": {
        "category": "XPLM_Sound",
        "module": "Xplm Sound",
        "url": "https://developer.x-plane.com/sdk/XPLM_MSG_FMOD_BANK_UNLOADING/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"define XPLM400\"><h3 class=\"sdk-api-define\" id=\"XPLM_MSG_FMOD_BANK_UNLOADING\"><a href=\"/sdk/XPLM_MSG_FMOD_BANK_UNLOADING/\">XPLM_MSG_FMOD_BANK_UNLOADING</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_MSG_FMOD_BANK_UNLOADING/\">XPLM_MSG_FMOD_BANK_UNLOADING</a> 113</code></pre><p>Sent to your plugin before FMOD sound banks are unloaded. Any associated resources should be cleaned up at this point. The parameter is the<a href=\"/sdk/XPLMBankID/\">XPLMBankID</a>enum in<a href=\"/sdk/XPLMSound/\">XPLMSound</a>.h, 0 for the master bank and 1 for the radio bank.</p></div></div></article>",
      "code_examples": [],
      "cross_references": [
        "XPLMBankID",
        "XPLMSound"
      ],
      "markdown": "### [XPLM_MSG_FMOD_BANK_UNLOADING](/sdk/XPLM_MSG_FMOD_BANK_UNLOADING/)\n\n```cpp\n#define XPLM_MSG_FMOD_BANK_UNLOADING 113\n```\n\nSent to your plugin before FMOD sound banks are unloaded. Any associated\nresources should be cleaned up at this point. The parameter is\nthe[XPLMBankID](/sdk/XPLMBankID/)enum in[XPLMSound](/sdk/XPLMSound/).h, 0 for\nthe master bank and 1 for the radio bank.",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:24.476567+00:00",
      "title": "XPLM_MSG_FMOD_BANK_UNLOADING | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLM_MSG_FMOD_BANK_UNLOADING/"
    },
    "https://developer.x-plane.com/sdk/XPLM_MSG_LIVERY_LOADED/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/XPLM_MSG_LIVERY_LOADED/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"define XPLM210\"><h3 class=\"sdk-api-define\" id=\"XPLM_MSG_LIVERY_LOADED\"><a href=\"/sdk/XPLM_MSG_LIVERY_LOADED/\">XPLM_MSG_LIVERY_LOADED</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_MSG_LIVERY_LOADED/\">XPLM_MSG_LIVERY_LOADED</a> 108</code></pre><p>This message is sent to your plugin right after a livery is loaded for an airplane. You can use this to check the new livery (via datarefs) and react accordingly. The parameter contains the index number of the aircraft whose livery is changing.</p></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "### [XPLM_MSG_LIVERY_LOADED](/sdk/XPLM_MSG_LIVERY_LOADED/)\n\n```cpp\n#define XPLM_MSG_LIVERY_LOADED 108\n```\n\nThis message is sent to your plugin right after a livery is loaded for an\nairplane. You can use this to check the new livery (via datarefs) and react\naccordingly. The parameter contains the index number of the aircraft whose\nlivery is changing.",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.465701+00:00",
      "title": "XPLM_MSG_LIVERY_LOADED | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLM_MSG_LIVERY_LOADED/"
    },
    "https://developer.x-plane.com/sdk/XPLM_MSG_PLANE_CRASHED/": {
      "api_signatures": [],
      "category": {
        "category": "XPLM_Planes",
        "module": "Xplm Planes",
        "url": "https://developer.x-plane.com/sdk/XPLM_MSG_PLANE_CRASHED/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"XPLM_MSG_PLANE_CRASHED\"><a href=\"/sdk/XPLM_MSG_PLANE_CRASHED/\">XPLM_MSG_PLANE_CRASHED</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_MSG_PLANE_CRASHED/\">XPLM_MSG_PLANE_CRASHED</a> 101</code></pre><p>This message is sent to your plugin whenever the user’s plane crashes. The parameter is ignored.</p></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "### [XPLM_MSG_PLANE_CRASHED](/sdk/XPLM_MSG_PLANE_CRASHED/)\n\n```cpp\n#define XPLM_MSG_PLANE_CRASHED 101\n```\n\nThis message is sent to your plugin whenever the user’s plane crashes. The\nparameter is ignored.",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:24.165421+00:00",
      "title": "XPLM_MSG_PLANE_CRASHED | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLM_MSG_PLANE_CRASHED/"
    },
    "https://developer.x-plane.com/sdk/XPLM_MSG_PLANE_LOADED/": {
      "api_signatures": [],
      "category": {
        "category": "XPLM_Planes",
        "module": "Xplm Planes",
        "url": "https://developer.x-plane.com/sdk/XPLM_MSG_PLANE_LOADED/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"XPLM_MSG_PLANE_LOADED\"><a href=\"/sdk/XPLM_MSG_PLANE_LOADED/\">XPLM_MSG_PLANE_LOADED</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_MSG_PLANE_LOADED/\">XPLM_MSG_PLANE_LOADED</a> 102</code></pre><p>This message is sent to your plugin whenever a new plane is loaded. The parameter contains the index number of the plane being loaded; 0 indicates the user’s plane.</p></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "### [XPLM_MSG_PLANE_LOADED](/sdk/XPLM_MSG_PLANE_LOADED/)\n\n```cpp\n#define XPLM_MSG_PLANE_LOADED 102\n```\n\nThis message is sent to your plugin whenever a new plane is loaded. The\nparameter contains the index number of the plane being loaded; 0 indicates the\nuser’s plane.",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:24.160419+00:00",
      "title": "XPLM_MSG_PLANE_LOADED | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLM_MSG_PLANE_LOADED/"
    },
    "https://developer.x-plane.com/sdk/XPLM_MSG_PLANE_UNLOADED/": {
      "api_signatures": [],
      "category": {
        "category": "XPLM_Planes",
        "module": "Xplm Planes",
        "url": "https://developer.x-plane.com/sdk/XPLM_MSG_PLANE_UNLOADED/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"define XPLM200\"><h3 class=\"sdk-api-define\" id=\"XPLM_MSG_PLANE_UNLOADED\"><a href=\"/sdk/XPLM_MSG_PLANE_UNLOADED/\">XPLM_MSG_PLANE_UNLOADED</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_MSG_PLANE_UNLOADED/\">XPLM_MSG_PLANE_UNLOADED</a> 106</code></pre><p>This message is sent to your plugin whenever a plane is unloaded. The parameter contains the index number of the plane being unloaded; 0 indicates the user’s plane. The parameter is of type int, passed as the value of the pointer. (That is: the parameter is an int, not a pointer to an int.)</p></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "### [XPLM_MSG_PLANE_UNLOADED](/sdk/XPLM_MSG_PLANE_UNLOADED/)\n\n```cpp\n#define XPLM_MSG_PLANE_UNLOADED 106\n```\n\nThis message is sent to your plugin whenever a plane is unloaded. The parameter\ncontains the index number of the plane being unloaded; 0 indicates the user’s\nplane. The parameter is of type int, passed as the value of the pointer. (That\nis: the parameter is an int, not a pointer to an int.)",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:24.167485+00:00",
      "title": "XPLM_MSG_PLANE_UNLOADED | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLM_MSG_PLANE_UNLOADED/"
    },
    "https://developer.x-plane.com/sdk/XPLM_MSG_RELEASE_PLANES/": {
      "api_signatures": [],
      "category": {
        "category": "XPLM_Planes",
        "module": "Xplm Planes",
        "url": "https://developer.x-plane.com/sdk/XPLM_MSG_RELEASE_PLANES/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"define XPLM303\"><h3 class=\"sdk-api-define\" id=\"XPLM_MSG_RELEASE_PLANES\"><a href=\"/sdk/XPLM_MSG_RELEASE_PLANES/\">XPLM_MSG_RELEASE_PLANES</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_MSG_RELEASE_PLANES/\">XPLM_MSG_RELEASE_PLANES</a> 111</code></pre><p>Sent to your plugin if another plugin wants to take over AI planes. If you are a synthetic traffic provider, that probably means a plugin for an online network has connected and wants to supply aircraft flown by real humans and you should cease to provide synthetic traffic. If however you are providing online traffic from real humans, you probably don’t want to disconnect, in which case you just ignore this message. The sender is the plugin ID of the plugin asking for control of the planes now. You can use it to find out who is requesting and whether you should yield to them. Synthetic traffic providers should always yield to online networks. The parameter is unused and should be ignored.</p></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "### [XPLM_MSG_RELEASE_PLANES](/sdk/XPLM_MSG_RELEASE_PLANES/)\n\n```cpp\n#define XPLM_MSG_RELEASE_PLANES 111\n```\n\nSent to your plugin if another plugin wants to take over AI planes. If you are a\nsynthetic traffic provider, that probably means a plugin for an online network\nhas connected and wants to supply aircraft flown by real humans and you should\ncease to provide synthetic traffic. If however you are providing online traffic\nfrom real humans, you probably don’t want to disconnect, in which case you just\nignore this message. The sender is the plugin ID of the plugin asking for\ncontrol of the planes now. You can use it to find out who is requesting and\nwhether you should yield to them. Synthetic traffic providers should always\nyield to online networks. The parameter is unused and should be ignored.",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:24.169488+00:00",
      "title": "XPLM_MSG_RELEASE_PLANES | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLM_MSG_RELEASE_PLANES/"
    },
    "https://developer.x-plane.com/sdk/XPLM_MSG_SCENERY_LOADED/": {
      "api_signatures": [],
      "category": {
        "category": "XPLM_Scenery",
        "module": "Xplm Scenery",
        "url": "https://developer.x-plane.com/sdk/XPLM_MSG_SCENERY_LOADED/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"XPLM_MSG_SCENERY_LOADED\"><a href=\"/sdk/XPLM_MSG_SCENERY_LOADED/\">XPLM_MSG_SCENERY_LOADED</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_MSG_SCENERY_LOADED/\">XPLM_MSG_SCENERY_LOADED</a> 104</code></pre><p>This message is sent whenever new scenery is loaded. Use datarefs to determine the new scenery files that were loaded. The parameter is ignored.</p></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "### [XPLM_MSG_SCENERY_LOADED](/sdk/XPLM_MSG_SCENERY_LOADED/)\n\n```cpp\n#define XPLM_MSG_SCENERY_LOADED 104\n```\n\nThis message is sent whenever new scenery is loaded. Use datarefs to determine\nthe new scenery files that were loaded. The parameter is ignored.",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:24.394130+00:00",
      "title": "XPLM_MSG_SCENERY_LOADED | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLM_MSG_SCENERY_LOADED/"
    },
    "https://developer.x-plane.com/sdk/XPLM_MSG_WILL_WRITE_PREFS/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/XPLM_MSG_WILL_WRITE_PREFS/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"define XPLM210\"><h3 class=\"sdk-api-define\" id=\"XPLM_MSG_WILL_WRITE_PREFS\"><a href=\"/sdk/XPLM_MSG_WILL_WRITE_PREFS/\">XPLM_MSG_WILL_WRITE_PREFS</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_MSG_WILL_WRITE_PREFS/\">XPLM_MSG_WILL_WRITE_PREFS</a> 107</code></pre><p>This message is sent to your plugin right before X-Plane writes its preferences file. You can use this for two purposes: to write your own preferences, and to modify any datarefs to influence preferences output. For example, if your plugin temporarily modifies saved preferences, you can put them back to their default values here to avoid having the tweaks be persisted if your plugin is not loaded on the next invocation of X-Plane. The parameter is ignored.</p></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "### [XPLM_MSG_WILL_WRITE_PREFS](/sdk/XPLM_MSG_WILL_WRITE_PREFS/)\n\n```cpp\n#define XPLM_MSG_WILL_WRITE_PREFS 107\n```\n\nThis message is sent to your plugin right before X-Plane writes its preferences\nfile. You can use this for two purposes: to write your own preferences, and to\nmodify any datarefs to influence preferences output. For example, if your plugin\ntemporarily modifies saved preferences, you can put them back to their default\nvalues here to avoid having the tweaks be persisted if your plugin is not loaded\non the next invocation of X-Plane. The parameter is ignored.",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.468700+00:00",
      "title": "XPLM_MSG_WILL_WRITE_PREFS | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLM_MSG_WILL_WRITE_PREFS/"
    },
    "https://developer.x-plane.com/sdk/XPLM_NAV_NOT_FOUND/": {
      "api_signatures": [],
      "category": {
        "category": "XPLM_Navigation",
        "module": "Xplm Navigation",
        "url": "https://developer.x-plane.com/sdk/XPLM_NAV_NOT_FOUND/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"XPLM_NAV_NOT_FOUND\"><a href=\"/sdk/XPLM_NAV_NOT_FOUND/\">XPLM_NAV_NOT_FOUND</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_NAV_NOT_FOUND/\">XPLM_NAV_NOT_FOUND</a>   -1</code></pre></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "### [XPLM_NAV_NOT_FOUND](/sdk/XPLM_NAV_NOT_FOUND/)\n\n```cpp\n#define XPLM_NAV_NOT_FOUND   -1\n```",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:24.100137+00:00",
      "title": "XPLM_NAV_NOT_FOUND | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLM_NAV_NOT_FOUND/"
    },
    "https://developer.x-plane.com/sdk/XPLM_NO_PLUGIN_ID/": {
      "api_signatures": [],
      "category": {
        "category": "XPLM_Plugin",
        "module": "Xplm Plugin",
        "url": "https://developer.x-plane.com/sdk/XPLM_NO_PLUGIN_ID/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"XPLM_NO_PLUGIN_ID\"><a href=\"/sdk/XPLM_NO_PLUGIN_ID/\">XPLM_NO_PLUGIN_ID</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_NO_PLUGIN_ID/\">XPLM_NO_PLUGIN_ID</a>    (-1)</code></pre><p>No plugin.</p></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "### [XPLM_NO_PLUGIN_ID](/sdk/XPLM_NO_PLUGIN_ID/)\n\n```cpp\n#define XPLM_NO_PLUGIN_ID    (-1)\n```\n\nNo plugin.",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:24.256990+00:00",
      "title": "XPLM_NO_PLUGIN_ID | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLM_NO_PLUGIN_ID/"
    },
    "https://developer.x-plane.com/sdk/XPLM_PLUGIN_XPLANE/": {
      "api_signatures": [],
      "category": {
        "category": "XPLM_Planes",
        "module": "Xplm Planes",
        "url": "https://developer.x-plane.com/sdk/XPLM_PLUGIN_XPLANE/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"XPLM_PLUGIN_XPLANE\"><a href=\"/sdk/XPLM_PLUGIN_XPLANE/\">XPLM_PLUGIN_XPLANE</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_PLUGIN_XPLANE/\">XPLM_PLUGIN_XPLANE</a>   (0)</code></pre><p>X-Plane itself</p></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "### [XPLM_PLUGIN_XPLANE](/sdk/XPLM_PLUGIN_XPLANE/)\n\n```cpp\n#define XPLM_PLUGIN_XPLANE   (0)\n```\n\nX-Plane itself",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:24.172485+00:00",
      "title": "XPLM_PLUGIN_XPLANE | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLM_PLUGIN_XPLANE/"
    },
    "https://developer.x-plane.com/sdk/XPLM_USER_AIRCRAFT/": {
      "api_signatures": [],
      "category": {
        "category": "XPLM_Planes",
        "module": "Xplm Planes",
        "url": "https://developer.x-plane.com/sdk/XPLM_USER_AIRCRAFT/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"XPLM_USER_AIRCRAFT\"><a href=\"/sdk/XPLM_USER_AIRCRAFT/\">XPLM_USER_AIRCRAFT</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_USER_AIRCRAFT/\">XPLM_USER_AIRCRAFT</a>   0</code></pre><p>The user’s aircraft is always index 0.</p></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "### [XPLM_USER_AIRCRAFT](/sdk/XPLM_USER_AIRCRAFT/)\n\n```cpp\n#define XPLM_USER_AIRCRAFT   0\n```\n\nThe user’s aircraft is always index 0.",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:24.174488+00:00",
      "title": "XPLM_USER_AIRCRAFT | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLM_USER_AIRCRAFT/"
    },
    "https://developer.x-plane.com/sdk/XPLM_VK_0/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/XPLM_VK_0/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"XPLM_VK_0\"><a href=\"/sdk/XPLM_VK_0/\">XPLM_VK_0</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_VK_0/\">XPLM_VK_0</a>            0x30</code></pre><p><a href=\"/sdk/XPLM_VK_0/\">XPLM_VK_0</a>thru<a href=\"/sdk/XPLM_VK_9/\">XPLM_VK_9</a>are the same as ASCII ‘0’ thru ‘9’ (0x30 - 0x39)</p></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "### [XPLM_VK_0](/sdk/XPLM_VK_0/)\n\n```cpp\n#define XPLM_VK_0            0x30\n```\n\n[XPLM_VK_0](/sdk/XPLM_VK_0/)thru[XPLM_VK_9](/sdk/XPLM_VK_9/)are the same as\nASCII ‘0’ thru ‘9’ (0x30 - 0x39)",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.470701+00:00",
      "title": "XPLM_VK_0 | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLM_VK_0/"
    },
    "https://developer.x-plane.com/sdk/XPLM_VK_1/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/XPLM_VK_1/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"XPLM_VK_1\"><a href=\"/sdk/XPLM_VK_1/\">XPLM_VK_1</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_VK_1/\">XPLM_VK_1</a>            0x31</code></pre></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "### [XPLM_VK_1](/sdk/XPLM_VK_1/)\n\n```cpp\n#define XPLM_VK_1            0x31\n```",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.472702+00:00",
      "title": "XPLM_VK_1 | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLM_VK_1/"
    },
    "https://developer.x-plane.com/sdk/XPLM_VK_2/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/XPLM_VK_2/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"XPLM_VK_2\"><a href=\"/sdk/XPLM_VK_2/\">XPLM_VK_2</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_VK_2/\">XPLM_VK_2</a>            0x32</code></pre></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "### [XPLM_VK_2](/sdk/XPLM_VK_2/)\n\n```cpp\n#define XPLM_VK_2            0x32\n```",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.473702+00:00",
      "title": "XPLM_VK_2 | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLM_VK_2/"
    },
    "https://developer.x-plane.com/sdk/XPLM_VK_3/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/XPLM_VK_3/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"XPLM_VK_3\"><a href=\"/sdk/XPLM_VK_3/\">XPLM_VK_3</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_VK_3/\">XPLM_VK_3</a>            0x33</code></pre></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "### [XPLM_VK_3](/sdk/XPLM_VK_3/)\n\n```cpp\n#define XPLM_VK_3            0x33\n```",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.475700+00:00",
      "title": "XPLM_VK_3 | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLM_VK_3/"
    },
    "https://developer.x-plane.com/sdk/XPLM_VK_4/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/XPLM_VK_4/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"XPLM_VK_4\"><a href=\"/sdk/XPLM_VK_4/\">XPLM_VK_4</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_VK_4/\">XPLM_VK_4</a>            0x34</code></pre></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "### [XPLM_VK_4](/sdk/XPLM_VK_4/)\n\n```cpp\n#define XPLM_VK_4            0x34\n```",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.477797+00:00",
      "title": "XPLM_VK_4 | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLM_VK_4/"
    },
    "https://developer.x-plane.com/sdk/XPLM_VK_5/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/XPLM_VK_5/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"XPLM_VK_5\"><a href=\"/sdk/XPLM_VK_5/\">XPLM_VK_5</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_VK_5/\">XPLM_VK_5</a>            0x35</code></pre></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "### [XPLM_VK_5](/sdk/XPLM_VK_5/)\n\n```cpp\n#define XPLM_VK_5            0x35\n```",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.481813+00:00",
      "title": "XPLM_VK_5 | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLM_VK_5/"
    },
    "https://developer.x-plane.com/sdk/XPLM_VK_6/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/XPLM_VK_6/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"XPLM_VK_6\"><a href=\"/sdk/XPLM_VK_6/\">XPLM_VK_6</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_VK_6/\">XPLM_VK_6</a>            0x36</code></pre></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "### [XPLM_VK_6](/sdk/XPLM_VK_6/)\n\n```cpp\n#define XPLM_VK_6            0x36\n```",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.479797+00:00",
      "title": "XPLM_VK_6 | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLM_VK_6/"
    },
    "https://developer.x-plane.com/sdk/XPLM_VK_7/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/XPLM_VK_7/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"XPLM_VK_7\"><a href=\"/sdk/XPLM_VK_7/\">XPLM_VK_7</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_VK_7/\">XPLM_VK_7</a>            0x37</code></pre></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "### [XPLM_VK_7](/sdk/XPLM_VK_7/)\n\n```cpp\n#define XPLM_VK_7            0x37\n```",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.484799+00:00",
      "title": "XPLM_VK_7 | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLM_VK_7/"
    },
    "https://developer.x-plane.com/sdk/XPLM_VK_8/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/XPLM_VK_8/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"XPLM_VK_8\"><a href=\"/sdk/XPLM_VK_8/\">XPLM_VK_8</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_VK_8/\">XPLM_VK_8</a>            0x38</code></pre></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "### [XPLM_VK_8](/sdk/XPLM_VK_8/)\n\n```cpp\n#define XPLM_VK_8            0x38\n```",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.487915+00:00",
      "title": "XPLM_VK_8 | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLM_VK_8/"
    },
    "https://developer.x-plane.com/sdk/XPLM_VK_9/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/XPLM_VK_9/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"XPLM_VK_9\"><a href=\"/sdk/XPLM_VK_9/\">XPLM_VK_9</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_VK_9/\">XPLM_VK_9</a>            0x39</code></pre></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "### [XPLM_VK_9](/sdk/XPLM_VK_9/)\n\n```cpp\n#define XPLM_VK_9            0x39\n```",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.493911+00:00",
      "title": "XPLM_VK_9 | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLM_VK_9/"
    },
    "https://developer.x-plane.com/sdk/XPLM_VK_A/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/XPLM_VK_A/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"XPLM_VK_A\"><a href=\"/sdk/XPLM_VK_A/\">XPLM_VK_A</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_VK_A/\">XPLM_VK_A</a>            0x41</code></pre><p><a href=\"/sdk/XPLM_VK_A/\">XPLM_VK_A</a>thru<a href=\"/sdk/XPLM_VK_Z/\">XPLM_VK_Z</a>are the same as ASCII ‘A’ thru ‘Z’ (0x41 - 0x5A)</p></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "### [XPLM_VK_A](/sdk/XPLM_VK_A/)\n\n```cpp\n#define XPLM_VK_A            0x41\n```\n\n[XPLM_VK_A](/sdk/XPLM_VK_A/)thru[XPLM_VK_Z](/sdk/XPLM_VK_Z/)are the same as\nASCII ‘A’ thru ‘Z’ (0x41 - 0x5A)",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.490912+00:00",
      "title": "XPLM_VK_A | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLM_VK_A/"
    },
    "https://developer.x-plane.com/sdk/XPLM_VK_ADD/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/XPLM_VK_ADD/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"XPLM_VK_ADD\"><a href=\"/sdk/XPLM_VK_ADD/\">XPLM_VK_ADD</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_VK_ADD/\">XPLM_VK_ADD</a>          0x6B</code></pre></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "### [XPLM_VK_ADD](/sdk/XPLM_VK_ADD/)\n\n```cpp\n#define XPLM_VK_ADD          0x6B\n```",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.496038+00:00",
      "title": "XPLM_VK_ADD | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLM_VK_ADD/"
    },
    "https://developer.x-plane.com/sdk/XPLM_VK_B/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/XPLM_VK_B/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"XPLM_VK_B\"><a href=\"/sdk/XPLM_VK_B/\">XPLM_VK_B</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_VK_B/\">XPLM_VK_B</a>            0x42</code></pre></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "### [XPLM_VK_B](/sdk/XPLM_VK_B/)\n\n```cpp\n#define XPLM_VK_B            0x42\n```",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.497039+00:00",
      "title": "XPLM_VK_B | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLM_VK_B/"
    },
    "https://developer.x-plane.com/sdk/XPLM_VK_BACK/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/XPLM_VK_BACK/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"XPLM_VK_BACK\"><a href=\"/sdk/XPLM_VK_BACK/\">XPLM_VK_BACK</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_VK_BACK/\">XPLM_VK_BACK</a>         0x08</code></pre></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "### [XPLM_VK_BACK](/sdk/XPLM_VK_BACK/)\n\n```cpp\n#define XPLM_VK_BACK         0x08\n```",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.499038+00:00",
      "title": "XPLM_VK_BACK | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLM_VK_BACK/"
    },
    "https://developer.x-plane.com/sdk/XPLM_VK_BACKQUOTE/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/XPLM_VK_BACKQUOTE/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"XPLM_VK_BACKQUOTE\"><a href=\"/sdk/XPLM_VK_BACKQUOTE/\">XPLM_VK_BACKQUOTE</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_VK_BACKQUOTE/\">XPLM_VK_BACKQUOTE</a>    0xBA</code></pre></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "### [XPLM_VK_BACKQUOTE](/sdk/XPLM_VK_BACKQUOTE/)\n\n```cpp\n#define XPLM_VK_BACKQUOTE    0xBA\n```",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.502039+00:00",
      "title": "XPLM_VK_BACKQUOTE | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLM_VK_BACKQUOTE/"
    },
    "https://developer.x-plane.com/sdk/XPLM_VK_BACKSLASH/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/XPLM_VK_BACKSLASH/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"XPLM_VK_BACKSLASH\"><a href=\"/sdk/XPLM_VK_BACKSLASH/\">XPLM_VK_BACKSLASH</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_VK_BACKSLASH/\">XPLM_VK_BACKSLASH</a>    0xB6</code></pre></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "### [XPLM_VK_BACKSLASH](/sdk/XPLM_VK_BACKSLASH/)\n\n```cpp\n#define XPLM_VK_BACKSLASH    0xB6\n```",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.500039+00:00",
      "title": "XPLM_VK_BACKSLASH | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLM_VK_BACKSLASH/"
    },
    "https://developer.x-plane.com/sdk/XPLM_VK_C/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/XPLM_VK_C/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"XPLM_VK_C\"><a href=\"/sdk/XPLM_VK_C/\">XPLM_VK_C</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_VK_C/\">XPLM_VK_C</a>            0x43</code></pre></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "### [XPLM_VK_C](/sdk/XPLM_VK_C/)\n\n```cpp\n#define XPLM_VK_C            0x43\n```",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.504038+00:00",
      "title": "XPLM_VK_C | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLM_VK_C/"
    },
    "https://developer.x-plane.com/sdk/XPLM_VK_CLEAR/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/XPLM_VK_CLEAR/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"XPLM_VK_CLEAR\"><a href=\"/sdk/XPLM_VK_CLEAR/\">XPLM_VK_CLEAR</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_VK_CLEAR/\">XPLM_VK_CLEAR</a>        0x0C</code></pre></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "### [XPLM_VK_CLEAR](/sdk/XPLM_VK_CLEAR/)\n\n```cpp\n#define XPLM_VK_CLEAR        0x0C\n```",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.507092+00:00",
      "title": "XPLM_VK_CLEAR | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLM_VK_CLEAR/"
    },
    "https://developer.x-plane.com/sdk/XPLM_VK_COMMA/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/XPLM_VK_COMMA/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"XPLM_VK_COMMA\"><a href=\"/sdk/XPLM_VK_COMMA/\">XPLM_VK_COMMA</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_VK_COMMA/\">XPLM_VK_COMMA</a>        0xB7</code></pre></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "### [XPLM_VK_COMMA](/sdk/XPLM_VK_COMMA/)\n\n```cpp\n#define XPLM_VK_COMMA        0xB7\n```",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.505038+00:00",
      "title": "XPLM_VK_COMMA | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLM_VK_COMMA/"
    },
    "https://developer.x-plane.com/sdk/XPLM_VK_D/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/XPLM_VK_D/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"XPLM_VK_D\"><a href=\"/sdk/XPLM_VK_D/\">XPLM_VK_D</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_VK_D/\">XPLM_VK_D</a>            0x44</code></pre></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "### [XPLM_VK_D](/sdk/XPLM_VK_D/)\n\n```cpp\n#define XPLM_VK_D            0x44\n```",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.510094+00:00",
      "title": "XPLM_VK_D | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLM_VK_D/"
    },
    "https://developer.x-plane.com/sdk/XPLM_VK_DECIMAL/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/XPLM_VK_DECIMAL/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"XPLM_VK_DECIMAL\"><a href=\"/sdk/XPLM_VK_DECIMAL/\">XPLM_VK_DECIMAL</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_VK_DECIMAL/\">XPLM_VK_DECIMAL</a>      0x6E</code></pre></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "### [XPLM_VK_DECIMAL](/sdk/XPLM_VK_DECIMAL/)\n\n```cpp\n#define XPLM_VK_DECIMAL      0x6E\n```",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.508094+00:00",
      "title": "XPLM_VK_DECIMAL | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLM_VK_DECIMAL/"
    },
    "https://developer.x-plane.com/sdk/XPLM_VK_DELETE/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/XPLM_VK_DELETE/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"XPLM_VK_DELETE\"><a href=\"/sdk/XPLM_VK_DELETE/\">XPLM_VK_DELETE</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_VK_DELETE/\">XPLM_VK_DELETE</a>       0x2E</code></pre></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "### [XPLM_VK_DELETE](/sdk/XPLM_VK_DELETE/)\n\n```cpp\n#define XPLM_VK_DELETE       0x2E\n```",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.511094+00:00",
      "title": "XPLM_VK_DELETE | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLM_VK_DELETE/"
    },
    "https://developer.x-plane.com/sdk/XPLM_VK_DIVIDE/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/XPLM_VK_DIVIDE/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"XPLM_VK_DIVIDE\"><a href=\"/sdk/XPLM_VK_DIVIDE/\">XPLM_VK_DIVIDE</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_VK_DIVIDE/\">XPLM_VK_DIVIDE</a>       0x6F</code></pre></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "### [XPLM_VK_DIVIDE](/sdk/XPLM_VK_DIVIDE/)\n\n```cpp\n#define XPLM_VK_DIVIDE       0x6F\n```",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.513095+00:00",
      "title": "XPLM_VK_DIVIDE | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLM_VK_DIVIDE/"
    },
    "https://developer.x-plane.com/sdk/XPLM_VK_DOWN/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/XPLM_VK_DOWN/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"XPLM_VK_DOWN\"><a href=\"/sdk/XPLM_VK_DOWN/\">XPLM_VK_DOWN</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_VK_DOWN/\">XPLM_VK_DOWN</a>         0x28</code></pre></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "### [XPLM_VK_DOWN](/sdk/XPLM_VK_DOWN/)\n\n```cpp\n#define XPLM_VK_DOWN         0x28\n```",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.514094+00:00",
      "title": "XPLM_VK_DOWN | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLM_VK_DOWN/"
    },
    "https://developer.x-plane.com/sdk/XPLM_VK_E/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/XPLM_VK_E/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"XPLM_VK_E\"><a href=\"/sdk/XPLM_VK_E/\">XPLM_VK_E</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_VK_E/\">XPLM_VK_E</a>            0x45</code></pre></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "### [XPLM_VK_E](/sdk/XPLM_VK_E/)\n\n```cpp\n#define XPLM_VK_E            0x45\n```",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.516094+00:00",
      "title": "XPLM_VK_E | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLM_VK_E/"
    },
    "https://developer.x-plane.com/sdk/XPLM_VK_END/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/XPLM_VK_END/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"XPLM_VK_END\"><a href=\"/sdk/XPLM_VK_END/\">XPLM_VK_END</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_VK_END/\">XPLM_VK_END</a>          0x23</code></pre></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "### [XPLM_VK_END](/sdk/XPLM_VK_END/)\n\n```cpp\n#define XPLM_VK_END          0x23\n```",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.517094+00:00",
      "title": "XPLM_VK_END | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLM_VK_END/"
    },
    "https://developer.x-plane.com/sdk/XPLM_VK_ENTER/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/XPLM_VK_ENTER/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"XPLM_VK_ENTER\"><a href=\"/sdk/XPLM_VK_ENTER/\">XPLM_VK_ENTER</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_VK_ENTER/\">XPLM_VK_ENTER</a>        0xBB</code></pre></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "### [XPLM_VK_ENTER](/sdk/XPLM_VK_ENTER/)\n\n```cpp\n#define XPLM_VK_ENTER        0xBB\n```",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.519094+00:00",
      "title": "XPLM_VK_ENTER | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLM_VK_ENTER/"
    },
    "https://developer.x-plane.com/sdk/XPLM_VK_EQUAL/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/XPLM_VK_EQUAL/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"XPLM_VK_EQUAL\"><a href=\"/sdk/XPLM_VK_EQUAL/\">XPLM_VK_EQUAL</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_VK_EQUAL/\">XPLM_VK_EQUAL</a>        0xB0</code></pre><p>The following definitions are extended and are not based on the Microsoft key set.</p></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "### [XPLM_VK_EQUAL](/sdk/XPLM_VK_EQUAL/)\n\n```cpp\n#define XPLM_VK_EQUAL        0xB0\n```\n\nThe following definitions are extended and are not based on the Microsoft key\nset.",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.520095+00:00",
      "title": "XPLM_VK_EQUAL | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLM_VK_EQUAL/"
    },
    "https://developer.x-plane.com/sdk/XPLM_VK_ESCAPE/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/XPLM_VK_ESCAPE/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"XPLM_VK_ESCAPE\"><a href=\"/sdk/XPLM_VK_ESCAPE/\">XPLM_VK_ESCAPE</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_VK_ESCAPE/\">XPLM_VK_ESCAPE</a>       0x1B</code></pre></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "### [XPLM_VK_ESCAPE](/sdk/XPLM_VK_ESCAPE/)\n\n```cpp\n#define XPLM_VK_ESCAPE       0x1B\n```",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.522094+00:00",
      "title": "XPLM_VK_ESCAPE | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLM_VK_ESCAPE/"
    },
    "https://developer.x-plane.com/sdk/XPLM_VK_EXECUTE/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/XPLM_VK_EXECUTE/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"XPLM_VK_EXECUTE\"><a href=\"/sdk/XPLM_VK_EXECUTE/\">XPLM_VK_EXECUTE</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_VK_EXECUTE/\">XPLM_VK_EXECUTE</a>      0x2B</code></pre></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "### [XPLM_VK_EXECUTE](/sdk/XPLM_VK_EXECUTE/)\n\n```cpp\n#define XPLM_VK_EXECUTE      0x2B\n```",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.524093+00:00",
      "title": "XPLM_VK_EXECUTE | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLM_VK_EXECUTE/"
    },
    "https://developer.x-plane.com/sdk/XPLM_VK_F/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/XPLM_VK_F/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"XPLM_VK_F\"><a href=\"/sdk/XPLM_VK_F/\">XPLM_VK_F</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_VK_F/\">XPLM_VK_F</a>            0x46</code></pre></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "### [XPLM_VK_F](/sdk/XPLM_VK_F/)\n\n```cpp\n#define XPLM_VK_F            0x46\n```",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.526095+00:00",
      "title": "XPLM_VK_F | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLM_VK_F/"
    },
    "https://developer.x-plane.com/sdk/XPLM_VK_F1/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/XPLM_VK_F1/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"XPLM_VK_F1\"><a href=\"/sdk/XPLM_VK_F1/\">XPLM_VK_F1</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_VK_F1/\">XPLM_VK_F1</a>           0x70</code></pre></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "### [XPLM_VK_F1](/sdk/XPLM_VK_F1/)\n\n```cpp\n#define XPLM_VK_F1           0x70\n```",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.527146+00:00",
      "title": "XPLM_VK_F1 | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLM_VK_F1/"
    },
    "https://developer.x-plane.com/sdk/XPLM_VK_F10/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/XPLM_VK_F10/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"XPLM_VK_F10\"><a href=\"/sdk/XPLM_VK_F10/\">XPLM_VK_F10</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_VK_F10/\">XPLM_VK_F10</a>          0x79</code></pre></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "### [XPLM_VK_F10](/sdk/XPLM_VK_F10/)\n\n```cpp\n#define XPLM_VK_F10          0x79\n```",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.529144+00:00",
      "title": "XPLM_VK_F10 | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLM_VK_F10/"
    },
    "https://developer.x-plane.com/sdk/XPLM_VK_F11/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/XPLM_VK_F11/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"XPLM_VK_F11\"><a href=\"/sdk/XPLM_VK_F11/\">XPLM_VK_F11</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_VK_F11/\">XPLM_VK_F11</a>          0x7A</code></pre></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "### [XPLM_VK_F11](/sdk/XPLM_VK_F11/)\n\n```cpp\n#define XPLM_VK_F11          0x7A\n```",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.530144+00:00",
      "title": "XPLM_VK_F11 | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLM_VK_F11/"
    },
    "https://developer.x-plane.com/sdk/XPLM_VK_F12/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/XPLM_VK_F12/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"XPLM_VK_F12\"><a href=\"/sdk/XPLM_VK_F12/\">XPLM_VK_F12</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_VK_F12/\">XPLM_VK_F12</a>          0x7B</code></pre></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "### [XPLM_VK_F12](/sdk/XPLM_VK_F12/)\n\n```cpp\n#define XPLM_VK_F12          0x7B\n```",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.532147+00:00",
      "title": "XPLM_VK_F12 | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLM_VK_F12/"
    },
    "https://developer.x-plane.com/sdk/XPLM_VK_F13/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/XPLM_VK_F13/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"XPLM_VK_F13\"><a href=\"/sdk/XPLM_VK_F13/\">XPLM_VK_F13</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_VK_F13/\">XPLM_VK_F13</a>          0x7C</code></pre></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "### [XPLM_VK_F13](/sdk/XPLM_VK_F13/)\n\n```cpp\n#define XPLM_VK_F13          0x7C\n```",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.535144+00:00",
      "title": "XPLM_VK_F13 | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLM_VK_F13/"
    },
    "https://developer.x-plane.com/sdk/XPLM_VK_F14/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/XPLM_VK_F14/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"XPLM_VK_F14\"><a href=\"/sdk/XPLM_VK_F14/\">XPLM_VK_F14</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_VK_F14/\">XPLM_VK_F14</a>          0x7D</code></pre></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "### [XPLM_VK_F14](/sdk/XPLM_VK_F14/)\n\n```cpp\n#define XPLM_VK_F14          0x7D\n```",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.533145+00:00",
      "title": "XPLM_VK_F14 | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLM_VK_F14/"
    },
    "https://developer.x-plane.com/sdk/XPLM_VK_F15/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/XPLM_VK_F15/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"XPLM_VK_F15\"><a href=\"/sdk/XPLM_VK_F15/\">XPLM_VK_F15</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_VK_F15/\">XPLM_VK_F15</a>          0x7E</code></pre></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "### [XPLM_VK_F15](/sdk/XPLM_VK_F15/)\n\n```cpp\n#define XPLM_VK_F15          0x7E\n```",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.536145+00:00",
      "title": "XPLM_VK_F15 | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLM_VK_F15/"
    },
    "https://developer.x-plane.com/sdk/XPLM_VK_F16/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/XPLM_VK_F16/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"XPLM_VK_F16\"><a href=\"/sdk/XPLM_VK_F16/\">XPLM_VK_F16</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_VK_F16/\">XPLM_VK_F16</a>          0x7F</code></pre></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "### [XPLM_VK_F16](/sdk/XPLM_VK_F16/)\n\n```cpp\n#define XPLM_VK_F16          0x7F\n```",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.538200+00:00",
      "title": "XPLM_VK_F16 | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLM_VK_F16/"
    },
    "https://developer.x-plane.com/sdk/XPLM_VK_F17/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/XPLM_VK_F17/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"XPLM_VK_F17\"><a href=\"/sdk/XPLM_VK_F17/\">XPLM_VK_F17</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_VK_F17/\">XPLM_VK_F17</a>          0x80</code></pre></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "### [XPLM_VK_F17](/sdk/XPLM_VK_F17/)\n\n```cpp\n#define XPLM_VK_F17          0x80\n```",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.539200+00:00",
      "title": "XPLM_VK_F17 | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLM_VK_F17/"
    },
    "https://developer.x-plane.com/sdk/XPLM_VK_F18/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/XPLM_VK_F18/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"XPLM_VK_F18\"><a href=\"/sdk/XPLM_VK_F18/\">XPLM_VK_F18</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_VK_F18/\">XPLM_VK_F18</a>          0x81</code></pre></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "### [XPLM_VK_F18](/sdk/XPLM_VK_F18/)\n\n```cpp\n#define XPLM_VK_F18          0x81\n```",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.543200+00:00",
      "title": "XPLM_VK_F18 | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLM_VK_F18/"
    },
    "https://developer.x-plane.com/sdk/XPLM_VK_F19/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/XPLM_VK_F19/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"XPLM_VK_F19\"><a href=\"/sdk/XPLM_VK_F19/\">XPLM_VK_F19</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_VK_F19/\">XPLM_VK_F19</a>          0x82</code></pre></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "### [XPLM_VK_F19](/sdk/XPLM_VK_F19/)\n\n```cpp\n#define XPLM_VK_F19          0x82\n```",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.541199+00:00",
      "title": "XPLM_VK_F19 | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLM_VK_F19/"
    },
    "https://developer.x-plane.com/sdk/XPLM_VK_F2/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/XPLM_VK_F2/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"XPLM_VK_F2\"><a href=\"/sdk/XPLM_VK_F2/\">XPLM_VK_F2</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_VK_F2/\">XPLM_VK_F2</a>           0x71</code></pre></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "### [XPLM_VK_F2](/sdk/XPLM_VK_F2/)\n\n```cpp\n#define XPLM_VK_F2           0x71\n```",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.544201+00:00",
      "title": "XPLM_VK_F2 | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLM_VK_F2/"
    },
    "https://developer.x-plane.com/sdk/XPLM_VK_F20/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/XPLM_VK_F20/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"XPLM_VK_F20\"><a href=\"/sdk/XPLM_VK_F20/\">XPLM_VK_F20</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_VK_F20/\">XPLM_VK_F20</a>          0x83</code></pre></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "### [XPLM_VK_F20](/sdk/XPLM_VK_F20/)\n\n```cpp\n#define XPLM_VK_F20          0x83\n```",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.545200+00:00",
      "title": "XPLM_VK_F20 | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLM_VK_F20/"
    },
    "https://developer.x-plane.com/sdk/XPLM_VK_F21/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/XPLM_VK_F21/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"XPLM_VK_F21\"><a href=\"/sdk/XPLM_VK_F21/\">XPLM_VK_F21</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_VK_F21/\">XPLM_VK_F21</a>          0x84</code></pre></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "### [XPLM_VK_F21](/sdk/XPLM_VK_F21/)\n\n```cpp\n#define XPLM_VK_F21          0x84\n```",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.547199+00:00",
      "title": "XPLM_VK_F21 | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLM_VK_F21/"
    },
    "https://developer.x-plane.com/sdk/XPLM_VK_F22/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/XPLM_VK_F22/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"XPLM_VK_F22\"><a href=\"/sdk/XPLM_VK_F22/\">XPLM_VK_F22</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_VK_F22/\">XPLM_VK_F22</a>          0x85</code></pre></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "### [XPLM_VK_F22](/sdk/XPLM_VK_F22/)\n\n```cpp\n#define XPLM_VK_F22          0x85\n```",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.551200+00:00",
      "title": "XPLM_VK_F22 | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLM_VK_F22/"
    },
    "https://developer.x-plane.com/sdk/XPLM_VK_F23/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/XPLM_VK_F23/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"XPLM_VK_F23\"><a href=\"/sdk/XPLM_VK_F23/\">XPLM_VK_F23</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_VK_F23/\">XPLM_VK_F23</a>          0x86</code></pre></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "### [XPLM_VK_F23](/sdk/XPLM_VK_F23/)\n\n```cpp\n#define XPLM_VK_F23          0x86\n```",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.549200+00:00",
      "title": "XPLM_VK_F23 | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLM_VK_F23/"
    },
    "https://developer.x-plane.com/sdk/XPLM_VK_F24/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/XPLM_VK_F24/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"XPLM_VK_F24\"><a href=\"/sdk/XPLM_VK_F24/\">XPLM_VK_F24</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_VK_F24/\">XPLM_VK_F24</a>          0x87</code></pre></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "### [XPLM_VK_F24](/sdk/XPLM_VK_F24/)\n\n```cpp\n#define XPLM_VK_F24          0x87\n```",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.550201+00:00",
      "title": "XPLM_VK_F24 | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLM_VK_F24/"
    },
    "https://developer.x-plane.com/sdk/XPLM_VK_F3/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/XPLM_VK_F3/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"XPLM_VK_F3\"><a href=\"/sdk/XPLM_VK_F3/\">XPLM_VK_F3</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_VK_F3/\">XPLM_VK_F3</a>           0x72</code></pre></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "### [XPLM_VK_F3](/sdk/XPLM_VK_F3/)\n\n```cpp\n#define XPLM_VK_F3           0x72\n```",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.553708+00:00",
      "title": "XPLM_VK_F3 | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLM_VK_F3/"
    },
    "https://developer.x-plane.com/sdk/XPLM_VK_F4/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/XPLM_VK_F4/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"XPLM_VK_F4\"><a href=\"/sdk/XPLM_VK_F4/\">XPLM_VK_F4</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_VK_F4/\">XPLM_VK_F4</a>           0x73</code></pre></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "### [XPLM_VK_F4](/sdk/XPLM_VK_F4/)\n\n```cpp\n#define XPLM_VK_F4           0x73\n```",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.554707+00:00",
      "title": "XPLM_VK_F4 | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLM_VK_F4/"
    },
    "https://developer.x-plane.com/sdk/XPLM_VK_F5/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/XPLM_VK_F5/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"XPLM_VK_F5\"><a href=\"/sdk/XPLM_VK_F5/\">XPLM_VK_F5</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_VK_F5/\">XPLM_VK_F5</a>           0x74</code></pre></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "### [XPLM_VK_F5](/sdk/XPLM_VK_F5/)\n\n```cpp\n#define XPLM_VK_F5           0x74\n```",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.557751+00:00",
      "title": "XPLM_VK_F5 | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLM_VK_F5/"
    },
    "https://developer.x-plane.com/sdk/XPLM_VK_F6/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/XPLM_VK_F6/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"XPLM_VK_F6\"><a href=\"/sdk/XPLM_VK_F6/\">XPLM_VK_F6</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_VK_F6/\">XPLM_VK_F6</a>           0x75</code></pre></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "### [XPLM_VK_F6](/sdk/XPLM_VK_F6/)\n\n```cpp\n#define XPLM_VK_F6           0x75\n```",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.556708+00:00",
      "title": "XPLM_VK_F6 | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLM_VK_F6/"
    },
    "https://developer.x-plane.com/sdk/XPLM_VK_F7/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/XPLM_VK_F7/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"XPLM_VK_F7\"><a href=\"/sdk/XPLM_VK_F7/\">XPLM_VK_F7</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_VK_F7/\">XPLM_VK_F7</a>           0x76</code></pre></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "### [XPLM_VK_F7](/sdk/XPLM_VK_F7/)\n\n```cpp\n#define XPLM_VK_F7           0x76\n```",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.559751+00:00",
      "title": "XPLM_VK_F7 | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLM_VK_F7/"
    },
    "https://developer.x-plane.com/sdk/XPLM_VK_F8/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/XPLM_VK_F8/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"XPLM_VK_F8\"><a href=\"/sdk/XPLM_VK_F8/\">XPLM_VK_F8</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_VK_F8/\">XPLM_VK_F8</a>           0x77</code></pre></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "### [XPLM_VK_F8](/sdk/XPLM_VK_F8/)\n\n```cpp\n#define XPLM_VK_F8           0x77\n```",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.560751+00:00",
      "title": "XPLM_VK_F8 | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLM_VK_F8/"
    },
    "https://developer.x-plane.com/sdk/XPLM_VK_F9/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/XPLM_VK_F9/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"XPLM_VK_F9\"><a href=\"/sdk/XPLM_VK_F9/\">XPLM_VK_F9</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_VK_F9/\">XPLM_VK_F9</a>           0x78</code></pre></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "### [XPLM_VK_F9](/sdk/XPLM_VK_F9/)\n\n```cpp\n#define XPLM_VK_F9           0x78\n```",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.562752+00:00",
      "title": "XPLM_VK_F9 | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLM_VK_F9/"
    },
    "https://developer.x-plane.com/sdk/XPLM_VK_G/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/XPLM_VK_G/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"XPLM_VK_G\"><a href=\"/sdk/XPLM_VK_G/\">XPLM_VK_G</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_VK_G/\">XPLM_VK_G</a>            0x47</code></pre></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "### [XPLM_VK_G](/sdk/XPLM_VK_G/)\n\n```cpp\n#define XPLM_VK_G            0x47\n```",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.564750+00:00",
      "title": "XPLM_VK_G | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLM_VK_G/"
    },
    "https://developer.x-plane.com/sdk/XPLM_VK_H/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/XPLM_VK_H/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"XPLM_VK_H\"><a href=\"/sdk/XPLM_VK_H/\">XPLM_VK_H</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_VK_H/\">XPLM_VK_H</a>            0x48</code></pre></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "### [XPLM_VK_H](/sdk/XPLM_VK_H/)\n\n```cpp\n#define XPLM_VK_H            0x48\n```",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.565751+00:00",
      "title": "XPLM_VK_H | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLM_VK_H/"
    },
    "https://developer.x-plane.com/sdk/XPLM_VK_HELP/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/XPLM_VK_HELP/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"XPLM_VK_HELP\"><a href=\"/sdk/XPLM_VK_HELP/\">XPLM_VK_HELP</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_VK_HELP/\">XPLM_VK_HELP</a>         0x2F</code></pre></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "### [XPLM_VK_HELP](/sdk/XPLM_VK_HELP/)\n\n```cpp\n#define XPLM_VK_HELP         0x2F\n```",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.567847+00:00",
      "title": "XPLM_VK_HELP | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLM_VK_HELP/"
    },
    "https://developer.x-plane.com/sdk/XPLM_VK_HOME/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/XPLM_VK_HOME/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"XPLM_VK_HOME\"><a href=\"/sdk/XPLM_VK_HOME/\">XPLM_VK_HOME</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_VK_HOME/\">XPLM_VK_HOME</a>         0x24</code></pre></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "### [XPLM_VK_HOME](/sdk/XPLM_VK_HOME/)\n\n```cpp\n#define XPLM_VK_HOME         0x24\n```",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.568845+00:00",
      "title": "XPLM_VK_HOME | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLM_VK_HOME/"
    },
    "https://developer.x-plane.com/sdk/XPLM_VK_I/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/XPLM_VK_I/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"XPLM_VK_I\"><a href=\"/sdk/XPLM_VK_I/\">XPLM_VK_I</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_VK_I/\">XPLM_VK_I</a>            0x49</code></pre></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "### [XPLM_VK_I](/sdk/XPLM_VK_I/)\n\n```cpp\n#define XPLM_VK_I            0x49\n```",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.570845+00:00",
      "title": "XPLM_VK_I | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLM_VK_I/"
    },
    "https://developer.x-plane.com/sdk/XPLM_VK_INSERT/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/XPLM_VK_INSERT/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"XPLM_VK_INSERT\"><a href=\"/sdk/XPLM_VK_INSERT/\">XPLM_VK_INSERT</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_VK_INSERT/\">XPLM_VK_INSERT</a>       0x2D</code></pre></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "### [XPLM_VK_INSERT](/sdk/XPLM_VK_INSERT/)\n\n```cpp\n#define XPLM_VK_INSERT       0x2D\n```",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.572846+00:00",
      "title": "XPLM_VK_INSERT | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLM_VK_INSERT/"
    },
    "https://developer.x-plane.com/sdk/XPLM_VK_J/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/XPLM_VK_J/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"XPLM_VK_J\"><a href=\"/sdk/XPLM_VK_J/\">XPLM_VK_J</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_VK_J/\">XPLM_VK_J</a>            0x4A</code></pre></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "### [XPLM_VK_J](/sdk/XPLM_VK_J/)\n\n```cpp\n#define XPLM_VK_J            0x4A\n```",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.573846+00:00",
      "title": "XPLM_VK_J | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLM_VK_J/"
    },
    "https://developer.x-plane.com/sdk/XPLM_VK_K/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/XPLM_VK_K/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"XPLM_VK_K\"><a href=\"/sdk/XPLM_VK_K/\">XPLM_VK_K</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_VK_K/\">XPLM_VK_K</a>            0x4B</code></pre></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "### [XPLM_VK_K](/sdk/XPLM_VK_K/)\n\n```cpp\n#define XPLM_VK_K            0x4B\n```",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.575849+00:00",
      "title": "XPLM_VK_K | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLM_VK_K/"
    },
    "https://developer.x-plane.com/sdk/XPLM_VK_L/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/XPLM_VK_L/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"XPLM_VK_L\"><a href=\"/sdk/XPLM_VK_L/\">XPLM_VK_L</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_VK_L/\">XPLM_VK_L</a>            0x4C</code></pre></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "### [XPLM_VK_L](/sdk/XPLM_VK_L/)\n\n```cpp\n#define XPLM_VK_L            0x4C\n```",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.577924+00:00",
      "title": "XPLM_VK_L | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLM_VK_L/"
    },
    "https://developer.x-plane.com/sdk/XPLM_VK_LBRACE/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/XPLM_VK_LBRACE/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"XPLM_VK_LBRACE\"><a href=\"/sdk/XPLM_VK_LBRACE/\">XPLM_VK_LBRACE</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_VK_LBRACE/\">XPLM_VK_LBRACE</a>       0xB3</code></pre></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "### [XPLM_VK_LBRACE](/sdk/XPLM_VK_LBRACE/)\n\n```cpp\n#define XPLM_VK_LBRACE       0xB3\n```",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.578924+00:00",
      "title": "XPLM_VK_LBRACE | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLM_VK_LBRACE/"
    },
    "https://developer.x-plane.com/sdk/XPLM_VK_LEFT/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/XPLM_VK_LEFT/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"XPLM_VK_LEFT\"><a href=\"/sdk/XPLM_VK_LEFT/\">XPLM_VK_LEFT</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_VK_LEFT/\">XPLM_VK_LEFT</a>         0x25</code></pre></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "### [XPLM_VK_LEFT](/sdk/XPLM_VK_LEFT/)\n\n```cpp\n#define XPLM_VK_LEFT         0x25\n```",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.580927+00:00",
      "title": "XPLM_VK_LEFT | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLM_VK_LEFT/"
    },
    "https://developer.x-plane.com/sdk/XPLM_VK_M/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/XPLM_VK_M/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"XPLM_VK_M\"><a href=\"/sdk/XPLM_VK_M/\">XPLM_VK_M</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_VK_M/\">XPLM_VK_M</a>            0x4D</code></pre></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "### [XPLM_VK_M](/sdk/XPLM_VK_M/)\n\n```cpp\n#define XPLM_VK_M            0x4D\n```",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.583925+00:00",
      "title": "XPLM_VK_M | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLM_VK_M/"
    },
    "https://developer.x-plane.com/sdk/XPLM_VK_MINUS/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/XPLM_VK_MINUS/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"XPLM_VK_MINUS\"><a href=\"/sdk/XPLM_VK_MINUS/\">XPLM_VK_MINUS</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_VK_MINUS/\">XPLM_VK_MINUS</a>        0xB1</code></pre></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "### [XPLM_VK_MINUS](/sdk/XPLM_VK_MINUS/)\n\n```cpp\n#define XPLM_VK_MINUS        0xB1\n```",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.585996+00:00",
      "title": "XPLM_VK_MINUS | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLM_VK_MINUS/"
    },
    "https://developer.x-plane.com/sdk/XPLM_VK_MULTIPLY/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/XPLM_VK_MULTIPLY/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"XPLM_VK_MULTIPLY\"><a href=\"/sdk/XPLM_VK_MULTIPLY/\">XPLM_VK_MULTIPLY</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_VK_MULTIPLY/\">XPLM_VK_MULTIPLY</a>     0x6A</code></pre></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "### [XPLM_VK_MULTIPLY](/sdk/XPLM_VK_MULTIPLY/)\n\n```cpp\n#define XPLM_VK_MULTIPLY     0x6A\n```",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.582926+00:00",
      "title": "XPLM_VK_MULTIPLY | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLM_VK_MULTIPLY/"
    },
    "https://developer.x-plane.com/sdk/XPLM_VK_N/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/XPLM_VK_N/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"XPLM_VK_N\"><a href=\"/sdk/XPLM_VK_N/\">XPLM_VK_N</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_VK_N/\">XPLM_VK_N</a>            0x4E</code></pre></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "### [XPLM_VK_N](/sdk/XPLM_VK_N/)\n\n```cpp\n#define XPLM_VK_N            0x4E\n```",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.588000+00:00",
      "title": "XPLM_VK_N | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLM_VK_N/"
    },
    "https://developer.x-plane.com/sdk/XPLM_VK_NEXT/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/XPLM_VK_NEXT/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"XPLM_VK_NEXT\"><a href=\"/sdk/XPLM_VK_NEXT/\">XPLM_VK_NEXT</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_VK_NEXT/\">XPLM_VK_NEXT</a>         0x22</code></pre></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "### [XPLM_VK_NEXT](/sdk/XPLM_VK_NEXT/)\n\n```cpp\n#define XPLM_VK_NEXT         0x22\n```",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.588997+00:00",
      "title": "XPLM_VK_NEXT | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLM_VK_NEXT/"
    },
    "https://developer.x-plane.com/sdk/XPLM_VK_NUMPAD0/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/XPLM_VK_NUMPAD0/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"XPLM_VK_NUMPAD0\"><a href=\"/sdk/XPLM_VK_NUMPAD0/\">XPLM_VK_NUMPAD0</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_VK_NUMPAD0/\">XPLM_VK_NUMPAD0</a>      0x60</code></pre></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "### [XPLM_VK_NUMPAD0](/sdk/XPLM_VK_NUMPAD0/)\n\n```cpp\n#define XPLM_VK_NUMPAD0      0x60\n```",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.591218+00:00",
      "title": "XPLM_VK_NUMPAD0 | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLM_VK_NUMPAD0/"
    },
    "https://developer.x-plane.com/sdk/XPLM_VK_NUMPAD1/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/XPLM_VK_NUMPAD1/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"XPLM_VK_NUMPAD1\"><a href=\"/sdk/XPLM_VK_NUMPAD1/\">XPLM_VK_NUMPAD1</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_VK_NUMPAD1/\">XPLM_VK_NUMPAD1</a>      0x61</code></pre></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "### [XPLM_VK_NUMPAD1](/sdk/XPLM_VK_NUMPAD1/)\n\n```cpp\n#define XPLM_VK_NUMPAD1      0x61\n```",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.592218+00:00",
      "title": "XPLM_VK_NUMPAD1 | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLM_VK_NUMPAD1/"
    },
    "https://developer.x-plane.com/sdk/XPLM_VK_NUMPAD2/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/XPLM_VK_NUMPAD2/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"XPLM_VK_NUMPAD2\"><a href=\"/sdk/XPLM_VK_NUMPAD2/\">XPLM_VK_NUMPAD2</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_VK_NUMPAD2/\">XPLM_VK_NUMPAD2</a>      0x62</code></pre></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "### [XPLM_VK_NUMPAD2](/sdk/XPLM_VK_NUMPAD2/)\n\n```cpp\n#define XPLM_VK_NUMPAD2      0x62\n```",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.594219+00:00",
      "title": "XPLM_VK_NUMPAD2 | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLM_VK_NUMPAD2/"
    },
    "https://developer.x-plane.com/sdk/XPLM_VK_NUMPAD3/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/XPLM_VK_NUMPAD3/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"XPLM_VK_NUMPAD3\"><a href=\"/sdk/XPLM_VK_NUMPAD3/\">XPLM_VK_NUMPAD3</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_VK_NUMPAD3/\">XPLM_VK_NUMPAD3</a>      0x63</code></pre></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "### [XPLM_VK_NUMPAD3](/sdk/XPLM_VK_NUMPAD3/)\n\n```cpp\n#define XPLM_VK_NUMPAD3      0x63\n```",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.595218+00:00",
      "title": "XPLM_VK_NUMPAD3 | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLM_VK_NUMPAD3/"
    },
    "https://developer.x-plane.com/sdk/XPLM_VK_NUMPAD4/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/XPLM_VK_NUMPAD4/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"XPLM_VK_NUMPAD4\"><a href=\"/sdk/XPLM_VK_NUMPAD4/\">XPLM_VK_NUMPAD4</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_VK_NUMPAD4/\">XPLM_VK_NUMPAD4</a>      0x64</code></pre></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "### [XPLM_VK_NUMPAD4](/sdk/XPLM_VK_NUMPAD4/)\n\n```cpp\n#define XPLM_VK_NUMPAD4      0x64\n```",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.597281+00:00",
      "title": "XPLM_VK_NUMPAD4 | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLM_VK_NUMPAD4/"
    },
    "https://developer.x-plane.com/sdk/XPLM_VK_NUMPAD5/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/XPLM_VK_NUMPAD5/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"XPLM_VK_NUMPAD5\"><a href=\"/sdk/XPLM_VK_NUMPAD5/\">XPLM_VK_NUMPAD5</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_VK_NUMPAD5/\">XPLM_VK_NUMPAD5</a>      0x65</code></pre></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "### [XPLM_VK_NUMPAD5](/sdk/XPLM_VK_NUMPAD5/)\n\n```cpp\n#define XPLM_VK_NUMPAD5      0x65\n```",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.599829+00:00",
      "title": "XPLM_VK_NUMPAD5 | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLM_VK_NUMPAD5/"
    },
    "https://developer.x-plane.com/sdk/XPLM_VK_NUMPAD6/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/XPLM_VK_NUMPAD6/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"XPLM_VK_NUMPAD6\"><a href=\"/sdk/XPLM_VK_NUMPAD6/\">XPLM_VK_NUMPAD6</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_VK_NUMPAD6/\">XPLM_VK_NUMPAD6</a>      0x66</code></pre></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "### [XPLM_VK_NUMPAD6](/sdk/XPLM_VK_NUMPAD6/)\n\n```cpp\n#define XPLM_VK_NUMPAD6      0x66\n```",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.598831+00:00",
      "title": "XPLM_VK_NUMPAD6 | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLM_VK_NUMPAD6/"
    },
    "https://developer.x-plane.com/sdk/XPLM_VK_NUMPAD7/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/XPLM_VK_NUMPAD7/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"XPLM_VK_NUMPAD7\"><a href=\"/sdk/XPLM_VK_NUMPAD7/\">XPLM_VK_NUMPAD7</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_VK_NUMPAD7/\">XPLM_VK_NUMPAD7</a>      0x67</code></pre></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "### [XPLM_VK_NUMPAD7](/sdk/XPLM_VK_NUMPAD7/)\n\n```cpp\n#define XPLM_VK_NUMPAD7      0x67\n```",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.601830+00:00",
      "title": "XPLM_VK_NUMPAD7 | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLM_VK_NUMPAD7/"
    },
    "https://developer.x-plane.com/sdk/XPLM_VK_NUMPAD8/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/XPLM_VK_NUMPAD8/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"XPLM_VK_NUMPAD8\"><a href=\"/sdk/XPLM_VK_NUMPAD8/\">XPLM_VK_NUMPAD8</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_VK_NUMPAD8/\">XPLM_VK_NUMPAD8</a>      0x68</code></pre></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "### [XPLM_VK_NUMPAD8](/sdk/XPLM_VK_NUMPAD8/)\n\n```cpp\n#define XPLM_VK_NUMPAD8      0x68\n```",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.603830+00:00",
      "title": "XPLM_VK_NUMPAD8 | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLM_VK_NUMPAD8/"
    },
    "https://developer.x-plane.com/sdk/XPLM_VK_NUMPAD9/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/XPLM_VK_NUMPAD9/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"XPLM_VK_NUMPAD9\"><a href=\"/sdk/XPLM_VK_NUMPAD9/\">XPLM_VK_NUMPAD9</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_VK_NUMPAD9/\">XPLM_VK_NUMPAD9</a>      0x69</code></pre></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "### [XPLM_VK_NUMPAD9](/sdk/XPLM_VK_NUMPAD9/)\n\n```cpp\n#define XPLM_VK_NUMPAD9      0x69\n```",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.604831+00:00",
      "title": "XPLM_VK_NUMPAD9 | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLM_VK_NUMPAD9/"
    },
    "https://developer.x-plane.com/sdk/XPLM_VK_NUMPAD_ENT/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/XPLM_VK_NUMPAD_ENT/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"XPLM_VK_NUMPAD_ENT\"><a href=\"/sdk/XPLM_VK_NUMPAD_ENT/\">XPLM_VK_NUMPAD_ENT</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_VK_NUMPAD_ENT/\">XPLM_VK_NUMPAD_ENT</a>   0xBC</code></pre></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "### [XPLM_VK_NUMPAD_ENT](/sdk/XPLM_VK_NUMPAD_ENT/)\n\n```cpp\n#define XPLM_VK_NUMPAD_ENT   0xBC\n```",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.606832+00:00",
      "title": "XPLM_VK_NUMPAD_ENT | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLM_VK_NUMPAD_ENT/"
    },
    "https://developer.x-plane.com/sdk/XPLM_VK_NUMPAD_EQ/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/XPLM_VK_NUMPAD_EQ/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"XPLM_VK_NUMPAD_EQ\"><a href=\"/sdk/XPLM_VK_NUMPAD_EQ/\">XPLM_VK_NUMPAD_EQ</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_VK_NUMPAD_EQ/\">XPLM_VK_NUMPAD_EQ</a>    0xBD</code></pre></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "### [XPLM_VK_NUMPAD_EQ](/sdk/XPLM_VK_NUMPAD_EQ/)\n\n```cpp\n#define XPLM_VK_NUMPAD_EQ    0xBD\n```",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.607830+00:00",
      "title": "XPLM_VK_NUMPAD_EQ | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLM_VK_NUMPAD_EQ/"
    },
    "https://developer.x-plane.com/sdk/XPLM_VK_O/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/XPLM_VK_O/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"XPLM_VK_O\"><a href=\"/sdk/XPLM_VK_O/\">XPLM_VK_O</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_VK_O/\">XPLM_VK_O</a>            0x4F</code></pre></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "### [XPLM_VK_O](/sdk/XPLM_VK_O/)\n\n```cpp\n#define XPLM_VK_O            0x4F\n```",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.609829+00:00",
      "title": "XPLM_VK_O | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLM_VK_O/"
    },
    "https://developer.x-plane.com/sdk/XPLM_VK_P/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/XPLM_VK_P/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"XPLM_VK_P\"><a href=\"/sdk/XPLM_VK_P/\">XPLM_VK_P</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_VK_P/\">XPLM_VK_P</a>            0x50</code></pre></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "### [XPLM_VK_P](/sdk/XPLM_VK_P/)\n\n```cpp\n#define XPLM_VK_P            0x50\n```",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.610831+00:00",
      "title": "XPLM_VK_P | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLM_VK_P/"
    },
    "https://developer.x-plane.com/sdk/XPLM_VK_PERIOD/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/XPLM_VK_PERIOD/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"XPLM_VK_PERIOD\"><a href=\"/sdk/XPLM_VK_PERIOD/\">XPLM_VK_PERIOD</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_VK_PERIOD/\">XPLM_VK_PERIOD</a>       0xB9</code></pre></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "### [XPLM_VK_PERIOD](/sdk/XPLM_VK_PERIOD/)\n\n```cpp\n#define XPLM_VK_PERIOD       0xB9\n```",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.612830+00:00",
      "title": "XPLM_VK_PERIOD | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLM_VK_PERIOD/"
    },
    "https://developer.x-plane.com/sdk/XPLM_VK_PRINT/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/XPLM_VK_PRINT/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"XPLM_VK_PRINT\"><a href=\"/sdk/XPLM_VK_PRINT/\">XPLM_VK_PRINT</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_VK_PRINT/\">XPLM_VK_PRINT</a>        0x2A</code></pre></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "### [XPLM_VK_PRINT](/sdk/XPLM_VK_PRINT/)\n\n```cpp\n#define XPLM_VK_PRINT        0x2A\n```",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.614829+00:00",
      "title": "XPLM_VK_PRINT | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLM_VK_PRINT/"
    },
    "https://developer.x-plane.com/sdk/XPLM_VK_PRIOR/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/XPLM_VK_PRIOR/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"XPLM_VK_PRIOR\"><a href=\"/sdk/XPLM_VK_PRIOR/\">XPLM_VK_PRIOR</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_VK_PRIOR/\">XPLM_VK_PRIOR</a>        0x21</code></pre></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "### [XPLM_VK_PRIOR](/sdk/XPLM_VK_PRIOR/)\n\n```cpp\n#define XPLM_VK_PRIOR        0x21\n```",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.618829+00:00",
      "title": "XPLM_VK_PRIOR | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLM_VK_PRIOR/"
    },
    "https://developer.x-plane.com/sdk/XPLM_VK_Q/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/XPLM_VK_Q/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"XPLM_VK_Q\"><a href=\"/sdk/XPLM_VK_Q/\">XPLM_VK_Q</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_VK_Q/\">XPLM_VK_Q</a>            0x51</code></pre></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "### [XPLM_VK_Q](/sdk/XPLM_VK_Q/)\n\n```cpp\n#define XPLM_VK_Q            0x51\n```",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.616830+00:00",
      "title": "XPLM_VK_Q | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLM_VK_Q/"
    },
    "https://developer.x-plane.com/sdk/XPLM_VK_QUOTE/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/XPLM_VK_QUOTE/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"XPLM_VK_QUOTE\"><a href=\"/sdk/XPLM_VK_QUOTE/\">XPLM_VK_QUOTE</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_VK_QUOTE/\">XPLM_VK_QUOTE</a>        0xB4</code></pre></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "### [XPLM_VK_QUOTE](/sdk/XPLM_VK_QUOTE/)\n\n```cpp\n#define XPLM_VK_QUOTE        0xB4\n```",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.619830+00:00",
      "title": "XPLM_VK_QUOTE | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLM_VK_QUOTE/"
    },
    "https://developer.x-plane.com/sdk/XPLM_VK_R/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/XPLM_VK_R/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"XPLM_VK_R\"><a href=\"/sdk/XPLM_VK_R/\">XPLM_VK_R</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_VK_R/\">XPLM_VK_R</a>            0x52</code></pre></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "### [XPLM_VK_R](/sdk/XPLM_VK_R/)\n\n```cpp\n#define XPLM_VK_R            0x52\n```",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.621830+00:00",
      "title": "XPLM_VK_R | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLM_VK_R/"
    },
    "https://developer.x-plane.com/sdk/XPLM_VK_RBRACE/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/XPLM_VK_RBRACE/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"XPLM_VK_RBRACE\"><a href=\"/sdk/XPLM_VK_RBRACE/\">XPLM_VK_RBRACE</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_VK_RBRACE/\">XPLM_VK_RBRACE</a>       0xB2</code></pre></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "### [XPLM_VK_RBRACE](/sdk/XPLM_VK_RBRACE/)\n\n```cpp\n#define XPLM_VK_RBRACE       0xB2\n```",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.622831+00:00",
      "title": "XPLM_VK_RBRACE | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLM_VK_RBRACE/"
    },
    "https://developer.x-plane.com/sdk/XPLM_VK_RETURN/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/XPLM_VK_RETURN/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"XPLM_VK_RETURN\"><a href=\"/sdk/XPLM_VK_RETURN/\">XPLM_VK_RETURN</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_VK_RETURN/\">XPLM_VK_RETURN</a>       0x0D</code></pre></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "### [XPLM_VK_RETURN](/sdk/XPLM_VK_RETURN/)\n\n```cpp\n#define XPLM_VK_RETURN       0x0D\n```",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.626829+00:00",
      "title": "XPLM_VK_RETURN | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLM_VK_RETURN/"
    },
    "https://developer.x-plane.com/sdk/XPLM_VK_RIGHT/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/XPLM_VK_RIGHT/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"XPLM_VK_RIGHT\"><a href=\"/sdk/XPLM_VK_RIGHT/\">XPLM_VK_RIGHT</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_VK_RIGHT/\">XPLM_VK_RIGHT</a>        0x27</code></pre></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "### [XPLM_VK_RIGHT](/sdk/XPLM_VK_RIGHT/)\n\n```cpp\n#define XPLM_VK_RIGHT        0x27\n```",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.624831+00:00",
      "title": "XPLM_VK_RIGHT | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLM_VK_RIGHT/"
    },
    "https://developer.x-plane.com/sdk/XPLM_VK_S/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/XPLM_VK_S/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"XPLM_VK_S\"><a href=\"/sdk/XPLM_VK_S/\">XPLM_VK_S</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_VK_S/\">XPLM_VK_S</a>            0x53</code></pre></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "### [XPLM_VK_S](/sdk/XPLM_VK_S/)\n\n```cpp\n#define XPLM_VK_S            0x53\n```",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.628069+00:00",
      "title": "XPLM_VK_S | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLM_VK_S/"
    },
    "https://developer.x-plane.com/sdk/XPLM_VK_SELECT/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/XPLM_VK_SELECT/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"XPLM_VK_SELECT\"><a href=\"/sdk/XPLM_VK_SELECT/\">XPLM_VK_SELECT</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_VK_SELECT/\">XPLM_VK_SELECT</a>       0x29</code></pre></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "### [XPLM_VK_SELECT](/sdk/XPLM_VK_SELECT/)\n\n```cpp\n#define XPLM_VK_SELECT       0x29\n```",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.631070+00:00",
      "title": "XPLM_VK_SELECT | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLM_VK_SELECT/"
    },
    "https://developer.x-plane.com/sdk/XPLM_VK_SEMICOLON/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/XPLM_VK_SEMICOLON/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"XPLM_VK_SEMICOLON\"><a href=\"/sdk/XPLM_VK_SEMICOLON/\">XPLM_VK_SEMICOLON</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_VK_SEMICOLON/\">XPLM_VK_SEMICOLON</a>    0xB5</code></pre></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "### [XPLM_VK_SEMICOLON](/sdk/XPLM_VK_SEMICOLON/)\n\n```cpp\n#define XPLM_VK_SEMICOLON    0xB5\n```",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.630070+00:00",
      "title": "XPLM_VK_SEMICOLON | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLM_VK_SEMICOLON/"
    },
    "https://developer.x-plane.com/sdk/XPLM_VK_SEPARATOR/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/XPLM_VK_SEPARATOR/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"XPLM_VK_SEPARATOR\"><a href=\"/sdk/XPLM_VK_SEPARATOR/\">XPLM_VK_SEPARATOR</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_VK_SEPARATOR/\">XPLM_VK_SEPARATOR</a>    0x6C</code></pre></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "### [XPLM_VK_SEPARATOR](/sdk/XPLM_VK_SEPARATOR/)\n\n```cpp\n#define XPLM_VK_SEPARATOR    0x6C\n```",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.632070+00:00",
      "title": "XPLM_VK_SEPARATOR | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLM_VK_SEPARATOR/"
    },
    "https://developer.x-plane.com/sdk/XPLM_VK_SLASH/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/XPLM_VK_SLASH/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"XPLM_VK_SLASH\"><a href=\"/sdk/XPLM_VK_SLASH/\">XPLM_VK_SLASH</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_VK_SLASH/\">XPLM_VK_SLASH</a>        0xB8</code></pre></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "### [XPLM_VK_SLASH](/sdk/XPLM_VK_SLASH/)\n\n```cpp\n#define XPLM_VK_SLASH        0xB8\n```",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.634069+00:00",
      "title": "XPLM_VK_SLASH | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLM_VK_SLASH/"
    },
    "https://developer.x-plane.com/sdk/XPLM_VK_SNAPSHOT/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/XPLM_VK_SNAPSHOT/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"XPLM_VK_SNAPSHOT\"><a href=\"/sdk/XPLM_VK_SNAPSHOT/\">XPLM_VK_SNAPSHOT</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_VK_SNAPSHOT/\">XPLM_VK_SNAPSHOT</a>     0x2C</code></pre></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "### [XPLM_VK_SNAPSHOT](/sdk/XPLM_VK_SNAPSHOT/)\n\n```cpp\n#define XPLM_VK_SNAPSHOT     0x2C\n```",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.639073+00:00",
      "title": "XPLM_VK_SNAPSHOT | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLM_VK_SNAPSHOT/"
    },
    "https://developer.x-plane.com/sdk/XPLM_VK_SPACE/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/XPLM_VK_SPACE/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"XPLM_VK_SPACE\"><a href=\"/sdk/XPLM_VK_SPACE/\">XPLM_VK_SPACE</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_VK_SPACE/\">XPLM_VK_SPACE</a>        0x20</code></pre></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "### [XPLM_VK_SPACE](/sdk/XPLM_VK_SPACE/)\n\n```cpp\n#define XPLM_VK_SPACE        0x20\n```",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.636068+00:00",
      "title": "XPLM_VK_SPACE | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLM_VK_SPACE/"
    },
    "https://developer.x-plane.com/sdk/XPLM_VK_SUBTRACT/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/XPLM_VK_SUBTRACT/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"XPLM_VK_SUBTRACT\"><a href=\"/sdk/XPLM_VK_SUBTRACT/\">XPLM_VK_SUBTRACT</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_VK_SUBTRACT/\">XPLM_VK_SUBTRACT</a>     0x6D</code></pre></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "### [XPLM_VK_SUBTRACT](/sdk/XPLM_VK_SUBTRACT/)\n\n```cpp\n#define XPLM_VK_SUBTRACT     0x6D\n```",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.637070+00:00",
      "title": "XPLM_VK_SUBTRACT | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLM_VK_SUBTRACT/"
    },
    "https://developer.x-plane.com/sdk/XPLM_VK_T/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/XPLM_VK_T/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"XPLM_VK_T\"><a href=\"/sdk/XPLM_VK_T/\">XPLM_VK_T</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_VK_T/\">XPLM_VK_T</a>            0x54</code></pre></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "### [XPLM_VK_T](/sdk/XPLM_VK_T/)\n\n```cpp\n#define XPLM_VK_T            0x54\n```",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.641075+00:00",
      "title": "XPLM_VK_T | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLM_VK_T/"
    },
    "https://developer.x-plane.com/sdk/XPLM_VK_TAB/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/XPLM_VK_TAB/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"XPLM_VK_TAB\"><a href=\"/sdk/XPLM_VK_TAB/\">XPLM_VK_TAB</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_VK_TAB/\">XPLM_VK_TAB</a>          0x09</code></pre></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "### [XPLM_VK_TAB](/sdk/XPLM_VK_TAB/)\n\n```cpp\n#define XPLM_VK_TAB          0x09\n```",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.642074+00:00",
      "title": "XPLM_VK_TAB | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLM_VK_TAB/"
    },
    "https://developer.x-plane.com/sdk/XPLM_VK_U/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/XPLM_VK_U/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"XPLM_VK_U\"><a href=\"/sdk/XPLM_VK_U/\">XPLM_VK_U</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_VK_U/\">XPLM_VK_U</a>            0x55</code></pre></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "### [XPLM_VK_U](/sdk/XPLM_VK_U/)\n\n```cpp\n#define XPLM_VK_U            0x55\n```",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.648127+00:00",
      "title": "XPLM_VK_U | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLM_VK_U/"
    },
    "https://developer.x-plane.com/sdk/XPLM_VK_UP/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/XPLM_VK_UP/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"XPLM_VK_UP\"><a href=\"/sdk/XPLM_VK_UP/\">XPLM_VK_UP</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_VK_UP/\">XPLM_VK_UP</a>           0x26</code></pre></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "### [XPLM_VK_UP](/sdk/XPLM_VK_UP/)\n\n```cpp\n#define XPLM_VK_UP           0x26\n```",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.643073+00:00",
      "title": "XPLM_VK_UP | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLM_VK_UP/"
    },
    "https://developer.x-plane.com/sdk/XPLM_VK_V/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/XPLM_VK_V/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"XPLM_VK_V\"><a href=\"/sdk/XPLM_VK_V/\">XPLM_VK_V</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_VK_V/\">XPLM_VK_V</a>            0x56</code></pre></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "### [XPLM_VK_V](/sdk/XPLM_VK_V/)\n\n```cpp\n#define XPLM_VK_V            0x56\n```",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.646126+00:00",
      "title": "XPLM_VK_V | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLM_VK_V/"
    },
    "https://developer.x-plane.com/sdk/XPLM_VK_W/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/XPLM_VK_W/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"XPLM_VK_W\"><a href=\"/sdk/XPLM_VK_W/\">XPLM_VK_W</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_VK_W/\">XPLM_VK_W</a>            0x57</code></pre></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "### [XPLM_VK_W](/sdk/XPLM_VK_W/)\n\n```cpp\n#define XPLM_VK_W            0x57\n```",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.645073+00:00",
      "title": "XPLM_VK_W | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLM_VK_W/"
    },
    "https://developer.x-plane.com/sdk/XPLM_VK_X/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/XPLM_VK_X/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"XPLM_VK_X\"><a href=\"/sdk/XPLM_VK_X/\">XPLM_VK_X</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_VK_X/\">XPLM_VK_X</a>            0x58</code></pre></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "### [XPLM_VK_X](/sdk/XPLM_VK_X/)\n\n```cpp\n#define XPLM_VK_X            0x58\n```",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.650130+00:00",
      "title": "XPLM_VK_X | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLM_VK_X/"
    },
    "https://developer.x-plane.com/sdk/XPLM_VK_Y/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/XPLM_VK_Y/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"XPLM_VK_Y\"><a href=\"/sdk/XPLM_VK_Y/\">XPLM_VK_Y</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_VK_Y/\">XPLM_VK_Y</a>            0x59</code></pre></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "### [XPLM_VK_Y](/sdk/XPLM_VK_Y/)\n\n```cpp\n#define XPLM_VK_Y            0x59\n```",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.651128+00:00",
      "title": "XPLM_VK_Y | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLM_VK_Y/"
    },
    "https://developer.x-plane.com/sdk/XPLM_VK_Z/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/XPLM_VK_Z/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"XPLM_VK_Z\"><a href=\"/sdk/XPLM_VK_Z/\">XPLM_VK_Z</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/XPLM_VK_Z/\">XPLM_VK_Z</a>            0x5A</code></pre></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "### [XPLM_VK_Z](/sdk/XPLM_VK_Z/)\n\n```cpp\n#define XPLM_VK_Z            0x5A\n```",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.655638+00:00",
      "title": "XPLM_VK_Z | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLM_VK_Z/"
    },
    "https://developer.x-plane.com/sdk/XPLoseKeyboardFocus/": {
      "api_signatures": [
        {
          "description": "This causes the specified widget to lose focus; focus is passed to its parent, or the next parent that will accept it. This routine does nothing if this widget does not have focus.",
          "name": "XPLoseKeyboardFocus",
          "parameters": [],
          "signature": "WIDGET_API voidXPLoseKeyboardFocus(XPWidgetIDinWidget);"
        },
        {
          "name": "WIDGET_API",
          "signature": "WIDGET_API voidXPLoseKeyboardFocus(XPWidgetIDinWidget);",
          "source": "code_block_extraction",
          "type": "function"
        }
      ],
      "category": {
        "category": "XPLM_Utilities",
        "module": "Xplm Utilities",
        "url": "https://developer.x-plane.com/sdk/XPLoseKeyboardFocus/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPLoseKeyboardFocus\"><a href=\"/sdk/XPLoseKeyboardFocus/\">XPLoseKeyboardFocus</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>WIDGET_API void       <a href=\"/sdk/XPLoseKeyboardFocus/\">XPLoseKeyboardFocus</a>(\n                         <a href=\"/sdk/XPWidgetID/\">XPWidgetID</a>           inWidget);\n</code></pre><p>This causes the specified widget to lose focus; focus is passed to its parent, or the next parent that will accept it. This routine does nothing if this widget does not have focus.</p></div></div></article>",
      "code_examples": [
        {
          "char_count": 55,
          "code": "WIDGET_API voidXPLoseKeyboardFocus(XPWidgetIDinWidget);",
          "context": "XPLoseKeyboardFocus",
          "id": "example_0",
          "language": "c",
          "line_count": 1,
          "type": "snippet"
        }
      ],
      "cross_references": [],
      "markdown": "### [XPLoseKeyboardFocus](/sdk/XPLoseKeyboardFocus/)\n\n```cpp\nWIDGET_API void       XPLoseKeyboardFocus(\n                         XPWidgetID           inWidget);\n\n```\n\nThis causes the specified widget to lose focus; focus is passed to its parent,\nor the next parent that will accept it. This routine does nothing if this widget\ndoes not have focus.",
      "own_functions": [
        "XPLoseKeyboardFocus",
        "WIDGET_API"
      ],
      "processing_timestamp": "2025-06-25T20:39:24.545748+00:00",
      "title": "XPLoseKeyboardFocus | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPLoseKeyboardFocus/"
    },
    "https://developer.x-plane.com/sdk/XPMouseState_t/": {
      "api_signatures": [],
      "category": {
        "category": "XPLM_Utilities",
        "module": "Xplm Utilities",
        "url": "https://developer.x-plane.com/sdk/XPMouseState_t/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"struct\"><h3 class=\"sdk-api-struct\" id=\"XPMouseState_t\"><a href=\"/sdk/XPMouseState_t/\">XPMouseState_t</a></h3><p>When the mouse is clicked or dragged, a pointer to this structure is passed to your widget function.</p><pre class=\"language-cpp\" data-manual=\"true\"><code>typedef struct {\n     int                       x;\n     int                       y;\n     // Mouse button number, left = 0 (right button not yet supported.\n     int                       button;\n     // Scroll wheel delta (button in this case would be the wheel axis number).\n     int                       delta;\n} <a href=\"/sdk/XPMouseState_t/\">XPMouseState_t</a>;</code></pre></div></div></article>",
      "code_examples": [
        {
          "char_count": 330,
          "code": "typedef struct {\n     int                       x;\n     int                       y;\n     // Mouse button number, left = 0 (right button not yet supported.\n     int                       button;\n     // Scroll wheel delta (button in this case would be the wheel axis number).\n     int                       delta;\n}XPMouseState_t;",
          "context": "When the mouse is clicked or dragged, a pointer to this structure is passed to your widget function.",
          "id": "example_0",
          "language": "c",
          "line_count": 8,
          "type": "snippet"
        }
      ],
      "cross_references": [],
      "markdown": "### [XPMouseState_t](/sdk/XPMouseState_t/)\n\nWhen the mouse is clicked or dragged, a pointer to this structure is passed to\nyour widget function.\n\n```cpp\ntypedef struct {\n     int                       x;\n     int                       y;\n     // Mouse button number, left = 0 (right button not yet supported.\n     int                       button;\n     // Scroll wheel delta (button in this case would be the wheel axis number).\n     int                       delta;\n} XPMouseState_t;\n```",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:24.550833+00:00",
      "title": "XPMouseState_t | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPMouseState_t/"
    },
    "https://developer.x-plane.com/sdk/XPPlaceWidgetWithin/": {
      "api_signatures": [
        {
          "description": "This function changes which container a widget resides in. You may NOT use this function on a root widget! inSubWidget is the widget that will be moved. Pass a widget ID in inContainer to make inSubWidget be a child of inContainer. It will become the last/closest widget in the container. Pass 0 to remove the widget from any container. Any call to this other than passing the widget ID of the old parent of the affected widget will cause the widget to be removed from its old parent. Placing a widget within its own parent simply makes it the last widget.",
          "name": "XPPlaceWidgetWithin",
          "parameters": [],
          "signature": "WIDGET_API voidXPPlaceWidgetWithin(XPWidgetIDinSubWidget,XPWidgetIDinContainer);"
        },
        {
          "name": "WIDGET_API",
          "signature": "WIDGET_API voidXPPlaceWidgetWithin(XPWidgetIDinSubWidget,XPWidgetIDinContainer);",
          "source": "code_block_extraction",
          "type": "function"
        }
      ],
      "category": {
        "category": "Widget_System",
        "module": "Widget System",
        "url": "https://developer.x-plane.com/sdk/XPPlaceWidgetWithin/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPPlaceWidgetWithin\"><a href=\"/sdk/XPPlaceWidgetWithin/\">XPPlaceWidgetWithin</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>WIDGET_API void       <a href=\"/sdk/XPPlaceWidgetWithin/\">XPPlaceWidgetWithin</a>(\n                         <a href=\"/sdk/XPWidgetID/\">XPWidgetID</a>           inSubWidget,\n                         <a href=\"/sdk/XPWidgetID/\">XPWidgetID</a>           inContainer);\n</code></pre><p>This function changes which container a widget resides in. You may NOT use this function on a root widget! inSubWidget is the widget that will be moved. Pass a widget ID in inContainer to make inSubWidget be a child of inContainer. It will become the last/closest widget in the container. Pass 0 to remove the widget from any container. Any call to this other than passing the widget ID of the old parent of the affected widget will cause the widget to be removed from its old parent. Placing a widget within its own parent simply makes it the last widget.</p><p>NOTE: this routine does not reposition the sub widget in global coordinates. If the container has layout management code, it will reposition the subwidget for you, otherwise you must do it with SetWidgetGeometry.</p></div></div></article>",
      "code_examples": [
        {
          "char_count": 80,
          "code": "WIDGET_API voidXPPlaceWidgetWithin(XPWidgetIDinSubWidget,XPWidgetIDinContainer);",
          "context": "XPPlaceWidgetWithin",
          "id": "example_0",
          "language": "c",
          "line_count": 1,
          "type": "snippet"
        }
      ],
      "cross_references": [],
      "markdown": "### [XPPlaceWidgetWithin](/sdk/XPPlaceWidgetWithin/)\n\n```cpp\nWIDGET_API void       XPPlaceWidgetWithin(\n                         XPWidgetID           inSubWidget,\n                         XPWidgetID           inContainer);\n\n```\n\nThis function changes which container a widget resides in. You may NOT use this\nfunction on a root widget! inSubWidget is the widget that will be moved. Pass a\nwidget ID in inContainer to make inSubWidget be a child of inContainer. It will\nbecome the last/closest widget in the container. Pass 0 to remove the widget\nfrom any container. Any call to this other than passing the widget ID of the old\nparent of the affected widget will cause the widget to be removed from its old\nparent. Placing a widget within its own parent simply makes it the last widget.\n\nNOTE: this routine does not reposition the sub widget in global coordinates. If\nthe container has layout management code, it will reposition the subwidget for\nyou, otherwise you must do it with SetWidgetGeometry.",
      "own_functions": [
        "XPPlaceWidgetWithin",
        "WIDGET_API"
      ],
      "processing_timestamp": "2025-06-25T20:39:23.039152+00:00",
      "title": "XPPlaceWidgetWithin | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPPlaceWidgetWithin/"
    },
    "https://developer.x-plane.com/sdk/XPSendMessageToWidget/": {
      "api_signatures": [
        {
          "description": "This sends any message to a widget. You should probably not go around simulating the predefined messages that the widgets library defines for you. You may however define custom messages for your widgets and send them with this method.",
          "name": "XPSendMessageToWidget",
          "parameters": [
            {
              "full_declaration": "intptr_t             inParam1",
              "name": "inParam1",
              "type": "intptr_t"
            },
            {
              "full_declaration": "intptr_t             inParam2",
              "name": "inParam2",
              "type": "intptr_t"
            }
          ],
          "signature": "WIDGET_API intXPSendMessageToWidget(XPWidgetIDinWidget,XPWidgetMessageinMessage,XPDispatchModeinMode,\n                         intptr_t             inParam1,\n                         intptr_t             inParam2);"
        },
        {
          "name": "WIDGET_API",
          "signature": "WIDGET_API intXPSendMessageToWidget(XPWidgetIDinWidget,XPWidgetMessageinMessage,XPDispatchModeinMode,\n                         intptr_t             inParam1,\n                         intptr_t             inParam2);",
          "source": "code_block_extraction",
          "type": "function"
        }
      ],
      "category": {
        "category": "XPLM_Plugin",
        "module": "Xplm Plugin",
        "url": "https://developer.x-plane.com/sdk/XPSendMessageToWidget/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPSendMessageToWidget\"><a href=\"/sdk/XPSendMessageToWidget/\">XPSendMessageToWidget</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>WIDGET_API int        <a href=\"/sdk/XPSendMessageToWidget/\">XPSendMessageToWidget</a>(\n                         <a href=\"/sdk/XPWidgetID/\">XPWidgetID</a>           inWidget,\n                         <a href=\"/sdk/XPWidgetMessage/\">XPWidgetMessage</a>      inMessage,\n                         <a href=\"/sdk/XPDispatchMode/\">XPDispatchMode</a>       inMode,\n                         intptr_t             inParam1,\n                         intptr_t             inParam2);\n</code></pre><p>This sends any message to a widget. You should probably not go around simulating the predefined messages that the widgets library defines for you. You may however define custom messages for your widgets and send them with this method.</p><p>This method supports several dispatching patterns; see<a href=\"/sdk/XPDispatchMode/\">XPDispatchMode</a>for more info. The function returns 1 if the message was handled, 0 if it was not.</p><p>For each widget that receives the message (see the dispatching modes), each widget function from the most recently installed to the oldest one receives the message in order until it is handled.</p></div></div></article>",
      "code_examples": [
        {
          "char_count": 214,
          "code": "WIDGET_API intXPSendMessageToWidget(XPWidgetIDinWidget,XPWidgetMessageinMessage,XPDispatchModeinMode,\n                         intptr_t             inParam1,\n                         intptr_t             inParam2);",
          "context": "XPSendMessageToWidget",
          "id": "example_0",
          "language": "c",
          "line_count": 3,
          "type": "snippet"
        }
      ],
      "cross_references": [
        "XPDispatchMode",
        "XPWidgetMessage"
      ],
      "markdown": "### [XPSendMessageToWidget](/sdk/XPSendMessageToWidget/)\n\n```cpp\nWIDGET_API int        XPSendMessageToWidget(\n                         XPWidgetID           inWidget,\n                         XPWidgetMessage      inMessage,\n                         XPDispatchMode       inMode,\n                         intptr_t             inParam1,\n                         intptr_t             inParam2);\n\n```\n\nThis sends any message to a widget. You should probably not go around simulating\nthe predefined messages that the widgets library defines for you. You may\nhowever define custom messages for your widgets and send them with this method.\n\nThis method supports several dispatching patterns;\nsee[XPDispatchMode](/sdk/XPDispatchMode/)for more info. The function returns 1\nif the message was handled, 0 if it was not.\n\nFor each widget that receives the message (see the dispatching modes), each\nwidget function from the most recently installed to the oldest one receives the\nmessage in order until it is handled.",
      "own_functions": [
        "XPSendMessageToWidget",
        "WIDGET_API"
      ],
      "processing_timestamp": "2025-06-25T20:39:24.285052+00:00",
      "title": "XPSendMessageToWidget | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPSendMessageToWidget/"
    },
    "https://developer.x-plane.com/sdk/XPSetKeyboardFocus/": {
      "api_signatures": [
        {
          "description": "Controls which widget will receive keystrokes. Pass the widget ID of the widget to get the keys. Note that if the widget does not care about keystrokes, they will go to the parent widget, and if no widget cares about them, they go to X-Plane.",
          "name": "XPSetKeyboardFocus",
          "parameters": [],
          "signature": "WIDGET_APIXPWidgetIDXPSetKeyboardFocus(XPWidgetIDinWidget);"
        }
      ],
      "category": {
        "category": "XPLM_Utilities",
        "module": "Xplm Utilities",
        "url": "https://developer.x-plane.com/sdk/XPSetKeyboardFocus/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPSetKeyboardFocus\"><a href=\"/sdk/XPSetKeyboardFocus/\">XPSetKeyboardFocus</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>WIDGET_API <a href=\"/sdk/XPWidgetID/\">XPWidgetID</a> <a href=\"/sdk/XPSetKeyboardFocus/\">XPSetKeyboardFocus</a>(\n                         <a href=\"/sdk/XPWidgetID/\">XPWidgetID</a>           inWidget);\n</code></pre><p>Controls which widget will receive keystrokes. Pass the widget ID of the widget to get the keys. Note that if the widget does not care about keystrokes, they will go to the parent widget, and if no widget cares about them, they go to X-Plane.</p><p>If you set the keyboard focus to widget ID 0, X-Plane gets keyboard focus.</p><p>This routine returns the widget ID that ended up with keyboard focus, or 0 for X-Plane.</p><p>Keyboard focus is not changed if the new widget will not accept it. For setting to X-Plane, keyboard focus is always accepted.</p></div></div></article>",
      "code_examples": [
        {
          "char_count": 59,
          "code": "WIDGET_APIXPWidgetIDXPSetKeyboardFocus(XPWidgetIDinWidget);",
          "context": "XPSetKeyboardFocus",
          "id": "example_0",
          "language": "c",
          "line_count": 1,
          "type": "snippet"
        }
      ],
      "cross_references": [
        "WIDGET_API"
      ],
      "markdown": "### [XPSetKeyboardFocus](/sdk/XPSetKeyboardFocus/)\n\n```cpp\nWIDGET_API XPWidgetID XPSetKeyboardFocus(\n                         XPWidgetID           inWidget);\n\n```\n\nControls which widget will receive keystrokes. Pass the widget ID of the widget\nto get the keys. Note that if the widget does not care about keystrokes, they\nwill go to the parent widget, and if no widget cares about them, they go to\nX-Plane.\n\nIf you set the keyboard focus to widget ID 0, X-Plane gets keyboard focus.\n\nThis routine returns the widget ID that ended up with keyboard focus, or 0 for\nX-Plane.\n\nKeyboard focus is not changed if the new widget will not accept it. For setting\nto X-Plane, keyboard focus is always accepted.",
      "own_functions": [
        "XPSetKeyboardFocus"
      ],
      "processing_timestamp": "2025-06-25T20:39:24.548834+00:00",
      "title": "XPSetKeyboardFocus | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPSetKeyboardFocus/"
    },
    "https://developer.x-plane.com/sdk/XPSetWidgetDescriptor/": {
      "api_signatures": [
        {
          "description": "Every widget has a descriptor, which is a text string. What the text string is used for varies from widget to widget; for example, a push button’s text is its descriptor, a caption shows its descriptor, and a text field’s descriptor is the text being edited. In other words, the usage for the text varies from widget to widget, but this API provides a universal and convenient way to get at it. While not all UI widgets need their descriptor, many do.",
          "name": "XPSetWidgetDescriptor",
          "parameters": [
            {
              "full_declaration": "const char *         inDescriptor",
              "name": "inDescriptor",
              "type": "const char *"
            }
          ],
          "signature": "WIDGET_API voidXPSetWidgetDescriptor(XPWidgetIDinWidget,\n                         const char *         inDescriptor);"
        },
        {
          "name": "WIDGET_API",
          "signature": "WIDGET_API voidXPSetWidgetDescriptor(XPWidgetIDinWidget,\n                         const char *         inDescriptor);",
          "source": "code_block_extraction",
          "type": "function"
        }
      ],
      "category": {
        "category": "Widget_System",
        "module": "Widget System",
        "url": "https://developer.x-plane.com/sdk/XPSetWidgetDescriptor/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPSetWidgetDescriptor\"><a href=\"/sdk/XPSetWidgetDescriptor/\">XPSetWidgetDescriptor</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>WIDGET_API void       <a href=\"/sdk/XPSetWidgetDescriptor/\">XPSetWidgetDescriptor</a>(\n                         <a href=\"/sdk/XPWidgetID/\">XPWidgetID</a>           inWidget,\n                         const char *         inDescriptor);\n</code></pre><p>Every widget has a descriptor, which is a text string. What the text string is used for varies from widget to widget; for example, a push button’s text is its descriptor, a caption shows its descriptor, and a text field’s descriptor is the text being edited. In other words, the usage for the text varies from widget to widget, but this API provides a universal and convenient way to get at it. While not all UI widgets need their descriptor, many do.</p></div></div></article>",
      "code_examples": [
        {
          "char_count": 117,
          "code": "WIDGET_API voidXPSetWidgetDescriptor(XPWidgetIDinWidget,\n                         const char *         inDescriptor);",
          "context": "XPSetWidgetDescriptor",
          "id": "example_0",
          "language": "c",
          "line_count": 2,
          "type": "snippet"
        }
      ],
      "cross_references": [],
      "markdown": "### [XPSetWidgetDescriptor](/sdk/XPSetWidgetDescriptor/)\n\n```cpp\nWIDGET_API void       XPSetWidgetDescriptor(\n                         XPWidgetID           inWidget,\n                         const char *         inDescriptor);\n\n```\n\nEvery widget has a descriptor, which is a text string. What the text string is\nused for varies from widget to widget; for example, a push button’s text is its\ndescriptor, a caption shows its descriptor, and a text field’s descriptor is the\ntext being edited. In other words, the usage for the text varies from widget to\nwidget, but this API provides a universal and convenient way to get at it. While\nnot all UI widgets need their descriptor, many do.",
      "own_functions": [
        "XPSetWidgetDescriptor",
        "WIDGET_API"
      ],
      "processing_timestamp": "2025-06-25T20:39:23.037149+00:00",
      "title": "XPSetWidgetDescriptor | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPSetWidgetDescriptor/"
    },
    "https://developer.x-plane.com/sdk/XPSetWidgetGeometry/": {
      "api_signatures": [
        {
          "description": "This function changes the bounding box of a widget.",
          "name": "XPSetWidgetGeometry",
          "parameters": [
            {
              "full_declaration": "int                  inLeft",
              "name": "inLeft",
              "type": "int"
            },
            {
              "full_declaration": "int                  inTop",
              "name": "inTop",
              "type": "int"
            },
            {
              "full_declaration": "int                  inRight",
              "name": "inRight",
              "type": "int"
            },
            {
              "full_declaration": "int                  inBottom",
              "name": "inBottom",
              "type": "int"
            }
          ],
          "signature": "WIDGET_API voidXPSetWidgetGeometry(XPWidgetIDinWidget,\n                         int                  inLeft,\n                         int                  inTop,\n                         int                  inRight,\n                         int                  inBottom);"
        },
        {
          "name": "WIDGET_API",
          "signature": "WIDGET_API voidXPSetWidgetGeometry(XPWidgetIDinWidget,\n                         int                  inLeft,\n                         int                  inTop,\n                         int                  inRight,\n                         int                  inBottom);",
          "source": "code_block_extraction",
          "type": "function"
        }
      ],
      "category": {
        "category": "Widget_System",
        "module": "Widget System",
        "url": "https://developer.x-plane.com/sdk/XPSetWidgetGeometry/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPSetWidgetGeometry\"><a href=\"/sdk/XPSetWidgetGeometry/\">XPSetWidgetGeometry</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>WIDGET_API void       <a href=\"/sdk/XPSetWidgetGeometry/\">XPSetWidgetGeometry</a>(\n                         <a href=\"/sdk/XPWidgetID/\">XPWidgetID</a>           inWidget,\n                         int                  inLeft,\n                         int                  inTop,\n                         int                  inRight,\n                         int                  inBottom);\n</code></pre><p>This function changes the bounding box of a widget.</p></div></div></article>",
      "code_examples": [
        {
          "char_count": 273,
          "code": "WIDGET_API voidXPSetWidgetGeometry(XPWidgetIDinWidget,\n                         int                  inLeft,\n                         int                  inTop,\n                         int                  inRight,\n                         int                  inBottom);",
          "context": "XPSetWidgetGeometry",
          "id": "example_0",
          "language": "c",
          "line_count": 5,
          "type": "snippet"
        }
      ],
      "cross_references": [],
      "markdown": "### [XPSetWidgetGeometry](/sdk/XPSetWidgetGeometry/)\n\n```cpp\nWIDGET_API void       XPSetWidgetGeometry(\n                         XPWidgetID           inWidget,\n                         int                  inLeft,\n                         int                  inTop,\n                         int                  inRight,\n                         int                  inBottom);\n\n```\n\nThis function changes the bounding box of a widget.",
      "own_functions": [
        "XPSetWidgetGeometry",
        "WIDGET_API"
      ],
      "processing_timestamp": "2025-06-25T20:39:23.035101+00:00",
      "title": "XPSetWidgetGeometry | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPSetWidgetGeometry/"
    },
    "https://developer.x-plane.com/sdk/XPSetWidgetProperty/": {
      "api_signatures": [
        {
          "description": "This function sets a widget’s property. Properties are arbitrary values associated by a widget by ID.",
          "name": "XPSetWidgetProperty",
          "parameters": [
            {
              "full_declaration": "intptr_t             inValue",
              "name": "inValue",
              "type": "intptr_t"
            }
          ],
          "signature": "WIDGET_API voidXPSetWidgetProperty(XPWidgetIDinWidget,XPWidgetPropertyIDinProperty,\n                         intptr_t             inValue);"
        },
        {
          "name": "WIDGET_API",
          "signature": "WIDGET_API voidXPSetWidgetProperty(XPWidgetIDinWidget,XPWidgetPropertyIDinProperty,\n                         intptr_t             inValue);",
          "source": "code_block_extraction",
          "type": "function"
        }
      ],
      "category": {
        "category": "Widget_System",
        "module": "Widget System",
        "url": "https://developer.x-plane.com/sdk/XPSetWidgetProperty/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPSetWidgetProperty\"><a href=\"/sdk/XPSetWidgetProperty/\">XPSetWidgetProperty</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>WIDGET_API void       <a href=\"/sdk/XPSetWidgetProperty/\">XPSetWidgetProperty</a>(\n                         <a href=\"/sdk/XPWidgetID/\">XPWidgetID</a>           inWidget,\n                         <a href=\"/sdk/XPWidgetPropertyID/\">XPWidgetPropertyID</a>   inProperty,\n                         intptr_t             inValue);\n</code></pre><p>This function sets a widget’s property. Properties are arbitrary values associated by a widget by ID.</p></div></div></article>",
      "code_examples": [
        {
          "char_count": 139,
          "code": "WIDGET_API voidXPSetWidgetProperty(XPWidgetIDinWidget,XPWidgetPropertyIDinProperty,\n                         intptr_t             inValue);",
          "context": "XPSetWidgetProperty",
          "id": "example_0",
          "language": "c",
          "line_count": 2,
          "type": "snippet"
        }
      ],
      "cross_references": [
        "XPWidgetPropertyID"
      ],
      "markdown": "### [XPSetWidgetProperty](/sdk/XPSetWidgetProperty/)\n\n```cpp\nWIDGET_API void       XPSetWidgetProperty(\n                         XPWidgetID           inWidget,\n                         XPWidgetPropertyID   inProperty,\n                         intptr_t             inValue);\n\n```\n\nThis function sets a widget’s property. Properties are arbitrary values\nassociated by a widget by ID.",
      "own_functions": [
        "XPSetWidgetProperty",
        "WIDGET_API"
      ],
      "processing_timestamp": "2025-06-25T20:39:23.043152+00:00",
      "title": "XPSetWidgetProperty | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPSetWidgetProperty/"
    },
    "https://developer.x-plane.com/sdk/XPShowWidget/": {
      "api_signatures": [
        {
          "description": "This routine makes a widget visible if it is not already. Note that if a widget is not in a rooted widget hierarchy or one of its parents is not visible, it will still not be visible to the user.",
          "name": "XPShowWidget",
          "parameters": [],
          "signature": "WIDGET_API voidXPShowWidget(XPWidgetIDinWidget);"
        },
        {
          "name": "WIDGET_API",
          "signature": "WIDGET_API voidXPShowWidget(XPWidgetIDinWidget);",
          "source": "code_block_extraction",
          "type": "function"
        }
      ],
      "category": {
        "category": "Widget_System",
        "module": "Widget System",
        "url": "https://developer.x-plane.com/sdk/XPShowWidget/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPShowWidget\"><a href=\"/sdk/XPShowWidget/\">XPShowWidget</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>WIDGET_API void       <a href=\"/sdk/XPShowWidget/\">XPShowWidget</a>(\n                         <a href=\"/sdk/XPWidgetID/\">XPWidgetID</a>           inWidget);\n</code></pre><p>This routine makes a widget visible if it is not already. Note that if a widget is not in a rooted widget hierarchy or one of its parents is not visible, it will still not be visible to the user.</p></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "### [XPShowWidget](/sdk/XPShowWidget/)\n\n```cpp\nWIDGET_API void       XPShowWidget(\n                         XPWidgetID           inWidget);\n\n```\n\nThis routine makes a widget visible if it is not already. Note that if a widget\nis not in a rooted widget hierarchy or one of its parents is not visible, it\nwill still not be visible to the user.",
      "own_functions": [
        "XPShowWidget",
        "WIDGET_API"
      ],
      "processing_timestamp": "2025-06-25T20:39:23.041154+00:00",
      "title": "XPShowWidget | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPShowWidget/"
    },
    "https://developer.x-plane.com/sdk/XPStandardWidgets/": {
      "api_signatures": [
        {
          "name": "Main Window Type Values",
          "type": "enum",
          "values": [
            {
              "description": "The standard main window; pin stripes on XP7, metal frame on XP 6.",
              "name": "xpMainWindowStyle_MainWindow",
              "value": "\"0\""
            },
            {
              "description": "A translucent dark gray window.",
              "name": "xpMainWindowStyle_Translucent",
              "value": "\"1\""
            }
          ]
        },
        {
          "name": "Main Window Properties",
          "type": "enum",
          "values": [
            {
              "description": "This property specifies the type of window. Set to one of the main window types above.",
              "name": "xpProperty_MainWindowType",
              "value": "\"1100\""
            },
            {
              "description": "This property specifies whether the main window has close boxes in its corners.",
              "name": "xpProperty_MainWindowHasCloseBoxes",
              "value": "\"1200\""
            }
          ]
        },
        {
          "name": "MainWindow Messages",
          "type": "enum",
          "values": [
            {
              "description": "This message is sent when the close buttons for your window are pressed.",
              "name": "xpMessage_CloseButtonPushed",
              "value": "\"1200\""
            }
          ]
        },
        {
          "name": "SubWindow Type Values",
          "type": "enum",
          "values": [
            {
              "description": "A panel that sits inside a main window.",
              "name": "xpSubWindowStyle_SubWindow",
              "value": "\"0\""
            },
            {
              "description": "A screen that sits inside a panel for showing text information.",
              "name": "xpSubWindowStyle_Screen",
              "value": "\"2\""
            },
            {
              "description": "A list view for scrolling lists.",
              "name": "xpSubWindowStyle_ListView",
              "value": "\"3\""
            }
          ]
        },
        {
          "name": "SubWindow Properties",
          "type": "enum",
          "values": [
            {
              "description": "This property specifies the type of window. Set to one of the subwindow types above.",
              "name": "xpProperty_SubWindowType",
              "value": "\"1200\""
            }
          ]
        },
        {
          "name": "Button Types",
          "type": "enum",
          "values": [
            {
              "description": "This is a standard push button, like an 'OK' or 'Cancel' button in a dialog box.",
              "name": "xpPushButton",
              "value": "\"0\""
            },
            {
              "description": "A check box or radio button. Use this and the button behaviors below to get the desired behavior.",
              "name": "xpRadioButton",
              "value": "\"1\""
            },
            {
              "description": "A window close box.",
              "name": "xpWindowCloseBox",
              "value": "\"3\""
            },
            {
              "description": "A small down arrow.",
              "name": "xpLittleDownArrow",
              "value": "\"5\""
            },
            {
              "description": "A small up arrow.",
              "name": "xpLittleUpArrow",
              "value": "\"6\""
            }
          ]
        },
        {
          "name": "Button Behavior Values",
          "type": "enum",
          "values": [
            {
              "description": "Standard push button behavior. The button highlights while the mouse is clickedover it and unhighlights when the mouse is moved outside of it or released.If the mouse is released over the button, thexpMsg_PushButtonPressedmessageis sent.",
              "name": "xpButtonBehaviorPushButton",
              "value": "\"0\""
            },
            {
              "description": "Check box behavior. The button immediately toggles its value when the mouse is clicked and sends out axpMsg_ButtonStateChangedmessage.",
              "name": "xpButtonBehaviorCheckBox",
              "value": "\"1\""
            },
            {
              "description": "Radio button behavior. The button immediately sets its state to oneand sends out axpMsg_ButtonStateChangedmessage if it was not already setto one. You must turn off other radio buttons in a group in your code.",
              "name": "xpButtonBehaviorRadioButton",
              "value": "\"2\""
            }
          ]
        },
        {
          "name": "Button Properties",
          "type": "enum",
          "values": [
            {
              "description": "This property sets the visual type of button. Use one of the button types above.",
              "name": "xpProperty_ButtonType",
              "value": "\"1300\""
            },
            {
              "description": "This property sets the button's behavior. Use one of the button behaviors above.",
              "name": "xpProperty_ButtonBehavior",
              "value": "\"1301\""
            },
            {
              "description": "This property tells whether a check box or radio button is \"checked\" or not. Not used for push buttons.",
              "name": "xpProperty_ButtonState",
              "value": "\"1302\""
            }
          ]
        },
        {
          "name": "Button Messages",
          "type": "enum",
          "values": [
            {
              "description": "This message is sent when the user completes a click and release in a button withpush button behavior. Parameterone of the message is the widget ID of the button. This message is dispatched up thewidget hierarchy.",
              "name": "xpMsg_PushButtonPressed",
              "value": "\"1300\""
            },
            {
              "description": "This message is sent when a button is clicked that has radio button or check box behaviorand its value changes. (Note that if the value changes by setting a property you do not receivethis message!) Parameter one is the widget ID of the button, parameter 2 is the new state value,either zero or one. This message is dispatched up the widget hierarchy.",
              "name": "xpMsg_ButtonStateChanged",
              "value": "\"1301\""
            }
          ]
        },
        {
          "name": "Text Field Type Values",
          "type": "enum",
          "values": [
            {
              "description": "A field for text entry.",
              "name": "xpTextEntryField",
              "value": "\"0\""
            },
            {
              "description": "A transparent text field. The user can type and the text is drawn, but no background is drawn.You can draw your own background by adding a widget handler and prehandling the draw message.",
              "name": "xpTextTransparent",
              "value": "\"3\""
            },
            {
              "description": "A translucent edit field, dark gray.",
              "name": "xpTextTranslucent",
              "value": "\"4\""
            }
          ]
        },
        {
          "name": "Text Field Properties",
          "type": "enum",
          "values": [
            {
              "description": "This is the character position the selection starts at, zero based.If it is the same as the end insertion point, the insertion pointis not a selection.",
              "name": "xpProperty_EditFieldSelStart",
              "value": "\"1400\""
            },
            {
              "description": "This is the character position of the end of the selection.",
              "name": "xpProperty_EditFieldSelEnd",
              "value": "\"1401\""
            },
            {
              "description": "This is the character position a drag was started at if the user is dragging to select text, or -1 if a drag is not in progress.",
              "name": "xpProperty_EditFieldSelDragStart",
              "value": "\"1402\""
            },
            {
              "description": "This is the type of text field to display, from the above list.",
              "name": "xpProperty_TextFieldType",
              "value": "\"1403\""
            },
            {
              "description": "Set this property to 1 to password protect the field. Characters will be drawn as *s even though the descriptor will contain plain-text.",
              "name": "xpProperty_PasswordMode",
              "value": "\"1404\""
            },
            {
              "description": "The max number of characters you can enter, if limited. Zero means unlimited.",
              "name": "xpProperty_MaxCharacters",
              "value": "\"1405\""
            },
            {
              "description": "The first visible character on the left. This effectively scrolls the text field.",
              "name": "xpProperty_ScrollPosition",
              "value": "\"1406\""
            },
            {
              "description": "The font to draw the field's text with. (AnXPLMFontID.)",
              "name": "xpProperty_Font",
              "value": "\"1407\""
            },
            {
              "description": "This is the active side of the insert selection. (Internal)",
              "name": "xpProperty_ActiveEditSide",
              "value": "\"1408\""
            }
          ]
        },
        {
          "name": "Text Field Messages",
          "type": "enum",
          "values": [
            {
              "description": "The text field sends this message to itself when its text changes. It sends the message up the call chain; param1 is the text field's widget ID.",
              "name": "xpMsg_TextFieldChanged",
              "value": "\"1400\""
            }
          ]
        },
        {
          "name": "Scroll Bar Type Values",
          "type": "enum",
          "values": [
            {
              "description": "A standard X-Plane scroll bar (with arrows on the ends).",
              "name": "xpScrollBarTypeScrollBar",
              "value": "\"0\""
            },
            {
              "description": "A slider, no arrows.",
              "name": "xpScrollBarTypeSlider",
              "value": "\"1\""
            }
          ]
        },
        {
          "name": "Scroll Bar Properties",
          "type": "enum",
          "values": [
            {
              "description": "The current position of the thumb (in between the min and max, inclusive)",
              "name": "xpProperty_ScrollBarSliderPosition",
              "value": "\"1500\""
            },
            {
              "description": "The value the scroll bar has when the thumb is in the lowest position.",
              "name": "xpProperty_ScrollBarMin",
              "value": "\"1501\""
            },
            {
              "description": "The value the scroll bar has when the thumb is in the highest position.",
              "name": "xpProperty_ScrollBarMax",
              "value": "\"1502\""
            },
            {
              "description": "How many units to move the scroll bar when clicking next to the thumb. The scroll bar always moves one unit when the arrows are clicked.",
              "name": "xpProperty_ScrollBarPageAmount",
              "value": "\"1503\""
            },
            {
              "description": "The type of scrollbar from the enums above.",
              "name": "xpProperty_ScrollBarType",
              "value": "\"1504\""
            },
            {
              "description": "Used internally.",
              "name": "xpProperty_ScrollBarSlop",
              "value": "\"1505\""
            }
          ]
        },
        {
          "name": "Scroll Bar Messages",
          "type": "enum",
          "values": [
            {
              "description": "The scroll bar sends this message when the slider position changes. It sends the message up the call chain; param1 is the scroll bar widget ID.",
              "name": "xpMsg_ScrollBarSliderPositionChanged",
              "value": "\"1500\""
            }
          ]
        },
        {
          "name": "Caption Properties",
          "type": "enum",
          "values": [
            {
              "description": "This property specifies whether the caption is lit; use lit captions against screens.",
              "name": "xpProperty_CaptionLit",
              "value": "\"1600\""
            }
          ]
        },
        {
          "name": "General Graphics Types Values",
          "type": "enum",
          "values": []
        },
        {
          "name": "General Graphics Properties",
          "type": "enum",
          "values": [
            {
              "description": "This property controls the type of icon that is drawn.",
              "name": "xpProperty_GeneralGraphicsType",
              "value": "\"1700\""
            }
          ]
        },
        {
          "name": "Progress Indicator Properties",
          "type": "enum",
          "values": [
            {
              "description": "This is the current value of the progress indicator.",
              "name": "xpProperty_ProgressPosition",
              "value": "\"1800\""
            },
            {
              "description": "This is the minimum value, equivalent to 0% filled.",
              "name": "xpProperty_ProgressMin",
              "value": "\"1801\""
            },
            {
              "description": "This is the maximum value, equivalent to 100% filled.",
              "name": "xpProperty_ProgressMax",
              "value": "\"1802\""
            }
          ]
        }
      ],
      "category": {
        "category": "Widget_System",
        "module": "Widget System",
        "url": "https://developer.x-plane.com/sdk/XPStandardWidgets/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"api\"><h1 class=\"sdk-api-title\" id=\"XPStandardWidgets\"><a href=\"/sdk/XPStandardWidgets/\">XPStandardWidgets</a>API</h1><h2>THEORY OF OPERATION</h2><p>The standard widgets are widgets built into the widgets library. While you can gain access to the widget function that drives them, you generally use them by calling<a href=\"/sdk/XPCreateWidget/\">XPCreateWidget</a>and then listening for special messages, etc.</p><p>The standard widgets often send messages to themselves when the user performs an event; these messages are sent up the widget hierarchy until they are handled. So you can add a widget proc directly to a push button (for example) to intercept the message when it is clicked, or you can put one widget proc on a window for all of the push buttons in the window. Most of these messages contain the original widget ID as a parameter so you can know which widget is messaging no matter who it is sent to.</p><div class=\"component\"><h2 id=\"MAIN WINDOW\">MAIN WINDOW</h2><p>The main window widget class provides a “window” as the user knows it. These windows are draggable and can be selected. Use them to create floating windows and non-modal dialogs.</p><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"xpWidgetClass_MainWindow\"><a href=\"/sdk/xpWidgetClass_MainWindow/\">xpWidgetClass_MainWindow</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/xpWidgetClass_MainWindow/\">xpWidgetClass_MainWindow</a> 1</code></pre></div><div class=\"enum\"><h3 class=\"sdk-api-enum\" id=\"Main Window Type Values\"><a href=\"/sdk/Main Window Type Values/\">Main Window Type Values</a></h3><p>These type values are used to control the appearance of a main window.</p><p><div class=\"enumitem\"><table><thead><tr><th>Name</th><th>Value</th><th>Description</th></tr></thead><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpMainWindowStyle_MainWindow\"><a href=\"/sdk/xpMainWindowStyle_MainWindow/\">xpMainWindowStyle_MainWindow</a></td><td>\"0\"</td><td>The standard main window; pin stripes on XP7, metal frame on XP 6.</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpMainWindowStyle_Translucent\"><a href=\"/sdk/xpMainWindowStyle_Translucent/\">xpMainWindowStyle_Translucent</a></td><td>\"1\"</td><td>A translucent dark gray window.</td></tr></table></div></p></div><div class=\"enum\"><h3 class=\"sdk-api-enum\" id=\"Main Window Properties\"><a href=\"/sdk/Main Window Properties/\">Main Window Properties</a></h3><p><div class=\"enumitem\"><table><thead><tr><th>Name</th><th>Value</th><th>Description</th></tr></thead><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpProperty_MainWindowType\"><a href=\"/sdk/xpProperty_MainWindowType/\">xpProperty_MainWindowType</a></td><td>\"1100\"</td><td>This property specifies the type of window. Set to one of the main window types above.</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpProperty_MainWindowHasCloseBoxes\"><a href=\"/sdk/xpProperty_MainWindowHasCloseBoxes/\">xpProperty_MainWindowHasCloseBoxes</a></td><td>\"1200\"</td><td>This property specifies whether the main window has close boxes in its corners.</td></tr></table></div></p></div><div class=\"enum\"><h3 class=\"sdk-api-enum\" id=\"MainWindow Messages\"><a href=\"/sdk/MainWindow Messages/\">MainWindow Messages</a></h3><p><div class=\"enumitem\"><table><thead><tr><th>Name</th><th>Value</th><th>Description</th></tr></thead><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpMessage_CloseButtonPushed\"><a href=\"/sdk/xpMessage_CloseButtonPushed/\">xpMessage_CloseButtonPushed</a></td><td>\"1200\"</td><td>This message is sent when the close buttons for your window are pressed.</td></tr></table></div></p></div></div><div class=\"component\"><h2 id=\"SUB WINDOW\">SUB WINDOW</h2><p>X-Plane dialogs are divided into separate areas; the sub window widgets allow you to make these areas. Create one main window and place several subwindows inside it. Then place your controls inside the subwindows.</p><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"xpWidgetClass_SubWindow\"><a href=\"/sdk/xpWidgetClass_SubWindow/\">xpWidgetClass_SubWindow</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/xpWidgetClass_SubWindow/\">xpWidgetClass_SubWindow</a> 2</code></pre></div><div class=\"enum\"><h3 class=\"sdk-api-enum\" id=\"SubWindow Type Values\"><a href=\"/sdk/SubWindow Type Values/\">SubWindow Type Values</a></h3><p>These values control the appearance of the subwindow.</p><p><div class=\"enumitem\"><table><thead><tr><th>Name</th><th>Value</th><th>Description</th></tr></thead><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpSubWindowStyle_SubWindow\"><a href=\"/sdk/xpSubWindowStyle_SubWindow/\">xpSubWindowStyle_SubWindow</a></td><td>\"0\"</td><td>A panel that sits inside a main window.</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpSubWindowStyle_Screen\"><a href=\"/sdk/xpSubWindowStyle_Screen/\">xpSubWindowStyle_Screen</a></td><td>\"2\"</td><td>A screen that sits inside a panel for showing text information.</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpSubWindowStyle_ListView\"><a href=\"/sdk/xpSubWindowStyle_ListView/\">xpSubWindowStyle_ListView</a></td><td>\"3\"</td><td>A list view for scrolling lists.</td></tr></table></div></p></div><div class=\"enum\"><h3 class=\"sdk-api-enum\" id=\"SubWindow Properties\"><a href=\"/sdk/SubWindow Properties/\">SubWindow Properties</a></h3><p><div class=\"enumitem\"><table><thead><tr><th>Name</th><th>Value</th><th>Description</th></tr></thead><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpProperty_SubWindowType\"><a href=\"/sdk/xpProperty_SubWindowType/\">xpProperty_SubWindowType</a></td><td>\"1200\"</td><td>This property specifies the type of window. Set to one of the subwindow types above.</td></tr></table></div></p></div></div><div class=\"component\"><h2 id=\"BUTTON\">BUTTON</h2><p>The button class provides a number of different button styles and behaviors, including push buttons, radio buttons, check boxes, etc. The button label appears on or next to the button depending on the button’s appearance or type.</p><p>The button’s behavior is a separate property that dictates who it highlights and what kinds of messages it sends. Since behavior and type are different, you can do strange things like make check boxes that act as push buttons or push buttons with radio button behavior.</p><p>In X-Plane 6 there were no check box graphics. The result is the following behavior: in X-Plane 6 all check box and radio buttons are round (radio-button style) buttons; in X-Plane 7 they are all square (check-box style) buttons. In a future version of X-Plane, the xpButtonBehavior enums will provide the correct graphic (check box or radio button) giving the expected result.</p><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"xpWidgetClass_Button\"><a href=\"/sdk/xpWidgetClass_Button/\">xpWidgetClass_Button</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/xpWidgetClass_Button/\">xpWidgetClass_Button</a> 3</code></pre></div><div class=\"enum\"><h3 class=\"sdk-api-enum\" id=\"Button Types\"><a href=\"/sdk/Button Types/\">Button Types</a></h3><p>These define the visual appearance of buttons but not how they respond to the mouse.</p><p><div class=\"enumitem\"><table><thead><tr><th>Name</th><th>Value</th><th>Description</th></tr></thead><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpPushButton\"><a href=\"/sdk/xpPushButton/\">xpPushButton</a></td><td>\"0\"</td><td>This is a standard push button, like an 'OK' or 'Cancel' button in a dialog box.</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpRadioButton\"><a href=\"/sdk/xpRadioButton/\">xpRadioButton</a></td><td>\"1\"</td><td>A check box or radio button. Use this and the button behaviors below to get the desired behavior.</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpWindowCloseBox\"><a href=\"/sdk/xpWindowCloseBox/\">xpWindowCloseBox</a></td><td>\"3\"</td><td>A window close box.</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpLittleDownArrow\"><a href=\"/sdk/xpLittleDownArrow/\">xpLittleDownArrow</a></td><td>\"5\"</td><td>A small down arrow.</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpLittleUpArrow\"><a href=\"/sdk/xpLittleUpArrow/\">xpLittleUpArrow</a></td><td>\"6\"</td><td>A small up arrow.</td></tr></table></div></p></div><div class=\"enum\"><h3 class=\"sdk-api-enum\" id=\"Button Behavior Values\"><a href=\"/sdk/Button Behavior Values/\">Button Behavior Values</a></h3><p>These define how the button responds to mouse clicks.</p><p><div class=\"enumitem\"><table><thead><tr><th>Name</th><th>Value</th><th>Description</th></tr></thead><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpButtonBehaviorPushButton\"><a href=\"/sdk/xpButtonBehaviorPushButton/\">xpButtonBehaviorPushButton</a></td><td>\"0\"</td><td>Standard push button behavior. The button highlights while the mouse is clickedover it and unhighlights when the mouse is moved outside of it or released.If the mouse is released over the button, the<a href=\"/sdk/xpMsg_PushButtonPressed/\">xpMsg_PushButtonPressed</a>messageis sent.</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpButtonBehaviorCheckBox\"><a href=\"/sdk/xpButtonBehaviorCheckBox/\">xpButtonBehaviorCheckBox</a></td><td>\"1\"</td><td>Check box behavior. The button immediately toggles its value when the mouse is clicked and sends out a<a href=\"/sdk/xpMsg_ButtonStateChanged/\">xpMsg_ButtonStateChanged</a>message.</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpButtonBehaviorRadioButton\"><a href=\"/sdk/xpButtonBehaviorRadioButton/\">xpButtonBehaviorRadioButton</a></td><td>\"2\"</td><td>Radio button behavior. The button immediately sets its state to oneand sends out a<a href=\"/sdk/xpMsg_ButtonStateChanged/\">xpMsg_ButtonStateChanged</a>message if it was not already setto one. You must turn off other radio buttons in a group in your code.</td></tr></table></div></p></div><div class=\"enum\"><h3 class=\"sdk-api-enum\" id=\"Button Properties\"><a href=\"/sdk/Button Properties/\">Button Properties</a></h3><p><div class=\"enumitem\"><table><thead><tr><th>Name</th><th>Value</th><th>Description</th></tr></thead><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpProperty_ButtonType\"><a href=\"/sdk/xpProperty_ButtonType/\">xpProperty_ButtonType</a></td><td>\"1300\"</td><td>This property sets the visual type of button. Use one of the button types above.</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpProperty_ButtonBehavior\"><a href=\"/sdk/xpProperty_ButtonBehavior/\">xpProperty_ButtonBehavior</a></td><td>\"1301\"</td><td>This property sets the button's behavior. Use one of the button behaviors above.</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpProperty_ButtonState\"><a href=\"/sdk/xpProperty_ButtonState/\">xpProperty_ButtonState</a></td><td>\"1302\"</td><td>This property tells whether a check box or radio button is \"checked\" or not. Not used for push buttons.</td></tr></table></div></p></div><div class=\"enum\"><h3 class=\"sdk-api-enum\" id=\"Button Messages\"><a href=\"/sdk/Button Messages/\">Button Messages</a></h3><p>These messages are sent by the button to itself and then up the widget chain when the button is clicked. (You may intercept them by providing a widget handler for the button itself or by providing a handler in a parent widget.)</p><p><div class=\"enumitem\"><table><thead><tr><th>Name</th><th>Value</th><th>Description</th></tr></thead><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpMsg_PushButtonPressed\"><a href=\"/sdk/xpMsg_PushButtonPressed/\">xpMsg_PushButtonPressed</a></td><td>\"1300\"</td><td>This message is sent when the user completes a click and release in a button withpush button behavior. Parameterone of the message is the widget ID of the button. This message is dispatched up thewidget hierarchy.</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpMsg_ButtonStateChanged\"><a href=\"/sdk/xpMsg_ButtonStateChanged/\">xpMsg_ButtonStateChanged</a></td><td>\"1301\"</td><td>This message is sent when a button is clicked that has radio button or check box behaviorand its value changes. (Note that if the value changes by setting a property you do not receivethis message!) Parameter one is the widget ID of the button, parameter 2 is the new state value,either zero or one. This message is dispatched up the widget hierarchy.</td></tr></table></div></p></div></div><div class=\"component\"><h2 id=\"TEXT FIELD\">TEXT FIELD</h2><p>The text field widget provides an editable text field including mouse selection and keyboard navigation. The contents of the text field are its descriptor. (The descriptor changes as the user types.)</p><p>The text field can have a number of types, that affect the visual layout of the text field. The text field sends messages to itself so you may control its behavior.</p><p>If you need to filter keystrokes, add a new handler and intercept the key press message. Since key presses are passed by pointer, you can modify the keystroke and pass it through to the text field widget.</p><p>WARNING: in X-Plane before 7.10 (including 6.70) null characters could crash X-Plane. To prevent this, wrap this object with a filter function (more instructions can be found on the SDK website).</p><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"xpWidgetClass_TextField\"><a href=\"/sdk/xpWidgetClass_TextField/\">xpWidgetClass_TextField</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/xpWidgetClass_TextField/\">xpWidgetClass_TextField</a> 4</code></pre></div><div class=\"enum\"><h3 class=\"sdk-api-enum\" id=\"Text Field Type Values\"><a href=\"/sdk/Text Field Type Values/\">Text Field Type Values</a></h3><p>These control the look of the text field.</p><p><div class=\"enumitem\"><table><thead><tr><th>Name</th><th>Value</th><th>Description</th></tr></thead><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpTextEntryField\"><a href=\"/sdk/xpTextEntryField/\">xpTextEntryField</a></td><td>\"0\"</td><td>A field for text entry.</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpTextTransparent\"><a href=\"/sdk/xpTextTransparent/\">xpTextTransparent</a></td><td>\"3\"</td><td>A transparent text field. The user can type and the text is drawn, but no background is drawn.You can draw your own background by adding a widget handler and prehandling the draw message.</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpTextTranslucent\"><a href=\"/sdk/xpTextTranslucent/\">xpTextTranslucent</a></td><td>\"4\"</td><td>A translucent edit field, dark gray.</td></tr></table></div></p></div><div class=\"enum\"><h3 class=\"sdk-api-enum\" id=\"Text Field Properties\"><a href=\"/sdk/Text Field Properties/\">Text Field Properties</a></h3><p><div class=\"enumitem\"><table><thead><tr><th>Name</th><th>Value</th><th>Description</th></tr></thead><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpProperty_EditFieldSelStart\"><a href=\"/sdk/xpProperty_EditFieldSelStart/\">xpProperty_EditFieldSelStart</a></td><td>\"1400\"</td><td>This is the character position the selection starts at, zero based.If it is the same as the end insertion point, the insertion pointis not a selection.</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpProperty_EditFieldSelEnd\"><a href=\"/sdk/xpProperty_EditFieldSelEnd/\">xpProperty_EditFieldSelEnd</a></td><td>\"1401\"</td><td>This is the character position of the end of the selection.</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpProperty_EditFieldSelDragStart\"><a href=\"/sdk/xpProperty_EditFieldSelDragStart/\">xpProperty_EditFieldSelDragStart</a></td><td>\"1402\"</td><td>This is the character position a drag was started at if the user is dragging to select text, or -1 if a drag is not in progress.</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpProperty_TextFieldType\"><a href=\"/sdk/xpProperty_TextFieldType/\">xpProperty_TextFieldType</a></td><td>\"1403\"</td><td>This is the type of text field to display, from the above list.</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpProperty_PasswordMode\"><a href=\"/sdk/xpProperty_PasswordMode/\">xpProperty_PasswordMode</a></td><td>\"1404\"</td><td>Set this property to 1 to password protect the field. Characters will be drawn as *s even though the descriptor will contain plain-text.</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpProperty_MaxCharacters\"><a href=\"/sdk/xpProperty_MaxCharacters/\">xpProperty_MaxCharacters</a></td><td>\"1405\"</td><td>The max number of characters you can enter, if limited. Zero means unlimited.</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpProperty_ScrollPosition\"><a href=\"/sdk/xpProperty_ScrollPosition/\">xpProperty_ScrollPosition</a></td><td>\"1406\"</td><td>The first visible character on the left. This effectively scrolls the text field.</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpProperty_Font\"><a href=\"/sdk/xpProperty_Font/\">xpProperty_Font</a></td><td>\"1407\"</td><td>The font to draw the field's text with. (An<a href=\"/sdk/XPLMFontID/\">XPLMFontID</a>.)</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpProperty_ActiveEditSide\"><a href=\"/sdk/xpProperty_ActiveEditSide/\">xpProperty_ActiveEditSide</a></td><td>\"1408\"</td><td>This is the active side of the insert selection. (Internal)</td></tr></table></div></p></div><div class=\"enum\"><h3 class=\"sdk-api-enum\" id=\"Text Field Messages\"><a href=\"/sdk/Text Field Messages/\">Text Field Messages</a></h3><p><div class=\"enumitem\"><table><thead><tr><th>Name</th><th>Value</th><th>Description</th></tr></thead><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpMsg_TextFieldChanged\"><a href=\"/sdk/xpMsg_TextFieldChanged/\">xpMsg_TextFieldChanged</a></td><td>\"1400\"</td><td>The text field sends this message to itself when its text changes. It sends the message up the call chain; param1 is the text field's widget ID.</td></tr></table></div></p></div></div><div class=\"component\"><h2 id=\"SCROLL BAR\">SCROLL BAR</h2><p>A standard scroll bar or slider control. The scroll bar has a minimum, maximum and current value that is updated when the user drags it. The scroll bar sends continuous messages as it is dragged.</p><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"xpWidgetClass_ScrollBar\"><a href=\"/sdk/xpWidgetClass_ScrollBar/\">xpWidgetClass_ScrollBar</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/xpWidgetClass_ScrollBar/\">xpWidgetClass_ScrollBar</a> 5</code></pre></div><div class=\"enum\"><h3 class=\"sdk-api-enum\" id=\"Scroll Bar Type Values\"><a href=\"/sdk/Scroll Bar Type Values/\">Scroll Bar Type Values</a></h3><p>This defines how the scroll bar looks.</p><p><div class=\"enumitem\"><table><thead><tr><th>Name</th><th>Value</th><th>Description</th></tr></thead><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpScrollBarTypeScrollBar\"><a href=\"/sdk/xpScrollBarTypeScrollBar/\">xpScrollBarTypeScrollBar</a></td><td>\"0\"</td><td>A standard X-Plane scroll bar (with arrows on the ends).</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpScrollBarTypeSlider\"><a href=\"/sdk/xpScrollBarTypeSlider/\">xpScrollBarTypeSlider</a></td><td>\"1\"</td><td>A slider, no arrows.</td></tr></table></div></p></div><div class=\"enum\"><h3 class=\"sdk-api-enum\" id=\"Scroll Bar Properties\"><a href=\"/sdk/Scroll Bar Properties/\">Scroll Bar Properties</a></h3><p><div class=\"enumitem\"><table><thead><tr><th>Name</th><th>Value</th><th>Description</th></tr></thead><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpProperty_ScrollBarSliderPosition\"><a href=\"/sdk/xpProperty_ScrollBarSliderPosition/\">xpProperty_ScrollBarSliderPosition</a></td><td>\"1500\"</td><td>The current position of the thumb (in between the min and max, inclusive)</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpProperty_ScrollBarMin\"><a href=\"/sdk/xpProperty_ScrollBarMin/\">xpProperty_ScrollBarMin</a></td><td>\"1501\"</td><td>The value the scroll bar has when the thumb is in the lowest position.</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpProperty_ScrollBarMax\"><a href=\"/sdk/xpProperty_ScrollBarMax/\">xpProperty_ScrollBarMax</a></td><td>\"1502\"</td><td>The value the scroll bar has when the thumb is in the highest position.</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpProperty_ScrollBarPageAmount\"><a href=\"/sdk/xpProperty_ScrollBarPageAmount/\">xpProperty_ScrollBarPageAmount</a></td><td>\"1503\"</td><td>How many units to move the scroll bar when clicking next to the thumb. The scroll bar always moves one unit when the arrows are clicked.</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpProperty_ScrollBarType\"><a href=\"/sdk/xpProperty_ScrollBarType/\">xpProperty_ScrollBarType</a></td><td>\"1504\"</td><td>The type of scrollbar from the enums above.</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpProperty_ScrollBarSlop\"><a href=\"/sdk/xpProperty_ScrollBarSlop/\">xpProperty_ScrollBarSlop</a></td><td>\"1505\"</td><td>Used internally.</td></tr></table></div></p></div><div class=\"enum\"><h3 class=\"sdk-api-enum\" id=\"Scroll Bar Messages\"><a href=\"/sdk/Scroll Bar Messages/\">Scroll Bar Messages</a></h3><p><div class=\"enumitem\"><table><thead><tr><th>Name</th><th>Value</th><th>Description</th></tr></thead><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpMsg_ScrollBarSliderPositionChanged\"><a href=\"/sdk/xpMsg_ScrollBarSliderPositionChanged/\">xpMsg_ScrollBarSliderPositionChanged</a></td><td>\"1500\"</td><td>The scroll bar sends this message when the slider position changes. It sends the message up the call chain; param1 is the scroll bar widget ID.</td></tr></table></div></p></div></div><div class=\"component\"><h2 id=\"CAPTION\">CAPTION</h2><p>A caption is a simple widget that shows its descriptor as a string, useful for labeling parts of a window. It always shows its descriptor as its string and is otherwise transparent.</p><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"xpWidgetClass_Caption\"><a href=\"/sdk/xpWidgetClass_Caption/\">xpWidgetClass_Caption</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/xpWidgetClass_Caption/\">xpWidgetClass_Caption</a> 6</code></pre></div><div class=\"enum\"><h3 class=\"sdk-api-enum\" id=\"Caption Properties\"><a href=\"/sdk/Caption Properties/\">Caption Properties</a></h3><p><div class=\"enumitem\"><table><thead><tr><th>Name</th><th>Value</th><th>Description</th></tr></thead><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpProperty_CaptionLit\"><a href=\"/sdk/xpProperty_CaptionLit/\">xpProperty_CaptionLit</a></td><td>\"1600\"</td><td>This property specifies whether the caption is lit; use lit captions against screens.</td></tr></table></div></p></div></div><div class=\"component\"><h2 id=\"GENERAL GRAPHICS\">GENERAL GRAPHICS</h2><p>The general graphics widget can show one of many icons available from X-Plane.</p><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"xpWidgetClass_GeneralGraphics\"><a href=\"/sdk/xpWidgetClass_GeneralGraphics/\">xpWidgetClass_GeneralGraphics</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/xpWidgetClass_GeneralGraphics/\">xpWidgetClass_GeneralGraphics</a> 7</code></pre></div><div class=\"enum\"><h3 class=\"sdk-api-enum\" id=\"General Graphics Types Values\"><a href=\"/sdk/General Graphics Types Values/\">General Graphics Types Values</a></h3><p>These define the icon for the general graphics.</p><p><div class=\"enumitem\"><table><thead><tr><th>Name</th><th>Value</th><th>Description</th></tr></thead><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpShip\"><a href=\"/sdk/xpShip/\">xpShip</a></td><td>\"4\"</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpILSGlideScope\"><a href=\"/sdk/xpILSGlideScope/\">xpILSGlideScope</a></td><td>\"5\"</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpMarkerLeft\"><a href=\"/sdk/xpMarkerLeft/\">xpMarkerLeft</a></td><td>\"6\"</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xp_Airport\"><a href=\"/sdk/xp_Airport/\">xp_Airport</a></td><td>\"7\"</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpNDB\"><a href=\"/sdk/xpNDB/\">xpNDB</a></td><td>\"8\"</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpVOR\"><a href=\"/sdk/xpVOR/\">xpVOR</a></td><td>\"9\"</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpRadioTower\"><a href=\"/sdk/xpRadioTower/\">xpRadioTower</a></td><td>\"10\"</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpAircraftCarrier\"><a href=\"/sdk/xpAircraftCarrier/\">xpAircraftCarrier</a></td><td>\"11\"</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpFire\"><a href=\"/sdk/xpFire/\">xpFire</a></td><td>\"12\"</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpMarkerRight\"><a href=\"/sdk/xpMarkerRight/\">xpMarkerRight</a></td><td>\"13\"</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpCustomObject\"><a href=\"/sdk/xpCustomObject/\">xpCustomObject</a></td><td>\"14\"</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpCoolingTower\"><a href=\"/sdk/xpCoolingTower/\">xpCoolingTower</a></td><td>\"15\"</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpSmokeStack\"><a href=\"/sdk/xpSmokeStack/\">xpSmokeStack</a></td><td>\"16\"</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpBuilding\"><a href=\"/sdk/xpBuilding/\">xpBuilding</a></td><td>\"17\"</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpPowerLine\"><a href=\"/sdk/xpPowerLine/\">xpPowerLine</a></td><td>\"18\"</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpVORWithCompassRose\"><a href=\"/sdk/xpVORWithCompassRose/\">xpVORWithCompassRose</a></td><td>\"19\"</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpOilPlatform\"><a href=\"/sdk/xpOilPlatform/\">xpOilPlatform</a></td><td>\"21\"</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpOilPlatformSmall\"><a href=\"/sdk/xpOilPlatformSmall/\">xpOilPlatformSmall</a></td><td>\"22\"</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpWayPoint\"><a href=\"/sdk/xpWayPoint/\">xpWayPoint</a></td><td>\"23\"</td></tr></table></div></p></div><div class=\"enum\"><h3 class=\"sdk-api-enum\" id=\"General Graphics Properties\"><a href=\"/sdk/General Graphics Properties/\">General Graphics Properties</a></h3><p><div class=\"enumitem\"><table><thead><tr><th>Name</th><th>Value</th><th>Description</th></tr></thead><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpProperty_GeneralGraphicsType\"><a href=\"/sdk/xpProperty_GeneralGraphicsType/\">xpProperty_GeneralGraphicsType</a></td><td>\"1700\"</td><td>This property controls the type of icon that is drawn.</td></tr></table></div></p></div></div><div class=\"component\"><h2 id=\"PROGRESS INDICATOR\">PROGRESS INDICATOR</h2><p>This widget implements a progress indicator as seen when X-Plane starts up.</p><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"xpWidgetClass_Progress\"><a href=\"/sdk/xpWidgetClass_Progress/\">xpWidgetClass_Progress</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/xpWidgetClass_Progress/\">xpWidgetClass_Progress</a> 8</code></pre></div><div class=\"enum\"><h3 class=\"sdk-api-enum\" id=\"Progress Indicator Properties\"><a href=\"/sdk/Progress Indicator Properties/\">Progress Indicator Properties</a></h3><p><div class=\"enumitem\"><table><thead><tr><th>Name</th><th>Value</th><th>Description</th></tr></thead><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpProperty_ProgressPosition\"><a href=\"/sdk/xpProperty_ProgressPosition/\">xpProperty_ProgressPosition</a></td><td>\"1800\"</td><td>This is the current value of the progress indicator.</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpProperty_ProgressMin\"><a href=\"/sdk/xpProperty_ProgressMin/\">xpProperty_ProgressMin</a></td><td>\"1801\"</td><td>This is the minimum value, equivalent to 0% filled.</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpProperty_ProgressMax\"><a href=\"/sdk/xpProperty_ProgressMax/\">xpProperty_ProgressMax</a></td><td>\"1802\"</td><td>This is the maximum value, equivalent to 100% filled.</td></tr></table></div></p></div></div></div></div></article>",
      "code_examples": [],
      "cross_references": [
        "XPCreateWidget",
        "XPLMFontID"
      ],
      "markdown": "# [XPStandardWidgets](/sdk/XPStandardWidgets/)API\n\n## THEORY OF OPERATION\n\nThe standard widgets are widgets built into the widgets library. While you can\ngain access to the widget function that drives them, you generally use them by\ncalling[XPCreateWidget](/sdk/XPCreateWidget/)and then listening for special\nmessages, etc.\n\nThe standard widgets often send messages to themselves when the user performs an\nevent; these messages are sent up the widget hierarchy until they are handled.\nSo you can add a widget proc directly to a push button (for example) to\nintercept the message when it is clicked, or you can put one widget proc on a\nwindow for all of the push buttons in the window. Most of these messages contain\nthe original widget ID as a parameter so you can know which widget is messaging\nno matter who it is sent to.\n\n## MAIN WINDOW\n\nThe main window widget class provides a “window” as the user knows it. These\nwindows are draggable and can be selected. Use them to create floating windows\nand non-modal dialogs.\n\n### [xpWidgetClass_MainWindow](/sdk/xpWidgetClass_MainWindow/)\n\n```cpp\n#define xpWidgetClass_MainWindow 1\n```\n\n### [Main Window Type Values](/sdk/Main Window Type Values/)\n\nThese type values are used to control the appearance of a main window.\n\n| Name | Value | Description |\n| --- | --- | --- |\n| [xpMainWindowStyle_MainWindow](/sdk/xpMainWindowStyle_MainWindow/) | \"0\" | The\nstandard main window; pin stripes on XP7, metal frame on XP 6. |\n| [xpMainWindowStyle_Translucent](/sdk/xpMainWindowStyle_Translucent/) | \"1\" | A\ntranslucent dark gray window. |\n\n### [Main Window Properties](/sdk/Main Window Properties/)\n\n| Name | Value | Description |\n| --- | --- | --- |\n| [xpProperty_MainWindowType](/sdk/xpProperty_MainWindowType/) | \"1100\" | This\nproperty specifies the type of window. Set to one of the main window types\nabove. |\n| [xpProperty_MainWindowHasCloseBoxes](/sdk/xpProperty_MainWindowHasCloseBoxes/)\n| \"1200\" | This property specifies whether the main window has close boxes in\nits corners. |\n\n### [MainWindow Messages](/sdk/MainWindow Messages/)\n\n| Name | Value | Description |\n| --- | --- | --- |\n| [xpMessage_CloseButtonPushed](/sdk/xpMessage_CloseButtonPushed/) | \"1200\" |\nThis message is sent when the close buttons for your window are pressed. |\n\n## SUB WINDOW\n\nX-Plane dialogs are divided into separate areas; the sub window widgets allow\nyou to make these areas. Create one main window and place several subwindows\ninside it. Then place your controls inside the subwindows.\n\n### [xpWidgetClass_SubWindow](/sdk/xpWidgetClass_SubWindow/)\n\n```cpp\n#define xpWidgetClass_SubWindow 2\n```\n\n### [SubWindow Type Values](/sdk/SubWindow Type Values/)\n\nThese values control the appearance of the subwindow.\n\n| Name | Value | Description |\n| --- | --- | --- |\n| [xpSubWindowStyle_SubWindow](/sdk/xpSubWindowStyle_SubWindow/) | \"0\" | A panel\nthat sits inside a main window. |\n| [xpSubWindowStyle_Screen](/sdk/xpSubWindowStyle_Screen/) | \"2\" | A screen that\nsits inside a panel for showing text information. |\n| [xpSubWindowStyle_ListView](/sdk/xpSubWindowStyle_ListView/) | \"3\" | A list\nview for scrolling lists. |\n\n### [SubWindow Properties](/sdk/SubWindow Properties/)\n\n| Name | Value | Description |\n| --- | --- | --- |\n| [xpProperty_SubWindowType](/sdk/xpProperty_SubWindowType/) | \"1200\" | This\nproperty specifies the type of window. Set to one of the subwindow types above.\n|\n\n## BUTTON\n\nThe button class provides a number of different button styles and behaviors,\nincluding push buttons, radio buttons, check boxes, etc. The button label\nappears on or next to the button depending on the button’s appearance or type.\n\nThe button’s behavior is a separate property that dictates who it highlights and\nwhat kinds of messages it sends. Since behavior and type are different, you can\ndo strange things like make check boxes that act as push buttons or push buttons\nwith radio button behavior.\n\nIn X-Plane 6 there were no check box graphics. The result is the following\nbehavior: in X-Plane 6 all check box and radio buttons are round (radio-button\nstyle) buttons; in X-Plane 7 they are all square (check-box style) buttons. In a\nfuture version of X-Plane, the xpButtonBehavior enums will provide the correct\ngraphic (check box or radio button) giving the expected result.\n\n### [xpWidgetClass_Button](/sdk/xpWidgetClass_Button/)\n\n```cpp\n#define xpWidgetClass_Button 3\n```\n\n### [Button Types](/sdk/Button Types/)\n\nThese define the visual appearance of buttons but not how they respond to the\nmouse.\n\n| Name | Value | Description |\n| --- | --- | --- |\n| [xpPushButton](/sdk/xpPushButton/) | \"0\" | This is a standard push button,\nlike an 'OK' or 'Cancel' button in a dialog box. |\n| [xpRadioButton](/sdk/xpRadioButton/) | \"1\" | A check box or radio button. Use\nthis and the button behaviors below to get the desired behavior. |\n| [xpWindowCloseBox](/sdk/xpWindowCloseBox/) | \"3\" | A window close box. |\n| [xpLittleDownArrow](/sdk/xpLittleDownArrow/) | \"5\" | A small down arrow. |\n| [xpLittleUpArrow](/sdk/xpLittleUpArrow/) | \"6\" | A small up arrow. |\n\n### [Button Behavior Values](/sdk/Button Behavior Values/)\n\nThese define how the button responds to mouse clicks.\n\n| Name | Value | Description |\n| --- | --- | --- |\n| [xpButtonBehaviorPushButton](/sdk/xpButtonBehaviorPushButton/) | \"0\" |\nStandard push button behavior. The button highlights while the mouse is\nclickedover it and unhighlights when the mouse is moved outside of it or\nreleased.If the mouse is released over the button,\nthe[xpMsg_PushButtonPressed](/sdk/xpMsg_PushButtonPressed/)messageis sent. |\n| [xpButtonBehaviorCheckBox](/sdk/xpButtonBehaviorCheckBox/) | \"1\" | Check box\nbehavior. The button immediately toggles its value when the mouse is clicked and\nsends out a[xpMsg_ButtonStateChanged](/sdk/xpMsg_ButtonStateChanged/)message. |\n| [xpButtonBehaviorRadioButton](/sdk/xpButtonBehaviorRadioButton/) | \"2\" | Radio\nbutton behavior. The button immediately sets its state to oneand sends out\na[xpMsg_ButtonStateChanged](/sdk/xpMsg_ButtonStateChanged/)message if it was not\nalready setto one. You must turn off other radio buttons in a group in your\ncode. |\n\n### [Button Properties](/sdk/Button Properties/)\n\n| Name | Value | Description |\n| --- | --- | --- |\n| [xpProperty_ButtonType](/sdk/xpProperty_ButtonType/) | \"1300\" | This property\nsets the visual type of button. Use one of the button types above. |\n| [xpProperty_ButtonBehavior](/sdk/xpProperty_ButtonBehavior/) | \"1301\" | This\nproperty sets the button's behavior. Use one of the button behaviors above. |\n| [xpProperty_ButtonState](/sdk/xpProperty_ButtonState/) | \"1302\" | This\nproperty tells whether a check box or radio button is \"checked\" or not. Not used\nfor push buttons. |\n\n### [Button Messages](/sdk/Button Messages/)\n\nThese messages are sent by the button to itself and then up the widget chain\nwhen the button is clicked. (You may intercept them by providing a widget\nhandler for the button itself or by providing a handler in a parent widget.)\n\n| Name | Value | Description |\n| --- | --- | --- |\n| [xpMsg_PushButtonPressed](/sdk/xpMsg_PushButtonPressed/) | \"1300\" | This\nmessage is sent when the user completes a click and release in a button withpush\nbutton behavior. Parameterone of the message is the widget ID of the button.\nThis message is dispatched up thewidget hierarchy. |\n| [xpMsg_ButtonStateChanged](/sdk/xpMsg_ButtonStateChanged/) | \"1301\" | This\nmessage is sent when a button is clicked that has radio button or check box\nbehaviorand its value changes. (Note that if the value changes by setting a\nproperty you do not receivethis message!) Parameter one is the widget ID of the\nbutton, parameter 2 is the new state value,either zero or one. This message is\ndispatched up the widget hierarchy. |\n\n## TEXT FIELD\n\nThe text field widget provides an editable text field including mouse selection\nand keyboard navigation. The contents of the text field are its descriptor. (The\ndescriptor changes as the user types.)\n\nThe text field can have a number of types, that affect the visual layout of the\ntext field. The text field sends messages to itself so you may control its\nbehavior.\n\nIf you need to filter keystrokes, add a new handler and intercept the key press\nmessage. Since key presses are passed by pointer, you can modify the keystroke\nand pass it through to the text field widget.\n\nWARNING: in X-Plane before 7.10 (including 6.70) null characters could crash\nX-Plane. To prevent this, wrap this object with a filter function (more\ninstructions can be found on the SDK website).\n\n### [xpWidgetClass_TextField](/sdk/xpWidgetClass_TextField/)\n\n```cpp\n#define xpWidgetClass_TextField 4\n```\n\n### [Text Field Type Values](/sdk/Text Field Type Values/)\n\nThese control the look of the text field.\n\n| Name | Value | Description |\n| --- | --- | --- |\n| [xpTextEntryField](/sdk/xpTextEntryField/) | \"0\" | A field for text entry. |\n| [xpTextTransparent](/sdk/xpTextTransparent/) | \"3\" | A transparent text field.\nThe user can type and the text is drawn, but no background is drawn.You can draw\nyour own background by adding a widget handler and prehandling the draw message.\n|\n| [xpTextTranslucent](/sdk/xpTextTranslucent/) | \"4\" | A translucent edit field,\ndark gray. |\n\n### [Text Field Properties](/sdk/Text Field Properties/)\n\n| Name | Value | Description |\n| --- | --- | --- |\n| [xpProperty_EditFieldSelStart](/sdk/xpProperty_EditFieldSelStart/) | \"1400\" |\nThis is the character position the selection starts at, zero based.If it is the\nsame as the end insertion point, the insertion pointis not a selection. |\n| [xpProperty_EditFieldSelEnd](/sdk/xpProperty_EditFieldSelEnd/) | \"1401\" | This\nis the character position of the end of the selection. |\n| [xpProperty_EditFieldSelDragStart](/sdk/xpProperty_EditFieldSelDragStart/) |\n\"1402\" | This is the character position a drag was started at if the user is\ndragging to select text, or -1 if a drag is not in progress. |\n| [xpProperty_TextFieldType](/sdk/xpProperty_TextFieldType/) | \"1403\" | This is\nthe type of text field to display, from the above list. |\n| [xpProperty_PasswordMode](/sdk/xpProperty_PasswordMode/) | \"1404\" | Set this\nproperty to 1 to password protect the field. Characters will be drawn as *s even\nthough the descriptor will contain plain-text. |\n| [xpProperty_MaxCharacters](/sdk/xpProperty_MaxCharacters/) | \"1405\" | The max\nnumber of characters you can enter, if limited. Zero means unlimited. |\n| [xpProperty_ScrollPosition](/sdk/xpProperty_ScrollPosition/) | \"1406\" | The\nfirst visible character on the left. This effectively scrolls the text field. |\n| [xpProperty_Font](/sdk/xpProperty_Font/) | \"1407\" | The font to draw the\nfield's text with. (An[XPLMFontID](/sdk/XPLMFontID/).) |\n| [xpProperty_ActiveEditSide](/sdk/xpProperty_ActiveEditSide/) | \"1408\" | This\nis the active side of the insert selection. (Internal) |\n\n### [Text Field Messages](/sdk/Text Field Messages/)\n\n| Name | Value | Description |\n| --- | --- | --- |\n| [xpMsg_TextFieldChanged](/sdk/xpMsg_TextFieldChanged/) | \"1400\" | The text\nfield sends this message to itself when its text changes. It sends the message\nup the call chain; param1 is the text field's widget ID. |\n\n## SCROLL BAR\n\nA standard scroll bar or slider control. The scroll bar has a minimum, maximum\nand current value that is updated when the user drags it. The scroll bar sends\ncontinuous messages as it is dragged.\n\n### [xpWidgetClass_ScrollBar](/sdk/xpWidgetClass_ScrollBar/)\n\n```cpp\n#define xpWidgetClass_ScrollBar 5\n```\n\n### [Scroll Bar Type Values](/sdk/Scroll Bar Type Values/)\n\nThis defines how the scroll bar looks.\n\n| Name | Value | Description |\n| --- | --- | --- |\n| [xpScrollBarTypeScrollBar](/sdk/xpScrollBarTypeScrollBar/) | \"0\" | A standard\nX-Plane scroll bar (with arrows on the ends). |\n| [xpScrollBarTypeSlider](/sdk/xpScrollBarTypeSlider/) | \"1\" | A slider, no\narrows. |\n\n### [Scroll Bar Properties](/sdk/Scroll Bar Properties/)\n\n| Name | Value | Description |\n| --- | --- | --- |\n| [xpProperty_ScrollBarSliderPosition](/sdk/xpProperty_ScrollBarSliderPosition/)\n| \"1500\" | The current position of the thumb (in between the min and max,\ninclusive) |\n| [xpProperty_ScrollBarMin](/sdk/xpProperty_ScrollBarMin/) | \"1501\" | The value\nthe scroll bar has when the thumb is in the lowest position. |\n| [xpProperty_ScrollBarMax](/sdk/xpProperty_ScrollBarMax/) | \"1502\" | The value\nthe scroll bar has when the thumb is in the highest position. |\n| [xpProperty_ScrollBarPageAmount](/sdk/xpProperty_ScrollBarPageAmount/) |\n\"1503\" | How many units to move the scroll bar when clicking next to the thumb.\nThe scroll bar always moves one unit when the arrows are clicked. |\n| [xpProperty_ScrollBarType](/sdk/xpProperty_ScrollBarType/) | \"1504\" | The type\nof scrollbar from the enums above. |\n| [xpProperty_ScrollBarSlop](/sdk/xpProperty_ScrollBarSlop/) | \"1505\" | Used\ninternally. |\n\n### [Scroll Bar Messages](/sdk/Scroll Bar Messages/)\n\n| Name | Value | Description |\n| --- | --- | --- |\n|\n[xpMsg_ScrollBarSliderPositionChanged](/sdk/xpMsg_ScrollBarSliderPositionChanged/)\n| \"1500\" | The scroll bar sends this message when the slider position changes.\nIt sends the message up the call chain; param1 is the scroll bar widget ID. |\n\n## CAPTION\n\nA caption is a simple widget that shows its descriptor as a string, useful for\nlabeling parts of a window. It always shows its descriptor as its string and is\notherwise transparent.\n\n### [xpWidgetClass_Caption](/sdk/xpWidgetClass_Caption/)\n\n```cpp\n#define xpWidgetClass_Caption 6\n```\n\n### [Caption Properties](/sdk/Caption Properties/)\n\n| Name | Value | Description |\n| --- | --- | --- |\n| [xpProperty_CaptionLit](/sdk/xpProperty_CaptionLit/) | \"1600\" | This property\nspecifies whether the caption is lit; use lit captions against screens. |\n\n## GENERAL GRAPHICS\n\nThe general graphics widget can show one of many icons available from X-Plane.\n\n### [xpWidgetClass_GeneralGraphics](/sdk/xpWidgetClass_GeneralGraphics/)\n\n```cpp\n#define xpWidgetClass_GeneralGraphics 7\n```\n\n### [General Graphics Types Values](/sdk/General Graphics Types Values/)\n\nThese define the icon for the general graphics.\n\n| Name | Value | Description |\n| --- | --- | --- |\n| [xpShip](/sdk/xpShip/) | \"4\" |\n| [xpILSGlideScope](/sdk/xpILSGlideScope/) | \"5\" |\n| [xpMarkerLeft](/sdk/xpMarkerLeft/) | \"6\" |\n| [xp_Airport](/sdk/xp_Airport/) | \"7\" |\n| [xpNDB](/sdk/xpNDB/) | \"8\" |\n| [xpVOR](/sdk/xpVOR/) | \"9\" |\n| [xpRadioTower](/sdk/xpRadioTower/) | \"10\" |\n| [xpAircraftCarrier](/sdk/xpAircraftCarrier/) | \"11\" |\n| [xpFire](/sdk/xpFire/) | \"12\" |\n| [xpMarkerRight](/sdk/xpMarkerRight/) | \"13\" |\n| [xpCustomObject](/sdk/xpCustomObject/) | \"14\" |\n| [xpCoolingTower](/sdk/xpCoolingTower/) | \"15\" |\n| [xpSmokeStack](/sdk/xpSmokeStack/) | \"16\" |\n| [xpBuilding](/sdk/xpBuilding/) | \"17\" |\n| [xpPowerLine](/sdk/xpPowerLine/) | \"18\" |\n| [xpVORWithCompassRose](/sdk/xpVORWithCompassRose/) | \"19\" |\n| [xpOilPlatform](/sdk/xpOilPlatform/) | \"21\" |\n| [xpOilPlatformSmall](/sdk/xpOilPlatformSmall/) | \"22\" |\n| [xpWayPoint](/sdk/xpWayPoint/) | \"23\" |\n\n### [General Graphics Properties](/sdk/General Graphics Properties/)\n\n| Name | Value | Description |\n| --- | --- | --- |\n| [xpProperty_GeneralGraphicsType](/sdk/xpProperty_GeneralGraphicsType/) |\n\"1700\" | This property controls the type of icon that is drawn. |\n\n## PROGRESS INDICATOR\n\nThis widget implements a progress indicator as seen when X-Plane starts up.\n\n### [xpWidgetClass_Progress](/sdk/xpWidgetClass_Progress/)\n\n```cpp\n#define xpWidgetClass_Progress 8\n```\n\n### [Progress Indicator Properties](/sdk/Progress Indicator Properties/)\n\n| Name | Value | Description |\n| --- | --- | --- |\n| [xpProperty_ProgressPosition](/sdk/xpProperty_ProgressPosition/) | \"1800\" |\nThis is the current value of the progress indicator. |\n| [xpProperty_ProgressMin](/sdk/xpProperty_ProgressMin/) | \"1801\" | This is the\nminimum value, equivalent to 0% filled. |\n| [xpProperty_ProgressMax](/sdk/xpProperty_ProgressMax/) | \"1802\" | This is the\nmaximum value, equivalent to 100% filled. |",
      "own_functions": [
        "Main Window Type Values",
        "Main Window Properties",
        "MainWindow Messages",
        "SubWindow Type Values",
        "SubWindow Properties",
        "Button Types",
        "Button Behavior Values",
        "Button Properties",
        "Button Messages",
        "Text Field Type Values",
        "Text Field Properties",
        "Text Field Messages",
        "Scroll Bar Type Values",
        "Scroll Bar Properties",
        "Scroll Bar Messages",
        "Caption Properties",
        "General Graphics Types Values",
        "General Graphics Properties",
        "Progress Indicator Properties"
      ],
      "processing_timestamp": "2025-06-25T20:39:23.123041+00:00",
      "title": "XPStandardWidgets | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPStandardWidgets/"
    },
    "https://developer.x-plane.com/sdk/XPTrackStyle/": {
      "api_signatures": [
        {
          "name": "XPTrackStyle",
          "type": "enum",
          "values": [
            {
              "description": "not over metal can be lit can be rotated",
              "name": "xpTrack_ScrollBar",
              "value": "\"0\""
            },
            {
              "description": "over metal can be lit can be rotated",
              "name": "xpTrack_Slider",
              "value": "\"1\""
            },
            {
              "description": "over metal cannot be lit cannot be rotated",
              "name": "xpTrack_Progress",
              "value": "\"2\""
            }
          ]
        }
      ],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/XPTrackStyle/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enum\"><h3 class=\"sdk-api-enum\" id=\"XPTrackStyle\"><a href=\"/sdk/XPTrackStyle/\">XPTrackStyle</a></h3><p>A track is a UI element that displays a value vertically or horizontally. X-Plane has three kinds of tracks: scroll bars, sliders, and progress bars. Tracks can be displayed either horizontally or vertically; tracks will choose their own layout based on the larger dimension of their dimensions (e.g. they know if they are tall or wide). Sliders may be lit or unlit (showing the user manipulating them).</p><ul><li>ScrollBar: this is a standard scroll bar with arrows and a thumb to drag.</li><li>Slider: this is a simple track with a ball in the middle that can be slid.</li><li>Progress: this is a progress indicator showing how a long task is going.</li></ul><p><div class=\"enumitem\"><table><thead><tr><th>Name</th><th>Value</th><th>Description</th></tr></thead><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpTrack_ScrollBar\"><a href=\"/sdk/xpTrack_ScrollBar/\">xpTrack_ScrollBar</a></td><td>\"0\"</td><td>not over metal can be lit can be rotated</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpTrack_Slider\"><a href=\"/sdk/xpTrack_Slider/\">xpTrack_Slider</a></td><td>\"1\"</td><td>over metal can be lit can be rotated</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpTrack_Progress\"><a href=\"/sdk/xpTrack_Progress/\">xpTrack_Progress</a></td><td>\"2\"</td><td>over metal cannot be lit cannot be rotated</td></tr></table></div></p></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "### [XPTrackStyle](/sdk/XPTrackStyle/)\n\nA track is a UI element that displays a value vertically or horizontally.\nX-Plane has three kinds of tracks: scroll bars, sliders, and progress bars.\nTracks can be displayed either horizontally or vertically; tracks will choose\ntheir own layout based on the larger dimension of their dimensions (e.g. they\nknow if they are tall or wide). Sliders may be lit or unlit (showing the user\nmanipulating them).\n\n- ScrollBar: this is a standard scroll bar with arrows and a thumb to drag.\n- Slider: this is a simple track with a ball in the middle that can be slid.\n- Progress: this is a progress indicator showing how a long task is going.\n\n| Name | Value | Description |\n| --- | --- | --- |\n| [xpTrack_ScrollBar](/sdk/xpTrack_ScrollBar/) | \"0\" | not over metal can be lit\ncan be rotated |\n| [xpTrack_Slider](/sdk/xpTrack_Slider/) | \"1\" | over metal can be lit can be\nrotated |\n| [xpTrack_Progress](/sdk/xpTrack_Progress/) | \"2\" | over metal cannot be lit\ncannot be rotated |",
      "own_functions": [
        "XPTrackStyle"
      ],
      "processing_timestamp": "2025-06-25T20:39:22.660636+00:00",
      "title": "XPTrackStyle | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPTrackStyle/"
    },
    "https://developer.x-plane.com/sdk/XPUCreateWidgets/": {
      "api_signatures": [
        {
          "description": "This function creates a series of widgets from a table (see XPCreateWidget_t above). Pass in an array of widget creation structures and an array of widget IDs that will receive each widget.",
          "name": "XPUCreateWidgets",
          "parameters": [
            {
              "full_declaration": "constXPWidgetCreate_t* inWidgetDefs",
              "name": "inWidgetDefs",
              "type": "constXPWidgetCreate_t*"
            },
            {
              "full_declaration": "int                  inCount",
              "name": "inCount",
              "type": "int"
            },
            {
              "full_declaration": "XPWidgetID*         ioWidgets",
              "name": "ioWidgets",
              "type": "XPWidgetID*"
            }
          ],
          "signature": "WIDGET_API voidXPUCreateWidgets(\n                         constXPWidgetCreate_t* inWidgetDefs,\n                         int                  inCount,XPWidgetIDinParamParent,XPWidgetID*         ioWidgets);"
        },
        {
          "name": "WIDGET_API",
          "signature": "WIDGET_API voidXPUCreateWidgets(\n                         constXPWidgetCreate_t* inWidgetDefs,\n                         int                  inCount,XPWidgetIDinParamParent,XPWidgetID*         ioWidgets);",
          "source": "code_block_extraction",
          "type": "function"
        }
      ],
      "category": {
        "category": "Widget_System",
        "module": "Widget System",
        "url": "https://developer.x-plane.com/sdk/XPUCreateWidgets/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPUCreateWidgets\"><a href=\"/sdk/XPUCreateWidgets/\">XPUCreateWidgets</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>WIDGET_API void       <a href=\"/sdk/XPUCreateWidgets/\">XPUCreateWidgets</a>(\n                         const <a href=\"/sdk/XPWidgetCreate_t/\">XPWidgetCreate_t</a> * inWidgetDefs,\n                         int                  inCount,\n                         <a href=\"/sdk/XPWidgetID/\">XPWidgetID</a>           inParamParent,\n                         <a href=\"/sdk/XPWidgetID/\">XPWidgetID</a> *         ioWidgets);\n</code></pre><p>This function creates a series of widgets from a table (see XPCreateWidget_t above). Pass in an array of widget creation structures and an array of widget IDs that will receive each widget.</p><p>Widget parents are specified by index into the created widget table, allowing you to create nested widget structures. You can create multiple widget trees in one table. Generally you should create widget trees from the top down.</p><p>You can also pass in a widget ID that will be used when the widget’s parent is listed as<a href=\"/sdk/PARAM_PARENT/\">PARAM_PARENT</a>; this allows you to embed widgets created with<a href=\"/sdk/XPUCreateWidgets/\">XPUCreateWidgets</a>in a widget created previously.</p></div></div></article>",
      "code_examples": [
        {
          "char_count": 204,
          "code": "WIDGET_API voidXPUCreateWidgets(\n                         constXPWidgetCreate_t* inWidgetDefs,\n                         int                  inCount,XPWidgetIDinParamParent,XPWidgetID*         ioWidgets);",
          "context": "XPUCreateWidgets",
          "id": "example_0",
          "language": "c",
          "line_count": 3,
          "type": "snippet"
        }
      ],
      "cross_references": [
        "XPCreateWidget"
      ],
      "markdown": "### [XPUCreateWidgets](/sdk/XPUCreateWidgets/)\n\n```cpp\nWIDGET_API void       XPUCreateWidgets(\n                         const XPWidgetCreate_t * inWidgetDefs,\n                         int                  inCount,\n                         XPWidgetID           inParamParent,\n                         XPWidgetID *         ioWidgets);\n\n```\n\nThis function creates a series of widgets from a table (see XPCreateWidget_t\nabove). Pass in an array of widget creation structures and an array of widget\nIDs that will receive each widget.\n\nWidget parents are specified by index into the created widget table, allowing\nyou to create nested widget structures. You can create multiple widget trees in\none table. Generally you should create widget trees from the top down.\n\nYou can also pass in a widget ID that will be used when the widget’s parent is\nlisted as[PARAM_PARENT](/sdk/PARAM_PARENT/); this allows you to embed widgets\ncreated with[XPUCreateWidgets](/sdk/XPUCreateWidgets/)in a widget created\npreviously.",
      "own_functions": [
        "XPUCreateWidgets",
        "WIDGET_API"
      ],
      "processing_timestamp": "2025-06-25T20:39:23.048217+00:00",
      "title": "XPUCreateWidgets | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPUCreateWidgets/"
    },
    "https://developer.x-plane.com/sdk/XPUDefocusKeyboard/": {
      "api_signatures": [
        {
          "description": "This causes the widget to send keyboard focus back to X-Plane. This stops editing of any text fields, etc.",
          "name": "XPUDefocusKeyboard",
          "parameters": [
            {
              "full_declaration": "intptr_t             inParam1",
              "name": "inParam1",
              "type": "intptr_t"
            },
            {
              "full_declaration": "intptr_t             inParam2",
              "name": "inParam2",
              "type": "intptr_t"
            },
            {
              "full_declaration": "int                  inEatClick",
              "name": "inEatClick",
              "type": "int"
            }
          ],
          "signature": "WIDGET_API intXPUDefocusKeyboard(XPWidgetMessageinMessage,XPWidgetIDinWidget,\n                         intptr_t             inParam1,\n                         intptr_t             inParam2,\n                         int                  inEatClick);"
        },
        {
          "name": "WIDGET_API",
          "signature": "WIDGET_API intXPUDefocusKeyboard(XPWidgetMessageinMessage,XPWidgetIDinWidget,\n                         intptr_t             inParam1,\n                         intptr_t             inParam2,\n                         int                  inEatClick);",
          "source": "code_block_extraction",
          "type": "function"
        }
      ],
      "category": {
        "category": "XPLM_Utilities",
        "module": "Xplm Utilities",
        "url": "https://developer.x-plane.com/sdk/XPUDefocusKeyboard/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPUDefocusKeyboard\"><a href=\"/sdk/XPUDefocusKeyboard/\">XPUDefocusKeyboard</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>WIDGET_API int        <a href=\"/sdk/XPUDefocusKeyboard/\">XPUDefocusKeyboard</a>(\n                         <a href=\"/sdk/XPWidgetMessage/\">XPWidgetMessage</a>      inMessage,\n                         <a href=\"/sdk/XPWidgetID/\">XPWidgetID</a>           inWidget,\n                         intptr_t             inParam1,\n                         intptr_t             inParam2,\n                         int                  inEatClick);\n</code></pre><p>This causes the widget to send keyboard focus back to X-Plane. This stops editing of any text fields, etc.</p></div></div></article>",
      "code_examples": [
        {
          "char_count": 248,
          "code": "WIDGET_API intXPUDefocusKeyboard(XPWidgetMessageinMessage,XPWidgetIDinWidget,\n                         intptr_t             inParam1,\n                         intptr_t             inParam2,\n                         int                  inEatClick);",
          "context": "XPUDefocusKeyboard",
          "id": "example_0",
          "language": "c",
          "line_count": 4,
          "type": "snippet"
        }
      ],
      "cross_references": [
        "XPWidgetMessage"
      ],
      "markdown": "### [XPUDefocusKeyboard](/sdk/XPUDefocusKeyboard/)\n\n```cpp\nWIDGET_API int        XPUDefocusKeyboard(\n                         XPWidgetMessage      inMessage,\n                         XPWidgetID           inWidget,\n                         intptr_t             inParam1,\n                         intptr_t             inParam2,\n                         int                  inEatClick);\n\n```\n\nThis causes the widget to send keyboard focus back to X-Plane. This stops\nediting of any text fields, etc.",
      "own_functions": [
        "XPUDefocusKeyboard",
        "WIDGET_API"
      ],
      "processing_timestamp": "2025-06-25T20:39:24.552833+00:00",
      "title": "XPUDefocusKeyboard | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPUDefocusKeyboard/"
    },
    "https://developer.x-plane.com/sdk/XPUDragWidget/": {
      "api_signatures": [
        {
          "description": "XPUDragWidgetdrags the widget in response to mouse clicks. Pass in not only the event, but the global coordinates of the drag region, which might be a sub-region of your widget (for example, a title bar).",
          "name": "XPUDragWidget",
          "parameters": [
            {
              "full_declaration": "intptr_t             inParam1",
              "name": "inParam1",
              "type": "intptr_t"
            },
            {
              "full_declaration": "intptr_t             inParam2",
              "name": "inParam2",
              "type": "intptr_t"
            },
            {
              "full_declaration": "int                  inLeft",
              "name": "inLeft",
              "type": "int"
            },
            {
              "full_declaration": "int                  inTop",
              "name": "inTop",
              "type": "int"
            },
            {
              "full_declaration": "int                  inRight",
              "name": "inRight",
              "type": "int"
            },
            {
              "full_declaration": "int                  inBottom",
              "name": "inBottom",
              "type": "int"
            }
          ],
          "signature": "WIDGET_API intXPUDragWidget(XPWidgetMessageinMessage,XPWidgetIDinWidget,\n                         intptr_t             inParam1,\n                         intptr_t             inParam2,\n                         int                  inLeft,\n                         int                  inTop,\n                         int                  inRight,\n                         int                  inBottom);"
        },
        {
          "name": "WIDGET_API",
          "signature": "WIDGET_API intXPUDragWidget(XPWidgetMessageinMessage,XPWidgetIDinWidget,\n                         intptr_t             inParam1,\n                         intptr_t             inParam2,\n                         int                  inLeft,\n                         int                  inTop,\n                         int                  inRight,\n                         int                  inBottom);",
          "source": "code_block_extraction",
          "type": "function"
        }
      ],
      "category": {
        "category": "Widget_System",
        "module": "Widget System",
        "url": "https://developer.x-plane.com/sdk/XPUDragWidget/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPUDragWidget\"><a href=\"/sdk/XPUDragWidget/\">XPUDragWidget</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>WIDGET_API int        <a href=\"/sdk/XPUDragWidget/\">XPUDragWidget</a>(\n                         <a href=\"/sdk/XPWidgetMessage/\">XPWidgetMessage</a>      inMessage,\n                         <a href=\"/sdk/XPWidgetID/\">XPWidgetID</a>           inWidget,\n                         intptr_t             inParam1,\n                         intptr_t             inParam2,\n                         int                  inLeft,\n                         int                  inTop,\n                         int                  inRight,\n                         int                  inBottom);\n</code></pre><p><a href=\"/sdk/XPUDragWidget/\">XPUDragWidget</a>drags the widget in response to mouse clicks. Pass in not only the event, but the global coordinates of the drag region, which might be a sub-region of your widget (for example, a title bar).</p></div></div></article>",
      "code_examples": [
        {
          "char_count": 403,
          "code": "WIDGET_API intXPUDragWidget(XPWidgetMessageinMessage,XPWidgetIDinWidget,\n                         intptr_t             inParam1,\n                         intptr_t             inParam2,\n                         int                  inLeft,\n                         int                  inTop,\n                         int                  inRight,\n                         int                  inBottom);",
          "context": "XPUDragWidget",
          "id": "example_0",
          "language": "c",
          "line_count": 7,
          "type": "snippet"
        }
      ],
      "cross_references": [
        "XPWidgetMessage"
      ],
      "markdown": "### [XPUDragWidget](/sdk/XPUDragWidget/)\n\n```cpp\nWIDGET_API int        XPUDragWidget(\n                         XPWidgetMessage      inMessage,\n                         XPWidgetID           inWidget,\n                         intptr_t             inParam1,\n                         intptr_t             inParam2,\n                         int                  inLeft,\n                         int                  inTop,\n                         int                  inRight,\n                         int                  inBottom);\n\n```\n\n[XPUDragWidget](/sdk/XPUDragWidget/)drags the widget in response to mouse\nclicks. Pass in not only the event, but the global coordinates of the drag\nregion, which might be a sub-region of your widget (for example, a title bar).",
      "own_functions": [
        "XPUDragWidget",
        "WIDGET_API"
      ],
      "processing_timestamp": "2025-06-25T20:39:23.045151+00:00",
      "title": "XPUDragWidget | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPUDragWidget/"
    },
    "https://developer.x-plane.com/sdk/XPUFixedLayout/": {
      "api_signatures": [
        {
          "description": "This function causes the widget to maintain its children in fixed position relative to itself as it is resized. Use this on the top level ‘window’ widget for your window.",
          "name": "XPUFixedLayout",
          "parameters": [
            {
              "full_declaration": "intptr_t             inParam1",
              "name": "inParam1",
              "type": "intptr_t"
            },
            {
              "full_declaration": "intptr_t             inParam2",
              "name": "inParam2",
              "type": "intptr_t"
            }
          ],
          "signature": "WIDGET_API intXPUFixedLayout(XPWidgetMessageinMessage,XPWidgetIDinWidget,\n                         intptr_t             inParam1,\n                         intptr_t             inParam2);"
        },
        {
          "name": "WIDGET_API",
          "signature": "WIDGET_API intXPUFixedLayout(XPWidgetMessageinMessage,XPWidgetIDinWidget,\n                         intptr_t             inParam1,\n                         intptr_t             inParam2);",
          "source": "code_block_extraction",
          "type": "function"
        }
      ],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/XPUFixedLayout/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPUFixedLayout\"><a href=\"/sdk/XPUFixedLayout/\">XPUFixedLayout</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>WIDGET_API int        <a href=\"/sdk/XPUFixedLayout/\">XPUFixedLayout</a>(\n                         <a href=\"/sdk/XPWidgetMessage/\">XPWidgetMessage</a>      inMessage,\n                         <a href=\"/sdk/XPWidgetID/\">XPWidgetID</a>           inWidget,\n                         intptr_t             inParam1,\n                         intptr_t             inParam2);\n</code></pre><p>This function causes the widget to maintain its children in fixed position relative to itself as it is resized. Use this on the top level ‘window’ widget for your window.</p></div></div></article>",
      "code_examples": [
        {
          "char_count": 186,
          "code": "WIDGET_API intXPUFixedLayout(XPWidgetMessageinMessage,XPWidgetIDinWidget,\n                         intptr_t             inParam1,\n                         intptr_t             inParam2);",
          "context": "XPUFixedLayout",
          "id": "example_0",
          "language": "c",
          "line_count": 3,
          "type": "snippet"
        }
      ],
      "cross_references": [
        "XPWidgetMessage"
      ],
      "markdown": "### [XPUFixedLayout](/sdk/XPUFixedLayout/)\n\n```cpp\nWIDGET_API int        XPUFixedLayout(\n                         XPWidgetMessage      inMessage,\n                         XPWidgetID           inWidget,\n                         intptr_t             inParam1,\n                         intptr_t             inParam2);\n\n```\n\nThis function causes the widget to maintain its children in fixed position\nrelative to itself as it is resized. Use this on the top level ‘window’ widget\nfor your window.",
      "own_functions": [
        "XPUFixedLayout",
        "WIDGET_API"
      ],
      "processing_timestamp": "2025-06-25T20:39:22.653636+00:00",
      "title": "XPUFixedLayout | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPUFixedLayout/"
    },
    "https://developer.x-plane.com/sdk/XPUIGraphics/": {
      "api_signatures": [
        {
          "description": "This routine draws a window of the given dimensions at the given offset on the virtual screen in a given style. The window is automatically scaled as appropriate using a bitmap scaling technique (scaling or repeating) as appropriate to the style.",
          "name": "XPDrawWindow",
          "parameters": [
            {
              "full_declaration": "int                  inX1",
              "name": "inX1",
              "type": "int"
            },
            {
              "full_declaration": "int                  inY1",
              "name": "inY1",
              "type": "int"
            },
            {
              "full_declaration": "int                  inX2",
              "name": "inX2",
              "type": "int"
            },
            {
              "full_declaration": "int                  inY2",
              "name": "inY2",
              "type": "int"
            }
          ],
          "signature": "WIDGET_API voidXPDrawWindow(\n                         int                  inX1,\n                         int                  inY1,\n                         int                  inX2,\n                         int                  inY2,XPWindowStyleinStyle);"
        },
        {
          "description": "This routine returns the default dimensions for a window. Output is either a minimum or fixed value depending on whether the window is scalable.",
          "name": "XPGetWindowDefaultDimensions",
          "parameters": [],
          "signature": "WIDGET_API voidXPGetWindowDefaultDimensions(XPWindowStyleinStyle,\n                         int *                outWidth,    /* Can be NULL */\n                         int *                outHeight);    /* Can be NULL */"
        },
        {
          "description": "XPDrawElementdraws a given element at an offset on the virtual screen in set dimensions. Even if the element is not scalable, it will be scaled if the width and height do not match the preferred dimensions; it’ll just look ugly. Pass inLit to see the lit version of the element; if the element cannot be lit this is ignored.",
          "name": "XPDrawElement",
          "parameters": [
            {
              "full_declaration": "int                  inX1",
              "name": "inX1",
              "type": "int"
            },
            {
              "full_declaration": "int                  inY1",
              "name": "inY1",
              "type": "int"
            },
            {
              "full_declaration": "int                  inX2",
              "name": "inX2",
              "type": "int"
            },
            {
              "full_declaration": "int                  inY2",
              "name": "inY2",
              "type": "int"
            },
            {
              "full_declaration": "int                  inLit",
              "name": "inLit",
              "type": "int"
            }
          ],
          "signature": "WIDGET_API voidXPDrawElement(\n                         int                  inX1,\n                         int                  inY1,\n                         int                  inX2,\n                         int                  inY2,XPElementStyleinStyle,\n                         int                  inLit);"
        },
        {
          "description": "This routine returns the recommended or minimum dimensions of a given UI element. outCanBeLit tells whether the element has both a lit and unlit state. Pass NULL to not receive any of these parameters.",
          "name": "XPGetElementDefaultDimensions",
          "parameters": [],
          "signature": "WIDGET_API voidXPGetElementDefaultDimensions(XPElementStyleinStyle,\n                         int *                outWidth,    /* Can be NULL */\n                         int *                outHeight,    /* Can be NULL */\n                         int *                outCanBeLit);    /* Can be NULL */"
        },
        {
          "description": "This routine draws a track. You pass in the track dimensions and size; the track picks the optimal orientation for these dimensions. Pass in the track’s minimum current and maximum values; the indicator will be positioned appropriately. You can also specify whether the track is lit or not.",
          "name": "XPDrawTrack",
          "parameters": [
            {
              "full_declaration": "int                  inX1",
              "name": "inX1",
              "type": "int"
            },
            {
              "full_declaration": "int                  inY1",
              "name": "inY1",
              "type": "int"
            },
            {
              "full_declaration": "int                  inX2",
              "name": "inX2",
              "type": "int"
            },
            {
              "full_declaration": "int                  inY2",
              "name": "inY2",
              "type": "int"
            },
            {
              "full_declaration": "int                  inMin",
              "name": "inMin",
              "type": "int"
            },
            {
              "full_declaration": "int                  inMax",
              "name": "inMax",
              "type": "int"
            },
            {
              "full_declaration": "int                  inValue",
              "name": "inValue",
              "type": "int"
            },
            {
              "full_declaration": "int                  inLit",
              "name": "inLit",
              "type": "int"
            }
          ],
          "signature": "WIDGET_API voidXPDrawTrack(\n                         int                  inX1,\n                         int                  inY1,\n                         int                  inX2,\n                         int                  inY2,\n                         int                  inMin,\n                         int                  inMax,\n                         int                  inValue,XPTrackStyleinTrackStyle,\n                         int                  inLit);"
        },
        {
          "description": "This routine returns a track’s default smaller dimension; all tracks are scalable in the larger dimension. It also returns whether a track can be lit.",
          "name": "XPGetTrackDefaultDimensions",
          "parameters": [
            {
              "full_declaration": "int *                outWidth",
              "name": "outWidth",
              "type": "int *"
            },
            {
              "full_declaration": "int *                outCanBeLit",
              "name": "outCanBeLit",
              "type": "int *"
            }
          ],
          "signature": "WIDGET_API voidXPGetTrackDefaultDimensions(XPTrackStyleinStyle,\n                         int *                outWidth,\n                         int *                outCanBeLit);"
        },
        {
          "description": "This routine returns the metrics of a track. If you want to write UI code to manipulate a track, this routine helps you know where the mouse locations are. For most other elements, the rectangle the element is drawn in is enough information. However, the scrollbar drawing routine does some automatic placement; this routine lets you know where things ended up. You pass almost everything you would pass to the draw routine. You get out the orientation, and other useful stuff.",
          "name": "XPGetTrackMetrics",
          "parameters": [
            {
              "full_declaration": "int                  inX1",
              "name": "inX1",
              "type": "int"
            },
            {
              "full_declaration": "int                  inY1",
              "name": "inY1",
              "type": "int"
            },
            {
              "full_declaration": "int                  inX2",
              "name": "inX2",
              "type": "int"
            },
            {
              "full_declaration": "int                  inY2",
              "name": "inY2",
              "type": "int"
            },
            {
              "full_declaration": "int                  inMin",
              "name": "inMin",
              "type": "int"
            },
            {
              "full_declaration": "int                  inMax",
              "name": "inMax",
              "type": "int"
            },
            {
              "full_declaration": "int                  inValue",
              "name": "inValue",
              "type": "int"
            },
            {
              "full_declaration": "int *                outIsVertical",
              "name": "outIsVertical",
              "type": "int *"
            },
            {
              "full_declaration": "int *                outDownBtnSize",
              "name": "outDownBtnSize",
              "type": "int *"
            },
            {
              "full_declaration": "int *                outDownPageSize",
              "name": "outDownPageSize",
              "type": "int *"
            },
            {
              "full_declaration": "int *                outThumbSize",
              "name": "outThumbSize",
              "type": "int *"
            },
            {
              "full_declaration": "int *                outUpPageSize",
              "name": "outUpPageSize",
              "type": "int *"
            },
            {
              "full_declaration": "int *                outUpBtnSize",
              "name": "outUpBtnSize",
              "type": "int *"
            }
          ],
          "signature": "WIDGET_API voidXPGetTrackMetrics(\n                         int                  inX1,\n                         int                  inY1,\n                         int                  inX2,\n                         int                  inY2,\n                         int                  inMin,\n                         int                  inMax,\n                         int                  inValue,XPTrackStyleinTrackStyle,\n                         int *                outIsVertical,\n                         int *                outDownBtnSize,\n                         int *                outDownPageSize,\n                         int *                outThumbSize,\n                         int *                outUpPageSize,\n                         int *                outUpBtnSize);"
        },
        {
          "name": "XPWindowStyle",
          "type": "enum",
          "values": [
            {
              "description": "An LCD screen that shows help.",
              "name": "xpWindow_Help",
              "value": "\"0\""
            },
            {
              "description": "A dialog box window.",
              "name": "xpWindow_MainWindow",
              "value": "\"1\""
            },
            {
              "description": "A panel or frame within a dialog box window.",
              "name": "xpWindow_SubWindow",
              "value": "\"2\""
            },
            {
              "description": "An LCD screen within a panel to hold text displays.",
              "name": "xpWindow_Screen",
              "value": "\"4\""
            },
            {
              "description": "A list view within a panel for scrolling file names, etc.",
              "name": "xpWindow_ListView",
              "value": "\"5\""
            }
          ]
        },
        {
          "name": "XPElementStyle",
          "type": "enum",
          "values": [
            {
              "description": "x metal",
              "name": "xpElement_TextField",
              "value": "\"6\""
            },
            {
              "description": "none metal",
              "name": "xpElement_CheckBox",
              "value": "\"9\""
            },
            {
              "description": "none metal",
              "name": "xpElement_CheckBoxLit",
              "value": "\"10\""
            },
            {
              "description": "none window header",
              "name": "xpElement_WindowCloseBox",
              "value": "\"14\""
            },
            {
              "description": "none window header",
              "name": "xpElement_WindowCloseBoxPressed",
              "value": "\"15\""
            },
            {
              "description": "x metal",
              "name": "xpElement_PushButton",
              "value": "\"16\""
            },
            {
              "description": "x metal",
              "name": "xpElement_PushButtonLit",
              "value": "\"17\""
            },
            {
              "description": "none any",
              "name": "xpElement_OilPlatform",
              "value": "\"24\""
            },
            {
              "description": "none any",
              "name": "xpElement_OilPlatformSmall",
              "value": "\"25\""
            },
            {
              "description": "none any",
              "name": "xpElement_Ship",
              "value": "\"26\""
            },
            {
              "description": "none any",
              "name": "xpElement_ILSGlideScope",
              "value": "\"27\""
            },
            {
              "description": "none any",
              "name": "xpElement_MarkerLeft",
              "value": "\"28\""
            },
            {
              "description": "none any",
              "name": "xpElement_Airport",
              "value": "\"29\""
            },
            {
              "description": "none any",
              "name": "xpElement_Waypoint",
              "value": "\"30\""
            },
            {
              "description": "none any",
              "name": "xpElement_NDB",
              "value": "\"31\""
            },
            {
              "description": "none any",
              "name": "xpElement_VOR",
              "value": "\"32\""
            },
            {
              "description": "none any",
              "name": "xpElement_RadioTower",
              "value": "\"33\""
            },
            {
              "description": "none any",
              "name": "xpElement_AircraftCarrier",
              "value": "\"34\""
            },
            {
              "description": "none any",
              "name": "xpElement_Fire",
              "value": "\"35\""
            },
            {
              "description": "none any",
              "name": "xpElement_MarkerRight",
              "value": "\"36\""
            },
            {
              "description": "none any",
              "name": "xpElement_CustomObject",
              "value": "\"37\""
            },
            {
              "description": "none any",
              "name": "xpElement_CoolingTower",
              "value": "\"38\""
            },
            {
              "description": "none any",
              "name": "xpElement_SmokeStack",
              "value": "\"39\""
            },
            {
              "description": "none any",
              "name": "xpElement_Building",
              "value": "\"40\""
            },
            {
              "description": "none any",
              "name": "xpElement_PowerLine",
              "value": "\"41\""
            },
            {
              "description": "none metal",
              "name": "xpElement_CopyButtons",
              "value": "\"45\""
            },
            {
              "description": "none metal",
              "name": "xpElement_CopyButtonsWithEditingGrid",
              "value": "\"46\""
            },
            {
              "description": "x, y metal",
              "name": "xpElement_EditingGrid",
              "value": "\"47\""
            },
            {
              "description": "THIS CAN PROBABLY BE REMOVED",
              "name": "xpElement_ScrollBar",
              "value": "\"48\""
            },
            {
              "description": "none any",
              "name": "xpElement_VORWithCompassRose",
              "value": "\"49\""
            },
            {
              "description": "none metal",
              "name": "xpElement_Zoomer",
              "value": "\"51\""
            },
            {
              "description": "x, y metal",
              "name": "xpElement_TextFieldMiddle",
              "value": "\"52\""
            },
            {
              "description": "none metal",
              "name": "xpElement_LittleDownArrow",
              "value": "\"53\""
            },
            {
              "description": "none metal",
              "name": "xpElement_LittleUpArrow",
              "value": "\"54\""
            },
            {
              "description": "none metal",
              "name": "xpElement_WindowDragBar",
              "value": "\"61\""
            },
            {
              "description": "none metal",
              "name": "xpElement_WindowDragBarSmooth",
              "value": "\"62\""
            }
          ]
        },
        {
          "name": "XPTrackStyle",
          "type": "enum",
          "values": [
            {
              "description": "not over metal can be lit can be rotated",
              "name": "xpTrack_ScrollBar",
              "value": "\"0\""
            },
            {
              "description": "over metal can be lit can be rotated",
              "name": "xpTrack_Slider",
              "value": "\"1\""
            },
            {
              "description": "over metal cannot be lit cannot be rotated",
              "name": "xpTrack_Progress",
              "value": "\"2\""
            }
          ]
        },
        {
          "name": "WIDGET_API",
          "signature": "WIDGET_API voidXPDrawWindow(\n                         int                  inX1,\n                         int                  inY1,\n                         int                  inX2,\n                         int                  inY2,XPWindowStyleinStyle);",
          "source": "code_block_extraction",
          "type": "function"
        }
      ],
      "category": {
        "category": "XPLM_Graphics",
        "module": "Xplm Graphics",
        "url": "https://developer.x-plane.com/sdk/XPUIGraphics/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"api\"><h1 class=\"sdk-api-title\" id=\"XPUIGraphics\"><a href=\"/sdk/XPUIGraphics/\">XPUIGraphics</a>API</h1><div class=\"component\"><h2 id=\"UI GRAPHICS\">UI GRAPHICS</h2><div class=\"enum\"><h3 class=\"sdk-api-enum\" id=\"XPWindowStyle\"><a href=\"/sdk/XPWindowStyle/\">XPWindowStyle</a></h3><p>There are a few built-in window styles in X-Plane that you can use.</p><p>Note that X-Plane 6 does not offer real shadow-compositing; you must make sure to put a window on top of another window of the right style to make the shadows work, etc. This applies to elements with insets and shadows. The rules are:</p><p>Sub windows must go on top of main windows, and screens and list views on top of subwindows. Only help and main windows can be over the main screen.</p><p>With X-Plane 7 any window or element may be placed over any other element.</p><p>Some windows are scaled by stretching, some by repeating. The drawing routines know which scaling method to use. The list view cannot be rescaled in X-Plane 6 because it has both a repeating pattern and a gradient in one element. All other elements can be rescaled.</p><p><div class=\"enumitem\"><table><thead><tr><th>Name</th><th>Value</th><th>Description</th></tr></thead><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpWindow_Help\"><a href=\"/sdk/xpWindow_Help/\">xpWindow_Help</a></td><td>\"0\"</td><td>An LCD screen that shows help.</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpWindow_MainWindow\"><a href=\"/sdk/xpWindow_MainWindow/\">xpWindow_MainWindow</a></td><td>\"1\"</td><td>A dialog box window.</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpWindow_SubWindow\"><a href=\"/sdk/xpWindow_SubWindow/\">xpWindow_SubWindow</a></td><td>\"2\"</td><td>A panel or frame within a dialog box window.</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpWindow_Screen\"><a href=\"/sdk/xpWindow_Screen/\">xpWindow_Screen</a></td><td>\"4\"</td><td>An LCD screen within a panel to hold text displays.</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpWindow_ListView\"><a href=\"/sdk/xpWindow_ListView/\">xpWindow_ListView</a></td><td>\"5\"</td><td>A list view within a panel for scrolling file names, etc.</td></tr></table></div></p></div><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPDrawWindow\"><a href=\"/sdk/XPDrawWindow/\">XPDrawWindow</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>WIDGET_API void       <a href=\"/sdk/XPDrawWindow/\">XPDrawWindow</a>(\n                         int                  inX1,\n                         int                  inY1,\n                         int                  inX2,\n                         int                  inY2,\n                         <a href=\"/sdk/XPWindowStyle/\">XPWindowStyle</a>        inStyle);\n</code></pre><p>This routine draws a window of the given dimensions at the given offset on the virtual screen in a given style. The window is automatically scaled as appropriate using a bitmap scaling technique (scaling or repeating) as appropriate to the style.</p></div><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPGetWindowDefaultDimensions\"><a href=\"/sdk/XPGetWindowDefaultDimensions/\">XPGetWindowDefaultDimensions</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>WIDGET_API void       <a href=\"/sdk/XPGetWindowDefaultDimensions/\">XPGetWindowDefaultDimensions</a>(\n                         <a href=\"/sdk/XPWindowStyle/\">XPWindowStyle</a>        inStyle,\n                         int *                outWidth,    /* Can be NULL */\n                         int *                outHeight);    /* Can be NULL */\n</code></pre><p>This routine returns the default dimensions for a window. Output is either a minimum or fixed value depending on whether the window is scalable.</p></div><div class=\"enum\"><h3 class=\"sdk-api-enum\" id=\"XPElementStyle\"><a href=\"/sdk/XPElementStyle/\">XPElementStyle</a></h3><p>Elements are individually drawable UI things like push buttons, etc. The style defines what kind of element you are drawing. Elements can be stretched in one or two dimensions (depending on the element). Some elements can be lit.</p><p>In X-Plane 6 some elements must be drawn over metal. Some are scalable and some are not. Any element can be drawn anywhere in X-Plane 7.</p><p>Scalable Axis Required Background</p><p><div class=\"enumitem\"><table><thead><tr><th>Name</th><th>Value</th><th>Description</th></tr></thead><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpElement_TextField\"><a href=\"/sdk/xpElement_TextField/\">xpElement_TextField</a></td><td>\"6\"</td><td>x metal</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpElement_CheckBox\"><a href=\"/sdk/xpElement_CheckBox/\">xpElement_CheckBox</a></td><td>\"9\"</td><td>none metal</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpElement_CheckBoxLit\"><a href=\"/sdk/xpElement_CheckBoxLit/\">xpElement_CheckBoxLit</a></td><td>\"10\"</td><td>none metal</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpElement_WindowCloseBox\"><a href=\"/sdk/xpElement_WindowCloseBox/\">xpElement_WindowCloseBox</a></td><td>\"14\"</td><td>none window header</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpElement_WindowCloseBoxPressed\"><a href=\"/sdk/xpElement_WindowCloseBoxPressed/\">xpElement_WindowCloseBoxPressed</a></td><td>\"15\"</td><td>none window header</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpElement_PushButton\"><a href=\"/sdk/xpElement_PushButton/\">xpElement_PushButton</a></td><td>\"16\"</td><td>x metal</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpElement_PushButtonLit\"><a href=\"/sdk/xpElement_PushButtonLit/\">xpElement_PushButtonLit</a></td><td>\"17\"</td><td>x metal</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpElement_OilPlatform\"><a href=\"/sdk/xpElement_OilPlatform/\">xpElement_OilPlatform</a></td><td>\"24\"</td><td>none any</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpElement_OilPlatformSmall\"><a href=\"/sdk/xpElement_OilPlatformSmall/\">xpElement_OilPlatformSmall</a></td><td>\"25\"</td><td>none any</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpElement_Ship\"><a href=\"/sdk/xpElement_Ship/\">xpElement_Ship</a></td><td>\"26\"</td><td>none any</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpElement_ILSGlideScope\"><a href=\"/sdk/xpElement_ILSGlideScope/\">xpElement_ILSGlideScope</a></td><td>\"27\"</td><td>none any</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpElement_MarkerLeft\"><a href=\"/sdk/xpElement_MarkerLeft/\">xpElement_MarkerLeft</a></td><td>\"28\"</td><td>none any</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpElement_Airport\"><a href=\"/sdk/xpElement_Airport/\">xpElement_Airport</a></td><td>\"29\"</td><td>none any</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpElement_Waypoint\"><a href=\"/sdk/xpElement_Waypoint/\">xpElement_Waypoint</a></td><td>\"30\"</td><td>none any</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpElement_NDB\"><a href=\"/sdk/xpElement_NDB/\">xpElement_NDB</a></td><td>\"31\"</td><td>none any</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpElement_VOR\"><a href=\"/sdk/xpElement_VOR/\">xpElement_VOR</a></td><td>\"32\"</td><td>none any</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpElement_RadioTower\"><a href=\"/sdk/xpElement_RadioTower/\">xpElement_RadioTower</a></td><td>\"33\"</td><td>none any</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpElement_AircraftCarrier\"><a href=\"/sdk/xpElement_AircraftCarrier/\">xpElement_AircraftCarrier</a></td><td>\"34\"</td><td>none any</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpElement_Fire\"><a href=\"/sdk/xpElement_Fire/\">xpElement_Fire</a></td><td>\"35\"</td><td>none any</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpElement_MarkerRight\"><a href=\"/sdk/xpElement_MarkerRight/\">xpElement_MarkerRight</a></td><td>\"36\"</td><td>none any</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpElement_CustomObject\"><a href=\"/sdk/xpElement_CustomObject/\">xpElement_CustomObject</a></td><td>\"37\"</td><td>none any</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpElement_CoolingTower\"><a href=\"/sdk/xpElement_CoolingTower/\">xpElement_CoolingTower</a></td><td>\"38\"</td><td>none any</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpElement_SmokeStack\"><a href=\"/sdk/xpElement_SmokeStack/\">xpElement_SmokeStack</a></td><td>\"39\"</td><td>none any</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpElement_Building\"><a href=\"/sdk/xpElement_Building/\">xpElement_Building</a></td><td>\"40\"</td><td>none any</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpElement_PowerLine\"><a href=\"/sdk/xpElement_PowerLine/\">xpElement_PowerLine</a></td><td>\"41\"</td><td>none any</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpElement_CopyButtons\"><a href=\"/sdk/xpElement_CopyButtons/\">xpElement_CopyButtons</a></td><td>\"45\"</td><td>none metal</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpElement_CopyButtonsWithEditingGrid\"><a href=\"/sdk/xpElement_CopyButtonsWithEditingGrid/\">xpElement_CopyButtonsWithEditingGrid</a></td><td>\"46\"</td><td>none metal</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpElement_EditingGrid\"><a href=\"/sdk/xpElement_EditingGrid/\">xpElement_EditingGrid</a></td><td>\"47\"</td><td>x, y metal</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpElement_ScrollBar\"><a href=\"/sdk/xpElement_ScrollBar/\">xpElement_ScrollBar</a></td><td>\"48\"</td><td>THIS CAN PROBABLY BE REMOVED</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpElement_VORWithCompassRose\"><a href=\"/sdk/xpElement_VORWithCompassRose/\">xpElement_VORWithCompassRose</a></td><td>\"49\"</td><td>none any</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpElement_Zoomer\"><a href=\"/sdk/xpElement_Zoomer/\">xpElement_Zoomer</a></td><td>\"51\"</td><td>none metal</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpElement_TextFieldMiddle\"><a href=\"/sdk/xpElement_TextFieldMiddle/\">xpElement_TextFieldMiddle</a></td><td>\"52\"</td><td>x, y metal</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpElement_LittleDownArrow\"><a href=\"/sdk/xpElement_LittleDownArrow/\">xpElement_LittleDownArrow</a></td><td>\"53\"</td><td>none metal</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpElement_LittleUpArrow\"><a href=\"/sdk/xpElement_LittleUpArrow/\">xpElement_LittleUpArrow</a></td><td>\"54\"</td><td>none metal</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpElement_WindowDragBar\"><a href=\"/sdk/xpElement_WindowDragBar/\">xpElement_WindowDragBar</a></td><td>\"61\"</td><td>none metal</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpElement_WindowDragBarSmooth\"><a href=\"/sdk/xpElement_WindowDragBarSmooth/\">xpElement_WindowDragBarSmooth</a></td><td>\"62\"</td><td>none metal</td></tr></table></div></p></div><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPDrawElement\"><a href=\"/sdk/XPDrawElement/\">XPDrawElement</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>WIDGET_API void       <a href=\"/sdk/XPDrawElement/\">XPDrawElement</a>(\n                         int                  inX1,\n                         int                  inY1,\n                         int                  inX2,\n                         int                  inY2,\n                         <a href=\"/sdk/XPElementStyle/\">XPElementStyle</a>       inStyle,\n                         int                  inLit);\n</code></pre><p><a href=\"/sdk/XPDrawElement/\">XPDrawElement</a>draws a given element at an offset on the virtual screen in set dimensions. Even if the element is not scalable, it will be scaled if the width and height do not match the preferred dimensions; it’ll just look ugly. Pass inLit to see the lit version of the element; if the element cannot be lit this is ignored.</p></div><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPGetElementDefaultDimensions\"><a href=\"/sdk/XPGetElementDefaultDimensions/\">XPGetElementDefaultDimensions</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>WIDGET_API void       <a href=\"/sdk/XPGetElementDefaultDimensions/\">XPGetElementDefaultDimensions</a>(\n                         <a href=\"/sdk/XPElementStyle/\">XPElementStyle</a>       inStyle,\n                         int *                outWidth,    /* Can be NULL */\n                         int *                outHeight,    /* Can be NULL */\n                         int *                outCanBeLit);    /* Can be NULL */\n</code></pre><p>This routine returns the recommended or minimum dimensions of a given UI element. outCanBeLit tells whether the element has both a lit and unlit state. Pass NULL to not receive any of these parameters.</p></div><div class=\"enum\"><h3 class=\"sdk-api-enum\" id=\"XPTrackStyle\"><a href=\"/sdk/XPTrackStyle/\">XPTrackStyle</a></h3><p>A track is a UI element that displays a value vertically or horizontally. X-Plane has three kinds of tracks: scroll bars, sliders, and progress bars. Tracks can be displayed either horizontally or vertically; tracks will choose their own layout based on the larger dimension of their dimensions (e.g. they know if they are tall or wide). Sliders may be lit or unlit (showing the user manipulating them).</p><ul><li>ScrollBar: this is a standard scroll bar with arrows and a thumb to drag.</li><li>Slider: this is a simple track with a ball in the middle that can be slid.</li><li>Progress: this is a progress indicator showing how a long task is going.</li></ul><p><div class=\"enumitem\"><table><thead><tr><th>Name</th><th>Value</th><th>Description</th></tr></thead><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpTrack_ScrollBar\"><a href=\"/sdk/xpTrack_ScrollBar/\">xpTrack_ScrollBar</a></td><td>\"0\"</td><td>not over metal can be lit can be rotated</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpTrack_Slider\"><a href=\"/sdk/xpTrack_Slider/\">xpTrack_Slider</a></td><td>\"1\"</td><td>over metal can be lit can be rotated</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpTrack_Progress\"><a href=\"/sdk/xpTrack_Progress/\">xpTrack_Progress</a></td><td>\"2\"</td><td>over metal cannot be lit cannot be rotated</td></tr></table></div></p></div><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPDrawTrack\"><a href=\"/sdk/XPDrawTrack/\">XPDrawTrack</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>WIDGET_API void       <a href=\"/sdk/XPDrawTrack/\">XPDrawTrack</a>(\n                         int                  inX1,\n                         int                  inY1,\n                         int                  inX2,\n                         int                  inY2,\n                         int                  inMin,\n                         int                  inMax,\n                         int                  inValue,\n                         <a href=\"/sdk/XPTrackStyle/\">XPTrackStyle</a>         inTrackStyle,\n                         int                  inLit);\n</code></pre><p>This routine draws a track. You pass in the track dimensions and size; the track picks the optimal orientation for these dimensions. Pass in the track’s minimum current and maximum values; the indicator will be positioned appropriately. You can also specify whether the track is lit or not.</p></div><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPGetTrackDefaultDimensions\"><a href=\"/sdk/XPGetTrackDefaultDimensions/\">XPGetTrackDefaultDimensions</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>WIDGET_API void       <a href=\"/sdk/XPGetTrackDefaultDimensions/\">XPGetTrackDefaultDimensions</a>(\n                         <a href=\"/sdk/XPTrackStyle/\">XPTrackStyle</a>         inStyle,\n                         int *                outWidth,\n                         int *                outCanBeLit);\n</code></pre><p>This routine returns a track’s default smaller dimension; all tracks are scalable in the larger dimension. It also returns whether a track can be lit.</p></div><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPGetTrackMetrics\"><a href=\"/sdk/XPGetTrackMetrics/\">XPGetTrackMetrics</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>WIDGET_API void       <a href=\"/sdk/XPGetTrackMetrics/\">XPGetTrackMetrics</a>(\n                         int                  inX1,\n                         int                  inY1,\n                         int                  inX2,\n                         int                  inY2,\n                         int                  inMin,\n                         int                  inMax,\n                         int                  inValue,\n                         <a href=\"/sdk/XPTrackStyle/\">XPTrackStyle</a>         inTrackStyle,\n                         int *                outIsVertical,\n                         int *                outDownBtnSize,\n                         int *                outDownPageSize,\n                         int *                outThumbSize,\n                         int *                outUpPageSize,\n                         int *                outUpBtnSize);\n</code></pre><p>This routine returns the metrics of a track. If you want to write UI code to manipulate a track, this routine helps you know where the mouse locations are. For most other elements, the rectangle the element is drawn in is enough information. However, the scrollbar drawing routine does some automatic placement; this routine lets you know where things ended up. You pass almost everything you would pass to the draw routine. You get out the orientation, and other useful stuff.</p><p>Besides orientation, you get five dimensions for the five parts of a scrollbar, which are the down button, down area (area before the thumb), the thumb, and the up area and button. For horizontal scrollers, the left button decreases; for vertical scrollers, the top button decreases.</p></div></div></div></div></article>",
      "code_examples": [
        {
          "char_count": 258,
          "code": "WIDGET_API voidXPDrawWindow(\n                         int                  inX1,\n                         int                  inY1,\n                         int                  inX2,\n                         int                  inY2,XPWindowStyleinStyle);",
          "context": "XPDrawWindow",
          "id": "example_0",
          "language": "c",
          "line_count": 5,
          "type": "snippet"
        },
        {
          "char_count": 221,
          "code": "WIDGET_API voidXPGetWindowDefaultDimensions(XPWindowStyleinStyle,\n                         int *                outWidth,    /* Can be NULL */\n                         int *                outHeight);    /* Can be NULL */",
          "context": "XPGetWindowDefaultDimensions",
          "id": "example_1",
          "language": "c",
          "line_count": 3,
          "type": "snippet"
        },
        {
          "char_count": 313,
          "code": "WIDGET_API voidXPDrawElement(\n                         int                  inX1,\n                         int                  inY1,\n                         int                  inX2,\n                         int                  inY2,XPElementStyleinStyle,\n                         int                  inLit);",
          "context": "XPDrawElement",
          "id": "example_2",
          "language": "c",
          "line_count": 6,
          "type": "snippet"
        },
        {
          "char_count": 303,
          "code": "WIDGET_API voidXPGetElementDefaultDimensions(XPElementStyleinStyle,\n                         int *                outWidth,    /* Can be NULL */\n                         int *                outHeight,    /* Can be NULL */\n                         int *                outCanBeLit);    /* Can be NULL */",
          "context": "XPGetElementDefaultDimensions",
          "id": "example_3",
          "language": "c",
          "line_count": 4,
          "type": "snippet"
        },
        {
          "char_count": 475,
          "code": "WIDGET_API voidXPDrawTrack(\n                         int                  inX1,\n                         int                  inY1,\n                         int                  inX2,\n                         int                  inY2,\n                         int                  inMin,\n                         int                  inMax,\n                         int                  inValue,XPTrackStyleinTrackStyle,\n                         int                  inLit);",
          "context": "XPDrawTrack",
          "id": "example_4",
          "language": "c",
          "line_count": 9,
          "type": "snippet"
        },
        {
          "char_count": 179,
          "code": "WIDGET_API voidXPGetTrackDefaultDimensions(XPTrackStyleinStyle,\n                         int *                outWidth,\n                         int *                outCanBeLit);",
          "context": "XPGetTrackDefaultDimensions",
          "id": "example_5",
          "language": "c",
          "line_count": 3,
          "type": "snippet"
        },
        {
          "char_count": 795,
          "code": "WIDGET_API voidXPGetTrackMetrics(\n                         int                  inX1,\n                         int                  inY1,\n                         int                  inX2,\n                         int                  inY2,\n                         int                  inMin,\n                         int                  inMax,\n                         int                  inValue,XPTrackStyleinTrackStyle,\n                         int *                outIsVertical,\n                         int *                outDownBtnSize,\n                         int *                outDownPageSize,\n                         int *                outThumbSize,\n                         int *                outUpPageSize,\n                         int *                outUpBtnSize);",
          "context": "XPGetTrackMetrics",
          "id": "example_6",
          "language": "c",
          "line_count": 14,
          "type": "example"
        }
      ],
      "cross_references": [],
      "markdown": "# [XPUIGraphics](/sdk/XPUIGraphics/)API\n\n## UI GRAPHICS\n\n### [XPWindowStyle](/sdk/XPWindowStyle/)\n\nThere are a few built-in window styles in X-Plane that you can use.\n\nNote that X-Plane 6 does not offer real shadow-compositing; you must make sure\nto put a window on top of another window of the right style to make the shadows\nwork, etc. This applies to elements with insets and shadows. The rules are:\n\nSub windows must go on top of main windows, and screens and list views on top of\nsubwindows. Only help and main windows can be over the main screen.\n\nWith X-Plane 7 any window or element may be placed over any other element.\n\nSome windows are scaled by stretching, some by repeating. The drawing routines\nknow which scaling method to use. The list view cannot be rescaled in X-Plane 6\nbecause it has both a repeating pattern and a gradient in one element. All other\nelements can be rescaled.\n\n| Name | Value | Description |\n| --- | --- | --- |\n| [xpWindow_Help](/sdk/xpWindow_Help/) | \"0\" | An LCD screen that shows help. |\n| [xpWindow_MainWindow](/sdk/xpWindow_MainWindow/) | \"1\" | A dialog box window.\n|\n| [xpWindow_SubWindow](/sdk/xpWindow_SubWindow/) | \"2\" | A panel or frame within\na dialog box window. |\n| [xpWindow_Screen](/sdk/xpWindow_Screen/) | \"4\" | An LCD screen within a panel\nto hold text displays. |\n| [xpWindow_ListView](/sdk/xpWindow_ListView/) | \"5\" | A list view within a\npanel for scrolling file names, etc. |\n\n### [XPDrawWindow](/sdk/XPDrawWindow/)\n\n```cpp\nWIDGET_API void       XPDrawWindow(\n                         int                  inX1,\n                         int                  inY1,\n                         int                  inX2,\n                         int                  inY2,\n                         XPWindowStyle        inStyle);\n\n```\n\nThis routine draws a window of the given dimensions at the given offset on the\nvirtual screen in a given style. The window is automatically scaled as\nappropriate using a bitmap scaling technique (scaling or repeating) as\nappropriate to the style.\n\n### [XPGetWindowDefaultDimensions](/sdk/XPGetWindowDefaultDimensions/)\n\n```cpp\nWIDGET_API void       XPGetWindowDefaultDimensions(\n                         XPWindowStyle        inStyle,\n                         int *                outWidth,    /* Can be NULL */\n                         int *                outHeight);    /* Can be NULL */\n\n```\n\nThis routine returns the default dimensions for a window. Output is either a\nminimum or fixed value depending on whether the window is scalable.\n\n### [XPElementStyle](/sdk/XPElementStyle/)\n\nElements are individually drawable UI things like push buttons, etc. The style\ndefines what kind of element you are drawing. Elements can be stretched in one\nor two dimensions (depending on the element). Some elements can be lit.\n\nIn X-Plane 6 some elements must be drawn over metal. Some are scalable and some\nare not. Any element can be drawn anywhere in X-Plane 7.\n\nScalable Axis Required Background\n\n| Name | Value | Description |\n| --- | --- | --- |\n| [xpElement_TextField](/sdk/xpElement_TextField/) | \"6\" | x metal |\n| [xpElement_CheckBox](/sdk/xpElement_CheckBox/) | \"9\" | none metal |\n| [xpElement_CheckBoxLit](/sdk/xpElement_CheckBoxLit/) | \"10\" | none metal |\n| [xpElement_WindowCloseBox](/sdk/xpElement_WindowCloseBox/) | \"14\" | none\nwindow header |\n| [xpElement_WindowCloseBoxPressed](/sdk/xpElement_WindowCloseBoxPressed/) |\n\"15\" | none window header |\n| [xpElement_PushButton](/sdk/xpElement_PushButton/) | \"16\" | x metal |\n| [xpElement_PushButtonLit](/sdk/xpElement_PushButtonLit/) | \"17\" | x metal |\n| [xpElement_OilPlatform](/sdk/xpElement_OilPlatform/) | \"24\" | none any |\n| [xpElement_OilPlatformSmall](/sdk/xpElement_OilPlatformSmall/) | \"25\" | none\nany |\n| [xpElement_Ship](/sdk/xpElement_Ship/) | \"26\" | none any |\n| [xpElement_ILSGlideScope](/sdk/xpElement_ILSGlideScope/) | \"27\" | none any |\n| [xpElement_MarkerLeft](/sdk/xpElement_MarkerLeft/) | \"28\" | none any |\n| [xpElement_Airport](/sdk/xpElement_Airport/) | \"29\" | none any |\n| [xpElement_Waypoint](/sdk/xpElement_Waypoint/) | \"30\" | none any |\n| [xpElement_NDB](/sdk/xpElement_NDB/) | \"31\" | none any |\n| [xpElement_VOR](/sdk/xpElement_VOR/) | \"32\" | none any |\n| [xpElement_RadioTower](/sdk/xpElement_RadioTower/) | \"33\" | none any |\n| [xpElement_AircraftCarrier](/sdk/xpElement_AircraftCarrier/) | \"34\" | none any\n|\n| [xpElement_Fire](/sdk/xpElement_Fire/) | \"35\" | none any |\n| [xpElement_MarkerRight](/sdk/xpElement_MarkerRight/) | \"36\" | none any |\n| [xpElement_CustomObject](/sdk/xpElement_CustomObject/) | \"37\" | none any |\n| [xpElement_CoolingTower](/sdk/xpElement_CoolingTower/) | \"38\" | none any |\n| [xpElement_SmokeStack](/sdk/xpElement_SmokeStack/) | \"39\" | none any |\n| [xpElement_Building](/sdk/xpElement_Building/) | \"40\" | none any |\n| [xpElement_PowerLine](/sdk/xpElement_PowerLine/) | \"41\" | none any |\n| [xpElement_CopyButtons](/sdk/xpElement_CopyButtons/) | \"45\" | none metal |\n|\n[xpElement_CopyButtonsWithEditingGrid](/sdk/xpElement_CopyButtonsWithEditingGrid/)\n| \"46\" | none metal |\n| [xpElement_EditingGrid](/sdk/xpElement_EditingGrid/) | \"47\" | x, y metal |\n| [xpElement_ScrollBar](/sdk/xpElement_ScrollBar/) | \"48\" | THIS CAN PROBABLY BE\nREMOVED |\n| [xpElement_VORWithCompassRose](/sdk/xpElement_VORWithCompassRose/) | \"49\" |\nnone any |\n| [xpElement_Zoomer](/sdk/xpElement_Zoomer/) | \"51\" | none metal |\n| [xpElement_TextFieldMiddle](/sdk/xpElement_TextFieldMiddle/) | \"52\" | x, y\nmetal |\n| [xpElement_LittleDownArrow](/sdk/xpElement_LittleDownArrow/) | \"53\" | none\nmetal |\n| [xpElement_LittleUpArrow](/sdk/xpElement_LittleUpArrow/) | \"54\" | none metal |\n| [xpElement_WindowDragBar](/sdk/xpElement_WindowDragBar/) | \"61\" | none metal |\n| [xpElement_WindowDragBarSmooth](/sdk/xpElement_WindowDragBarSmooth/) | \"62\" |\nnone metal |\n\n### [XPDrawElement](/sdk/XPDrawElement/)\n\n```cpp\nWIDGET_API void       XPDrawElement(\n                         int                  inX1,\n                         int                  inY1,\n                         int                  inX2,\n                         int                  inY2,\n                         XPElementStyle       inStyle,\n                         int                  inLit);\n\n```\n\n[XPDrawElement](/sdk/XPDrawElement/)draws a given element at an offset on the\nvirtual screen in set dimensions. Even if the element is not scalable, it will\nbe scaled if the width and height do not match the preferred dimensions; it’ll\njust look ugly. Pass inLit to see the lit version of the element; if the element\ncannot be lit this is ignored.\n\n### [XPGetElementDefaultDimensions](/sdk/XPGetElementDefaultDimensions/)\n\n```cpp\nWIDGET_API void       XPGetElementDefaultDimensions(\n                         XPElementStyle       inStyle,\n                         int *                outWidth,    /* Can be NULL */\n                         int *                outHeight,    /* Can be NULL */\n                         int *                outCanBeLit);    /* Can be NULL */\n\n```\n\nThis routine returns the recommended or minimum dimensions of a given UI\nelement. outCanBeLit tells whether the element has both a lit and unlit state.\nPass NULL to not receive any of these parameters.\n\n### [XPTrackStyle](/sdk/XPTrackStyle/)\n\nA track is a UI element that displays a value vertically or horizontally.\nX-Plane has three kinds of tracks: scroll bars, sliders, and progress bars.\nTracks can be displayed either horizontally or vertically; tracks will choose\ntheir own layout based on the larger dimension of their dimensions (e.g. they\nknow if they are tall or wide). Sliders may be lit or unlit (showing the user\nmanipulating them).\n\n- ScrollBar: this is a standard scroll bar with arrows and a thumb to drag.\n- Slider: this is a simple track with a ball in the middle that can be slid.\n- Progress: this is a progress indicator showing how a long task is going.\n\n| Name | Value | Description |\n| --- | --- | --- |\n| [xpTrack_ScrollBar](/sdk/xpTrack_ScrollBar/) | \"0\" | not over metal can be lit\ncan be rotated |\n| [xpTrack_Slider](/sdk/xpTrack_Slider/) | \"1\" | over metal can be lit can be\nrotated |\n| [xpTrack_Progress](/sdk/xpTrack_Progress/) | \"2\" | over metal cannot be lit\ncannot be rotated |\n\n### [XPDrawTrack](/sdk/XPDrawTrack/)\n\n```cpp\nWIDGET_API void       XPDrawTrack(\n                         int                  inX1,\n                         int                  inY1,\n                         int                  inX2,\n                         int                  inY2,\n                         int                  inMin,\n                         int                  inMax,\n                         int                  inValue,\n                         XPTrackStyle         inTrackStyle,\n                         int                  inLit);\n\n```\n\nThis routine draws a track. You pass in the track dimensions and size; the track\npicks the optimal orientation for these dimensions. Pass in the track’s minimum\ncurrent and maximum values; the indicator will be positioned appropriately. You\ncan also specify whether the track is lit or not.\n\n### [XPGetTrackDefaultDimensions](/sdk/XPGetTrackDefaultDimensions/)\n\n```cpp\nWIDGET_API void       XPGetTrackDefaultDimensions(\n                         XPTrackStyle         inStyle,\n                         int *                outWidth,\n                         int *                outCanBeLit);\n\n```\n\nThis routine returns a track’s default smaller dimension; all tracks are\nscalable in the larger dimension. It also returns whether a track can be lit.\n\n### [XPGetTrackMetrics](/sdk/XPGetTrackMetrics/)\n\n```cpp\nWIDGET_API void       XPGetTrackMetrics(\n                         int                  inX1,\n                         int                  inY1,\n                         int                  inX2,\n                         int                  inY2,\n                         int                  inMin,\n                         int                  inMax,\n                         int                  inValue,\n                         XPTrackStyle         inTrackStyle,\n                         int *                outIsVertical,\n                         int *                outDownBtnSize,\n                         int *                outDownPageSize,\n                         int *                outThumbSize,\n                         int *                outUpPageSize,\n                         int *                outUpBtnSize);\n\n```\n\nThis routine returns the metrics of a track. If you want to write UI code to\nmanipulate a track, this routine helps you know where the mouse locations are.\nFor most other elements, the rectangle the element is drawn in is enough\ninformation. However, the scrollbar drawing routine does some automatic\nplacement; this routine lets you know where things ended up. You pass almost\neverything you would pass to the draw routine. You get out the orientation, and\nother useful stuff.\n\nBesides orientation, you get five dimensions for the five parts of a scrollbar,\nwhich are the down button, down area (area before the thumb), the thumb, and the\nup area and button. For horizontal scrollers, the left button decreases; for\nvertical scrollers, the top button decreases.",
      "own_functions": [
        "XPDrawWindow",
        "XPGetWindowDefaultDimensions",
        "XPDrawElement",
        "XPGetElementDefaultDimensions",
        "XPDrawTrack",
        "XPGetTrackDefaultDimensions",
        "XPGetTrackMetrics",
        "XPWindowStyle",
        "XPElementStyle",
        "XPTrackStyle",
        "WIDGET_API"
      ],
      "processing_timestamp": "2025-06-25T20:39:23.711293+00:00",
      "title": "XPUIGraphics | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPUIGraphics/"
    },
    "https://developer.x-plane.com/sdk/XPUMoveWidgetBy/": {
      "api_signatures": [
        {
          "description": "Simply moves a widget by an amount, +x = right, +y = up, without resizing the widget.",
          "name": "XPUMoveWidgetBy",
          "parameters": [
            {
              "full_declaration": "int                  inDeltaX",
              "name": "inDeltaX",
              "type": "int"
            },
            {
              "full_declaration": "int                  inDeltaY",
              "name": "inDeltaY",
              "type": "int"
            }
          ],
          "signature": "WIDGET_API voidXPUMoveWidgetBy(XPWidgetIDinWidget,\n                         int                  inDeltaX,\n                         int                  inDeltaY);"
        },
        {
          "name": "WIDGET_API",
          "signature": "WIDGET_API voidXPUMoveWidgetBy(XPWidgetIDinWidget,\n                         int                  inDeltaX,\n                         int                  inDeltaY);",
          "source": "code_block_extraction",
          "type": "function"
        }
      ],
      "category": {
        "category": "Widget_System",
        "module": "Widget System",
        "url": "https://developer.x-plane.com/sdk/XPUMoveWidgetBy/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPUMoveWidgetBy\"><a href=\"/sdk/XPUMoveWidgetBy/\">XPUMoveWidgetBy</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>WIDGET_API void       <a href=\"/sdk/XPUMoveWidgetBy/\">XPUMoveWidgetBy</a>(\n                         <a href=\"/sdk/XPWidgetID/\">XPWidgetID</a>           inWidget,\n                         int                  inDeltaX,\n                         int                  inDeltaY);\n</code></pre><p>Simply moves a widget by an amount, +x = right, +y = up, without resizing the widget.</p></div></div></article>",
      "code_examples": [
        {
          "char_count": 163,
          "code": "WIDGET_API voidXPUMoveWidgetBy(XPWidgetIDinWidget,\n                         int                  inDeltaX,\n                         int                  inDeltaY);",
          "context": "XPUMoveWidgetBy",
          "id": "example_0",
          "language": "cpp",
          "line_count": 3,
          "type": "snippet"
        }
      ],
      "cross_references": [],
      "markdown": "### [XPUMoveWidgetBy](/sdk/XPUMoveWidgetBy/)\n\n```cpp\nWIDGET_API void       XPUMoveWidgetBy(\n                         XPWidgetID           inWidget,\n                         int                  inDeltaX,\n                         int                  inDeltaY);\n\n```\n\nSimply moves a widget by an amount, +x = right, +y = up, without resizing the\nwidget.",
      "own_functions": [
        "XPUMoveWidgetBy",
        "WIDGET_API"
      ],
      "processing_timestamp": "2025-06-25T20:39:23.126098+00:00",
      "title": "XPUMoveWidgetBy | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPUMoveWidgetBy/"
    },
    "https://developer.x-plane.com/sdk/XPUSelectIfNeeded/": {
      "api_signatures": [
        {
          "description": "This causes the widget to bring its window to the foreground if it is not already. inEatClick specifies whether clicks in the background should be consumed by bringing the window to the foreground.",
          "name": "XPUSelectIfNeeded",
          "parameters": [
            {
              "full_declaration": "intptr_t             inParam1",
              "name": "inParam1",
              "type": "intptr_t"
            },
            {
              "full_declaration": "intptr_t             inParam2",
              "name": "inParam2",
              "type": "intptr_t"
            },
            {
              "full_declaration": "int                  inEatClick",
              "name": "inEatClick",
              "type": "int"
            }
          ],
          "signature": "WIDGET_API intXPUSelectIfNeeded(XPWidgetMessageinMessage,XPWidgetIDinWidget,\n                         intptr_t             inParam1,\n                         intptr_t             inParam2,\n                         int                  inEatClick);"
        },
        {
          "name": "WIDGET_API",
          "signature": "WIDGET_API intXPUSelectIfNeeded(XPWidgetMessageinMessage,XPWidgetIDinWidget,\n                         intptr_t             inParam1,\n                         intptr_t             inParam2,\n                         int                  inEatClick);",
          "source": "code_block_extraction",
          "type": "function"
        }
      ],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/XPUSelectIfNeeded/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPUSelectIfNeeded\"><a href=\"/sdk/XPUSelectIfNeeded/\">XPUSelectIfNeeded</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>WIDGET_API int        <a href=\"/sdk/XPUSelectIfNeeded/\">XPUSelectIfNeeded</a>(\n                         <a href=\"/sdk/XPWidgetMessage/\">XPWidgetMessage</a>      inMessage,\n                         <a href=\"/sdk/XPWidgetID/\">XPWidgetID</a>           inWidget,\n                         intptr_t             inParam1,\n                         intptr_t             inParam2,\n                         int                  inEatClick);\n</code></pre><p>This causes the widget to bring its window to the foreground if it is not already. inEatClick specifies whether clicks in the background should be consumed by bringing the window to the foreground.</p></div></div></article>",
      "code_examples": [
        {
          "char_count": 247,
          "code": "WIDGET_API intXPUSelectIfNeeded(XPWidgetMessageinMessage,XPWidgetIDinWidget,\n                         intptr_t             inParam1,\n                         intptr_t             inParam2,\n                         int                  inEatClick);",
          "context": "XPUSelectIfNeeded",
          "id": "example_0",
          "language": "c",
          "line_count": 4,
          "type": "snippet"
        }
      ],
      "cross_references": [
        "XPWidgetMessage"
      ],
      "markdown": "### [XPUSelectIfNeeded](/sdk/XPUSelectIfNeeded/)\n\n```cpp\nWIDGET_API int        XPUSelectIfNeeded(\n                         XPWidgetMessage      inMessage,\n                         XPWidgetID           inWidget,\n                         intptr_t             inParam1,\n                         intptr_t             inParam2,\n                         int                  inEatClick);\n\n```\n\nThis causes the widget to bring its window to the foreground if it is not\nalready. inEatClick specifies whether clicks in the background should be\nconsumed by bringing the window to the foreground.",
      "own_functions": [
        "XPUSelectIfNeeded",
        "WIDGET_API"
      ],
      "processing_timestamp": "2025-06-25T20:39:22.662635+00:00",
      "title": "XPUSelectIfNeeded | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPUSelectIfNeeded/"
    },
    "https://developer.x-plane.com/sdk/XPWidgetClass/": {
      "api_signatures": [],
      "category": {
        "category": "Widget_System",
        "module": "Widget System",
        "url": "https://developer.x-plane.com/sdk/XPWidgetClass/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"typedef\"><h3 class=\"sdk-api-type\" id=\"XPWidgetClass\"><a href=\"/sdk/XPWidgetClass/\">XPWidgetClass</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>typedef int <a href=\"/sdk/XPWidgetClass/\">XPWidgetClass</a>;</code></pre><p>Widget classes define predefined widget types. A widget class basically specifies from a library the widget function to be used for the widget. Most widgets can be made right from classes.</p></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "### [XPWidgetClass](/sdk/XPWidgetClass/)\n\n```cpp\ntypedef int XPWidgetClass;\n```\n\nWidget classes define predefined widget types. A widget class basically\nspecifies from a library the widget function to be used for the widget. Most\nwidgets can be made right from classes.",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:23.127098+00:00",
      "title": "XPWidgetClass | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPWidgetClass/"
    },
    "https://developer.x-plane.com/sdk/XPWidgetCreate_t/": {
      "api_signatures": [],
      "category": {
        "category": "Widget_System",
        "module": "Widget System",
        "url": "https://developer.x-plane.com/sdk/XPWidgetCreate_t/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"struct\"><h3 class=\"sdk-api-struct\" id=\"XPWidgetCreate_t\"><a href=\"/sdk/XPWidgetCreate_t/\">XPWidgetCreate_t</a></h3><p>This structure contains all of the parameters needed to create a widget. It is used with<a href=\"/sdk/XPUCreateWidgets/\">XPUCreateWidgets</a>to create widgets in bulk from an array. All parameters correspond to those of<a href=\"/sdk/XPCreateWidget/\">XPCreateWidget</a>except for the container index.</p><p>If the container index is equal to the index of a widget in the array, the widget in the array passed to<a href=\"/sdk/XPUCreateWidgets/\">XPUCreateWidgets</a>is used as the parent of this widget. Note that if you pass an index greater than your own position in the array, the parent you are requesting will not exist yet.</p><p>If the container index is<a href=\"/sdk/NO_PARENT/\">NO_PARENT</a>, the parent widget is specified as NULL. If the container index is<a href=\"/sdk/PARAM_PARENT/\">PARAM_PARENT</a>, the widget passed into<a href=\"/sdk/XPUCreateWidgets/\">XPUCreateWidgets</a>is used.</p><pre class=\"language-cpp\" data-manual=\"true\"><code>typedef struct {\n     int                       left;\n     int                       top;\n     int                       right;\n     int                       bottom;\n     int                       visible;\n     const char *              descriptor;\n     // Whether this widget is a root widget\n     int                       isRoot;\n     // The index of the widget to be contained within, or a constant\n     int                       containerIndex;\n     <a href=\"/sdk/XPWidgetClass/\">XPWidgetClass</a>             widgetClass;\n} <a href=\"/sdk/XPWidgetCreate_t/\">XPWidgetCreate_t</a>;</code></pre></div></div></article>",
      "code_examples": [
        {
          "char_count": 494,
          "code": "typedef struct {\n     int                       left;\n     int                       top;\n     int                       right;\n     int                       bottom;\n     int                       visible;\n     const char *              descriptor;\n     // Whether this widget is a root widget\n     int                       isRoot;\n     // The index of the widget to be contained within, or a constant\n     int                       containerIndex;XPWidgetClasswidgetClass;\n}XPWidgetCreate_t;",
          "context": "If the container index isNO_PARENT, the parent widget is specified as NULL. If the container index isPARAM_PARENT, the widget passed intoXPUCreateWidgetsis used.",
          "id": "example_0",
          "language": "c",
          "line_count": 12,
          "type": "example"
        }
      ],
      "cross_references": [
        "XPUCreateWidgets",
        "XPCreateWidget"
      ],
      "markdown": "### [XPWidgetCreate_t](/sdk/XPWidgetCreate_t/)\n\nThis structure contains all of the parameters needed to create a widget. It is\nused with[XPUCreateWidgets](/sdk/XPUCreateWidgets/)to create widgets in bulk\nfrom an array. All parameters correspond to those\nof[XPCreateWidget](/sdk/XPCreateWidget/)except for the container index.\n\nIf the container index is equal to the index of a widget in the array, the\nwidget in the array passed to[XPUCreateWidgets](/sdk/XPUCreateWidgets/)is used\nas the parent of this widget. Note that if you pass an index greater than your\nown position in the array, the parent you are requesting will not exist yet.\n\nIf the container index is[NO_PARENT](/sdk/NO_PARENT/), the parent widget is\nspecified as NULL. If the container index is[PARAM_PARENT](/sdk/PARAM_PARENT/),\nthe widget passed into[XPUCreateWidgets](/sdk/XPUCreateWidgets/)is used.\n\n```cpp\ntypedef struct {\n     int                       left;\n     int                       top;\n     int                       right;\n     int                       bottom;\n     int                       visible;\n     const char *              descriptor;\n     // Whether this widget is a root widget\n     int                       isRoot;\n     // The index of the widget to be contained within, or a constant\n     int                       containerIndex;\n     XPWidgetClass             widgetClass;\n} XPWidgetCreate_t;\n```",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:23.180700+00:00",
      "title": "XPWidgetCreate_t | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPWidgetCreate_t/"
    },
    "https://developer.x-plane.com/sdk/XPWidgetDefs/": {
      "api_signatures": [
        {
          "name": "XPWidgetPropertyID",
          "type": "enum",
          "values": [
            {
              "description": "A window's refcon is an opaque value used by client code to find other data based on it.",
              "name": "xpProperty_Refcon",
              "value": "\"0\""
            },
            {
              "description": "These properties are used by the utilities to implement dragging.",
              "name": "xpProperty_Dragging",
              "value": "\"1\""
            },
            {
              "description": "Is the widget highlighted? (For widgets that support this kind of thing.)",
              "name": "xpProperty_Hilited",
              "value": "\"4\""
            },
            {
              "description": "Is there a C++ object attached to this widget?",
              "name": "xpProperty_Object",
              "value": "\"5\""
            },
            {
              "description": "If this property is 1, the widget package will use OpenGL to restrict drawing to the Widget's exposed rectangle.",
              "name": "xpProperty_Clip",
              "value": "\"6\""
            },
            {
              "description": "Is this widget enabled (for those that have a disabled state too)?",
              "name": "xpProperty_Enabled",
              "value": "\"7\""
            },
            {
              "description": "NOTE: Property IDs 1 - 999 are reserved for the widgets library.NOTE: Property IDs 1000 - 9999 are allocated to the standard widget classes provided with the library.Properties 1000 - 1099 are for widget class 0, 1100 - 1199 for widget class 1, etc.",
              "name": "xpProperty_UserStart",
              "value": "\"10000\""
            }
          ]
        },
        {
          "name": "XPDispatchMode",
          "type": "enum",
          "values": [
            {
              "description": "The message will only be sent to the target widget.",
              "name": "xpMode_Direct",
              "value": "\"0\""
            },
            {
              "description": "The message is sent to the target widget, then up the chain of parents until the message ishandled or a parentless widget is reached.",
              "name": "xpMode_UpChain",
              "value": "\"1\""
            },
            {
              "description": "The message is sent to the target widget and then all of its children recursively depth-first.",
              "name": "xpMode_Recursive",
              "value": "\"2\""
            },
            {
              "description": "The message is sent just to the target, but goes to every callback, even if it is handled.",
              "name": "xpMode_DirectAllCallbacks",
              "value": "\"3\""
            },
            {
              "description": "The message is only sent to the very first handler even if it is not accepted. (This is really only useful for some internal widget library functions.)",
              "name": "xpMode_Once",
              "value": "\"4\""
            }
          ]
        },
        {
          "name": "XPWidgetMessage",
          "type": "enum",
          "values": [
            {
              "description": "No message, should not be sent.",
              "name": "xpMsg_None",
              "value": "\"0\""
            },
            {
              "description": "The create message is sent once per widget that is created with your widget function and oncefor any widget that has your widget function attached.Dispatching: DirectParam 1: 1 if you are being added as a subclass, 0 if the widget is first being created.",
              "name": "xpMsg_Create",
              "value": "\"1\""
            },
            {
              "description": "The destroy message is sent once for each message that is destroyed that has your widget function.Dispatching: Direct for allParam 1: 1 if being deleted by a recursive delete to the parent, 0 for explicit deletion.",
              "name": "xpMsg_Destroy",
              "value": "\"2\""
            },
            {
              "description": "The paint message is sent to your widget to draw itself. The paint message is the bare-bonesmessage; in response you must draw yourself, draw your children, set up clipping and culling,check for visibility, etc. If you don't want to do all of this, ignore the paint message anda draw message (see below) will be sent to you.Dispatching: Direct",
              "name": "xpMsg_Paint",
              "value": "\"3\""
            },
            {
              "description": "The draw message is sent to your widget when it is time to draw yourself. OpenGL will be set upto draw in 2-d global screen coordinates, but you should use the XPLM to set up OpenGL state.Dispatching: Direct",
              "name": "xpMsg_Draw",
              "value": "\"4\""
            },
            {
              "description": "The key press message is sent once per key that is pressed. The first parameter is the type of keycode (integer or char) and the second is the code itself. By handling this event, you consume thekey stroke.Handling this message 'consumes' the keystroke; not handling it passes it to your parent widget.Dispatching: Up ChainParam 1: A pointer to anXPKeyState_tstructure with the keystroke.",
              "name": "xpMsg_KeyPress",
              "value": "\"5\""
            },
            {
              "description": "Keyboard focus is being given to you. By handling this message you accept keyboard focus. Thefirst parameter will be one if a child of yours gave up focus to you, 0 if someone set focus onyou explicitly.Handling this message accepts focus; not handling refuses focus.Dispatching: directParam 1: 1 if you are gaining focus because your child is giving it up, 0 if someone is explicitlygiving you focus.",
              "name": "xpMsg_KeyTakeFocus",
              "value": "\"6\""
            },
            {
              "description": "Keyboard focus is being taken away from you. The first parameter will be 1 if you are losingfocus because another widget is taking it, or 0 if someone called the API to make you lose focusexplicitly.Dispatching: DirectParam 1: 1 if focus is being taken by another widget, 0 if code requested to remove focus.",
              "name": "xpMsg_KeyLoseFocus",
              "value": "\"7\""
            },
            {
              "description": "You receive one mousedown event per click with a mouse-state structure pointed to by parameter 1.By accepting this you eat the click, otherwise your parent gets it. You will not receive drag andmouse up messages if you do not accept the down message.Handling this message consumes the mouse click, not handling it passes it to the next widget.You can act 'transparent' as a window by never handling moues clicks to certain areas.Dispatching: Up chain NOTE: Technically this is direct dispatched, but the widgets library will shipit to each widget until one consumes the click, making it effectively \"up chain\".Param 1: A pointer to anXPMouseState_tcontaining the mouse status.",
              "name": "xpMsg_MouseDown",
              "value": "\"8\""
            },
            {
              "description": "You receive a series of mouse drag messages (typically one per frame in the sim) as the mouse ismoved once you have accepted a mouse down message. Parameter one points to a mouse-state structuredescribing the mouse location. You will continue to receive these until the mouse button isreleased.You may receive multiple mouse state messages with the same mouse position. You will receive mousedrag events even if the mouse is dragged out of your current or original bounds at the time of themouse down.Dispatching: DirectParam 1: A pointer to anXPMouseState_tcontaining the mouse status.",
              "name": "xpMsg_MouseDrag",
              "value": "\"9\""
            },
            {
              "description": "The mouseup event is sent once when the mouse button is released after a drag or click. You onlyreceive this message if you accept the mouseDown message. Parameter one points to a mouse statestructure.Dispatching: DirectParam 1: A pointer to anXPMouseState_tcontaining the mouse status.",
              "name": "xpMsg_MouseUp",
              "value": "\"10\""
            },
            {
              "description": "Your geometry or a child's geometry is being changed.Dispatching: Up chainParam 1: The widget ID of the original reshaped target.Param 2: A pointer to aXPWidgetGeometryChange_tstruct describing the change.",
              "name": "xpMsg_Reshape",
              "value": "\"11\""
            },
            {
              "description": "Your exposed area has changed.Dispatching: Direct",
              "name": "xpMsg_ExposedChanged",
              "value": "\"12\""
            },
            {
              "description": "A child has been added to you. The child's ID is passed in parameter one.Dispatching: DirectParam 1: The Widget ID of the child being added.",
              "name": "xpMsg_AcceptChild",
              "value": "\"13\""
            },
            {
              "description": "A child has been removed from you. The child's ID is passed in parameter one.Dispatching: DirectParam 1: The Widget ID of the child being removed.",
              "name": "xpMsg_LoseChild",
              "value": "\"14\""
            },
            {
              "description": "You now have a new parent, or have no parent. The parent's ID is passed in, or 0 for no parent.Dispatching: DirectParam 1: The Widget ID of your parent",
              "name": "xpMsg_AcceptParent",
              "value": "\"15\""
            },
            {
              "description": "You or a child has been shown. Note that this does not include you being shown because your parentwas shown, you were put in a new parent, your root was shown, etc.Dispatching: Up chainParam 1: The widget ID of the shown widget.",
              "name": "xpMsg_Shown",
              "value": "\"16\""
            },
            {
              "description": "You have been hidden. See limitations above.Dispatching: Up chainParam 1: The widget ID of the hidden widget.",
              "name": "xpMsg_Hidden",
              "value": "\"17\""
            },
            {
              "description": "Your descriptor has changed.Dispatching: Direct",
              "name": "xpMsg_DescriptorChanged",
              "value": "\"18\""
            },
            {
              "description": "A property has changed. Param 1 contains the property ID.Dispatching: DirectParam 1: The Property ID being changed.Param 2: The new property value",
              "name": "xpMsg_PropertyChanged",
              "value": "\"19\""
            },
            {
              "description": "The mouse wheel has moved.Return 1 to consume the mouse wheel move, or 0 to pass the message to a parent.Dispatching: Up chainParam 1: A pointer to anXPMouseState_tcontaining the mouse status.",
              "name": "xpMsg_MouseWheel",
              "value": "\"20\""
            },
            {
              "description": "The cursor is over your widget. If you consume this message, change theXPLMCursorStatusvalue to indicate the desired result, with the same rules as inXPLMDisplay.h.Return 1 to consume this message, 0 to pass it on.Dispatching: Up chainParam 1: A pointer to anXPMouseState_tstruct containing the mouse status.Param 2: A pointer to aXPLMCursorStatus- set this to the cursor result you desire.",
              "name": "xpMsg_CursorAdjust",
              "value": "\"21\""
            },
            {
              "description": "NOTE: Message IDs 1000 - 9999 are allocated to the standard widget classes provided with the librarywith 1000 - 1099 for widget class 0, 1100 - 1199 for widget class 1, etc. Message IDs 10,000 andbeyond are for plugin use.",
              "name": "xpMsg_UserStart",
              "value": "\"10000\""
            }
          ]
        }
      ],
      "category": {
        "category": "Widget_System",
        "module": "Widget System",
        "url": "https://developer.x-plane.com/sdk/XPWidgetDefs/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"api\"><h1 class=\"sdk-api-title\" id=\"XPWidgetDefs\"><a href=\"/sdk/XPWidgetDefs/\">XPWidgetDefs</a>API</h1><div class=\"component\"><h2 id=\"WIDGET DEFINITIONS\">WIDGET DEFINITIONS</h2><p>A widget is a call-back driven screen entity like a push-button, window, text entry field, etc.</p><p>Use the widget API to create widgets of various classes. You can nest them into trees of widgets to create complex user interfaces.</p><div class=\"typedef\"><h3 class=\"sdk-api-type\" id=\"XPWidgetID\"><a href=\"/sdk/XPWidgetID/\">XPWidgetID</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>typedef void * <a href=\"/sdk/XPWidgetID/\">XPWidgetID</a>;</code></pre><p>A Widget ID is an opaque unique non-zero handle identifying your widget. Use 0 to specify “no widget”. This type is defined as wide enough to hold a pointer. You receive a widget ID when you create a new widget and then use that widget ID to further refer to the widget.</p></div><div class=\"enum\"><h3 class=\"sdk-api-enum\" id=\"XPWidgetPropertyID\"><a href=\"/sdk/XPWidgetPropertyID/\">XPWidgetPropertyID</a></h3><p>Properties are values attached to instances of your widgets. A property is identified by a 32-bit ID and its value is the width of a pointer.</p><p>Each widget instance may have a property or not have it. When you set a property on a widget for the first time, the property is added to the widget; it then stays there for the life of the widget.</p><p>Some property IDs are predefined by the widget package; you can make up your own property IDs as well.</p><p><div class=\"enumitem\"><table><thead><tr><th>Name</th><th>Value</th><th>Description</th></tr></thead><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpProperty_Refcon\"><a href=\"/sdk/xpProperty_Refcon/\">xpProperty_Refcon</a></td><td>\"0\"</td><td>A window's refcon is an opaque value used by client code to find other data based on it.</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpProperty_Dragging\"><a href=\"/sdk/xpProperty_Dragging/\">xpProperty_Dragging</a></td><td>\"1\"</td><td>These properties are used by the utilities to implement dragging.</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpProperty_DragXOff\"><a href=\"/sdk/xpProperty_DragXOff/\">xpProperty_DragXOff</a></td><td>\"2\"</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpProperty_DragYOff\"><a href=\"/sdk/xpProperty_DragYOff/\">xpProperty_DragYOff</a></td><td>\"3\"</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpProperty_Hilited\"><a href=\"/sdk/xpProperty_Hilited/\">xpProperty_Hilited</a></td><td>\"4\"</td><td>Is the widget highlighted? (For widgets that support this kind of thing.)</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpProperty_Object\"><a href=\"/sdk/xpProperty_Object/\">xpProperty_Object</a></td><td>\"5\"</td><td>Is there a C++ object attached to this widget?</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpProperty_Clip\"><a href=\"/sdk/xpProperty_Clip/\">xpProperty_Clip</a></td><td>\"6\"</td><td>If this property is 1, the widget package will use OpenGL to restrict drawing to the Widget's exposed rectangle.</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpProperty_Enabled\"><a href=\"/sdk/xpProperty_Enabled/\">xpProperty_Enabled</a></td><td>\"7\"</td><td>Is this widget enabled (for those that have a disabled state too)?</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpProperty_UserStart\"><a href=\"/sdk/xpProperty_UserStart/\">xpProperty_UserStart</a></td><td>\"10000\"</td><td>NOTE: Property IDs 1 - 999 are reserved for the widgets library.NOTE: Property IDs 1000 - 9999 are allocated to the standard widget classes provided with the library.Properties 1000 - 1099 are for widget class 0, 1100 - 1199 for widget class 1, etc.</td></tr></table></div></p></div><div class=\"struct\"><h3 class=\"sdk-api-struct\" id=\"XPMouseState_t\"><a href=\"/sdk/XPMouseState_t/\">XPMouseState_t</a></h3><p>When the mouse is clicked or dragged, a pointer to this structure is passed to your widget function.</p><pre class=\"language-cpp\" data-manual=\"true\"><code>typedef struct {\n     int                       x;\n     int                       y;\n     // Mouse button number, left = 0 (right button not yet supported.\n     int                       button;\n     // Scroll wheel delta (button in this case would be the wheel axis number).\n     int                       delta;\n} <a href=\"/sdk/XPMouseState_t/\">XPMouseState_t</a>;</code></pre></div><div class=\"struct\"><h3 class=\"sdk-api-struct\" id=\"XPKeyState_t\"><a href=\"/sdk/XPKeyState_t/\">XPKeyState_t</a></h3><p>When a key is pressed, a pointer to this struct is passed to your widget function.</p><pre class=\"language-cpp\" data-manual=\"true\"><code>typedef struct {\n     // The ASCII key that was pressed.  WARNING: this may be 0 for some non-ASCII key sequences.\n     char                      key;\n     // The flags.  Make sure to check this if you only want key-downs!\n     <a href=\"/sdk/XPLMKeyFlags/\">XPLMKeyFlags</a>              flags;\n     // The virtual key code for the key\n     char                      vkey;\n} <a href=\"/sdk/XPKeyState_t/\">XPKeyState_t</a>;</code></pre></div><div class=\"struct\"><h3 class=\"sdk-api-struct\" id=\"XPWidgetGeometryChange_t\"><a href=\"/sdk/XPWidgetGeometryChange_t/\">XPWidgetGeometryChange_t</a></h3><p>This structure contains the deltas for your widget’s geometry when it changes.</p><pre class=\"language-cpp\" data-manual=\"true\"><code>typedef struct {\n     int                       dx;\n     // +Y = the widget moved up\n     int                       dy;\n     int                       dwidth;\n     int                       dheight;\n} <a href=\"/sdk/XPWidgetGeometryChange_t/\">XPWidgetGeometryChange_t</a>;</code></pre></div><div class=\"enum\"><h3 class=\"sdk-api-enum\" id=\"XPDispatchMode\"><a href=\"/sdk/XPDispatchMode/\">XPDispatchMode</a></h3><p>The dispatching modes describe how the widgets library sends out messages. Currently there are three modes:</p><p><div class=\"enumitem\"><table><thead><tr><th>Name</th><th>Value</th><th>Description</th></tr></thead><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpMode_Direct\"><a href=\"/sdk/xpMode_Direct/\">xpMode_Direct</a></td><td>\"0\"</td><td>The message will only be sent to the target widget.</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpMode_UpChain\"><a href=\"/sdk/xpMode_UpChain/\">xpMode_UpChain</a></td><td>\"1\"</td><td>The message is sent to the target widget, then up the chain of parents until the message ishandled or a parentless widget is reached.</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpMode_Recursive\"><a href=\"/sdk/xpMode_Recursive/\">xpMode_Recursive</a></td><td>\"2\"</td><td>The message is sent to the target widget and then all of its children recursively depth-first.</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpMode_DirectAllCallbacks\"><a href=\"/sdk/xpMode_DirectAllCallbacks/\">xpMode_DirectAllCallbacks</a></td><td>\"3\"</td><td>The message is sent just to the target, but goes to every callback, even if it is handled.</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpMode_Once\"><a href=\"/sdk/xpMode_Once/\">xpMode_Once</a></td><td>\"4\"</td><td>The message is only sent to the very first handler even if it is not accepted. (This is really only useful for some internal widget library functions.)</td></tr></table></div></p></div><div class=\"typedef\"><h3 class=\"sdk-api-type\" id=\"XPWidgetClass\"><a href=\"/sdk/XPWidgetClass/\">XPWidgetClass</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>typedef int <a href=\"/sdk/XPWidgetClass/\">XPWidgetClass</a>;</code></pre><p>Widget classes define predefined widget types. A widget class basically specifies from a library the widget function to be used for the widget. Most widgets can be made right from classes.</p></div><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"xpWidgetClass_None\"><a href=\"/sdk/xpWidgetClass_None/\">xpWidgetClass_None</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/xpWidgetClass_None/\">xpWidgetClass_None</a>   0</code></pre><p>An unspecified widget class. Other widget classes are in<a href=\"/sdk/XPStandardWidgets/\">XPStandardWidgets</a>.h</p></div></div><div class=\"component\"><h2 id=\"WIDGET MESSAGES\">WIDGET MESSAGES</h2><div class=\"enum\"><h3 class=\"sdk-api-enum\" id=\"XPWidgetMessage\"><a href=\"/sdk/XPWidgetMessage/\">XPWidgetMessage</a></h3><p>Widgets receive 32-bit messages indicating what action is to be taken or notifications of events. The list of messages may be expanded.</p><p><div class=\"enumitem\"><table><thead><tr><th>Name</th><th>Value</th><th>Description</th></tr></thead><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpMsg_None\"><a href=\"/sdk/xpMsg_None/\">xpMsg_None</a></td><td>\"0\"</td><td>No message, should not be sent.</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpMsg_Create\"><a href=\"/sdk/xpMsg_Create/\">xpMsg_Create</a></td><td>\"1\"</td><td>The create message is sent once per widget that is created with your widget function and oncefor any widget that has your widget function attached.Dispatching: DirectParam 1: 1 if you are being added as a subclass, 0 if the widget is first being created.</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpMsg_Destroy\"><a href=\"/sdk/xpMsg_Destroy/\">xpMsg_Destroy</a></td><td>\"2\"</td><td>The destroy message is sent once for each message that is destroyed that has your widget function.Dispatching: Direct for allParam 1: 1 if being deleted by a recursive delete to the parent, 0 for explicit deletion.</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpMsg_Paint\"><a href=\"/sdk/xpMsg_Paint/\">xpMsg_Paint</a></td><td>\"3\"</td><td>The paint message is sent to your widget to draw itself. The paint message is the bare-bonesmessage; in response you must draw yourself, draw your children, set up clipping and culling,check for visibility, etc. If you don't want to do all of this, ignore the paint message anda draw message (see below) will be sent to you.Dispatching: Direct</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpMsg_Draw\"><a href=\"/sdk/xpMsg_Draw/\">xpMsg_Draw</a></td><td>\"4\"</td><td>The draw message is sent to your widget when it is time to draw yourself. OpenGL will be set upto draw in 2-d global screen coordinates, but you should use the XPLM to set up OpenGL state.Dispatching: Direct</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpMsg_KeyPress\"><a href=\"/sdk/xpMsg_KeyPress/\">xpMsg_KeyPress</a></td><td>\"5\"</td><td>The key press message is sent once per key that is pressed. The first parameter is the type of keycode (integer or char) and the second is the code itself. By handling this event, you consume thekey stroke.Handling this message 'consumes' the keystroke; not handling it passes it to your parent widget.Dispatching: Up ChainParam 1: A pointer to an<a href=\"/sdk/XPKeyState_t/\">XPKeyState_t</a>structure with the keystroke.</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpMsg_KeyTakeFocus\"><a href=\"/sdk/xpMsg_KeyTakeFocus/\">xpMsg_KeyTakeFocus</a></td><td>\"6\"</td><td>Keyboard focus is being given to you. By handling this message you accept keyboard focus. Thefirst parameter will be one if a child of yours gave up focus to you, 0 if someone set focus onyou explicitly.Handling this message accepts focus; not handling refuses focus.Dispatching: directParam 1: 1 if you are gaining focus because your child is giving it up, 0 if someone is explicitlygiving you focus.</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpMsg_KeyLoseFocus\"><a href=\"/sdk/xpMsg_KeyLoseFocus/\">xpMsg_KeyLoseFocus</a></td><td>\"7\"</td><td>Keyboard focus is being taken away from you. The first parameter will be 1 if you are losingfocus because another widget is taking it, or 0 if someone called the API to make you lose focusexplicitly.Dispatching: DirectParam 1: 1 if focus is being taken by another widget, 0 if code requested to remove focus.</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpMsg_MouseDown\"><a href=\"/sdk/xpMsg_MouseDown/\">xpMsg_MouseDown</a></td><td>\"8\"</td><td>You receive one mousedown event per click with a mouse-state structure pointed to by parameter 1.By accepting this you eat the click, otherwise your parent gets it. You will not receive drag andmouse up messages if you do not accept the down message.Handling this message consumes the mouse click, not handling it passes it to the next widget.You can act 'transparent' as a window by never handling moues clicks to certain areas.Dispatching: Up chain NOTE: Technically this is direct dispatched, but the widgets library will shipit to each widget until one consumes the click, making it effectively \"up chain\".Param 1: A pointer to an<a href=\"/sdk/XPMouseState_t/\">XPMouseState_t</a>containing the mouse status.</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpMsg_MouseDrag\"><a href=\"/sdk/xpMsg_MouseDrag/\">xpMsg_MouseDrag</a></td><td>\"9\"</td><td>You receive a series of mouse drag messages (typically one per frame in the sim) as the mouse ismoved once you have accepted a mouse down message. Parameter one points to a mouse-state structuredescribing the mouse location. You will continue to receive these until the mouse button isreleased.You may receive multiple mouse state messages with the same mouse position. You will receive mousedrag events even if the mouse is dragged out of your current or original bounds at the time of themouse down.Dispatching: DirectParam 1: A pointer to an<a href=\"/sdk/XPMouseState_t/\">XPMouseState_t</a>containing the mouse status.</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpMsg_MouseUp\"><a href=\"/sdk/xpMsg_MouseUp/\">xpMsg_MouseUp</a></td><td>\"10\"</td><td>The mouseup event is sent once when the mouse button is released after a drag or click. You onlyreceive this message if you accept the mouseDown message. Parameter one points to a mouse statestructure.Dispatching: DirectParam 1: A pointer to an<a href=\"/sdk/XPMouseState_t/\">XPMouseState_t</a>containing the mouse status.</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpMsg_Reshape\"><a href=\"/sdk/xpMsg_Reshape/\">xpMsg_Reshape</a></td><td>\"11\"</td><td>Your geometry or a child's geometry is being changed.Dispatching: Up chainParam 1: The widget ID of the original reshaped target.Param 2: A pointer to a<a href=\"/sdk/XPWidgetGeometryChange_t/\">XPWidgetGeometryChange_t</a>struct describing the change.</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpMsg_ExposedChanged\"><a href=\"/sdk/xpMsg_ExposedChanged/\">xpMsg_ExposedChanged</a></td><td>\"12\"</td><td>Your exposed area has changed.Dispatching: Direct</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpMsg_AcceptChild\"><a href=\"/sdk/xpMsg_AcceptChild/\">xpMsg_AcceptChild</a></td><td>\"13\"</td><td>A child has been added to you. The child's ID is passed in parameter one.Dispatching: DirectParam 1: The Widget ID of the child being added.</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpMsg_LoseChild\"><a href=\"/sdk/xpMsg_LoseChild/\">xpMsg_LoseChild</a></td><td>\"14\"</td><td>A child has been removed from you. The child's ID is passed in parameter one.Dispatching: DirectParam 1: The Widget ID of the child being removed.</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpMsg_AcceptParent\"><a href=\"/sdk/xpMsg_AcceptParent/\">xpMsg_AcceptParent</a></td><td>\"15\"</td><td>You now have a new parent, or have no parent. The parent's ID is passed in, or 0 for no parent.Dispatching: DirectParam 1: The Widget ID of your parent</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpMsg_Shown\"><a href=\"/sdk/xpMsg_Shown/\">xpMsg_Shown</a></td><td>\"16\"</td><td>You or a child has been shown. Note that this does not include you being shown because your parentwas shown, you were put in a new parent, your root was shown, etc.Dispatching: Up chainParam 1: The widget ID of the shown widget.</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpMsg_Hidden\"><a href=\"/sdk/xpMsg_Hidden/\">xpMsg_Hidden</a></td><td>\"17\"</td><td>You have been hidden. See limitations above.Dispatching: Up chainParam 1: The widget ID of the hidden widget.</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpMsg_DescriptorChanged\"><a href=\"/sdk/xpMsg_DescriptorChanged/\">xpMsg_DescriptorChanged</a></td><td>\"18\"</td><td>Your descriptor has changed.Dispatching: Direct</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpMsg_PropertyChanged\"><a href=\"/sdk/xpMsg_PropertyChanged/\">xpMsg_PropertyChanged</a></td><td>\"19\"</td><td>A property has changed. Param 1 contains the property ID.Dispatching: DirectParam 1: The Property ID being changed.Param 2: The new property value</td></tr><tr class=\"enumitem XPLM200\"><td class=\"sdk-api-enum-item\" id=\"xpMsg_MouseWheel\"><a href=\"/sdk/xpMsg_MouseWheel/\">xpMsg_MouseWheel</a></td><td>\"20\"</td><td>The mouse wheel has moved.Return 1 to consume the mouse wheel move, or 0 to pass the message to a parent.Dispatching: Up chainParam 1: A pointer to an<a href=\"/sdk/XPMouseState_t/\">XPMouseState_t</a>containing the mouse status.</td></tr><tr class=\"enumitem XPLM200\"><td class=\"sdk-api-enum-item\" id=\"xpMsg_CursorAdjust\"><a href=\"/sdk/xpMsg_CursorAdjust/\">xpMsg_CursorAdjust</a></td><td>\"21\"</td><td>The cursor is over your widget. If you consume this message, change the<a href=\"/sdk/XPLMCursorStatus/\">XPLMCursorStatus</a>value to indicate the desired result, with the same rules as in<a href=\"/sdk/XPLMDisplay/\">XPLMDisplay</a>.h.Return 1 to consume this message, 0 to pass it on.Dispatching: Up chainParam 1: A pointer to an<a href=\"/sdk/XPMouseState_t/\">XPMouseState_t</a>struct containing the mouse status.Param 2: A pointer to a<a href=\"/sdk/XPLMCursorStatus/\">XPLMCursorStatus</a>- set this to the cursor result you desire.</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpMsg_UserStart\"><a href=\"/sdk/xpMsg_UserStart/\">xpMsg_UserStart</a></td><td>\"10000\"</td><td>NOTE: Message IDs 1000 - 9999 are allocated to the standard widget classes provided with the librarywith 1000 - 1099 for widget class 0, 1100 - 1199 for widget class 1, etc. Message IDs 10,000 andbeyond are for plugin use.</td></tr></table></div></p></div></div><div class=\"component\"><h2 id=\"WIDGET CALLBACK FUNCTION\">WIDGET CALLBACK FUNCTION</h2><div class=\"callback\"><h3 class=\"sdk-api-callback\" id=\"XPWidgetFunc_t\"><a href=\"/sdk/XPWidgetFunc_t/\">XPWidgetFunc_t</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>typedef int (* <a href=\"/sdk/XPWidgetFunc_t/\">XPWidgetFunc_t</a>)(\n                         <a href=\"/sdk/XPWidgetMessage/\">XPWidgetMessage</a>      inMessage,\n                         <a href=\"/sdk/XPWidgetID/\">XPWidgetID</a>           inWidget,\n                         intptr_t             inParam1,\n                         intptr_t             inParam2);\n</code></pre><p>This function defines your custom widget’s behavior. It will be called by the widgets library to send messages to your widget. The message and widget ID are passed in, as well as two pointer-width signed parameters whose meaning varies with the message. Return 1 to indicate that you have processed the message, 0 to indicate that you have not. For any message that is not understood, return 0.</p></div></div></div></div></article>",
      "code_examples": [
        {
          "char_count": 330,
          "code": "typedef struct {\n     int                       x;\n     int                       y;\n     // Mouse button number, left = 0 (right button not yet supported.\n     int                       button;\n     // Scroll wheel delta (button in this case would be the wheel axis number).\n     int                       delta;\n}XPMouseState_t;",
          "context": "When the mouse is clicked or dragged, a pointer to this structure is passed to your widget function.",
          "id": "example_1",
          "language": "c",
          "line_count": 8,
          "type": "snippet"
        },
        {
          "char_count": 333,
          "code": "typedef struct {\n     // The ASCII key that was pressed.  WARNING: this may be 0 for some non-ASCII key sequences.\n     char                      key;\n     // The flags.  Make sure to check this if you only want key-downs!XPLMKeyFlagsflags;\n     // The virtual key code for the key\n     char                      vkey;\n}XPKeyState_t;",
          "context": "When a key is pressed, a pointer to this struct is passed to your widget function.",
          "id": "example_2",
          "language": "c",
          "line_count": 7,
          "type": "snippet"
        },
        {
          "char_count": 225,
          "code": "typedef struct {\n     int                       dx;\n     // +Y = the widget moved up\n     int                       dy;\n     int                       dwidth;\n     int                       dheight;\n}XPWidgetGeometryChange_t;",
          "context": "This structure contains the deltas for your widget’s geometry when it changes.",
          "id": "example_3",
          "language": "c",
          "line_count": 7,
          "type": "snippet"
        },
        {
          "char_count": 187,
          "code": "typedef int (*XPWidgetFunc_t)(XPWidgetMessageinMessage,XPWidgetIDinWidget,\n                         intptr_t             inParam1,\n                         intptr_t             inParam2);",
          "context": "XPWidgetFunc_t",
          "id": "example_6",
          "language": "c",
          "line_count": 3,
          "type": "snippet"
        }
      ],
      "cross_references": [
        "XPLMKeyFlags",
        "XPLMCursorStatus",
        "XPLMDisplay"
      ],
      "markdown": "# [XPWidgetDefs](/sdk/XPWidgetDefs/)API\n\n## WIDGET DEFINITIONS\n\nA widget is a call-back driven screen entity like a push-button, window, text\nentry field, etc.\n\nUse the widget API to create widgets of various classes. You can nest them into\ntrees of widgets to create complex user interfaces.\n\n### [XPWidgetID](/sdk/XPWidgetID/)\n\n```cpp\ntypedef void * XPWidgetID;\n```\n\nA Widget ID is an opaque unique non-zero handle identifying your widget. Use 0\nto specify “no widget”. This type is defined as wide enough to hold a pointer.\nYou receive a widget ID when you create a new widget and then use that widget ID\nto further refer to the widget.\n\n### [XPWidgetPropertyID](/sdk/XPWidgetPropertyID/)\n\nProperties are values attached to instances of your widgets. A property is\nidentified by a 32-bit ID and its value is the width of a pointer.\n\nEach widget instance may have a property or not have it. When you set a property\non a widget for the first time, the property is added to the widget; it then\nstays there for the life of the widget.\n\nSome property IDs are predefined by the widget package; you can make up your own\nproperty IDs as well.\n\n| Name | Value | Description |\n| --- | --- | --- |\n| [xpProperty_Refcon](/sdk/xpProperty_Refcon/) | \"0\" | A window's refcon is an\nopaque value used by client code to find other data based on it. |\n| [xpProperty_Dragging](/sdk/xpProperty_Dragging/) | \"1\" | These properties are\nused by the utilities to implement dragging. |\n| [xpProperty_DragXOff](/sdk/xpProperty_DragXOff/) | \"2\" |\n| [xpProperty_DragYOff](/sdk/xpProperty_DragYOff/) | \"3\" |\n| [xpProperty_Hilited](/sdk/xpProperty_Hilited/) | \"4\" | Is the widget\nhighlighted? (For widgets that support this kind of thing.) |\n| [xpProperty_Object](/sdk/xpProperty_Object/) | \"5\" | Is there a C++ object\nattached to this widget? |\n| [xpProperty_Clip](/sdk/xpProperty_Clip/) | \"6\" | If this property is 1, the\nwidget package will use OpenGL to restrict drawing to the Widget's exposed\nrectangle. |\n| [xpProperty_Enabled](/sdk/xpProperty_Enabled/) | \"7\" | Is this widget enabled\n(for those that have a disabled state too)? |\n| [xpProperty_UserStart](/sdk/xpProperty_UserStart/) | \"10000\" | NOTE: Property\nIDs 1 - 999 are reserved for the widgets library.NOTE: Property IDs 1000 - 9999\nare allocated to the standard widget classes provided with the\nlibrary.Properties 1000 - 1099 are for widget class 0, 1100 - 1199 for widget\nclass 1, etc. |\n\n### [XPMouseState_t](/sdk/XPMouseState_t/)\n\nWhen the mouse is clicked or dragged, a pointer to this structure is passed to\nyour widget function.\n\n```cpp\ntypedef struct {\n     int                       x;\n     int                       y;\n     // Mouse button number, left = 0 (right button not yet supported.\n     int                       button;\n     // Scroll wheel delta (button in this case would be the wheel axis number).\n     int                       delta;\n} XPMouseState_t;\n```\n\n### [XPKeyState_t](/sdk/XPKeyState_t/)\n\nWhen a key is pressed, a pointer to this struct is passed to your widget\nfunction.\n\n```cpp\ntypedef struct {\n     // The ASCII key that was pressed.  WARNING: this may be 0 for some non-ASCII key sequences.\n     char                      key;\n     // The flags.  Make sure to check this if you only want key-downs!\n     XPLMKeyFlags              flags;\n     // The virtual key code for the key\n     char                      vkey;\n} XPKeyState_t;\n```\n\n### [XPWidgetGeometryChange_t](/sdk/XPWidgetGeometryChange_t/)\n\nThis structure contains the deltas for your widget’s geometry when it changes.\n\n```cpp\ntypedef struct {\n     int                       dx;\n     // +Y = the widget moved up\n     int                       dy;\n     int                       dwidth;\n     int                       dheight;\n} XPWidgetGeometryChange_t;\n```\n\n### [XPDispatchMode](/sdk/XPDispatchMode/)\n\nThe dispatching modes describe how the widgets library sends out messages.\nCurrently there are three modes:\n\n| Name | Value | Description |\n| --- | --- | --- |\n| [xpMode_Direct](/sdk/xpMode_Direct/) | \"0\" | The message will only be sent to\nthe target widget. |\n| [xpMode_UpChain](/sdk/xpMode_UpChain/) | \"1\" | The message is sent to the\ntarget widget, then up the chain of parents until the message ishandled or a\nparentless widget is reached. |\n| [xpMode_Recursive](/sdk/xpMode_Recursive/) | \"2\" | The message is sent to the\ntarget widget and then all of its children recursively depth-first. |\n| [xpMode_DirectAllCallbacks](/sdk/xpMode_DirectAllCallbacks/) | \"3\" | The\nmessage is sent just to the target, but goes to every callback, even if it is\nhandled. |\n| [xpMode_Once](/sdk/xpMode_Once/) | \"4\" | The message is only sent to the very\nfirst handler even if it is not accepted. (This is really only useful for some\ninternal widget library functions.) |\n\n### [XPWidgetClass](/sdk/XPWidgetClass/)\n\n```cpp\ntypedef int XPWidgetClass;\n```\n\nWidget classes define predefined widget types. A widget class basically\nspecifies from a library the widget function to be used for the widget. Most\nwidgets can be made right from classes.\n\n### [xpWidgetClass_None](/sdk/xpWidgetClass_None/)\n\n```cpp\n#define xpWidgetClass_None   0\n```\n\nAn unspecified widget class. Other widget classes are\nin[XPStandardWidgets](/sdk/XPStandardWidgets/).h\n\n## WIDGET MESSAGES\n\n### [XPWidgetMessage](/sdk/XPWidgetMessage/)\n\nWidgets receive 32-bit messages indicating what action is to be taken or\nnotifications of events. The list of messages may be expanded.\n\n| Name | Value | Description |\n| --- | --- | --- |\n| [xpMsg_None](/sdk/xpMsg_None/) | \"0\" | No message, should not be sent. |\n| [xpMsg_Create](/sdk/xpMsg_Create/) | \"1\" | The create message is sent once per\nwidget that is created with your widget function and oncefor any widget that has\nyour widget function attached.Dispatching: DirectParam 1: 1 if you are being\nadded as a subclass, 0 if the widget is first being created. |\n| [xpMsg_Destroy](/sdk/xpMsg_Destroy/) | \"2\" | The destroy message is sent once\nfor each message that is destroyed that has your widget function.Dispatching:\nDirect for allParam 1: 1 if being deleted by a recursive delete to the parent, 0\nfor explicit deletion. |\n| [xpMsg_Paint](/sdk/xpMsg_Paint/) | \"3\" | The paint message is sent to your\nwidget to draw itself. The paint message is the bare-bonesmessage; in response\nyou must draw yourself, draw your children, set up clipping and culling,check\nfor visibility, etc. If you don't want to do all of this, ignore the paint\nmessage anda draw message (see below) will be sent to you.Dispatching: Direct |\n| [xpMsg_Draw](/sdk/xpMsg_Draw/) | \"4\" | The draw message is sent to your widget\nwhen it is time to draw yourself. OpenGL will be set upto draw in 2-d global\nscreen coordinates, but you should use the XPLM to set up OpenGL\nstate.Dispatching: Direct |\n| [xpMsg_KeyPress](/sdk/xpMsg_KeyPress/) | \"5\" | The key press message is sent\nonce per key that is pressed. The first parameter is the type of keycode\n(integer or char) and the second is the code itself. By handling this event, you\nconsume thekey stroke.Handling this message 'consumes' the keystroke; not\nhandling it passes it to your parent widget.Dispatching: Up ChainParam 1: A\npointer to an[XPKeyState_t](/sdk/XPKeyState_t/)structure with the keystroke. |\n| [xpMsg_KeyTakeFocus](/sdk/xpMsg_KeyTakeFocus/) | \"6\" | Keyboard focus is being\ngiven to you. By handling this message you accept keyboard focus. Thefirst\nparameter will be one if a child of yours gave up focus to you, 0 if someone set\nfocus onyou explicitly.Handling this message accepts focus; not handling refuses\nfocus.Dispatching: directParam 1: 1 if you are gaining focus because your child\nis giving it up, 0 if someone is explicitlygiving you focus. |\n| [xpMsg_KeyLoseFocus](/sdk/xpMsg_KeyLoseFocus/) | \"7\" | Keyboard focus is being\ntaken away from you. The first parameter will be 1 if you are losingfocus\nbecause another widget is taking it, or 0 if someone called the API to make you\nlose focusexplicitly.Dispatching: DirectParam 1: 1 if focus is being taken by\nanother widget, 0 if code requested to remove focus. |\n| [xpMsg_MouseDown](/sdk/xpMsg_MouseDown/) | \"8\" | You receive one mousedown\nevent per click with a mouse-state structure pointed to by parameter 1.By\naccepting this you eat the click, otherwise your parent gets it. You will not\nreceive drag andmouse up messages if you do not accept the down message.Handling\nthis message consumes the mouse click, not handling it passes it to the next\nwidget.You can act 'transparent' as a window by never handling moues clicks to\ncertain areas.Dispatching: Up chain NOTE: Technically this is direct dispatched,\nbut the widgets library will shipit to each widget until one consumes the click,\nmaking it effectively \"up chain\".Param 1: A pointer to\nan[XPMouseState_t](/sdk/XPMouseState_t/)containing the mouse status. |\n| [xpMsg_MouseDrag](/sdk/xpMsg_MouseDrag/) | \"9\" | You receive a series of mouse\ndrag messages (typically one per frame in the sim) as the mouse ismoved once you\nhave accepted a mouse down message. Parameter one points to a mouse-state\nstructuredescribing the mouse location. You will continue to receive these until\nthe mouse button isreleased.You may receive multiple mouse state messages with\nthe same mouse position. You will receive mousedrag events even if the mouse is\ndragged out of your current or original bounds at the time of themouse\ndown.Dispatching: DirectParam 1: A pointer to\nan[XPMouseState_t](/sdk/XPMouseState_t/)containing the mouse status. |\n| [xpMsg_MouseUp](/sdk/xpMsg_MouseUp/) | \"10\" | The mouseup event is sent once\nwhen the mouse button is released after a drag or click. You onlyreceive this\nmessage if you accept the mouseDown message. Parameter one points to a mouse\nstatestructure.Dispatching: DirectParam 1: A pointer to\nan[XPMouseState_t](/sdk/XPMouseState_t/)containing the mouse status. |\n| [xpMsg_Reshape](/sdk/xpMsg_Reshape/) | \"11\" | Your geometry or a child's\ngeometry is being changed.Dispatching: Up chainParam 1: The widget ID of the\noriginal reshaped target.Param 2: A pointer to\na[XPWidgetGeometryChange_t](/sdk/XPWidgetGeometryChange_t/)struct describing the\nchange. |\n| [xpMsg_ExposedChanged](/sdk/xpMsg_ExposedChanged/) | \"12\" | Your exposed area\nhas changed.Dispatching: Direct |\n| [xpMsg_AcceptChild](/sdk/xpMsg_AcceptChild/) | \"13\" | A child has been added\nto you. The child's ID is passed in parameter one.Dispatching: DirectParam 1:\nThe Widget ID of the child being added. |\n| [xpMsg_LoseChild](/sdk/xpMsg_LoseChild/) | \"14\" | A child has been removed\nfrom you. The child's ID is passed in parameter one.Dispatching: DirectParam 1:\nThe Widget ID of the child being removed. |\n| [xpMsg_AcceptParent](/sdk/xpMsg_AcceptParent/) | \"15\" | You now have a new\nparent, or have no parent. The parent's ID is passed in, or 0 for no\nparent.Dispatching: DirectParam 1: The Widget ID of your parent |\n| [xpMsg_Shown](/sdk/xpMsg_Shown/) | \"16\" | You or a child has been shown. Note\nthat this does not include you being shown because your parentwas shown, you\nwere put in a new parent, your root was shown, etc.Dispatching: Up chainParam 1:\nThe widget ID of the shown widget. |\n| [xpMsg_Hidden](/sdk/xpMsg_Hidden/) | \"17\" | You have been hidden. See\nlimitations above.Dispatching: Up chainParam 1: The widget ID of the hidden\nwidget. |\n| [xpMsg_DescriptorChanged](/sdk/xpMsg_DescriptorChanged/) | \"18\" | Your\ndescriptor has changed.Dispatching: Direct |\n| [xpMsg_PropertyChanged](/sdk/xpMsg_PropertyChanged/) | \"19\" | A property has\nchanged. Param 1 contains the property ID.Dispatching: DirectParam 1: The\nProperty ID being changed.Param 2: The new property value |\n| [xpMsg_MouseWheel](/sdk/xpMsg_MouseWheel/) | \"20\" | The mouse wheel has\nmoved.Return 1 to consume the mouse wheel move, or 0 to pass the message to a\nparent.Dispatching: Up chainParam 1: A pointer to\nan[XPMouseState_t](/sdk/XPMouseState_t/)containing the mouse status. |\n| [xpMsg_CursorAdjust](/sdk/xpMsg_CursorAdjust/) | \"21\" | The cursor is over\nyour widget. If you consume this message, change\nthe[XPLMCursorStatus](/sdk/XPLMCursorStatus/)value to indicate the desired\nresult, with the same rules as in[XPLMDisplay](/sdk/XPLMDisplay/).h.Return 1 to\nconsume this message, 0 to pass it on.Dispatching: Up chainParam 1: A pointer to\nan[XPMouseState_t](/sdk/XPMouseState_t/)struct containing the mouse status.Param\n2: A pointer to a[XPLMCursorStatus](/sdk/XPLMCursorStatus/)- set this to the\ncursor result you desire. |\n| [xpMsg_UserStart](/sdk/xpMsg_UserStart/) | \"10000\" | NOTE: Message IDs 1000 -\n9999 are allocated to the standard widget classes provided with the librarywith\n1000 - 1099 for widget class 0, 1100 - 1199 for widget class 1, etc. Message IDs\n10,000 andbeyond are for plugin use. |\n\n## WIDGET CALLBACK FUNCTION\n\n### [XPWidgetFunc_t](/sdk/XPWidgetFunc_t/)\n\n```cpp\ntypedef int (* XPWidgetFunc_t)(\n                         XPWidgetMessage      inMessage,\n                         XPWidgetID           inWidget,\n                         intptr_t             inParam1,\n                         intptr_t             inParam2);\n\n```\n\nThis function defines your custom widget’s behavior. It will be called by the\nwidgets library to send messages to your widget. The message and widget ID are\npassed in, as well as two pointer-width signed parameters whose meaning varies\nwith the message. Return 1 to indicate that you have processed the message, 0 to\nindicate that you have not. For any message that is not understood, return 0.",
      "own_functions": [
        "XPWidgetPropertyID",
        "XPDispatchMode",
        "XPWidgetMessage"
      ],
      "processing_timestamp": "2025-06-25T20:39:23.176700+00:00",
      "title": "XPWidgetDefs | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPWidgetDefs/"
    },
    "https://developer.x-plane.com/sdk/XPWidgetFunc_t/": {
      "api_signatures": [],
      "category": {
        "category": "Widget_System",
        "module": "Widget System",
        "url": "https://developer.x-plane.com/sdk/XPWidgetFunc_t/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"callback\"><h3 class=\"sdk-api-callback\" id=\"XPWidgetFunc_t\"><a href=\"/sdk/XPWidgetFunc_t/\">XPWidgetFunc_t</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>typedef int (* <a href=\"/sdk/XPWidgetFunc_t/\">XPWidgetFunc_t</a>)(\n                         <a href=\"/sdk/XPWidgetMessage/\">XPWidgetMessage</a>      inMessage,\n                         <a href=\"/sdk/XPWidgetID/\">XPWidgetID</a>           inWidget,\n                         intptr_t             inParam1,\n                         intptr_t             inParam2);\n</code></pre><p>This function defines your custom widget’s behavior. It will be called by the widgets library to send messages to your widget. The message and widget ID are passed in, as well as two pointer-width signed parameters whose meaning varies with the message. Return 1 to indicate that you have processed the message, 0 to indicate that you have not. For any message that is not understood, return 0.</p></div></div></article>",
      "code_examples": [
        {
          "char_count": 187,
          "code": "typedef int (*XPWidgetFunc_t)(XPWidgetMessageinMessage,XPWidgetIDinWidget,\n                         intptr_t             inParam1,\n                         intptr_t             inParam2);",
          "context": "XPWidgetFunc_t",
          "id": "example_0",
          "language": "c",
          "line_count": 3,
          "type": "snippet"
        }
      ],
      "cross_references": [
        "XPWidgetMessage"
      ],
      "markdown": "### [XPWidgetFunc_t](/sdk/XPWidgetFunc_t/)\n\n```cpp\ntypedef int (* XPWidgetFunc_t)(\n                         XPWidgetMessage      inMessage,\n                         XPWidgetID           inWidget,\n                         intptr_t             inParam1,\n                         intptr_t             inParam2);\n\n```\n\nThis function defines your custom widget’s behavior. It will be called by the\nwidgets library to send messages to your widget. The message and widget ID are\npassed in, as well as two pointer-width signed parameters whose meaning varies\nwith the message. Return 1 to indicate that you have processed the message, 0 to\nindicate that you have not. For any message that is not understood, return 0.",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:23.182699+00:00",
      "title": "XPWidgetFunc_t | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPWidgetFunc_t/"
    },
    "https://developer.x-plane.com/sdk/XPWidgetGeometryChange_t/": {
      "api_signatures": [],
      "category": {
        "category": "Widget_System",
        "module": "Widget System",
        "url": "https://developer.x-plane.com/sdk/XPWidgetGeometryChange_t/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"struct\"><h3 class=\"sdk-api-struct\" id=\"XPWidgetGeometryChange_t\"><a href=\"/sdk/XPWidgetGeometryChange_t/\">XPWidgetGeometryChange_t</a></h3><p>This structure contains the deltas for your widget’s geometry when it changes.</p><pre class=\"language-cpp\" data-manual=\"true\"><code>typedef struct {\n     int                       dx;\n     // +Y = the widget moved up\n     int                       dy;\n     int                       dwidth;\n     int                       dheight;\n} <a href=\"/sdk/XPWidgetGeometryChange_t/\">XPWidgetGeometryChange_t</a>;</code></pre></div></div></article>",
      "code_examples": [
        {
          "char_count": 225,
          "code": "typedef struct {\n     int                       dx;\n     // +Y = the widget moved up\n     int                       dy;\n     int                       dwidth;\n     int                       dheight;\n}XPWidgetGeometryChange_t;",
          "context": "This structure contains the deltas for your widget’s geometry when it changes.",
          "id": "example_0",
          "language": "c",
          "line_count": 7,
          "type": "snippet"
        }
      ],
      "cross_references": [],
      "markdown": "### [XPWidgetGeometryChange_t](/sdk/XPWidgetGeometryChange_t/)\n\nThis structure contains the deltas for your widget’s geometry when it changes.\n\n```cpp\ntypedef struct {\n     int                       dx;\n     // +Y = the widget moved up\n     int                       dy;\n     int                       dwidth;\n     int                       dheight;\n} XPWidgetGeometryChange_t;\n```",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:23.183701+00:00",
      "title": "XPWidgetGeometryChange_t | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPWidgetGeometryChange_t/"
    },
    "https://developer.x-plane.com/sdk/XPWidgetID/": {
      "api_signatures": [],
      "category": {
        "category": "Widget_System",
        "module": "Widget System",
        "url": "https://developer.x-plane.com/sdk/XPWidgetID/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"typedef\"><h3 class=\"sdk-api-type\" id=\"XPWidgetID\"><a href=\"/sdk/XPWidgetID/\">XPWidgetID</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>typedef void * <a href=\"/sdk/XPWidgetID/\">XPWidgetID</a>;</code></pre><p>A Widget ID is an opaque unique non-zero handle identifying your widget. Use 0 to specify “no widget”. This type is defined as wide enough to hold a pointer. You receive a widget ID when you create a new widget and then use that widget ID to further refer to the widget.</p></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "### [XPWidgetID](/sdk/XPWidgetID/)\n\n```cpp\ntypedef void * XPWidgetID;\n```\n\nA Widget ID is an opaque unique non-zero handle identifying your widget. Use 0\nto specify “no widget”. This type is defined as wide enough to hold a pointer.\nYou receive a widget ID when you create a new widget and then use that widget ID\nto further refer to the widget.",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:23.185699+00:00",
      "title": "XPWidgetID | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPWidgetID/"
    },
    "https://developer.x-plane.com/sdk/XPWidgetMessage/": {
      "api_signatures": [
        {
          "name": "XPWidgetMessage",
          "type": "enum",
          "values": [
            {
              "description": "No message, should not be sent.",
              "name": "xpMsg_None",
              "value": "\"0\""
            },
            {
              "description": "The create message is sent once per widget that is created with your widget function and oncefor any widget that has your widget function attached.Dispatching: DirectParam 1: 1 if you are being added as a subclass, 0 if the widget is first being created.",
              "name": "xpMsg_Create",
              "value": "\"1\""
            },
            {
              "description": "The destroy message is sent once for each message that is destroyed that has your widget function.Dispatching: Direct for allParam 1: 1 if being deleted by a recursive delete to the parent, 0 for explicit deletion.",
              "name": "xpMsg_Destroy",
              "value": "\"2\""
            },
            {
              "description": "The paint message is sent to your widget to draw itself. The paint message is the bare-bonesmessage; in response you must draw yourself, draw your children, set up clipping and culling,check for visibility, etc. If you don't want to do all of this, ignore the paint message anda draw message (see below) will be sent to you.Dispatching: Direct",
              "name": "xpMsg_Paint",
              "value": "\"3\""
            },
            {
              "description": "The draw message is sent to your widget when it is time to draw yourself. OpenGL will be set upto draw in 2-d global screen coordinates, but you should use the XPLM to set up OpenGL state.Dispatching: Direct",
              "name": "xpMsg_Draw",
              "value": "\"4\""
            },
            {
              "description": "The key press message is sent once per key that is pressed. The first parameter is the type of keycode (integer or char) and the second is the code itself. By handling this event, you consume thekey stroke.Handling this message 'consumes' the keystroke; not handling it passes it to your parent widget.Dispatching: Up ChainParam 1: A pointer to anXPKeyState_tstructure with the keystroke.",
              "name": "xpMsg_KeyPress",
              "value": "\"5\""
            },
            {
              "description": "Keyboard focus is being given to you. By handling this message you accept keyboard focus. Thefirst parameter will be one if a child of yours gave up focus to you, 0 if someone set focus onyou explicitly.Handling this message accepts focus; not handling refuses focus.Dispatching: directParam 1: 1 if you are gaining focus because your child is giving it up, 0 if someone is explicitlygiving you focus.",
              "name": "xpMsg_KeyTakeFocus",
              "value": "\"6\""
            },
            {
              "description": "Keyboard focus is being taken away from you. The first parameter will be 1 if you are losingfocus because another widget is taking it, or 0 if someone called the API to make you lose focusexplicitly.Dispatching: DirectParam 1: 1 if focus is being taken by another widget, 0 if code requested to remove focus.",
              "name": "xpMsg_KeyLoseFocus",
              "value": "\"7\""
            },
            {
              "description": "You receive one mousedown event per click with a mouse-state structure pointed to by parameter 1.By accepting this you eat the click, otherwise your parent gets it. You will not receive drag andmouse up messages if you do not accept the down message.Handling this message consumes the mouse click, not handling it passes it to the next widget.You can act 'transparent' as a window by never handling moues clicks to certain areas.Dispatching: Up chain NOTE: Technically this is direct dispatched, but the widgets library will shipit to each widget until one consumes the click, making it effectively \"up chain\".Param 1: A pointer to anXPMouseState_tcontaining the mouse status.",
              "name": "xpMsg_MouseDown",
              "value": "\"8\""
            },
            {
              "description": "You receive a series of mouse drag messages (typically one per frame in the sim) as the mouse ismoved once you have accepted a mouse down message. Parameter one points to a mouse-state structuredescribing the mouse location. You will continue to receive these until the mouse button isreleased.You may receive multiple mouse state messages with the same mouse position. You will receive mousedrag events even if the mouse is dragged out of your current or original bounds at the time of themouse down.Dispatching: DirectParam 1: A pointer to anXPMouseState_tcontaining the mouse status.",
              "name": "xpMsg_MouseDrag",
              "value": "\"9\""
            },
            {
              "description": "The mouseup event is sent once when the mouse button is released after a drag or click. You onlyreceive this message if you accept the mouseDown message. Parameter one points to a mouse statestructure.Dispatching: DirectParam 1: A pointer to anXPMouseState_tcontaining the mouse status.",
              "name": "xpMsg_MouseUp",
              "value": "\"10\""
            },
            {
              "description": "Your geometry or a child's geometry is being changed.Dispatching: Up chainParam 1: The widget ID of the original reshaped target.Param 2: A pointer to aXPWidgetGeometryChange_tstruct describing the change.",
              "name": "xpMsg_Reshape",
              "value": "\"11\""
            },
            {
              "description": "Your exposed area has changed.Dispatching: Direct",
              "name": "xpMsg_ExposedChanged",
              "value": "\"12\""
            },
            {
              "description": "A child has been added to you. The child's ID is passed in parameter one.Dispatching: DirectParam 1: The Widget ID of the child being added.",
              "name": "xpMsg_AcceptChild",
              "value": "\"13\""
            },
            {
              "description": "A child has been removed from you. The child's ID is passed in parameter one.Dispatching: DirectParam 1: The Widget ID of the child being removed.",
              "name": "xpMsg_LoseChild",
              "value": "\"14\""
            },
            {
              "description": "You now have a new parent, or have no parent. The parent's ID is passed in, or 0 for no parent.Dispatching: DirectParam 1: The Widget ID of your parent",
              "name": "xpMsg_AcceptParent",
              "value": "\"15\""
            },
            {
              "description": "You or a child has been shown. Note that this does not include you being shown because your parentwas shown, you were put in a new parent, your root was shown, etc.Dispatching: Up chainParam 1: The widget ID of the shown widget.",
              "name": "xpMsg_Shown",
              "value": "\"16\""
            },
            {
              "description": "You have been hidden. See limitations above.Dispatching: Up chainParam 1: The widget ID of the hidden widget.",
              "name": "xpMsg_Hidden",
              "value": "\"17\""
            },
            {
              "description": "Your descriptor has changed.Dispatching: Direct",
              "name": "xpMsg_DescriptorChanged",
              "value": "\"18\""
            },
            {
              "description": "A property has changed. Param 1 contains the property ID.Dispatching: DirectParam 1: The Property ID being changed.Param 2: The new property value",
              "name": "xpMsg_PropertyChanged",
              "value": "\"19\""
            },
            {
              "description": "The mouse wheel has moved.Return 1 to consume the mouse wheel move, or 0 to pass the message to a parent.Dispatching: Up chainParam 1: A pointer to anXPMouseState_tcontaining the mouse status.",
              "name": "xpMsg_MouseWheel",
              "value": "\"20\""
            },
            {
              "description": "The cursor is over your widget. If you consume this message, change theXPLMCursorStatusvalue to indicate the desired result, with the same rules as inXPLMDisplay.h.Return 1 to consume this message, 0 to pass it on.Dispatching: Up chainParam 1: A pointer to anXPMouseState_tstruct containing the mouse status.Param 2: A pointer to aXPLMCursorStatus- set this to the cursor result you desire.",
              "name": "xpMsg_CursorAdjust",
              "value": "\"21\""
            },
            {
              "description": "NOTE: Message IDs 1000 - 9999 are allocated to the standard widget classes provided with the librarywith 1000 - 1099 for widget class 0, 1100 - 1199 for widget class 1, etc. Message IDs 10,000 andbeyond are for plugin use.",
              "name": "xpMsg_UserStart",
              "value": "\"10000\""
            }
          ]
        }
      ],
      "category": {
        "category": "XPLM_Plugin",
        "module": "Xplm Plugin",
        "url": "https://developer.x-plane.com/sdk/XPWidgetMessage/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enum\"><h3 class=\"sdk-api-enum\" id=\"XPWidgetMessage\"><a href=\"/sdk/XPWidgetMessage/\">XPWidgetMessage</a></h3><p>Widgets receive 32-bit messages indicating what action is to be taken or notifications of events. The list of messages may be expanded.</p><p><div class=\"enumitem\"><table><thead><tr><th>Name</th><th>Value</th><th>Description</th></tr></thead><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpMsg_None\"><a href=\"/sdk/xpMsg_None/\">xpMsg_None</a></td><td>\"0\"</td><td>No message, should not be sent.</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpMsg_Create\"><a href=\"/sdk/xpMsg_Create/\">xpMsg_Create</a></td><td>\"1\"</td><td>The create message is sent once per widget that is created with your widget function and oncefor any widget that has your widget function attached.Dispatching: DirectParam 1: 1 if you are being added as a subclass, 0 if the widget is first being created.</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpMsg_Destroy\"><a href=\"/sdk/xpMsg_Destroy/\">xpMsg_Destroy</a></td><td>\"2\"</td><td>The destroy message is sent once for each message that is destroyed that has your widget function.Dispatching: Direct for allParam 1: 1 if being deleted by a recursive delete to the parent, 0 for explicit deletion.</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpMsg_Paint\"><a href=\"/sdk/xpMsg_Paint/\">xpMsg_Paint</a></td><td>\"3\"</td><td>The paint message is sent to your widget to draw itself. The paint message is the bare-bonesmessage; in response you must draw yourself, draw your children, set up clipping and culling,check for visibility, etc. If you don't want to do all of this, ignore the paint message anda draw message (see below) will be sent to you.Dispatching: Direct</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpMsg_Draw\"><a href=\"/sdk/xpMsg_Draw/\">xpMsg_Draw</a></td><td>\"4\"</td><td>The draw message is sent to your widget when it is time to draw yourself. OpenGL will be set upto draw in 2-d global screen coordinates, but you should use the XPLM to set up OpenGL state.Dispatching: Direct</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpMsg_KeyPress\"><a href=\"/sdk/xpMsg_KeyPress/\">xpMsg_KeyPress</a></td><td>\"5\"</td><td>The key press message is sent once per key that is pressed. The first parameter is the type of keycode (integer or char) and the second is the code itself. By handling this event, you consume thekey stroke.Handling this message 'consumes' the keystroke; not handling it passes it to your parent widget.Dispatching: Up ChainParam 1: A pointer to an<a href=\"/sdk/XPKeyState_t/\">XPKeyState_t</a>structure with the keystroke.</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpMsg_KeyTakeFocus\"><a href=\"/sdk/xpMsg_KeyTakeFocus/\">xpMsg_KeyTakeFocus</a></td><td>\"6\"</td><td>Keyboard focus is being given to you. By handling this message you accept keyboard focus. Thefirst parameter will be one if a child of yours gave up focus to you, 0 if someone set focus onyou explicitly.Handling this message accepts focus; not handling refuses focus.Dispatching: directParam 1: 1 if you are gaining focus because your child is giving it up, 0 if someone is explicitlygiving you focus.</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpMsg_KeyLoseFocus\"><a href=\"/sdk/xpMsg_KeyLoseFocus/\">xpMsg_KeyLoseFocus</a></td><td>\"7\"</td><td>Keyboard focus is being taken away from you. The first parameter will be 1 if you are losingfocus because another widget is taking it, or 0 if someone called the API to make you lose focusexplicitly.Dispatching: DirectParam 1: 1 if focus is being taken by another widget, 0 if code requested to remove focus.</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpMsg_MouseDown\"><a href=\"/sdk/xpMsg_MouseDown/\">xpMsg_MouseDown</a></td><td>\"8\"</td><td>You receive one mousedown event per click with a mouse-state structure pointed to by parameter 1.By accepting this you eat the click, otherwise your parent gets it. You will not receive drag andmouse up messages if you do not accept the down message.Handling this message consumes the mouse click, not handling it passes it to the next widget.You can act 'transparent' as a window by never handling moues clicks to certain areas.Dispatching: Up chain NOTE: Technically this is direct dispatched, but the widgets library will shipit to each widget until one consumes the click, making it effectively \"up chain\".Param 1: A pointer to an<a href=\"/sdk/XPMouseState_t/\">XPMouseState_t</a>containing the mouse status.</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpMsg_MouseDrag\"><a href=\"/sdk/xpMsg_MouseDrag/\">xpMsg_MouseDrag</a></td><td>\"9\"</td><td>You receive a series of mouse drag messages (typically one per frame in the sim) as the mouse ismoved once you have accepted a mouse down message. Parameter one points to a mouse-state structuredescribing the mouse location. You will continue to receive these until the mouse button isreleased.You may receive multiple mouse state messages with the same mouse position. You will receive mousedrag events even if the mouse is dragged out of your current or original bounds at the time of themouse down.Dispatching: DirectParam 1: A pointer to an<a href=\"/sdk/XPMouseState_t/\">XPMouseState_t</a>containing the mouse status.</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpMsg_MouseUp\"><a href=\"/sdk/xpMsg_MouseUp/\">xpMsg_MouseUp</a></td><td>\"10\"</td><td>The mouseup event is sent once when the mouse button is released after a drag or click. You onlyreceive this message if you accept the mouseDown message. Parameter one points to a mouse statestructure.Dispatching: DirectParam 1: A pointer to an<a href=\"/sdk/XPMouseState_t/\">XPMouseState_t</a>containing the mouse status.</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpMsg_Reshape\"><a href=\"/sdk/xpMsg_Reshape/\">xpMsg_Reshape</a></td><td>\"11\"</td><td>Your geometry or a child's geometry is being changed.Dispatching: Up chainParam 1: The widget ID of the original reshaped target.Param 2: A pointer to a<a href=\"/sdk/XPWidgetGeometryChange_t/\">XPWidgetGeometryChange_t</a>struct describing the change.</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpMsg_ExposedChanged\"><a href=\"/sdk/xpMsg_ExposedChanged/\">xpMsg_ExposedChanged</a></td><td>\"12\"</td><td>Your exposed area has changed.Dispatching: Direct</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpMsg_AcceptChild\"><a href=\"/sdk/xpMsg_AcceptChild/\">xpMsg_AcceptChild</a></td><td>\"13\"</td><td>A child has been added to you. The child's ID is passed in parameter one.Dispatching: DirectParam 1: The Widget ID of the child being added.</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpMsg_LoseChild\"><a href=\"/sdk/xpMsg_LoseChild/\">xpMsg_LoseChild</a></td><td>\"14\"</td><td>A child has been removed from you. The child's ID is passed in parameter one.Dispatching: DirectParam 1: The Widget ID of the child being removed.</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpMsg_AcceptParent\"><a href=\"/sdk/xpMsg_AcceptParent/\">xpMsg_AcceptParent</a></td><td>\"15\"</td><td>You now have a new parent, or have no parent. The parent's ID is passed in, or 0 for no parent.Dispatching: DirectParam 1: The Widget ID of your parent</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpMsg_Shown\"><a href=\"/sdk/xpMsg_Shown/\">xpMsg_Shown</a></td><td>\"16\"</td><td>You or a child has been shown. Note that this does not include you being shown because your parentwas shown, you were put in a new parent, your root was shown, etc.Dispatching: Up chainParam 1: The widget ID of the shown widget.</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpMsg_Hidden\"><a href=\"/sdk/xpMsg_Hidden/\">xpMsg_Hidden</a></td><td>\"17\"</td><td>You have been hidden. See limitations above.Dispatching: Up chainParam 1: The widget ID of the hidden widget.</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpMsg_DescriptorChanged\"><a href=\"/sdk/xpMsg_DescriptorChanged/\">xpMsg_DescriptorChanged</a></td><td>\"18\"</td><td>Your descriptor has changed.Dispatching: Direct</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpMsg_PropertyChanged\"><a href=\"/sdk/xpMsg_PropertyChanged/\">xpMsg_PropertyChanged</a></td><td>\"19\"</td><td>A property has changed. Param 1 contains the property ID.Dispatching: DirectParam 1: The Property ID being changed.Param 2: The new property value</td></tr><tr class=\"enumitem XPLM200\"><td class=\"sdk-api-enum-item\" id=\"xpMsg_MouseWheel\"><a href=\"/sdk/xpMsg_MouseWheel/\">xpMsg_MouseWheel</a></td><td>\"20\"</td><td>The mouse wheel has moved.Return 1 to consume the mouse wheel move, or 0 to pass the message to a parent.Dispatching: Up chainParam 1: A pointer to an<a href=\"/sdk/XPMouseState_t/\">XPMouseState_t</a>containing the mouse status.</td></tr><tr class=\"enumitem XPLM200\"><td class=\"sdk-api-enum-item\" id=\"xpMsg_CursorAdjust\"><a href=\"/sdk/xpMsg_CursorAdjust/\">xpMsg_CursorAdjust</a></td><td>\"21\"</td><td>The cursor is over your widget. If you consume this message, change the<a href=\"/sdk/XPLMCursorStatus/\">XPLMCursorStatus</a>value to indicate the desired result, with the same rules as in<a href=\"/sdk/XPLMDisplay/\">XPLMDisplay</a>.h.Return 1 to consume this message, 0 to pass it on.Dispatching: Up chainParam 1: A pointer to an<a href=\"/sdk/XPMouseState_t/\">XPMouseState_t</a>struct containing the mouse status.Param 2: A pointer to a<a href=\"/sdk/XPLMCursorStatus/\">XPLMCursorStatus</a>- set this to the cursor result you desire.</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpMsg_UserStart\"><a href=\"/sdk/xpMsg_UserStart/\">xpMsg_UserStart</a></td><td>\"10000\"</td><td>NOTE: Message IDs 1000 - 9999 are allocated to the standard widget classes provided with the librarywith 1000 - 1099 for widget class 0, 1100 - 1199 for widget class 1, etc. Message IDs 10,000 andbeyond are for plugin use.</td></tr></table></div></p></div></div></article>",
      "code_examples": [],
      "cross_references": [
        "XPLMCursorStatus",
        "XPLMDisplay"
      ],
      "markdown": "### [XPWidgetMessage](/sdk/XPWidgetMessage/)\n\nWidgets receive 32-bit messages indicating what action is to be taken or\nnotifications of events. The list of messages may be expanded.\n\n| Name | Value | Description |\n| --- | --- | --- |\n| [xpMsg_None](/sdk/xpMsg_None/) | \"0\" | No message, should not be sent. |\n| [xpMsg_Create](/sdk/xpMsg_Create/) | \"1\" | The create message is sent once per\nwidget that is created with your widget function and oncefor any widget that has\nyour widget function attached.Dispatching: DirectParam 1: 1 if you are being\nadded as a subclass, 0 if the widget is first being created. |\n| [xpMsg_Destroy](/sdk/xpMsg_Destroy/) | \"2\" | The destroy message is sent once\nfor each message that is destroyed that has your widget function.Dispatching:\nDirect for allParam 1: 1 if being deleted by a recursive delete to the parent, 0\nfor explicit deletion. |\n| [xpMsg_Paint](/sdk/xpMsg_Paint/) | \"3\" | The paint message is sent to your\nwidget to draw itself. The paint message is the bare-bonesmessage; in response\nyou must draw yourself, draw your children, set up clipping and culling,check\nfor visibility, etc. If you don't want to do all of this, ignore the paint\nmessage anda draw message (see below) will be sent to you.Dispatching: Direct |\n| [xpMsg_Draw](/sdk/xpMsg_Draw/) | \"4\" | The draw message is sent to your widget\nwhen it is time to draw yourself. OpenGL will be set upto draw in 2-d global\nscreen coordinates, but you should use the XPLM to set up OpenGL\nstate.Dispatching: Direct |\n| [xpMsg_KeyPress](/sdk/xpMsg_KeyPress/) | \"5\" | The key press message is sent\nonce per key that is pressed. The first parameter is the type of keycode\n(integer or char) and the second is the code itself. By handling this event, you\nconsume thekey stroke.Handling this message 'consumes' the keystroke; not\nhandling it passes it to your parent widget.Dispatching: Up ChainParam 1: A\npointer to an[XPKeyState_t](/sdk/XPKeyState_t/)structure with the keystroke. |\n| [xpMsg_KeyTakeFocus](/sdk/xpMsg_KeyTakeFocus/) | \"6\" | Keyboard focus is being\ngiven to you. By handling this message you accept keyboard focus. Thefirst\nparameter will be one if a child of yours gave up focus to you, 0 if someone set\nfocus onyou explicitly.Handling this message accepts focus; not handling refuses\nfocus.Dispatching: directParam 1: 1 if you are gaining focus because your child\nis giving it up, 0 if someone is explicitlygiving you focus. |\n| [xpMsg_KeyLoseFocus](/sdk/xpMsg_KeyLoseFocus/) | \"7\" | Keyboard focus is being\ntaken away from you. The first parameter will be 1 if you are losingfocus\nbecause another widget is taking it, or 0 if someone called the API to make you\nlose focusexplicitly.Dispatching: DirectParam 1: 1 if focus is being taken by\nanother widget, 0 if code requested to remove focus. |\n| [xpMsg_MouseDown](/sdk/xpMsg_MouseDown/) | \"8\" | You receive one mousedown\nevent per click with a mouse-state structure pointed to by parameter 1.By\naccepting this you eat the click, otherwise your parent gets it. You will not\nreceive drag andmouse up messages if you do not accept the down message.Handling\nthis message consumes the mouse click, not handling it passes it to the next\nwidget.You can act 'transparent' as a window by never handling moues clicks to\ncertain areas.Dispatching: Up chain NOTE: Technically this is direct dispatched,\nbut the widgets library will shipit to each widget until one consumes the click,\nmaking it effectively \"up chain\".Param 1: A pointer to\nan[XPMouseState_t](/sdk/XPMouseState_t/)containing the mouse status. |\n| [xpMsg_MouseDrag](/sdk/xpMsg_MouseDrag/) | \"9\" | You receive a series of mouse\ndrag messages (typically one per frame in the sim) as the mouse ismoved once you\nhave accepted a mouse down message. Parameter one points to a mouse-state\nstructuredescribing the mouse location. You will continue to receive these until\nthe mouse button isreleased.You may receive multiple mouse state messages with\nthe same mouse position. You will receive mousedrag events even if the mouse is\ndragged out of your current or original bounds at the time of themouse\ndown.Dispatching: DirectParam 1: A pointer to\nan[XPMouseState_t](/sdk/XPMouseState_t/)containing the mouse status. |\n| [xpMsg_MouseUp](/sdk/xpMsg_MouseUp/) | \"10\" | The mouseup event is sent once\nwhen the mouse button is released after a drag or click. You onlyreceive this\nmessage if you accept the mouseDown message. Parameter one points to a mouse\nstatestructure.Dispatching: DirectParam 1: A pointer to\nan[XPMouseState_t](/sdk/XPMouseState_t/)containing the mouse status. |\n| [xpMsg_Reshape](/sdk/xpMsg_Reshape/) | \"11\" | Your geometry or a child's\ngeometry is being changed.Dispatching: Up chainParam 1: The widget ID of the\noriginal reshaped target.Param 2: A pointer to\na[XPWidgetGeometryChange_t](/sdk/XPWidgetGeometryChange_t/)struct describing the\nchange. |\n| [xpMsg_ExposedChanged](/sdk/xpMsg_ExposedChanged/) | \"12\" | Your exposed area\nhas changed.Dispatching: Direct |\n| [xpMsg_AcceptChild](/sdk/xpMsg_AcceptChild/) | \"13\" | A child has been added\nto you. The child's ID is passed in parameter one.Dispatching: DirectParam 1:\nThe Widget ID of the child being added. |\n| [xpMsg_LoseChild](/sdk/xpMsg_LoseChild/) | \"14\" | A child has been removed\nfrom you. The child's ID is passed in parameter one.Dispatching: DirectParam 1:\nThe Widget ID of the child being removed. |\n| [xpMsg_AcceptParent](/sdk/xpMsg_AcceptParent/) | \"15\" | You now have a new\nparent, or have no parent. The parent's ID is passed in, or 0 for no\nparent.Dispatching: DirectParam 1: The Widget ID of your parent |\n| [xpMsg_Shown](/sdk/xpMsg_Shown/) | \"16\" | You or a child has been shown. Note\nthat this does not include you being shown because your parentwas shown, you\nwere put in a new parent, your root was shown, etc.Dispatching: Up chainParam 1:\nThe widget ID of the shown widget. |\n| [xpMsg_Hidden](/sdk/xpMsg_Hidden/) | \"17\" | You have been hidden. See\nlimitations above.Dispatching: Up chainParam 1: The widget ID of the hidden\nwidget. |\n| [xpMsg_DescriptorChanged](/sdk/xpMsg_DescriptorChanged/) | \"18\" | Your\ndescriptor has changed.Dispatching: Direct |\n| [xpMsg_PropertyChanged](/sdk/xpMsg_PropertyChanged/) | \"19\" | A property has\nchanged. Param 1 contains the property ID.Dispatching: DirectParam 1: The\nProperty ID being changed.Param 2: The new property value |\n| [xpMsg_MouseWheel](/sdk/xpMsg_MouseWheel/) | \"20\" | The mouse wheel has\nmoved.Return 1 to consume the mouse wheel move, or 0 to pass the message to a\nparent.Dispatching: Up chainParam 1: A pointer to\nan[XPMouseState_t](/sdk/XPMouseState_t/)containing the mouse status. |\n| [xpMsg_CursorAdjust](/sdk/xpMsg_CursorAdjust/) | \"21\" | The cursor is over\nyour widget. If you consume this message, change\nthe[XPLMCursorStatus](/sdk/XPLMCursorStatus/)value to indicate the desired\nresult, with the same rules as in[XPLMDisplay](/sdk/XPLMDisplay/).h.Return 1 to\nconsume this message, 0 to pass it on.Dispatching: Up chainParam 1: A pointer to\nan[XPMouseState_t](/sdk/XPMouseState_t/)struct containing the mouse status.Param\n2: A pointer to a[XPLMCursorStatus](/sdk/XPLMCursorStatus/)- set this to the\ncursor result you desire. |\n| [xpMsg_UserStart](/sdk/xpMsg_UserStart/) | \"10000\" | NOTE: Message IDs 1000 -\n9999 are allocated to the standard widget classes provided with the librarywith\n1000 - 1099 for widget class 0, 1100 - 1199 for widget class 1, etc. Message IDs\n10,000 andbeyond are for plugin use. |",
      "own_functions": [
        "XPWidgetMessage"
      ],
      "processing_timestamp": "2025-06-25T20:39:24.282052+00:00",
      "title": "XPWidgetMessage | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPWidgetMessage/"
    },
    "https://developer.x-plane.com/sdk/XPWidgetPropertyID/": {
      "api_signatures": [
        {
          "name": "XPWidgetPropertyID",
          "type": "enum",
          "values": [
            {
              "description": "A window's refcon is an opaque value used by client code to find other data based on it.",
              "name": "xpProperty_Refcon",
              "value": "\"0\""
            },
            {
              "description": "These properties are used by the utilities to implement dragging.",
              "name": "xpProperty_Dragging",
              "value": "\"1\""
            },
            {
              "description": "Is the widget highlighted? (For widgets that support this kind of thing.)",
              "name": "xpProperty_Hilited",
              "value": "\"4\""
            },
            {
              "description": "Is there a C++ object attached to this widget?",
              "name": "xpProperty_Object",
              "value": "\"5\""
            },
            {
              "description": "If this property is 1, the widget package will use OpenGL to restrict drawing to the Widget's exposed rectangle.",
              "name": "xpProperty_Clip",
              "value": "\"6\""
            },
            {
              "description": "Is this widget enabled (for those that have a disabled state too)?",
              "name": "xpProperty_Enabled",
              "value": "\"7\""
            },
            {
              "description": "NOTE: Property IDs 1 - 999 are reserved for the widgets library.NOTE: Property IDs 1000 - 9999 are allocated to the standard widget classes provided with the library.Properties 1000 - 1099 are for widget class 0, 1100 - 1199 for widget class 1, etc.",
              "name": "xpProperty_UserStart",
              "value": "\"10000\""
            }
          ]
        }
      ],
      "category": {
        "category": "Widget_System",
        "module": "Widget System",
        "url": "https://developer.x-plane.com/sdk/XPWidgetPropertyID/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enum\"><h3 class=\"sdk-api-enum\" id=\"XPWidgetPropertyID\"><a href=\"/sdk/XPWidgetPropertyID/\">XPWidgetPropertyID</a></h3><p>Properties are values attached to instances of your widgets. A property is identified by a 32-bit ID and its value is the width of a pointer.</p><p>Each widget instance may have a property or not have it. When you set a property on a widget for the first time, the property is added to the widget; it then stays there for the life of the widget.</p><p>Some property IDs are predefined by the widget package; you can make up your own property IDs as well.</p><p><div class=\"enumitem\"><table><thead><tr><th>Name</th><th>Value</th><th>Description</th></tr></thead><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpProperty_Refcon\"><a href=\"/sdk/xpProperty_Refcon/\">xpProperty_Refcon</a></td><td>\"0\"</td><td>A window's refcon is an opaque value used by client code to find other data based on it.</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpProperty_Dragging\"><a href=\"/sdk/xpProperty_Dragging/\">xpProperty_Dragging</a></td><td>\"1\"</td><td>These properties are used by the utilities to implement dragging.</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpProperty_DragXOff\"><a href=\"/sdk/xpProperty_DragXOff/\">xpProperty_DragXOff</a></td><td>\"2\"</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpProperty_DragYOff\"><a href=\"/sdk/xpProperty_DragYOff/\">xpProperty_DragYOff</a></td><td>\"3\"</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpProperty_Hilited\"><a href=\"/sdk/xpProperty_Hilited/\">xpProperty_Hilited</a></td><td>\"4\"</td><td>Is the widget highlighted? (For widgets that support this kind of thing.)</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpProperty_Object\"><a href=\"/sdk/xpProperty_Object/\">xpProperty_Object</a></td><td>\"5\"</td><td>Is there a C++ object attached to this widget?</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpProperty_Clip\"><a href=\"/sdk/xpProperty_Clip/\">xpProperty_Clip</a></td><td>\"6\"</td><td>If this property is 1, the widget package will use OpenGL to restrict drawing to the Widget's exposed rectangle.</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpProperty_Enabled\"><a href=\"/sdk/xpProperty_Enabled/\">xpProperty_Enabled</a></td><td>\"7\"</td><td>Is this widget enabled (for those that have a disabled state too)?</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpProperty_UserStart\"><a href=\"/sdk/xpProperty_UserStart/\">xpProperty_UserStart</a></td><td>\"10000\"</td><td>NOTE: Property IDs 1 - 999 are reserved for the widgets library.NOTE: Property IDs 1000 - 9999 are allocated to the standard widget classes provided with the library.Properties 1000 - 1099 are for widget class 0, 1100 - 1199 for widget class 1, etc.</td></tr></table></div></p></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "### [XPWidgetPropertyID](/sdk/XPWidgetPropertyID/)\n\nProperties are values attached to instances of your widgets. A property is\nidentified by a 32-bit ID and its value is the width of a pointer.\n\nEach widget instance may have a property or not have it. When you set a property\non a widget for the first time, the property is added to the widget; it then\nstays there for the life of the widget.\n\nSome property IDs are predefined by the widget package; you can make up your own\nproperty IDs as well.\n\n| Name | Value | Description |\n| --- | --- | --- |\n| [xpProperty_Refcon](/sdk/xpProperty_Refcon/) | \"0\" | A window's refcon is an\nopaque value used by client code to find other data based on it. |\n| [xpProperty_Dragging](/sdk/xpProperty_Dragging/) | \"1\" | These properties are\nused by the utilities to implement dragging. |\n| [xpProperty_DragXOff](/sdk/xpProperty_DragXOff/) | \"2\" |\n| [xpProperty_DragYOff](/sdk/xpProperty_DragYOff/) | \"3\" |\n| [xpProperty_Hilited](/sdk/xpProperty_Hilited/) | \"4\" | Is the widget\nhighlighted? (For widgets that support this kind of thing.) |\n| [xpProperty_Object](/sdk/xpProperty_Object/) | \"5\" | Is there a C++ object\nattached to this widget? |\n| [xpProperty_Clip](/sdk/xpProperty_Clip/) | \"6\" | If this property is 1, the\nwidget package will use OpenGL to restrict drawing to the Widget's exposed\nrectangle. |\n| [xpProperty_Enabled](/sdk/xpProperty_Enabled/) | \"7\" | Is this widget enabled\n(for those that have a disabled state too)? |\n| [xpProperty_UserStart](/sdk/xpProperty_UserStart/) | \"10000\" | NOTE: Property\nIDs 1 - 999 are reserved for the widgets library.NOTE: Property IDs 1000 - 9999\nare allocated to the standard widget classes provided with the\nlibrary.Properties 1000 - 1099 are for widget class 0, 1100 - 1199 for widget\nclass 1, etc. |",
      "own_functions": [
        "XPWidgetPropertyID"
      ],
      "processing_timestamp": "2025-06-25T20:39:23.193211+00:00",
      "title": "XPWidgetPropertyID | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPWidgetPropertyID/"
    },
    "https://developer.x-plane.com/sdk/XPWidgetUtils/": {
      "api_signatures": [
        {
          "description": "This function creates a series of widgets from a table (see XPCreateWidget_t above). Pass in an array of widget creation structures and an array of widget IDs that will receive each widget.",
          "name": "XPUCreateWidgets",
          "parameters": [
            {
              "full_declaration": "constXPWidgetCreate_t* inWidgetDefs",
              "name": "inWidgetDefs",
              "type": "constXPWidgetCreate_t*"
            },
            {
              "full_declaration": "int                  inCount",
              "name": "inCount",
              "type": "int"
            },
            {
              "full_declaration": "XPWidgetID*         ioWidgets",
              "name": "ioWidgets",
              "type": "XPWidgetID*"
            }
          ],
          "signature": "WIDGET_API voidXPUCreateWidgets(\n                         constXPWidgetCreate_t* inWidgetDefs,\n                         int                  inCount,XPWidgetIDinParamParent,XPWidgetID*         ioWidgets);"
        },
        {
          "description": "Simply moves a widget by an amount, +x = right, +y = up, without resizing the widget.",
          "name": "XPUMoveWidgetBy",
          "parameters": [
            {
              "full_declaration": "int                  inDeltaX",
              "name": "inDeltaX",
              "type": "int"
            },
            {
              "full_declaration": "int                  inDeltaY",
              "name": "inDeltaY",
              "type": "int"
            }
          ],
          "signature": "WIDGET_API voidXPUMoveWidgetBy(XPWidgetIDinWidget,\n                         int                  inDeltaX,\n                         int                  inDeltaY);"
        },
        {
          "description": "This function causes the widget to maintain its children in fixed position relative to itself as it is resized. Use this on the top level ‘window’ widget for your window.",
          "name": "XPUFixedLayout",
          "parameters": [
            {
              "full_declaration": "intptr_t             inParam1",
              "name": "inParam1",
              "type": "intptr_t"
            },
            {
              "full_declaration": "intptr_t             inParam2",
              "name": "inParam2",
              "type": "intptr_t"
            }
          ],
          "signature": "WIDGET_API intXPUFixedLayout(XPWidgetMessageinMessage,XPWidgetIDinWidget,\n                         intptr_t             inParam1,\n                         intptr_t             inParam2);"
        },
        {
          "description": "This causes the widget to bring its window to the foreground if it is not already. inEatClick specifies whether clicks in the background should be consumed by bringing the window to the foreground.",
          "name": "XPUSelectIfNeeded",
          "parameters": [
            {
              "full_declaration": "intptr_t             inParam1",
              "name": "inParam1",
              "type": "intptr_t"
            },
            {
              "full_declaration": "intptr_t             inParam2",
              "name": "inParam2",
              "type": "intptr_t"
            },
            {
              "full_declaration": "int                  inEatClick",
              "name": "inEatClick",
              "type": "int"
            }
          ],
          "signature": "WIDGET_API intXPUSelectIfNeeded(XPWidgetMessageinMessage,XPWidgetIDinWidget,\n                         intptr_t             inParam1,\n                         intptr_t             inParam2,\n                         int                  inEatClick);"
        },
        {
          "description": "This causes the widget to send keyboard focus back to X-Plane. This stops editing of any text fields, etc.",
          "name": "XPUDefocusKeyboard",
          "parameters": [
            {
              "full_declaration": "intptr_t             inParam1",
              "name": "inParam1",
              "type": "intptr_t"
            },
            {
              "full_declaration": "intptr_t             inParam2",
              "name": "inParam2",
              "type": "intptr_t"
            },
            {
              "full_declaration": "int                  inEatClick",
              "name": "inEatClick",
              "type": "int"
            }
          ],
          "signature": "WIDGET_API intXPUDefocusKeyboard(XPWidgetMessageinMessage,XPWidgetIDinWidget,\n                         intptr_t             inParam1,\n                         intptr_t             inParam2,\n                         int                  inEatClick);"
        },
        {
          "description": "XPUDragWidgetdrags the widget in response to mouse clicks. Pass in not only the event, but the global coordinates of the drag region, which might be a sub-region of your widget (for example, a title bar).",
          "name": "XPUDragWidget",
          "parameters": [
            {
              "full_declaration": "intptr_t             inParam1",
              "name": "inParam1",
              "type": "intptr_t"
            },
            {
              "full_declaration": "intptr_t             inParam2",
              "name": "inParam2",
              "type": "intptr_t"
            },
            {
              "full_declaration": "int                  inLeft",
              "name": "inLeft",
              "type": "int"
            },
            {
              "full_declaration": "int                  inTop",
              "name": "inTop",
              "type": "int"
            },
            {
              "full_declaration": "int                  inRight",
              "name": "inRight",
              "type": "int"
            },
            {
              "full_declaration": "int                  inBottom",
              "name": "inBottom",
              "type": "int"
            }
          ],
          "signature": "WIDGET_API intXPUDragWidget(XPWidgetMessageinMessage,XPWidgetIDinWidget,\n                         intptr_t             inParam1,\n                         intptr_t             inParam2,\n                         int                  inLeft,\n                         int                  inTop,\n                         int                  inRight,\n                         int                  inBottom);"
        },
        {
          "name": "WIDGET_API",
          "signature": "WIDGET_API voidXPUCreateWidgets(\n                         constXPWidgetCreate_t* inWidgetDefs,\n                         int                  inCount,XPWidgetIDinParamParent,XPWidgetID*         ioWidgets);",
          "source": "code_block_extraction",
          "type": "function"
        }
      ],
      "category": {
        "category": "Widget_System",
        "module": "Widget System",
        "url": "https://developer.x-plane.com/sdk/XPWidgetUtils/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"api\"><h1 class=\"sdk-api-title\" id=\"XPWidgetUtils\"><a href=\"/sdk/XPWidgetUtils/\">XPWidgetUtils</a>API</h1><h2>USAGE NOTES</h2><p>The<a href=\"/sdk/XPWidgetUtils/\">XPWidgetUtils</a>library contains useful functions that make writing and using widgets less of a pain.</p><p>One set of functions are the widget behavior functions. These functions each add specific useful behaviors to widgets. They can be used in two manners:</p><ol><li><p>You can add a widget behavior function to a widget as a callback proc using the<a href=\"/sdk/XPAddWidgetCallback/\">XPAddWidgetCallback</a>function. The widget will gain that behavior. Remember that the last function you add has highest priority. You can use this to change or augment the behavior of an existing finished widget.</p></li><li><p>You can call a widget function from inside your own widget function. This allows you to include useful behaviors in custom-built widgets. A number of the standard widgets get their behavior from this library. To do this, call the behavior function from your function first. If it returns 1, that means it handled the event and you don’t need to; simply return 1.</p></li></ol><div class=\"component\"><h2 id=\"GENERAL UTILITIES\">GENERAL UTILITIES</h2><div class=\"struct\"><h3 class=\"sdk-api-struct\" id=\"XPWidgetCreate_t\"><a href=\"/sdk/XPWidgetCreate_t/\">XPWidgetCreate_t</a></h3><p>This structure contains all of the parameters needed to create a widget. It is used with<a href=\"/sdk/XPUCreateWidgets/\">XPUCreateWidgets</a>to create widgets in bulk from an array. All parameters correspond to those of<a href=\"/sdk/XPCreateWidget/\">XPCreateWidget</a>except for the container index.</p><p>If the container index is equal to the index of a widget in the array, the widget in the array passed to<a href=\"/sdk/XPUCreateWidgets/\">XPUCreateWidgets</a>is used as the parent of this widget. Note that if you pass an index greater than your own position in the array, the parent you are requesting will not exist yet.</p><p>If the container index is<a href=\"/sdk/NO_PARENT/\">NO_PARENT</a>, the parent widget is specified as NULL. If the container index is<a href=\"/sdk/PARAM_PARENT/\">PARAM_PARENT</a>, the widget passed into<a href=\"/sdk/XPUCreateWidgets/\">XPUCreateWidgets</a>is used.</p><pre class=\"language-cpp\" data-manual=\"true\"><code>typedef struct {\n     int                       left;\n     int                       top;\n     int                       right;\n     int                       bottom;\n     int                       visible;\n     const char *              descriptor;\n     // Whether this widget is a root widget\n     int                       isRoot;\n     // The index of the widget to be contained within, or a constant\n     int                       containerIndex;\n     <a href=\"/sdk/XPWidgetClass/\">XPWidgetClass</a>             widgetClass;\n} <a href=\"/sdk/XPWidgetCreate_t/\">XPWidgetCreate_t</a>;</code></pre></div><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"NO_PARENT\"><a href=\"/sdk/NO_PARENT/\">NO_PARENT</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/NO_PARENT/\">NO_PARENT</a>            -1</code></pre></div><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"PARAM_PARENT\"><a href=\"/sdk/PARAM_PARENT/\">PARAM_PARENT</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/PARAM_PARENT/\">PARAM_PARENT</a>         -2</code></pre></div><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPUCreateWidgets\"><a href=\"/sdk/XPUCreateWidgets/\">XPUCreateWidgets</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>WIDGET_API void       <a href=\"/sdk/XPUCreateWidgets/\">XPUCreateWidgets</a>(\n                         const <a href=\"/sdk/XPWidgetCreate_t/\">XPWidgetCreate_t</a> * inWidgetDefs,\n                         int                  inCount,\n                         <a href=\"/sdk/XPWidgetID/\">XPWidgetID</a>           inParamParent,\n                         <a href=\"/sdk/XPWidgetID/\">XPWidgetID</a> *         ioWidgets);\n</code></pre><p>This function creates a series of widgets from a table (see XPCreateWidget_t above). Pass in an array of widget creation structures and an array of widget IDs that will receive each widget.</p><p>Widget parents are specified by index into the created widget table, allowing you to create nested widget structures. You can create multiple widget trees in one table. Generally you should create widget trees from the top down.</p><p>You can also pass in a widget ID that will be used when the widget’s parent is listed as<a href=\"/sdk/PARAM_PARENT/\">PARAM_PARENT</a>; this allows you to embed widgets created with<a href=\"/sdk/XPUCreateWidgets/\">XPUCreateWidgets</a>in a widget created previously.</p></div><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPUMoveWidgetBy\"><a href=\"/sdk/XPUMoveWidgetBy/\">XPUMoveWidgetBy</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>WIDGET_API void       <a href=\"/sdk/XPUMoveWidgetBy/\">XPUMoveWidgetBy</a>(\n                         <a href=\"/sdk/XPWidgetID/\">XPWidgetID</a>           inWidget,\n                         int                  inDeltaX,\n                         int                  inDeltaY);\n</code></pre><p>Simply moves a widget by an amount, +x = right, +y = up, without resizing the widget.</p></div></div><div class=\"component\"><h2 id=\"LAYOUT MANAGERS\">LAYOUT MANAGERS</h2><p>The layout managers are widget behavior functions for handling where widgets move. Layout managers can be called from a widget function or attached to a widget later.</p><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPUFixedLayout\"><a href=\"/sdk/XPUFixedLayout/\">XPUFixedLayout</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>WIDGET_API int        <a href=\"/sdk/XPUFixedLayout/\">XPUFixedLayout</a>(\n                         <a href=\"/sdk/XPWidgetMessage/\">XPWidgetMessage</a>      inMessage,\n                         <a href=\"/sdk/XPWidgetID/\">XPWidgetID</a>           inWidget,\n                         intptr_t             inParam1,\n                         intptr_t             inParam2);\n</code></pre><p>This function causes the widget to maintain its children in fixed position relative to itself as it is resized. Use this on the top level ‘window’ widget for your window.</p></div></div><div class=\"component\"><h2 id=\"WIDGET PROC BEHAVIORS\">WIDGET PROC BEHAVIORS</h2><p>These widget behavior functions add other useful behaviors to widgets. These functions cannot be attached to a widget; they must be called from your widget function.</p><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPUSelectIfNeeded\"><a href=\"/sdk/XPUSelectIfNeeded/\">XPUSelectIfNeeded</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>WIDGET_API int        <a href=\"/sdk/XPUSelectIfNeeded/\">XPUSelectIfNeeded</a>(\n                         <a href=\"/sdk/XPWidgetMessage/\">XPWidgetMessage</a>      inMessage,\n                         <a href=\"/sdk/XPWidgetID/\">XPWidgetID</a>           inWidget,\n                         intptr_t             inParam1,\n                         intptr_t             inParam2,\n                         int                  inEatClick);\n</code></pre><p>This causes the widget to bring its window to the foreground if it is not already. inEatClick specifies whether clicks in the background should be consumed by bringing the window to the foreground.</p></div><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPUDefocusKeyboard\"><a href=\"/sdk/XPUDefocusKeyboard/\">XPUDefocusKeyboard</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>WIDGET_API int        <a href=\"/sdk/XPUDefocusKeyboard/\">XPUDefocusKeyboard</a>(\n                         <a href=\"/sdk/XPWidgetMessage/\">XPWidgetMessage</a>      inMessage,\n                         <a href=\"/sdk/XPWidgetID/\">XPWidgetID</a>           inWidget,\n                         intptr_t             inParam1,\n                         intptr_t             inParam2,\n                         int                  inEatClick);\n</code></pre><p>This causes the widget to send keyboard focus back to X-Plane. This stops editing of any text fields, etc.</p></div><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPUDragWidget\"><a href=\"/sdk/XPUDragWidget/\">XPUDragWidget</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>WIDGET_API int        <a href=\"/sdk/XPUDragWidget/\">XPUDragWidget</a>(\n                         <a href=\"/sdk/XPWidgetMessage/\">XPWidgetMessage</a>      inMessage,\n                         <a href=\"/sdk/XPWidgetID/\">XPWidgetID</a>           inWidget,\n                         intptr_t             inParam1,\n                         intptr_t             inParam2,\n                         int                  inLeft,\n                         int                  inTop,\n                         int                  inRight,\n                         int                  inBottom);\n</code></pre><p><a href=\"/sdk/XPUDragWidget/\">XPUDragWidget</a>drags the widget in response to mouse clicks. Pass in not only the event, but the global coordinates of the drag region, which might be a sub-region of your widget (for example, a title bar).</p></div></div></div></div></article>",
      "code_examples": [
        {
          "char_count": 494,
          "code": "typedef struct {\n     int                       left;\n     int                       top;\n     int                       right;\n     int                       bottom;\n     int                       visible;\n     const char *              descriptor;\n     // Whether this widget is a root widget\n     int                       isRoot;\n     // The index of the widget to be contained within, or a constant\n     int                       containerIndex;XPWidgetClasswidgetClass;\n}XPWidgetCreate_t;",
          "context": "If the container index isNO_PARENT, the parent widget is specified as NULL. If the container index isPARAM_PARENT, the widget passed intoXPUCreateWidgetsis used.",
          "id": "example_0",
          "language": "c",
          "line_count": 12,
          "type": "example"
        },
        {
          "char_count": 204,
          "code": "WIDGET_API voidXPUCreateWidgets(\n                         constXPWidgetCreate_t* inWidgetDefs,\n                         int                  inCount,XPWidgetIDinParamParent,XPWidgetID*         ioWidgets);",
          "context": "XPUCreateWidgets",
          "id": "example_3",
          "language": "c",
          "line_count": 3,
          "type": "snippet"
        },
        {
          "char_count": 163,
          "code": "WIDGET_API voidXPUMoveWidgetBy(XPWidgetIDinWidget,\n                         int                  inDeltaX,\n                         int                  inDeltaY);",
          "context": "XPUMoveWidgetBy",
          "id": "example_4",
          "language": "cpp",
          "line_count": 3,
          "type": "snippet"
        },
        {
          "char_count": 186,
          "code": "WIDGET_API intXPUFixedLayout(XPWidgetMessageinMessage,XPWidgetIDinWidget,\n                         intptr_t             inParam1,\n                         intptr_t             inParam2);",
          "context": "XPUFixedLayout",
          "id": "example_5",
          "language": "c",
          "line_count": 3,
          "type": "snippet"
        },
        {
          "char_count": 247,
          "code": "WIDGET_API intXPUSelectIfNeeded(XPWidgetMessageinMessage,XPWidgetIDinWidget,\n                         intptr_t             inParam1,\n                         intptr_t             inParam2,\n                         int                  inEatClick);",
          "context": "XPUSelectIfNeeded",
          "id": "example_6",
          "language": "c",
          "line_count": 4,
          "type": "snippet"
        },
        {
          "char_count": 248,
          "code": "WIDGET_API intXPUDefocusKeyboard(XPWidgetMessageinMessage,XPWidgetIDinWidget,\n                         intptr_t             inParam1,\n                         intptr_t             inParam2,\n                         int                  inEatClick);",
          "context": "XPUDefocusKeyboard",
          "id": "example_7",
          "language": "c",
          "line_count": 4,
          "type": "snippet"
        },
        {
          "char_count": 403,
          "code": "WIDGET_API intXPUDragWidget(XPWidgetMessageinMessage,XPWidgetIDinWidget,\n                         intptr_t             inParam1,\n                         intptr_t             inParam2,\n                         int                  inLeft,\n                         int                  inTop,\n                         int                  inRight,\n                         int                  inBottom);",
          "context": "XPUDragWidget",
          "id": "example_8",
          "language": "c",
          "line_count": 7,
          "type": "snippet"
        }
      ],
      "cross_references": [
        "XPCreateWidget",
        "XPWidgetMessage",
        "XPAddWidgetCallback"
      ],
      "markdown": "# [XPWidgetUtils](/sdk/XPWidgetUtils/)API\n\n## USAGE NOTES\n\nThe[XPWidgetUtils](/sdk/XPWidgetUtils/)library contains useful functions that\nmake writing and using widgets less of a pain.\n\nOne set of functions are the widget behavior functions. These functions each add\nspecific useful behaviors to widgets. They can be used in two manners:\n\n1. You can add a widget behavior function to a widget as a callback proc using\n   the[XPAddWidgetCallback](/sdk/XPAddWidgetCallback/)function. The widget will\n   gain that behavior. Remember that the last function you add has highest\n   priority. You can use this to change or augment the behavior of an existing\n   finished widget.\n2. You can call a widget function from inside your own widget function. This allows\n   you to include useful behaviors in custom-built widgets. A number of the\n   standard widgets get their behavior from this library. To do this, call the\n   behavior function from your function first. If it returns 1, that means it\n   handled the event and you don’t need to; simply return 1.\n\n## GENERAL UTILITIES\n\n### [XPWidgetCreate_t](/sdk/XPWidgetCreate_t/)\n\nThis structure contains all of the parameters needed to create a widget. It is\nused with[XPUCreateWidgets](/sdk/XPUCreateWidgets/)to create widgets in bulk\nfrom an array. All parameters correspond to those\nof[XPCreateWidget](/sdk/XPCreateWidget/)except for the container index.\n\nIf the container index is equal to the index of a widget in the array, the\nwidget in the array passed to[XPUCreateWidgets](/sdk/XPUCreateWidgets/)is used\nas the parent of this widget. Note that if you pass an index greater than your\nown position in the array, the parent you are requesting will not exist yet.\n\nIf the container index is[NO_PARENT](/sdk/NO_PARENT/), the parent widget is\nspecified as NULL. If the container index is[PARAM_PARENT](/sdk/PARAM_PARENT/),\nthe widget passed into[XPUCreateWidgets](/sdk/XPUCreateWidgets/)is used.\n\n```cpp\ntypedef struct {\n     int                       left;\n     int                       top;\n     int                       right;\n     int                       bottom;\n     int                       visible;\n     const char *              descriptor;\n     // Whether this widget is a root widget\n     int                       isRoot;\n     // The index of the widget to be contained within, or a constant\n     int                       containerIndex;\n     XPWidgetClass             widgetClass;\n} XPWidgetCreate_t;\n```\n\n### [NO_PARENT](/sdk/NO_PARENT/)\n\n```cpp\n#define NO_PARENT            -1\n```\n\n### [PARAM_PARENT](/sdk/PARAM_PARENT/)\n\n```cpp\n#define PARAM_PARENT         -2\n```\n\n### [XPUCreateWidgets](/sdk/XPUCreateWidgets/)\n\n```cpp\nWIDGET_API void       XPUCreateWidgets(\n                         const XPWidgetCreate_t * inWidgetDefs,\n                         int                  inCount,\n                         XPWidgetID           inParamParent,\n                         XPWidgetID *         ioWidgets);\n\n```\n\nThis function creates a series of widgets from a table (see XPCreateWidget_t\nabove). Pass in an array of widget creation structures and an array of widget\nIDs that will receive each widget.\n\nWidget parents are specified by index into the created widget table, allowing\nyou to create nested widget structures. You can create multiple widget trees in\none table. Generally you should create widget trees from the top down.\n\nYou can also pass in a widget ID that will be used when the widget’s parent is\nlisted as[PARAM_PARENT](/sdk/PARAM_PARENT/); this allows you to embed widgets\ncreated with[XPUCreateWidgets](/sdk/XPUCreateWidgets/)in a widget created\npreviously.\n\n### [XPUMoveWidgetBy](/sdk/XPUMoveWidgetBy/)\n\n```cpp\nWIDGET_API void       XPUMoveWidgetBy(\n                         XPWidgetID           inWidget,\n                         int                  inDeltaX,\n                         int                  inDeltaY);\n\n```\n\nSimply moves a widget by an amount, +x = right, +y = up, without resizing the\nwidget.\n\n## LAYOUT MANAGERS\n\nThe layout managers are widget behavior functions for handling where widgets\nmove. Layout managers can be called from a widget function or attached to a\nwidget later.\n\n### [XPUFixedLayout](/sdk/XPUFixedLayout/)\n\n```cpp\nWIDGET_API int        XPUFixedLayout(\n                         XPWidgetMessage      inMessage,\n                         XPWidgetID           inWidget,\n                         intptr_t             inParam1,\n                         intptr_t             inParam2);\n\n```\n\nThis function causes the widget to maintain its children in fixed position\nrelative to itself as it is resized. Use this on the top level ‘window’ widget\nfor your window.\n\n## WIDGET PROC BEHAVIORS\n\nThese widget behavior functions add other useful behaviors to widgets. These\nfunctions cannot be attached to a widget; they must be called from your widget\nfunction.\n\n### [XPUSelectIfNeeded](/sdk/XPUSelectIfNeeded/)\n\n```cpp\nWIDGET_API int        XPUSelectIfNeeded(\n                         XPWidgetMessage      inMessage,\n                         XPWidgetID           inWidget,\n                         intptr_t             inParam1,\n                         intptr_t             inParam2,\n                         int                  inEatClick);\n\n```\n\nThis causes the widget to bring its window to the foreground if it is not\nalready. inEatClick specifies whether clicks in the background should be\nconsumed by bringing the window to the foreground.\n\n### [XPUDefocusKeyboard](/sdk/XPUDefocusKeyboard/)\n\n```cpp\nWIDGET_API int        XPUDefocusKeyboard(\n                         XPWidgetMessage      inMessage,\n                         XPWidgetID           inWidget,\n                         intptr_t             inParam1,\n                         intptr_t             inParam2,\n                         int                  inEatClick);\n\n```\n\nThis causes the widget to send keyboard focus back to X-Plane. This stops\nediting of any text fields, etc.\n\n### [XPUDragWidget](/sdk/XPUDragWidget/)\n\n```cpp\nWIDGET_API int        XPUDragWidget(\n                         XPWidgetMessage      inMessage,\n                         XPWidgetID           inWidget,\n                         intptr_t             inParam1,\n                         intptr_t             inParam2,\n                         int                  inLeft,\n                         int                  inTop,\n                         int                  inRight,\n                         int                  inBottom);\n\n```\n\n[XPUDragWidget](/sdk/XPUDragWidget/)drags the widget in response to mouse\nclicks. Pass in not only the event, but the global coordinates of the drag\nregion, which might be a sub-region of your widget (for example, a title bar).",
      "own_functions": [
        "XPUCreateWidgets",
        "XPUMoveWidgetBy",
        "XPUFixedLayout",
        "XPUSelectIfNeeded",
        "XPUDefocusKeyboard",
        "XPUDragWidget",
        "WIDGET_API"
      ],
      "processing_timestamp": "2025-06-25T20:39:23.244265+00:00",
      "title": "XPWidgetUtils | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPWidgetUtils/"
    },
    "https://developer.x-plane.com/sdk/XPWidgets/": {
      "api_signatures": [
        {
          "description": "This function creates a new widget and returns the new widget’s ID to you. If the widget creation fails for some reason, it returns NULL. Widget creation will fail either if you pass a bad class ID or if there is not adequate memory.",
          "name": "XPCreateWidget",
          "parameters": [
            {
              "full_declaration": "int                  inLeft",
              "name": "inLeft",
              "type": "int"
            },
            {
              "full_declaration": "int                  inTop",
              "name": "inTop",
              "type": "int"
            },
            {
              "full_declaration": "int                  inRight",
              "name": "inRight",
              "type": "int"
            },
            {
              "full_declaration": "int                  inBottom",
              "name": "inBottom",
              "type": "int"
            },
            {
              "full_declaration": "int                  inVisible",
              "name": "inVisible",
              "type": "int"
            },
            {
              "full_declaration": "const char *         inDescriptor",
              "name": "inDescriptor",
              "type": "const char *"
            },
            {
              "full_declaration": "int                  inIsRoot",
              "name": "inIsRoot",
              "type": "int"
            }
          ],
          "signature": "WIDGET_APIXPWidgetIDXPCreateWidget(\n                         int                  inLeft,\n                         int                  inTop,\n                         int                  inRight,\n                         int                  inBottom,\n                         int                  inVisible,\n                         const char *         inDescriptor,\n                         int                  inIsRoot,XPWidgetIDinContainer,XPWidgetClassinClass);"
        },
        {
          "description": "This function is the same asXPCreateWidgetexcept that instead of passing a class ID, you pass your widget callback function pointer defining the widget. Use this function to define a custom widget. All parameters are the same asXPCreateWidget, except that the widget class has been replaced with the widget function.",
          "name": "XPCreateCustomWidget",
          "parameters": [
            {
              "full_declaration": "int                  inLeft",
              "name": "inLeft",
              "type": "int"
            },
            {
              "full_declaration": "int                  inTop",
              "name": "inTop",
              "type": "int"
            },
            {
              "full_declaration": "int                  inRight",
              "name": "inRight",
              "type": "int"
            },
            {
              "full_declaration": "int                  inBottom",
              "name": "inBottom",
              "type": "int"
            },
            {
              "full_declaration": "int                  inVisible",
              "name": "inVisible",
              "type": "int"
            },
            {
              "full_declaration": "const char *         inDescriptor",
              "name": "inDescriptor",
              "type": "const char *"
            },
            {
              "full_declaration": "int                  inIsRoot",
              "name": "inIsRoot",
              "type": "int"
            }
          ],
          "signature": "WIDGET_APIXPWidgetIDXPCreateCustomWidget(\n                         int                  inLeft,\n                         int                  inTop,\n                         int                  inRight,\n                         int                  inBottom,\n                         int                  inVisible,\n                         const char *         inDescriptor,\n                         int                  inIsRoot,XPWidgetIDinContainer,XPWidgetFunc_tinCallback);"
        },
        {
          "description": "This class destroys a widget. Pass in the ID of the widget to kill. If you pass 1 for inDestroyChilren, the widget’s children will be destroyed first, then this widget will be destroyed. (Furthermore, the widget’s children will be destroyed with the inDestroyChildren flag set to 1, so the destruction will recurse down the widget tree.) If you pass 0 for this flag, direct child widgets will simply end up with their parent set to 0.",
          "name": "XPDestroyWidget",
          "parameters": [
            {
              "full_declaration": "int                  inDestroyChildren",
              "name": "inDestroyChildren",
              "type": "int"
            }
          ],
          "signature": "WIDGET_API voidXPDestroyWidget(XPWidgetIDinWidget,\n                         int                  inDestroyChildren);"
        },
        {
          "description": "This sends any message to a widget. You should probably not go around simulating the predefined messages that the widgets library defines for you. You may however define custom messages for your widgets and send them with this method.",
          "name": "XPSendMessageToWidget",
          "parameters": [
            {
              "full_declaration": "intptr_t             inParam1",
              "name": "inParam1",
              "type": "intptr_t"
            },
            {
              "full_declaration": "intptr_t             inParam2",
              "name": "inParam2",
              "type": "intptr_t"
            }
          ],
          "signature": "WIDGET_API intXPSendMessageToWidget(XPWidgetIDinWidget,XPWidgetMessageinMessage,XPDispatchModeinMode,\n                         intptr_t             inParam1,\n                         intptr_t             inParam2);"
        },
        {
          "description": "This function changes which container a widget resides in. You may NOT use this function on a root widget! inSubWidget is the widget that will be moved. Pass a widget ID in inContainer to make inSubWidget be a child of inContainer. It will become the last/closest widget in the container. Pass 0 to remove the widget from any container. Any call to this other than passing the widget ID of the old parent of the affected widget will cause the widget to be removed from its old parent. Placing a widget within its own parent simply makes it the last widget.",
          "name": "XPPlaceWidgetWithin",
          "parameters": [],
          "signature": "WIDGET_API voidXPPlaceWidgetWithin(XPWidgetIDinSubWidget,XPWidgetIDinContainer);"
        },
        {
          "description": "This routine returns the number of widgets another widget contains.",
          "name": "XPCountChildWidgets",
          "parameters": [],
          "signature": "WIDGET_API intXPCountChildWidgets(XPWidgetIDinWidget);"
        },
        {
          "description": "This routine returns the widget ID of a child widget by index. Indexes are 0 based, from 0 to the number of widgets in the parentone minus one, inclusive. If the index is invalid, 0 is returned.",
          "name": "XPGetNthChildWidget",
          "parameters": [
            {
              "full_declaration": "int                  inIndex",
              "name": "inIndex",
              "type": "int"
            }
          ],
          "signature": "WIDGET_APIXPWidgetIDXPGetNthChildWidget(XPWidgetIDinWidget,\n                         int                  inIndex);"
        },
        {
          "description": "Returns the parent of a widget, or 0 if the widget has no parent. Root widgets never have parents and therefore always return 0.",
          "name": "XPGetParentWidget",
          "parameters": [],
          "signature": "WIDGET_APIXPWidgetIDXPGetParentWidget(XPWidgetIDinWidget);"
        },
        {
          "description": "This routine makes a widget visible if it is not already. Note that if a widget is not in a rooted widget hierarchy or one of its parents is not visible, it will still not be visible to the user.",
          "name": "XPShowWidget",
          "parameters": [],
          "signature": "WIDGET_API voidXPShowWidget(XPWidgetIDinWidget);"
        },
        {
          "description": "Makes a widget invisible. SeeXPShowWidgetfor considerations of when a widget might not be visible despite its own visibility state.",
          "name": "XPHideWidget",
          "parameters": [],
          "signature": "WIDGET_API voidXPHideWidget(XPWidgetIDinWidget);"
        },
        {
          "description": "This returns 1 if a widget is visible, 0 if it is not. Note that this routine takes into consideration whether a parent is invisible. Use this routine to tell if the user can see the widget.",
          "name": "XPIsWidgetVisible",
          "parameters": [],
          "signature": "WIDGET_API intXPIsWidgetVisible(XPWidgetIDinWidget);"
        },
        {
          "description": "Returns the Widget ID of the root widget that contains the passed in widget or NULL if the passed in widget is not in a rooted hierarchy.",
          "name": "XPFindRootWidget",
          "parameters": [],
          "signature": "WIDGET_APIXPWidgetIDXPFindRootWidget(XPWidgetIDinWidget);"
        },
        {
          "description": "This routine makes the specified widget be in the frontmost widget hierarchy. If this widget is a root widget, its widget hierarchy comes to front, otherwise the widget’s root is brought to the front. If this widget is not in an active widget hiearchy (e.g. there is no root widget at the top of the tree), this routine does nothing.",
          "name": "XPBringRootWidgetToFront",
          "parameters": [],
          "signature": "WIDGET_API voidXPBringRootWidgetToFront(XPWidgetIDinWidget);"
        },
        {
          "description": "This routine returns true if this widget’s hierarchy is the frontmost hierarchy. It returns false if the widget’s hierarchy is not in front, or if the widget is not in a rooted hierarchy.",
          "name": "XPIsWidgetInFront",
          "parameters": [],
          "signature": "WIDGET_API intXPIsWidgetInFront(XPWidgetIDinWidget);"
        },
        {
          "description": "This routine returns the bounding box of a widget in global coordinates. Pass NULL for any parameter you are not interested in.",
          "name": "XPGetWidgetGeometry",
          "parameters": [],
          "signature": "WIDGET_API voidXPGetWidgetGeometry(XPWidgetIDinWidget,\n                         int *                outLeft,    /* Can be NULL */\n                         int *                outTop,    /* Can be NULL */\n                         int *                outRight,    /* Can be NULL */\n                         int *                outBottom);    /* Can be NULL */"
        },
        {
          "description": "This function changes the bounding box of a widget.",
          "name": "XPSetWidgetGeometry",
          "parameters": [
            {
              "full_declaration": "int                  inLeft",
              "name": "inLeft",
              "type": "int"
            },
            {
              "full_declaration": "int                  inTop",
              "name": "inTop",
              "type": "int"
            },
            {
              "full_declaration": "int                  inRight",
              "name": "inRight",
              "type": "int"
            },
            {
              "full_declaration": "int                  inBottom",
              "name": "inBottom",
              "type": "int"
            }
          ],
          "signature": "WIDGET_API voidXPSetWidgetGeometry(XPWidgetIDinWidget,\n                         int                  inLeft,\n                         int                  inTop,\n                         int                  inRight,\n                         int                  inBottom);"
        },
        {
          "description": "Given a widget and a location, this routine returns the widget ID of the child of that widget that owns that location. If inRecursive is true then this will return a child of a child of a widget as it tries to find the deepest widget at that location. If inVisibleOnly is true, then only visible widgets are considered, otherwise all widgets are considered. The widget ID passed for inContainer will be returned if the location is in that widget but not in a child widget. 0 is returned if the location is not in the container.",
          "name": "XPGetWidgetForLocation",
          "parameters": [
            {
              "full_declaration": "int                  inXOffset",
              "name": "inXOffset",
              "type": "int"
            },
            {
              "full_declaration": "int                  inYOffset",
              "name": "inYOffset",
              "type": "int"
            },
            {
              "full_declaration": "int                  inRecursive",
              "name": "inRecursive",
              "type": "int"
            },
            {
              "full_declaration": "int                  inVisibleOnly",
              "name": "inVisibleOnly",
              "type": "int"
            }
          ],
          "signature": "WIDGET_APIXPWidgetIDXPGetWidgetForLocation(XPWidgetIDinContainer,\n                         int                  inXOffset,\n                         int                  inYOffset,\n                         int                  inRecursive,\n                         int                  inVisibleOnly);"
        },
        {
          "description": "This routine returns the bounds of the area of a widget that is completely within its parent widgets. Since a widget’s bounding box can be outside its parent, part of its area will not be eligible for mouse clicks and should not draw. UseXPGetWidgetGeometryto find out what area defines your widget’s shape, but use this routine to find out what area to actually draw into. Note that the widget library does not use OpenGL clipping to keep frame rates up, although you could use it internally.",
          "name": "XPGetWidgetExposedGeometry",
          "parameters": [],
          "signature": "WIDGET_API voidXPGetWidgetExposedGeometry(XPWidgetIDinWidgetID,\n                         int *                outLeft,    /* Can be NULL */\n                         int *                outTop,    /* Can be NULL */\n                         int *                outRight,    /* Can be NULL */\n                         int *                outBottom);    /* Can be NULL */"
        },
        {
          "description": "Every widget has a descriptor, which is a text string. What the text string is used for varies from widget to widget; for example, a push button’s text is its descriptor, a caption shows its descriptor, and a text field’s descriptor is the text being edited. In other words, the usage for the text varies from widget to widget, but this API provides a universal and convenient way to get at it. While not all UI widgets need their descriptor, many do.",
          "name": "XPSetWidgetDescriptor",
          "parameters": [
            {
              "full_declaration": "const char *         inDescriptor",
              "name": "inDescriptor",
              "type": "const char *"
            }
          ],
          "signature": "WIDGET_API voidXPSetWidgetDescriptor(XPWidgetIDinWidget,\n                         const char *         inDescriptor);"
        },
        {
          "description": "This routine returns the widget’s descriptor. Pass in the length of the buffer you are going to receive the descriptor in. The descriptor will be null terminated for you. This routine returns the length of the actual descriptor; if you pass NULL for outDescriptor, you can get the descriptor’s length without getting its text. If the length of the descriptor exceeds your buffer length, the buffer will not be null terminated (this routine has ‘strncpy’ semantics).",
          "name": "XPGetWidgetDescriptor",
          "parameters": [
            {
              "full_declaration": "char *               outDescriptor",
              "name": "outDescriptor",
              "type": "char *"
            },
            {
              "full_declaration": "int                  inMaxDescLength",
              "name": "inMaxDescLength",
              "type": "int"
            }
          ],
          "signature": "WIDGET_API intXPGetWidgetDescriptor(XPWidgetIDinWidget,\n                         char *               outDescriptor,\n                         int                  inMaxDescLength);"
        },
        {
          "description": "Returns the window (from theXPLMDisplayAPI) that backs your widget window. If you have opted in to modern windows, via a call toXPLMEnableFeature(“XPLM_USE_NATIVE_WIDGET_WINDOWS”, 1), you can use the returned window ID for display APIs likeXPLMSetWindowPositioningMode(), allowing you to pop the widget window out into a real OS window, or move it into VR.",
          "name": "XPGetWidgetUnderlyingWindow",
          "parameters": [],
          "signature": "WIDGET_APIXPLMWindowIDXPGetWidgetUnderlyingWindow(XPWidgetIDinWidget);"
        },
        {
          "description": "This function sets a widget’s property. Properties are arbitrary values associated by a widget by ID.",
          "name": "XPSetWidgetProperty",
          "parameters": [
            {
              "full_declaration": "intptr_t             inValue",
              "name": "inValue",
              "type": "intptr_t"
            }
          ],
          "signature": "WIDGET_API voidXPSetWidgetProperty(XPWidgetIDinWidget,XPWidgetPropertyIDinProperty,\n                         intptr_t             inValue);"
        },
        {
          "description": "This routine returns the value of a widget’s property, or 0 if the property is not defined. If you need to know whether the property is defined, pass a pointer to an int for inExists; the existence of that property will be returned in the int. Pass NULL for inExists if you do not need this information.",
          "name": "XPGetWidgetProperty",
          "parameters": [],
          "signature": "WIDGET_API intptr_tXPGetWidgetProperty(XPWidgetIDinWidget,XPWidgetPropertyIDinProperty,\n                         int *                inExists);    /* Can be NULL */"
        },
        {
          "description": "Controls which widget will receive keystrokes. Pass the widget ID of the widget to get the keys. Note that if the widget does not care about keystrokes, they will go to the parent widget, and if no widget cares about them, they go to X-Plane.",
          "name": "XPSetKeyboardFocus",
          "parameters": [],
          "signature": "WIDGET_APIXPWidgetIDXPSetKeyboardFocus(XPWidgetIDinWidget);"
        },
        {
          "description": "This causes the specified widget to lose focus; focus is passed to its parent, or the next parent that will accept it. This routine does nothing if this widget does not have focus.",
          "name": "XPLoseKeyboardFocus",
          "parameters": [],
          "signature": "WIDGET_API voidXPLoseKeyboardFocus(XPWidgetIDinWidget);"
        },
        {
          "description": "This routine returns the widget that has keyboard focus, or 0 if X-Plane has keyboard focus or some other plugin window that does not have widgets has focus.",
          "name": "XPGetWidgetWithFocus",
          "parameters": [],
          "signature": "WIDGET_APIXPWidgetIDXPGetWidgetWithFocus(void);"
        },
        {
          "description": "This function adds a new widget callback to a widget. This widget callback supercedes any existing ones and will receive messages first; if it does not handle messages they will go on to be handled by pre-existing widgets.",
          "name": "XPAddWidgetCallback",
          "parameters": [],
          "signature": "WIDGET_API voidXPAddWidgetCallback(XPWidgetIDinWidget,XPWidgetFunc_tinNewCallback);"
        },
        {
          "description": "Given a widget class, this function returns the callbacks that power that widget class.",
          "name": "XPGetWidgetClassFunc",
          "parameters": [],
          "signature": "WIDGET_APIXPWidgetFunc_tXPGetWidgetClassFunc(XPWidgetClassinWidgetClass);"
        },
        {
          "name": "WIDGET_API",
          "signature": "WIDGET_API voidXPDestroyWidget(XPWidgetIDinWidget,\n                         int                  inDestroyChildren);",
          "source": "code_block_extraction",
          "type": "function"
        }
      ],
      "category": {
        "category": "Widget_System",
        "module": "Widget System",
        "url": "https://developer.x-plane.com/sdk/XPWidgets/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"api\"><h1 class=\"sdk-api-title\" id=\"XPWidgets\"><a href=\"/sdk/XPWidgets/\">XPWidgets</a>API</h1><h2>THEORY OF OPERATION AND NOTES</h2><p>Widgets are persistent view ‘objects’ for X-Plane. A widget is an object referenced by its opaque handle (widget ID) and the APIs in this file. You cannot access the widget’s guts directly. Every Widget has the following intrinsic data:</p><ul><li>A bounding box defined in global screen coordinates with 0,0 in the bottom left and +y = up, +x = right.</li><li>A visible box, which is the intersection of the bounding box with the widget’s parents visible box.</li><li>Zero or one parent widgets. (Always zero if the widget is a root widget.</li><li>Zero or more child widgets.</li><li>Whether the widget is a root. Root widgets are the top level plugin windows.</li><li>Whether the widget is visible.</li><li>A text string descriptor, whose meaning varies from widget to widget.</li><li>An arbitrary set of 32 bit integral properties defined by 32-bit integral keys. This is how specific widgets store specific data.</li><li>A list of widget callback procedures that implements the widgets behaviors.</li></ul><p>The Widgets library sends messages to widgets to request specific behaviors or notify the widget of things.</p><p>Widgets may have more than one callback function, in which case messages are sent to the most recently added callback function until the message is handled. Messages may also be sent to parents or children; see the<a href=\"/sdk/XPWidgetDefs/\">XPWidgetDefs</a>.h header file for the different widget message dispatching functions. By adding a callback function to a window you can ‘subclass’ its behavior.</p><p>A set of standard widgets are provided that serve common UI purposes. You can also customize or implement entirely custom widgets.</p><p>Widgets are different than other view hierarchies (most notably Win32, which they bear a striking resemblance to) in the following ways:</p><ul><li>Not all behavior can be patched. State that is managed by the<a href=\"/sdk/XPWidgets/\">XPWidgets</a>DLL and not by individual widgets cannot be customized.</li><li>All coordinates are in global screen coordinates. Coordinates are not relative to an enclosing widget, nor are they relative to a display window.</li><li>Widget messages are always dispatched synchronously, and there is no concept of scheduling an update or a dirty region. Messages originate from X-Plane as the sim cycle goes by. Since X-Plane is constantly redrawing, so are widgets; there is no need to mark a part of a widget as ‘needing redrawing’ because redrawing happens frequently whether the widget needs it or not.</li><li>Any widget may be a ‘root’ widget, causing it to be drawn; there is no relationship between widget class and rootness. Root widgets are implemented as<a href=\"/sdk/XPLMDisplay/\">XPLMDisplay</a>windows.</li></ul><div class=\"component\"><h2 id=\"WIDGET CREATION AND MANAGEMENT\">WIDGET CREATION AND MANAGEMENT</h2><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPCreateWidget\"><a href=\"/sdk/XPCreateWidget/\">XPCreateWidget</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>WIDGET_API <a href=\"/sdk/XPWidgetID/\">XPWidgetID</a> <a href=\"/sdk/XPCreateWidget/\">XPCreateWidget</a>(\n                         int                  inLeft,\n                         int                  inTop,\n                         int                  inRight,\n                         int                  inBottom,\n                         int                  inVisible,\n                         const char *         inDescriptor,\n                         int                  inIsRoot,\n                         <a href=\"/sdk/XPWidgetID/\">XPWidgetID</a>           inContainer,\n                         <a href=\"/sdk/XPWidgetClass/\">XPWidgetClass</a>        inClass);\n</code></pre><p>This function creates a new widget and returns the new widget’s ID to you. If the widget creation fails for some reason, it returns NULL. Widget creation will fail either if you pass a bad class ID or if there is not adequate memory.</p><p>Input Parameters:</p><ul><li>Top, left, bottom, and right in global screen coordinates defining the widget’s location on the screen.</li><li>inVisible is 1 if the widget should be drawn, 0 to start the widget as hidden.</li><li>inDescriptor is a null terminated string that will become the widget’s descriptor.</li><li>inIsRoot is 1 if this is going to be a root widget, 0 if it will not be.</li><li>inContainer is the ID of this widget’s container. It must be 0 for a root widget. For a non-root widget, pass the widget ID of the widget to place this widget within. If this widget is not going to start inside another widget, pass 0; this new widget will be created but will not be drawn until it is placed inside another widget.</li><li>inClass is the class of the widget to draw. Use one of the predefined class-IDs to create a standard widget.</li></ul><p>A note on widget embedding: a widget is only called (and will be drawn, etc.) if it is placed within a widget that will be called. Root widgets are always called. So it is possible to have whole chains of widgets that are simply not called. You can preconstruct widget trees and then place them into root widgets later to activate them if you wish.</p></div><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPCreateCustomWidget\"><a href=\"/sdk/XPCreateCustomWidget/\">XPCreateCustomWidget</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>WIDGET_API <a href=\"/sdk/XPWidgetID/\">XPWidgetID</a> <a href=\"/sdk/XPCreateCustomWidget/\">XPCreateCustomWidget</a>(\n                         int                  inLeft,\n                         int                  inTop,\n                         int                  inRight,\n                         int                  inBottom,\n                         int                  inVisible,\n                         const char *         inDescriptor,\n                         int                  inIsRoot,\n                         <a href=\"/sdk/XPWidgetID/\">XPWidgetID</a>           inContainer,\n                         <a href=\"/sdk/XPWidgetFunc_t/\">XPWidgetFunc_t</a>       inCallback);\n</code></pre><p>This function is the same as<a href=\"/sdk/XPCreateWidget/\">XPCreateWidget</a>except that instead of passing a class ID, you pass your widget callback function pointer defining the widget. Use this function to define a custom widget. All parameters are the same as<a href=\"/sdk/XPCreateWidget/\">XPCreateWidget</a>, except that the widget class has been replaced with the widget function.</p></div><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPDestroyWidget\"><a href=\"/sdk/XPDestroyWidget/\">XPDestroyWidget</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>WIDGET_API void       <a href=\"/sdk/XPDestroyWidget/\">XPDestroyWidget</a>(\n                         <a href=\"/sdk/XPWidgetID/\">XPWidgetID</a>           inWidget,\n                         int                  inDestroyChildren);\n</code></pre><p>This class destroys a widget. Pass in the ID of the widget to kill. If you pass 1 for inDestroyChilren, the widget’s children will be destroyed first, then this widget will be destroyed. (Furthermore, the widget’s children will be destroyed with the inDestroyChildren flag set to 1, so the destruction will recurse down the widget tree.) If you pass 0 for this flag, direct child widgets will simply end up with their parent set to 0.</p></div><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPSendMessageToWidget\"><a href=\"/sdk/XPSendMessageToWidget/\">XPSendMessageToWidget</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>WIDGET_API int        <a href=\"/sdk/XPSendMessageToWidget/\">XPSendMessageToWidget</a>(\n                         <a href=\"/sdk/XPWidgetID/\">XPWidgetID</a>           inWidget,\n                         <a href=\"/sdk/XPWidgetMessage/\">XPWidgetMessage</a>      inMessage,\n                         <a href=\"/sdk/XPDispatchMode/\">XPDispatchMode</a>       inMode,\n                         intptr_t             inParam1,\n                         intptr_t             inParam2);\n</code></pre><p>This sends any message to a widget. You should probably not go around simulating the predefined messages that the widgets library defines for you. You may however define custom messages for your widgets and send them with this method.</p><p>This method supports several dispatching patterns; see<a href=\"/sdk/XPDispatchMode/\">XPDispatchMode</a>for more info. The function returns 1 if the message was handled, 0 if it was not.</p><p>For each widget that receives the message (see the dispatching modes), each widget function from the most recently installed to the oldest one receives the message in order until it is handled.</p></div></div><div class=\"component\"><h2 id=\"WIDGET POSITIONING AND VISIBILITY\">WIDGET POSITIONING AND VISIBILITY</h2><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPPlaceWidgetWithin\"><a href=\"/sdk/XPPlaceWidgetWithin/\">XPPlaceWidgetWithin</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>WIDGET_API void       <a href=\"/sdk/XPPlaceWidgetWithin/\">XPPlaceWidgetWithin</a>(\n                         <a href=\"/sdk/XPWidgetID/\">XPWidgetID</a>           inSubWidget,\n                         <a href=\"/sdk/XPWidgetID/\">XPWidgetID</a>           inContainer);\n</code></pre><p>This function changes which container a widget resides in. You may NOT use this function on a root widget! inSubWidget is the widget that will be moved. Pass a widget ID in inContainer to make inSubWidget be a child of inContainer. It will become the last/closest widget in the container. Pass 0 to remove the widget from any container. Any call to this other than passing the widget ID of the old parent of the affected widget will cause the widget to be removed from its old parent. Placing a widget within its own parent simply makes it the last widget.</p><p>NOTE: this routine does not reposition the sub widget in global coordinates. If the container has layout management code, it will reposition the subwidget for you, otherwise you must do it with SetWidgetGeometry.</p></div><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPCountChildWidgets\"><a href=\"/sdk/XPCountChildWidgets/\">XPCountChildWidgets</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>WIDGET_API int        <a href=\"/sdk/XPCountChildWidgets/\">XPCountChildWidgets</a>(\n                         <a href=\"/sdk/XPWidgetID/\">XPWidgetID</a>           inWidget);\n</code></pre><p>This routine returns the number of widgets another widget contains.</p></div><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPGetNthChildWidget\"><a href=\"/sdk/XPGetNthChildWidget/\">XPGetNthChildWidget</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>WIDGET_API <a href=\"/sdk/XPWidgetID/\">XPWidgetID</a> <a href=\"/sdk/XPGetNthChildWidget/\">XPGetNthChildWidget</a>(\n                         <a href=\"/sdk/XPWidgetID/\">XPWidgetID</a>           inWidget,\n                         int                  inIndex);\n</code></pre><p>This routine returns the widget ID of a child widget by index. Indexes are 0 based, from 0 to the number of widgets in the parentone minus one, inclusive. If the index is invalid, 0 is returned.</p></div><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPGetParentWidget\"><a href=\"/sdk/XPGetParentWidget/\">XPGetParentWidget</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>WIDGET_API <a href=\"/sdk/XPWidgetID/\">XPWidgetID</a> <a href=\"/sdk/XPGetParentWidget/\">XPGetParentWidget</a>(\n                         <a href=\"/sdk/XPWidgetID/\">XPWidgetID</a>           inWidget);\n</code></pre><p>Returns the parent of a widget, or 0 if the widget has no parent. Root widgets never have parents and therefore always return 0.</p></div><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPShowWidget\"><a href=\"/sdk/XPShowWidget/\">XPShowWidget</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>WIDGET_API void       <a href=\"/sdk/XPShowWidget/\">XPShowWidget</a>(\n                         <a href=\"/sdk/XPWidgetID/\">XPWidgetID</a>           inWidget);\n</code></pre><p>This routine makes a widget visible if it is not already. Note that if a widget is not in a rooted widget hierarchy or one of its parents is not visible, it will still not be visible to the user.</p></div><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPHideWidget\"><a href=\"/sdk/XPHideWidget/\">XPHideWidget</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>WIDGET_API void       <a href=\"/sdk/XPHideWidget/\">XPHideWidget</a>(\n                         <a href=\"/sdk/XPWidgetID/\">XPWidgetID</a>           inWidget);\n</code></pre><p>Makes a widget invisible. See<a href=\"/sdk/XPShowWidget/\">XPShowWidget</a>for considerations of when a widget might not be visible despite its own visibility state.</p></div><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPIsWidgetVisible\"><a href=\"/sdk/XPIsWidgetVisible/\">XPIsWidgetVisible</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>WIDGET_API int        <a href=\"/sdk/XPIsWidgetVisible/\">XPIsWidgetVisible</a>(\n                         <a href=\"/sdk/XPWidgetID/\">XPWidgetID</a>           inWidget);\n</code></pre><p>This returns 1 if a widget is visible, 0 if it is not. Note that this routine takes into consideration whether a parent is invisible. Use this routine to tell if the user can see the widget.</p></div><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPFindRootWidget\"><a href=\"/sdk/XPFindRootWidget/\">XPFindRootWidget</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>WIDGET_API <a href=\"/sdk/XPWidgetID/\">XPWidgetID</a> <a href=\"/sdk/XPFindRootWidget/\">XPFindRootWidget</a>(\n                         <a href=\"/sdk/XPWidgetID/\">XPWidgetID</a>           inWidget);\n</code></pre><p>Returns the Widget ID of the root widget that contains the passed in widget or NULL if the passed in widget is not in a rooted hierarchy.</p></div><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPBringRootWidgetToFront\"><a href=\"/sdk/XPBringRootWidgetToFront/\">XPBringRootWidgetToFront</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>WIDGET_API void       <a href=\"/sdk/XPBringRootWidgetToFront/\">XPBringRootWidgetToFront</a>(\n                         <a href=\"/sdk/XPWidgetID/\">XPWidgetID</a>           inWidget);\n</code></pre><p>This routine makes the specified widget be in the frontmost widget hierarchy. If this widget is a root widget, its widget hierarchy comes to front, otherwise the widget’s root is brought to the front. If this widget is not in an active widget hiearchy (e.g. there is no root widget at the top of the tree), this routine does nothing.</p></div><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPIsWidgetInFront\"><a href=\"/sdk/XPIsWidgetInFront/\">XPIsWidgetInFront</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>WIDGET_API int        <a href=\"/sdk/XPIsWidgetInFront/\">XPIsWidgetInFront</a>(\n                         <a href=\"/sdk/XPWidgetID/\">XPWidgetID</a>           inWidget);\n</code></pre><p>This routine returns true if this widget’s hierarchy is the frontmost hierarchy. It returns false if the widget’s hierarchy is not in front, or if the widget is not in a rooted hierarchy.</p></div><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPGetWidgetGeometry\"><a href=\"/sdk/XPGetWidgetGeometry/\">XPGetWidgetGeometry</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>WIDGET_API void       <a href=\"/sdk/XPGetWidgetGeometry/\">XPGetWidgetGeometry</a>(\n                         <a href=\"/sdk/XPWidgetID/\">XPWidgetID</a>           inWidget,\n                         int *                outLeft,    /* Can be NULL */\n                         int *                outTop,    /* Can be NULL */\n                         int *                outRight,    /* Can be NULL */\n                         int *                outBottom);    /* Can be NULL */\n</code></pre><p>This routine returns the bounding box of a widget in global coordinates. Pass NULL for any parameter you are not interested in.</p></div><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPSetWidgetGeometry\"><a href=\"/sdk/XPSetWidgetGeometry/\">XPSetWidgetGeometry</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>WIDGET_API void       <a href=\"/sdk/XPSetWidgetGeometry/\">XPSetWidgetGeometry</a>(\n                         <a href=\"/sdk/XPWidgetID/\">XPWidgetID</a>           inWidget,\n                         int                  inLeft,\n                         int                  inTop,\n                         int                  inRight,\n                         int                  inBottom);\n</code></pre><p>This function changes the bounding box of a widget.</p></div><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPGetWidgetForLocation\"><a href=\"/sdk/XPGetWidgetForLocation/\">XPGetWidgetForLocation</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>WIDGET_API <a href=\"/sdk/XPWidgetID/\">XPWidgetID</a> <a href=\"/sdk/XPGetWidgetForLocation/\">XPGetWidgetForLocation</a>(\n                         <a href=\"/sdk/XPWidgetID/\">XPWidgetID</a>           inContainer,\n                         int                  inXOffset,\n                         int                  inYOffset,\n                         int                  inRecursive,\n                         int                  inVisibleOnly);\n</code></pre><p>Given a widget and a location, this routine returns the widget ID of the child of that widget that owns that location. If inRecursive is true then this will return a child of a child of a widget as it tries to find the deepest widget at that location. If inVisibleOnly is true, then only visible widgets are considered, otherwise all widgets are considered. The widget ID passed for inContainer will be returned if the location is in that widget but not in a child widget. 0 is returned if the location is not in the container.</p><p>NOTE: if a widget’s geometry extends outside its parents geometry, it will not be returned by this call for mouse locations outside the parent geometry. The parent geometry limits the child’s eligibility for mouse location.</p></div><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPGetWidgetExposedGeometry\"><a href=\"/sdk/XPGetWidgetExposedGeometry/\">XPGetWidgetExposedGeometry</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>WIDGET_API void       <a href=\"/sdk/XPGetWidgetExposedGeometry/\">XPGetWidgetExposedGeometry</a>(\n                         <a href=\"/sdk/XPWidgetID/\">XPWidgetID</a>           inWidgetID,\n                         int *                outLeft,    /* Can be NULL */\n                         int *                outTop,    /* Can be NULL */\n                         int *                outRight,    /* Can be NULL */\n                         int *                outBottom);    /* Can be NULL */\n</code></pre><p>This routine returns the bounds of the area of a widget that is completely within its parent widgets. Since a widget’s bounding box can be outside its parent, part of its area will not be eligible for mouse clicks and should not draw. Use<a href=\"/sdk/XPGetWidgetGeometry/\">XPGetWidgetGeometry</a>to find out what area defines your widget’s shape, but use this routine to find out what area to actually draw into. Note that the widget library does not use OpenGL clipping to keep frame rates up, although you could use it internally.</p></div></div><div class=\"component\"><h2 id=\"ACCESSING WIDGET DATA\">ACCESSING WIDGET DATA</h2><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPSetWidgetDescriptor\"><a href=\"/sdk/XPSetWidgetDescriptor/\">XPSetWidgetDescriptor</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>WIDGET_API void       <a href=\"/sdk/XPSetWidgetDescriptor/\">XPSetWidgetDescriptor</a>(\n                         <a href=\"/sdk/XPWidgetID/\">XPWidgetID</a>           inWidget,\n                         const char *         inDescriptor);\n</code></pre><p>Every widget has a descriptor, which is a text string. What the text string is used for varies from widget to widget; for example, a push button’s text is its descriptor, a caption shows its descriptor, and a text field’s descriptor is the text being edited. In other words, the usage for the text varies from widget to widget, but this API provides a universal and convenient way to get at it. While not all UI widgets need their descriptor, many do.</p></div><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPGetWidgetDescriptor\"><a href=\"/sdk/XPGetWidgetDescriptor/\">XPGetWidgetDescriptor</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>WIDGET_API int        <a href=\"/sdk/XPGetWidgetDescriptor/\">XPGetWidgetDescriptor</a>(\n                         <a href=\"/sdk/XPWidgetID/\">XPWidgetID</a>           inWidget,\n                         char *               outDescriptor,\n                         int                  inMaxDescLength);\n</code></pre><p>This routine returns the widget’s descriptor. Pass in the length of the buffer you are going to receive the descriptor in. The descriptor will be null terminated for you. This routine returns the length of the actual descriptor; if you pass NULL for outDescriptor, you can get the descriptor’s length without getting its text. If the length of the descriptor exceeds your buffer length, the buffer will not be null terminated (this routine has ‘strncpy’ semantics).</p></div><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPGetWidgetUnderlyingWindow\"><a href=\"/sdk/XPGetWidgetUnderlyingWindow/\">XPGetWidgetUnderlyingWindow</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>WIDGET_API <a href=\"/sdk/XPLMWindowID/\">XPLMWindowID</a> <a href=\"/sdk/XPGetWidgetUnderlyingWindow/\">XPGetWidgetUnderlyingWindow</a>(\n                         <a href=\"/sdk/XPWidgetID/\">XPWidgetID</a>           inWidget);\n</code></pre><p>Returns the window (from the<a href=\"/sdk/XPLMDisplay/\">XPLMDisplay</a>API) that backs your widget window. If you have opted in to modern windows, via a call to<a href=\"/sdk/XPLMEnableFeature/\">XPLMEnableFeature</a>(“XPLM_USE_NATIVE_WIDGET_WINDOWS”, 1), you can use the returned window ID for display APIs like<a href=\"/sdk/XPLMSetWindowPositioningMode/\">XPLMSetWindowPositioningMode</a>(), allowing you to pop the widget window out into a real OS window, or move it into VR.</p></div><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPSetWidgetProperty\"><a href=\"/sdk/XPSetWidgetProperty/\">XPSetWidgetProperty</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>WIDGET_API void       <a href=\"/sdk/XPSetWidgetProperty/\">XPSetWidgetProperty</a>(\n                         <a href=\"/sdk/XPWidgetID/\">XPWidgetID</a>           inWidget,\n                         <a href=\"/sdk/XPWidgetPropertyID/\">XPWidgetPropertyID</a>   inProperty,\n                         intptr_t             inValue);\n</code></pre><p>This function sets a widget’s property. Properties are arbitrary values associated by a widget by ID.</p></div><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPGetWidgetProperty\"><a href=\"/sdk/XPGetWidgetProperty/\">XPGetWidgetProperty</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>WIDGET_API intptr_t   <a href=\"/sdk/XPGetWidgetProperty/\">XPGetWidgetProperty</a>(\n                         <a href=\"/sdk/XPWidgetID/\">XPWidgetID</a>           inWidget,\n                         <a href=\"/sdk/XPWidgetPropertyID/\">XPWidgetPropertyID</a>   inProperty,\n                         int *                inExists);    /* Can be NULL */\n</code></pre><p>This routine returns the value of a widget’s property, or 0 if the property is not defined. If you need to know whether the property is defined, pass a pointer to an int for inExists; the existence of that property will be returned in the int. Pass NULL for inExists if you do not need this information.</p></div></div><div class=\"component\"><h2 id=\"KEYBOARD MANAGEMENT\">KEYBOARD MANAGEMENT</h2><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPSetKeyboardFocus\"><a href=\"/sdk/XPSetKeyboardFocus/\">XPSetKeyboardFocus</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>WIDGET_API <a href=\"/sdk/XPWidgetID/\">XPWidgetID</a> <a href=\"/sdk/XPSetKeyboardFocus/\">XPSetKeyboardFocus</a>(\n                         <a href=\"/sdk/XPWidgetID/\">XPWidgetID</a>           inWidget);\n</code></pre><p>Controls which widget will receive keystrokes. Pass the widget ID of the widget to get the keys. Note that if the widget does not care about keystrokes, they will go to the parent widget, and if no widget cares about them, they go to X-Plane.</p><p>If you set the keyboard focus to widget ID 0, X-Plane gets keyboard focus.</p><p>This routine returns the widget ID that ended up with keyboard focus, or 0 for X-Plane.</p><p>Keyboard focus is not changed if the new widget will not accept it. For setting to X-Plane, keyboard focus is always accepted.</p></div><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPLoseKeyboardFocus\"><a href=\"/sdk/XPLoseKeyboardFocus/\">XPLoseKeyboardFocus</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>WIDGET_API void       <a href=\"/sdk/XPLoseKeyboardFocus/\">XPLoseKeyboardFocus</a>(\n                         <a href=\"/sdk/XPWidgetID/\">XPWidgetID</a>           inWidget);\n</code></pre><p>This causes the specified widget to lose focus; focus is passed to its parent, or the next parent that will accept it. This routine does nothing if this widget does not have focus.</p></div><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPGetWidgetWithFocus\"><a href=\"/sdk/XPGetWidgetWithFocus/\">XPGetWidgetWithFocus</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>WIDGET_API <a href=\"/sdk/XPWidgetID/\">XPWidgetID</a> <a href=\"/sdk/XPGetWidgetWithFocus/\">XPGetWidgetWithFocus</a>(void);\n</code></pre><p>This routine returns the widget that has keyboard focus, or 0 if X-Plane has keyboard focus or some other plugin window that does not have widgets has focus.</p></div></div><div class=\"component\"><h2 id=\"CREATING CUSTOM WIDGETS\">CREATING CUSTOM WIDGETS</h2><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPAddWidgetCallback\"><a href=\"/sdk/XPAddWidgetCallback/\">XPAddWidgetCallback</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>WIDGET_API void       <a href=\"/sdk/XPAddWidgetCallback/\">XPAddWidgetCallback</a>(\n                         <a href=\"/sdk/XPWidgetID/\">XPWidgetID</a>           inWidget,\n                         <a href=\"/sdk/XPWidgetFunc_t/\">XPWidgetFunc_t</a>       inNewCallback);\n</code></pre><p>This function adds a new widget callback to a widget. This widget callback supercedes any existing ones and will receive messages first; if it does not handle messages they will go on to be handled by pre-existing widgets.</p><p>The widget function will remain on the widget for the life of the widget. The creation message will be sent to the new callback immediately with the widget ID, and the destruction message will be sent before the other widget function receives a destruction message.</p><p>This provides a way to ‘subclass’ an existing widget. By providing a second hook that only handles certain widget messages, you can customize or extend widget behavior.</p></div><div class=\"function\"><h3 class=\"sdk-api-function\" id=\"XPGetWidgetClassFunc\"><a href=\"/sdk/XPGetWidgetClassFunc/\">XPGetWidgetClassFunc</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>WIDGET_API <a href=\"/sdk/XPWidgetFunc_t/\">XPWidgetFunc_t</a> <a href=\"/sdk/XPGetWidgetClassFunc/\">XPGetWidgetClassFunc</a>(\n                         <a href=\"/sdk/XPWidgetClass/\">XPWidgetClass</a>        inWidgetClass);\n</code></pre><p>Given a widget class, this function returns the callbacks that power that widget class.</p></div></div></div></div></article>",
      "code_examples": [
        {
          "char_count": 470,
          "code": "WIDGET_APIXPWidgetIDXPCreateWidget(\n                         int                  inLeft,\n                         int                  inTop,\n                         int                  inRight,\n                         int                  inBottom,\n                         int                  inVisible,\n                         const char *         inDescriptor,\n                         int                  inIsRoot,XPWidgetIDinContainer,XPWidgetClassinClass);",
          "context": "XPCreateWidget",
          "id": "example_0",
          "language": "c",
          "line_count": 8,
          "type": "snippet"
        },
        {
          "char_count": 480,
          "code": "WIDGET_APIXPWidgetIDXPCreateCustomWidget(\n                         int                  inLeft,\n                         int                  inTop,\n                         int                  inRight,\n                         int                  inBottom,\n                         int                  inVisible,\n                         const char *         inDescriptor,\n                         int                  inIsRoot,XPWidgetIDinContainer,XPWidgetFunc_tinCallback);",
          "context": "XPCreateCustomWidget",
          "id": "example_1",
          "language": "c",
          "line_count": 8,
          "type": "snippet"
        },
        {
          "char_count": 116,
          "code": "WIDGET_API voidXPDestroyWidget(XPWidgetIDinWidget,\n                         int                  inDestroyChildren);",
          "context": "XPDestroyWidget",
          "id": "example_2",
          "language": "c",
          "line_count": 2,
          "type": "snippet"
        },
        {
          "char_count": 214,
          "code": "WIDGET_API intXPSendMessageToWidget(XPWidgetIDinWidget,XPWidgetMessageinMessage,XPDispatchModeinMode,\n                         intptr_t             inParam1,\n                         intptr_t             inParam2);",
          "context": "XPSendMessageToWidget",
          "id": "example_3",
          "language": "c",
          "line_count": 3,
          "type": "snippet"
        },
        {
          "char_count": 80,
          "code": "WIDGET_API voidXPPlaceWidgetWithin(XPWidgetIDinSubWidget,XPWidgetIDinContainer);",
          "context": "XPPlaceWidgetWithin",
          "id": "example_4",
          "language": "c",
          "line_count": 1,
          "type": "snippet"
        },
        {
          "char_count": 54,
          "code": "WIDGET_API intXPCountChildWidgets(XPWidgetIDinWidget);",
          "context": "XPCountChildWidgets",
          "id": "example_5",
          "language": "c",
          "line_count": 1,
          "type": "snippet"
        },
        {
          "char_count": 115,
          "code": "WIDGET_APIXPWidgetIDXPGetNthChildWidget(XPWidgetIDinWidget,\n                         int                  inIndex);",
          "context": "XPGetNthChildWidget",
          "id": "example_6",
          "language": "c",
          "line_count": 2,
          "type": "snippet"
        },
        {
          "char_count": 58,
          "code": "WIDGET_APIXPWidgetIDXPGetParentWidget(XPWidgetIDinWidget);",
          "context": "XPGetParentWidget",
          "id": "example_7",
          "language": "cpp",
          "line_count": 1,
          "type": "snippet"
        },
        {
          "char_count": 52,
          "code": "WIDGET_API intXPIsWidgetVisible(XPWidgetIDinWidget);",
          "context": "XPIsWidgetVisible",
          "id": "example_10",
          "language": "c",
          "line_count": 1,
          "type": "snippet"
        },
        {
          "char_count": 57,
          "code": "WIDGET_APIXPWidgetIDXPFindRootWidget(XPWidgetIDinWidget);",
          "context": "XPFindRootWidget",
          "id": "example_11",
          "language": "c",
          "line_count": 1,
          "type": "snippet"
        },
        {
          "char_count": 60,
          "code": "WIDGET_API voidXPBringRootWidgetToFront(XPWidgetIDinWidget);",
          "context": "XPBringRootWidgetToFront",
          "id": "example_12",
          "language": "c",
          "line_count": 1,
          "type": "snippet"
        },
        {
          "char_count": 52,
          "code": "WIDGET_API intXPIsWidgetInFront(XPWidgetIDinWidget);",
          "context": "XPIsWidgetInFront",
          "id": "example_13",
          "language": "c",
          "line_count": 1,
          "type": "snippet"
        },
        {
          "char_count": 361,
          "code": "WIDGET_API voidXPGetWidgetGeometry(XPWidgetIDinWidget,\n                         int *                outLeft,    /* Can be NULL */\n                         int *                outTop,    /* Can be NULL */\n                         int *                outRight,    /* Can be NULL */\n                         int *                outBottom);    /* Can be NULL */",
          "context": "XPGetWidgetGeometry",
          "id": "example_14",
          "language": "c",
          "line_count": 5,
          "type": "snippet"
        },
        {
          "char_count": 273,
          "code": "WIDGET_API voidXPSetWidgetGeometry(XPWidgetIDinWidget,\n                         int                  inLeft,\n                         int                  inTop,\n                         int                  inRight,\n                         int                  inBottom);",
          "context": "XPSetWidgetGeometry",
          "id": "example_15",
          "language": "c",
          "line_count": 5,
          "type": "snippet"
        },
        {
          "char_count": 300,
          "code": "WIDGET_APIXPWidgetIDXPGetWidgetForLocation(XPWidgetIDinContainer,\n                         int                  inXOffset,\n                         int                  inYOffset,\n                         int                  inRecursive,\n                         int                  inVisibleOnly);",
          "context": "XPGetWidgetForLocation",
          "id": "example_16",
          "language": "c",
          "line_count": 5,
          "type": "snippet"
        },
        {
          "char_count": 370,
          "code": "WIDGET_API voidXPGetWidgetExposedGeometry(XPWidgetIDinWidgetID,\n                         int *                outLeft,    /* Can be NULL */\n                         int *                outTop,    /* Can be NULL */\n                         int *                outRight,    /* Can be NULL */\n                         int *                outBottom);    /* Can be NULL */",
          "context": "XPGetWidgetExposedGeometry",
          "id": "example_17",
          "language": "c",
          "line_count": 5,
          "type": "snippet"
        },
        {
          "char_count": 117,
          "code": "WIDGET_API voidXPSetWidgetDescriptor(XPWidgetIDinWidget,\n                         const char *         inDescriptor);",
          "context": "XPSetWidgetDescriptor",
          "id": "example_18",
          "language": "c",
          "line_count": 2,
          "type": "snippet"
        },
        {
          "char_count": 180,
          "code": "WIDGET_API intXPGetWidgetDescriptor(XPWidgetIDinWidget,\n                         char *               outDescriptor,\n                         int                  inMaxDescLength);",
          "context": "XPGetWidgetDescriptor",
          "id": "example_19",
          "language": "c",
          "line_count": 3,
          "type": "snippet"
        },
        {
          "char_count": 70,
          "code": "WIDGET_APIXPLMWindowIDXPGetWidgetUnderlyingWindow(XPWidgetIDinWidget);",
          "context": "XPGetWidgetUnderlyingWindow",
          "id": "example_20",
          "language": "c",
          "line_count": 1,
          "type": "snippet"
        },
        {
          "char_count": 139,
          "code": "WIDGET_API voidXPSetWidgetProperty(XPWidgetIDinWidget,XPWidgetPropertyIDinProperty,\n                         intptr_t             inValue);",
          "context": "XPSetWidgetProperty",
          "id": "example_21",
          "language": "c",
          "line_count": 2,
          "type": "snippet"
        },
        {
          "char_count": 165,
          "code": "WIDGET_API intptr_tXPGetWidgetProperty(XPWidgetIDinWidget,XPWidgetPropertyIDinProperty,\n                         int *                inExists);    /* Can be NULL */",
          "context": "XPGetWidgetProperty",
          "id": "example_22",
          "language": "c",
          "line_count": 2,
          "type": "snippet"
        },
        {
          "char_count": 59,
          "code": "WIDGET_APIXPWidgetIDXPSetKeyboardFocus(XPWidgetIDinWidget);",
          "context": "XPSetKeyboardFocus",
          "id": "example_23",
          "language": "c",
          "line_count": 1,
          "type": "snippet"
        },
        {
          "char_count": 55,
          "code": "WIDGET_API voidXPLoseKeyboardFocus(XPWidgetIDinWidget);",
          "context": "XPLoseKeyboardFocus",
          "id": "example_24",
          "language": "c",
          "line_count": 1,
          "type": "snippet"
        },
        {
          "char_count": 83,
          "code": "WIDGET_API voidXPAddWidgetCallback(XPWidgetIDinWidget,XPWidgetFunc_tinNewCallback);",
          "context": "XPAddWidgetCallback",
          "id": "example_26",
          "language": "c",
          "line_count": 1,
          "type": "snippet"
        },
        {
          "char_count": 73,
          "code": "WIDGET_APIXPWidgetFunc_tXPGetWidgetClassFunc(XPWidgetClassinWidgetClass);",
          "context": "XPGetWidgetClassFunc",
          "id": "example_27",
          "language": "c",
          "line_count": 1,
          "type": "snippet"
        }
      ],
      "cross_references": [
        "XPDispatchMode",
        "XPLMDisplay",
        "XPWidgetMessage",
        "XPWidgetPropertyID",
        "XPLMEnableFeature",
        "XPLMSetWindowPositioningMode"
      ],
      "markdown": "# [XPWidgets](/sdk/XPWidgets/)API\n\n## THEORY OF OPERATION AND NOTES\n\nWidgets are persistent view ‘objects’ for X-Plane. A widget is an object\nreferenced by its opaque handle (widget ID) and the APIs in this file. You\ncannot access the widget’s guts directly. Every Widget has the following\nintrinsic data:\n\n- A bounding box defined in global screen coordinates with 0,0 in the bottom left and +y = up, +x = right.\n- A visible box, which is the intersection of the bounding box with the widget’s parents visible box.\n- Zero or one parent widgets. (Always zero if the widget is a root widget.\n- Zero or more child widgets.\n- Whether the widget is a root. Root widgets are the top level plugin windows.\n- Whether the widget is visible.\n- A text string descriptor, whose meaning varies from widget to widget.\n- An arbitrary set of 32 bit integral properties defined by 32-bit integral keys. This is how specific widgets store specific data.\n- A list of widget callback procedures that implements the widgets behaviors.\n\nThe Widgets library sends messages to widgets to request specific behaviors or\nnotify the widget of things.\n\nWidgets may have more than one callback function, in which case messages are\nsent to the most recently added callback function until the message is handled.\nMessages may also be sent to parents or children; see\nthe[XPWidgetDefs](/sdk/XPWidgetDefs/).h header file for the different widget\nmessage dispatching functions. By adding a callback function to a window you can\n‘subclass’ its behavior.\n\nA set of standard widgets are provided that serve common UI purposes. You can\nalso customize or implement entirely custom widgets.\n\nWidgets are different than other view hierarchies (most notably Win32, which\nthey bear a striking resemblance to) in the following ways:\n\n- Not all behavior can be patched. State that is managed by the[XPWidgets](/sdk/XPWidgets/)DLL and not by individual widgets cannot be customized.\n- All coordinates are in global screen coordinates. Coordinates are not relative to an enclosing widget, nor are they relative to a display window.\n- Widget messages are always dispatched synchronously, and there is no concept of scheduling an update or a dirty region. Messages originate from X-Plane as the sim cycle goes by. Since X-Plane is constantly redrawing, so are widgets; there is no need to mark a part of a widget as ‘needing redrawing’ because redrawing happens frequently whether the widget needs it or not.\n- Any widget may be a ‘root’ widget, causing it to be drawn; there is no relationship between widget class and rootness. Root widgets are implemented as[XPLMDisplay](/sdk/XPLMDisplay/)windows.\n\n## WIDGET CREATION AND MANAGEMENT\n\n### [XPCreateWidget](/sdk/XPCreateWidget/)\n\n```cpp\nWIDGET_API XPWidgetID XPCreateWidget(\n                         int                  inLeft,\n                         int                  inTop,\n                         int                  inRight,\n                         int                  inBottom,\n                         int                  inVisible,\n                         const char *         inDescriptor,\n                         int                  inIsRoot,\n                         XPWidgetID           inContainer,\n                         XPWidgetClass        inClass);\n\n```\n\nThis function creates a new widget and returns the new widget’s ID to you. If\nthe widget creation fails for some reason, it returns NULL. Widget creation will\nfail either if you pass a bad class ID or if there is not adequate memory.\n\nInput Parameters:\n\n- Top, left, bottom, and right in global screen coordinates defining the widget’s location on the screen.\n- inVisible is 1 if the widget should be drawn, 0 to start the widget as hidden.\n- inDescriptor is a null terminated string that will become the widget’s descriptor.\n- inIsRoot is 1 if this is going to be a root widget, 0 if it will not be.\n- inContainer is the ID of this widget’s container. It must be 0 for a root widget. For a non-root widget, pass the widget ID of the widget to place this widget within. If this widget is not going to start inside another widget, pass 0; this new widget will be created but will not be drawn until it is placed inside another widget.\n- inClass is the class of the widget to draw. Use one of the predefined class-IDs to create a standard widget.\n\nA note on widget embedding: a widget is only called (and will be drawn, etc.) if\nit is placed within a widget that will be called. Root widgets are always\ncalled. So it is possible to have whole chains of widgets that are simply not\ncalled. You can preconstruct widget trees and then place them into root widgets\nlater to activate them if you wish.\n\n### [XPCreateCustomWidget](/sdk/XPCreateCustomWidget/)\n\n```cpp\nWIDGET_API XPWidgetID XPCreateCustomWidget(\n                         int                  inLeft,\n                         int                  inTop,\n                         int                  inRight,\n                         int                  inBottom,\n                         int                  inVisible,\n                         const char *         inDescriptor,\n                         int                  inIsRoot,\n                         XPWidgetID           inContainer,\n                         XPWidgetFunc_t       inCallback);\n\n```\n\nThis function is the same as[XPCreateWidget](/sdk/XPCreateWidget/)except that\ninstead of passing a class ID, you pass your widget callback function pointer\ndefining the widget. Use this function to define a custom widget. All parameters\nare the same as[XPCreateWidget](/sdk/XPCreateWidget/), except that the widget\nclass has been replaced with the widget function.\n\n### [XPDestroyWidget](/sdk/XPDestroyWidget/)\n\n```cpp\nWIDGET_API void       XPDestroyWidget(\n                         XPWidgetID           inWidget,\n                         int                  inDestroyChildren);\n\n```\n\nThis class destroys a widget. Pass in the ID of the widget to kill. If you pass\n1 for inDestroyChilren, the widget’s children will be destroyed first, then this\nwidget will be destroyed. (Furthermore, the widget’s children will be destroyed\nwith the inDestroyChildren flag set to 1, so the destruction will recurse down\nthe widget tree.) If you pass 0 for this flag, direct child widgets will simply\nend up with their parent set to 0.\n\n### [XPSendMessageToWidget](/sdk/XPSendMessageToWidget/)\n\n```cpp\nWIDGET_API int        XPSendMessageToWidget(\n                         XPWidgetID           inWidget,\n                         XPWidgetMessage      inMessage,\n                         XPDispatchMode       inMode,\n                         intptr_t             inParam1,\n                         intptr_t             inParam2);\n\n```\n\nThis sends any message to a widget. You should probably not go around simulating\nthe predefined messages that the widgets library defines for you. You may\nhowever define custom messages for your widgets and send them with this method.\n\nThis method supports several dispatching patterns;\nsee[XPDispatchMode](/sdk/XPDispatchMode/)for more info. The function returns 1\nif the message was handled, 0 if it was not.\n\nFor each widget that receives the message (see the dispatching modes), each\nwidget function from the most recently installed to the oldest one receives the\nmessage in order until it is handled.\n\n## WIDGET POSITIONING AND VISIBILITY\n\n### [XPPlaceWidgetWithin](/sdk/XPPlaceWidgetWithin/)\n\n```cpp\nWIDGET_API void       XPPlaceWidgetWithin(\n                         XPWidgetID           inSubWidget,\n                         XPWidgetID           inContainer);\n\n```\n\nThis function changes which container a widget resides in. You may NOT use this\nfunction on a root widget! inSubWidget is the widget that will be moved. Pass a\nwidget ID in inContainer to make inSubWidget be a child of inContainer. It will\nbecome the last/closest widget in the container. Pass 0 to remove the widget\nfrom any container. Any call to this other than passing the widget ID of the old\nparent of the affected widget will cause the widget to be removed from its old\nparent. Placing a widget within its own parent simply makes it the last widget.\n\nNOTE: this routine does not reposition the sub widget in global coordinates. If\nthe container has layout management code, it will reposition the subwidget for\nyou, otherwise you must do it with SetWidgetGeometry.\n\n### [XPCountChildWidgets](/sdk/XPCountChildWidgets/)\n\n```cpp\nWIDGET_API int        XPCountChildWidgets(\n                         XPWidgetID           inWidget);\n\n```\n\nThis routine returns the number of widgets another widget contains.\n\n### [XPGetNthChildWidget](/sdk/XPGetNthChildWidget/)\n\n```cpp\nWIDGET_API XPWidgetID XPGetNthChildWidget(\n                         XPWidgetID           inWidget,\n                         int                  inIndex);\n\n```\n\nThis routine returns the widget ID of a child widget by index. Indexes are 0\nbased, from 0 to the number of widgets in the parentone minus one, inclusive. If\nthe index is invalid, 0 is returned.\n\n### [XPGetParentWidget](/sdk/XPGetParentWidget/)\n\n```cpp\nWIDGET_API XPWidgetID XPGetParentWidget(\n                         XPWidgetID           inWidget);\n\n```\n\nReturns the parent of a widget, or 0 if the widget has no parent. Root widgets\nnever have parents and therefore always return 0.\n\n### [XPShowWidget](/sdk/XPShowWidget/)\n\n```cpp\nWIDGET_API void       XPShowWidget(\n                         XPWidgetID           inWidget);\n\n```\n\nThis routine makes a widget visible if it is not already. Note that if a widget\nis not in a rooted widget hierarchy or one of its parents is not visible, it\nwill still not be visible to the user.\n\n### [XPHideWidget](/sdk/XPHideWidget/)\n\n```cpp\nWIDGET_API void       XPHideWidget(\n                         XPWidgetID           inWidget);\n\n```\n\nMakes a widget invisible. See[XPShowWidget](/sdk/XPShowWidget/)for\nconsiderations of when a widget might not be visible despite its own visibility\nstate.\n\n### [XPIsWidgetVisible](/sdk/XPIsWidgetVisible/)\n\n```cpp\nWIDGET_API int        XPIsWidgetVisible(\n                         XPWidgetID           inWidget);\n\n```\n\nThis returns 1 if a widget is visible, 0 if it is not. Note that this routine\ntakes into consideration whether a parent is invisible. Use this routine to tell\nif the user can see the widget.\n\n### [XPFindRootWidget](/sdk/XPFindRootWidget/)\n\n```cpp\nWIDGET_API XPWidgetID XPFindRootWidget(\n                         XPWidgetID           inWidget);\n\n```\n\nReturns the Widget ID of the root widget that contains the passed in widget or\nNULL if the passed in widget is not in a rooted hierarchy.\n\n### [XPBringRootWidgetToFront](/sdk/XPBringRootWidgetToFront/)\n\n```cpp\nWIDGET_API void       XPBringRootWidgetToFront(\n                         XPWidgetID           inWidget);\n\n```\n\nThis routine makes the specified widget be in the frontmost widget hierarchy. If\nthis widget is a root widget, its widget hierarchy comes to front, otherwise the\nwidget’s root is brought to the front. If this widget is not in an active widget\nhiearchy (e.g. there is no root widget at the top of the tree), this routine\ndoes nothing.\n\n### [XPIsWidgetInFront](/sdk/XPIsWidgetInFront/)\n\n```cpp\nWIDGET_API int        XPIsWidgetInFront(\n                         XPWidgetID           inWidget);\n\n```\n\nThis routine returns true if this widget’s hierarchy is the frontmost hierarchy.\nIt returns false if the widget’s hierarchy is not in front, or if the widget is\nnot in a rooted hierarchy.\n\n### [XPGetWidgetGeometry](/sdk/XPGetWidgetGeometry/)\n\n```cpp\nWIDGET_API void       XPGetWidgetGeometry(\n                         XPWidgetID           inWidget,\n                         int *                outLeft,    /* Can be NULL */\n                         int *                outTop,    /* Can be NULL */\n                         int *                outRight,    /* Can be NULL */\n                         int *                outBottom);    /* Can be NULL */\n\n```\n\nThis routine returns the bounding box of a widget in global coordinates. Pass\nNULL for any parameter you are not interested in.\n\n### [XPSetWidgetGeometry](/sdk/XPSetWidgetGeometry/)\n\n```cpp\nWIDGET_API void       XPSetWidgetGeometry(\n                         XPWidgetID           inWidget,\n                         int                  inLeft,\n                         int                  inTop,\n                         int                  inRight,\n                         int                  inBottom);\n\n```\n\nThis function changes the bounding box of a widget.\n\n### [XPGetWidgetForLocation](/sdk/XPGetWidgetForLocation/)\n\n```cpp\nWIDGET_API XPWidgetID XPGetWidgetForLocation(\n                         XPWidgetID           inContainer,\n                         int                  inXOffset,\n                         int                  inYOffset,\n                         int                  inRecursive,\n                         int                  inVisibleOnly);\n\n```\n\nGiven a widget and a location, this routine returns the widget ID of the child\nof that widget that owns that location. If inRecursive is true then this will\nreturn a child of a child of a widget as it tries to find the deepest widget at\nthat location. If inVisibleOnly is true, then only visible widgets are\nconsidered, otherwise all widgets are considered. The widget ID passed for\ninContainer will be returned if the location is in that widget but not in a\nchild widget. 0 is returned if the location is not in the container.\n\nNOTE: if a widget’s geometry extends outside its parents geometry, it will not\nbe returned by this call for mouse locations outside the parent geometry. The\nparent geometry limits the child’s eligibility for mouse location.\n\n### [XPGetWidgetExposedGeometry](/sdk/XPGetWidgetExposedGeometry/)\n\n```cpp\nWIDGET_API void       XPGetWidgetExposedGeometry(\n                         XPWidgetID           inWidgetID,\n                         int *                outLeft,    /* Can be NULL */\n                         int *                outTop,    /* Can be NULL */\n                         int *                outRight,    /* Can be NULL */\n                         int *                outBottom);    /* Can be NULL */\n\n```\n\nThis routine returns the bounds of the area of a widget that is completely\nwithin its parent widgets. Since a widget’s bounding box can be outside its\nparent, part of its area will not be eligible for mouse clicks and should not\ndraw. Use[XPGetWidgetGeometry](/sdk/XPGetWidgetGeometry/)to find out what area\ndefines your widget’s shape, but use this routine to find out what area to\nactually draw into. Note that the widget library does not use OpenGL clipping to\nkeep frame rates up, although you could use it internally.\n\n## ACCESSING WIDGET DATA\n\n### [XPSetWidgetDescriptor](/sdk/XPSetWidgetDescriptor/)\n\n```cpp\nWIDGET_API void       XPSetWidgetDescriptor(\n                         XPWidgetID           inWidget,\n                         const char *         inDescriptor);\n\n```\n\nEvery widget has a descriptor, which is a text string. What the text string is\nused for varies from widget to widget; for example, a push button’s text is its\ndescriptor, a caption shows its descriptor, and a text field’s descriptor is the\ntext being edited. In other words, the usage for the text varies from widget to\nwidget, but this API provides a universal and convenient way to get at it. While\nnot all UI widgets need their descriptor, many do.\n\n### [XPGetWidgetDescriptor](/sdk/XPGetWidgetDescriptor/)\n\n```cpp\nWIDGET_API int        XPGetWidgetDescriptor(\n                         XPWidgetID           inWidget,\n                         char *               outDescriptor,\n                         int                  inMaxDescLength);\n\n```\n\nThis routine returns the widget’s descriptor. Pass in the length of the buffer\nyou are going to receive the descriptor in. The descriptor will be null\nterminated for you. This routine returns the length of the actual descriptor; if\nyou pass NULL for outDescriptor, you can get the descriptor’s length without\ngetting its text. If the length of the descriptor exceeds your buffer length,\nthe buffer will not be null terminated (this routine has ‘strncpy’ semantics).\n\n### [XPGetWidgetUnderlyingWindow](/sdk/XPGetWidgetUnderlyingWindow/)\n\n```cpp\nWIDGET_API XPLMWindowID XPGetWidgetUnderlyingWindow(\n                         XPWidgetID           inWidget);\n\n```\n\nReturns the window (from the[XPLMDisplay](/sdk/XPLMDisplay/)API) that backs your\nwidget window. If you have opted in to modern windows, via a call\nto[XPLMEnableFeature](/sdk/XPLMEnableFeature/)(“XPLM_USE_NATIVE_WIDGET_WINDOWS”,\n1), you can use the returned window ID for display APIs\nlike[XPLMSetWindowPositioningMode](/sdk/XPLMSetWindowPositioningMode/)(),\nallowing you to pop the widget window out into a real OS window, or move it into\nVR.\n\n### [XPSetWidgetProperty](/sdk/XPSetWidgetProperty/)\n\n```cpp\nWIDGET_API void       XPSetWidgetProperty(\n                         XPWidgetID           inWidget,\n                         XPWidgetPropertyID   inProperty,\n                         intptr_t             inValue);\n\n```\n\nThis function sets a widget’s property. Properties are arbitrary values\nassociated by a widget by ID.\n\n### [XPGetWidgetProperty](/sdk/XPGetWidgetProperty/)\n\n```cpp\nWIDGET_API intptr_t   XPGetWidgetProperty(\n                         XPWidgetID           inWidget,\n                         XPWidgetPropertyID   inProperty,\n                         int *                inExists);    /* Can be NULL */\n\n```\n\nThis routine returns the value of a widget’s property, or 0 if the property is\nnot defined. If you need to know whether the property is defined, pass a pointer\nto an int for inExists; the existence of that property will be returned in the\nint. Pass NULL for inExists if you do not need this information.\n\n## KEYBOARD MANAGEMENT\n\n### [XPSetKeyboardFocus](/sdk/XPSetKeyboardFocus/)\n\n```cpp\nWIDGET_API XPWidgetID XPSetKeyboardFocus(\n                         XPWidgetID           inWidget);\n\n```\n\nControls which widget will receive keystrokes. Pass the widget ID of the widget\nto get the keys. Note that if the widget does not care about keystrokes, they\nwill go to the parent widget, and if no widget cares about them, they go to\nX-Plane.\n\nIf you set the keyboard focus to widget ID 0, X-Plane gets keyboard focus.\n\nThis routine returns the widget ID that ended up with keyboard focus, or 0 for\nX-Plane.\n\nKeyboard focus is not changed if the new widget will not accept it. For setting\nto X-Plane, keyboard focus is always accepted.\n\n### [XPLoseKeyboardFocus](/sdk/XPLoseKeyboardFocus/)\n\n```cpp\nWIDGET_API void       XPLoseKeyboardFocus(\n                         XPWidgetID           inWidget);\n\n```\n\nThis causes the specified widget to lose focus; focus is passed to its parent,\nor the next parent that will accept it. This routine does nothing if this widget\ndoes not have focus.\n\n### [XPGetWidgetWithFocus](/sdk/XPGetWidgetWithFocus/)\n\n```cpp\nWIDGET_API XPWidgetID XPGetWidgetWithFocus(void);\n\n```\n\nThis routine returns the widget that has keyboard focus, or 0 if X-Plane has\nkeyboard focus or some other plugin window that does not have widgets has focus.\n\n## CREATING CUSTOM WIDGETS\n\n### [XPAddWidgetCallback](/sdk/XPAddWidgetCallback/)\n\n```cpp\nWIDGET_API void       XPAddWidgetCallback(\n                         XPWidgetID           inWidget,\n                         XPWidgetFunc_t       inNewCallback);\n\n```\n\nThis function adds a new widget callback to a widget. This widget callback\nsupercedes any existing ones and will receive messages first; if it does not\nhandle messages they will go on to be handled by pre-existing widgets.\n\nThe widget function will remain on the widget for the life of the widget. The\ncreation message will be sent to the new callback immediately with the widget\nID, and the destruction message will be sent before the other widget function\nreceives a destruction message.\n\nThis provides a way to ‘subclass’ an existing widget. By providing a second hook\nthat only handles certain widget messages, you can customize or extend widget\nbehavior.\n\n### [XPGetWidgetClassFunc](/sdk/XPGetWidgetClassFunc/)\n\n```cpp\nWIDGET_API XPWidgetFunc_t XPGetWidgetClassFunc(\n                         XPWidgetClass        inWidgetClass);\n\n```\n\nGiven a widget class, this function returns the callbacks that power that widget\nclass.",
      "own_functions": [
        "XPCreateWidget",
        "XPCreateCustomWidget",
        "XPDestroyWidget",
        "XPSendMessageToWidget",
        "XPPlaceWidgetWithin",
        "XPCountChildWidgets",
        "XPGetNthChildWidget",
        "XPGetParentWidget",
        "XPShowWidget",
        "XPHideWidget",
        "XPIsWidgetVisible",
        "XPFindRootWidget",
        "XPBringRootWidgetToFront",
        "XPIsWidgetInFront",
        "XPGetWidgetGeometry",
        "XPSetWidgetGeometry",
        "XPGetWidgetForLocation",
        "XPGetWidgetExposedGeometry",
        "XPSetWidgetDescriptor",
        "XPGetWidgetDescriptor",
        "XPGetWidgetUnderlyingWindow",
        "XPSetWidgetProperty",
        "XPGetWidgetProperty",
        "XPSetKeyboardFocus",
        "XPLoseKeyboardFocus",
        "XPGetWidgetWithFocus",
        "XPAddWidgetCallback",
        "XPGetWidgetClassFunc",
        "WIDGET_API"
      ],
      "processing_timestamp": "2025-06-25T20:39:23.230263+00:00",
      "title": "XPWidgets | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPWidgets/"
    },
    "https://developer.x-plane.com/sdk/XPWindowStyle/": {
      "api_signatures": [
        {
          "name": "XPWindowStyle",
          "type": "enum",
          "values": [
            {
              "description": "An LCD screen that shows help.",
              "name": "xpWindow_Help",
              "value": "\"0\""
            },
            {
              "description": "A dialog box window.",
              "name": "xpWindow_MainWindow",
              "value": "\"1\""
            },
            {
              "description": "A panel or frame within a dialog box window.",
              "name": "xpWindow_SubWindow",
              "value": "\"2\""
            },
            {
              "description": "An LCD screen within a panel to hold text displays.",
              "name": "xpWindow_Screen",
              "value": "\"4\""
            },
            {
              "description": "A list view within a panel for scrolling file names, etc.",
              "name": "xpWindow_ListView",
              "value": "\"5\""
            }
          ]
        }
      ],
      "category": {
        "category": "XPLM_Display",
        "module": "Xplm Display",
        "url": "https://developer.x-plane.com/sdk/XPWindowStyle/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enum\"><h3 class=\"sdk-api-enum\" id=\"XPWindowStyle\"><a href=\"/sdk/XPWindowStyle/\">XPWindowStyle</a></h3><p>There are a few built-in window styles in X-Plane that you can use.</p><p>Note that X-Plane 6 does not offer real shadow-compositing; you must make sure to put a window on top of another window of the right style to make the shadows work, etc. This applies to elements with insets and shadows. The rules are:</p><p>Sub windows must go on top of main windows, and screens and list views on top of subwindows. Only help and main windows can be over the main screen.</p><p>With X-Plane 7 any window or element may be placed over any other element.</p><p>Some windows are scaled by stretching, some by repeating. The drawing routines know which scaling method to use. The list view cannot be rescaled in X-Plane 6 because it has both a repeating pattern and a gradient in one element. All other elements can be rescaled.</p><p><div class=\"enumitem\"><table><thead><tr><th>Name</th><th>Value</th><th>Description</th></tr></thead><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpWindow_Help\"><a href=\"/sdk/xpWindow_Help/\">xpWindow_Help</a></td><td>\"0\"</td><td>An LCD screen that shows help.</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpWindow_MainWindow\"><a href=\"/sdk/xpWindow_MainWindow/\">xpWindow_MainWindow</a></td><td>\"1\"</td><td>A dialog box window.</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpWindow_SubWindow\"><a href=\"/sdk/xpWindow_SubWindow/\">xpWindow_SubWindow</a></td><td>\"2\"</td><td>A panel or frame within a dialog box window.</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpWindow_Screen\"><a href=\"/sdk/xpWindow_Screen/\">xpWindow_Screen</a></td><td>\"4\"</td><td>An LCD screen within a panel to hold text displays.</td></tr><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpWindow_ListView\"><a href=\"/sdk/xpWindow_ListView/\">xpWindow_ListView</a></td><td>\"5\"</td><td>A list view within a panel for scrolling file names, etc.</td></tr></table></div></p></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "### [XPWindowStyle](/sdk/XPWindowStyle/)\n\nThere are a few built-in window styles in X-Plane that you can use.\n\nNote that X-Plane 6 does not offer real shadow-compositing; you must make sure\nto put a window on top of another window of the right style to make the shadows\nwork, etc. This applies to elements with insets and shadows. The rules are:\n\nSub windows must go on top of main windows, and screens and list views on top of\nsubwindows. Only help and main windows can be over the main screen.\n\nWith X-Plane 7 any window or element may be placed over any other element.\n\nSome windows are scaled by stretching, some by repeating. The drawing routines\nknow which scaling method to use. The list view cannot be rescaled in X-Plane 6\nbecause it has both a repeating pattern and a gradient in one element. All other\nelements can be rescaled.\n\n| Name | Value | Description |\n| --- | --- | --- |\n| [xpWindow_Help](/sdk/xpWindow_Help/) | \"0\" | An LCD screen that shows help. |\n| [xpWindow_MainWindow](/sdk/xpWindow_MainWindow/) | \"1\" | A dialog box window.\n|\n| [xpWindow_SubWindow](/sdk/xpWindow_SubWindow/) | \"2\" | A panel or frame within\na dialog box window. |\n| [xpWindow_Screen](/sdk/xpWindow_Screen/) | \"4\" | An LCD screen within a panel\nto hold text displays. |\n| [xpWindow_ListView](/sdk/xpWindow_ListView/) | \"5\" | A list view within a\npanel for scrolling file names, etc. |",
      "own_functions": [
        "XPWindowStyle"
      ],
      "processing_timestamp": "2025-06-25T20:39:23.589895+00:00",
      "title": "XPWindowStyle | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/XPWindowStyle/"
    },
    "https://developer.x-plane.com/sdk/kXPLM_Version/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/kXPLM_Version/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"kXPLM_Version\"><a href=\"/sdk/kXPLM_Version/\">kXPLM_Version</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/kXPLM_Version/\">kXPLM_Version</a>        (411)</code></pre><p>The current XPLM revision is 4.1.1 (411).</p></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "### [kXPLM_Version](/sdk/kXPLM_Version/)\n\n```cpp\n#define kXPLM_Version        (411)\n```\n\nThe current XPLM revision is 4.1.1 (411).",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.664635+00:00",
      "title": "kXPLM_Version | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/kXPLM_Version/"
    },
    "https://developer.x-plane.com/sdk/plugin-sdk-documents/": {
      "api_signatures": [],
      "category": {
        "category": "XPLM_Plugin",
        "module": "Xplm Plugin",
        "url": "https://developer.x-plane.com/sdk/plugin-sdk-documents/"
      },
      "cleaned_html": "<article class=\"post-8234 page type-page status-publish hentry\" id=\"post-8234\"><h2 id=\"available-apis\"><span id=\"Available_APIs\">Available APIs</span></h2><ul class=\"available-apis-list\"><li><a href=\"/sdk/XPLMCamera/\"><a href=\"/sdk/XPLMCamera/\">XPLMCamera</a></a></li><li><a href=\"/sdk/XPLMDataAccess/\"><a href=\"/sdk/XPLMDataAccess/\">XPLMDataAccess</a></a></li><li><a href=\"/sdk/XPLMDefs/\"><a href=\"/sdk/XPLMDefs/\">XPLMDefs</a></a></li><li><a href=\"/sdk/XPLMDisplay/\"><a href=\"/sdk/XPLMDisplay/\">XPLMDisplay</a></a></li><li><a href=\"/sdk/XPLMGraphics/\"><a href=\"/sdk/XPLMGraphics/\">XPLMGraphics</a></a></li><li><a href=\"/sdk/XPLMInstance/\"><a href=\"/sdk/XPLMInstance/\">XPLMInstance</a></a></li><li><a href=\"/sdk/XPLMMap/\"><a href=\"/sdk/XPLMMap/\">XPLMMap</a></a></li><li><a href=\"/sdk/XPLMMenus/\"><a href=\"/sdk/XPLMMenus/\">XPLMMenus</a></a></li><li><a href=\"/sdk/XPLMNavigation/\"><a href=\"/sdk/XPLMNavigation/\">XPLMNavigation</a></a></li><li><a href=\"/sdk/XPLMPlanes/\"><a href=\"/sdk/XPLMPlanes/\">XPLMPlanes</a></a></li><li><a href=\"/sdk/XPLMPlugin/\"><a href=\"/sdk/XPLMPlugin/\">XPLMPlugin</a></a></li><li><a href=\"/sdk/XPLMProcessing/\"><a href=\"/sdk/XPLMProcessing/\">XPLMProcessing</a></a></li><li><a href=\"/sdk/XPLMScenery/\"><a href=\"/sdk/XPLMScenery/\">XPLMScenery</a></a></li><li><a href=\"/sdk/XPLMSound/\"><a href=\"/sdk/XPLMSound/\">XPLMSound</a></a></li><li><a href=\"/sdk/XPLMUtilities/\"><a href=\"/sdk/XPLMUtilities/\">XPLMUtilities</a></a></li><li><a href=\"/sdk/XPLMWeather/\"><a href=\"/sdk/XPLMWeather/\">XPLMWeather</a></a></li><li><a href=\"/sdk/XPStandardWidgets/\"><a href=\"/sdk/XPStandardWidgets/\">XPStandardWidgets</a></a></li><li><a href=\"/sdk/XPUIGraphics/\"><a href=\"/sdk/XPUIGraphics/\">XPUIGraphics</a></a></li><li><a href=\"/sdk/XPWidgetDefs/\"><a href=\"/sdk/XPWidgetDefs/\">XPWidgetDefs</a></a></li><li><a href=\"/sdk/XPWidgets/\"><a href=\"/sdk/XPWidgets/\">XPWidgets</a></a></li><li><a href=\"/sdk/XPWidgetUtils/\"><a href=\"/sdk/XPWidgetUtils/\">XPWidgetUtils</a></a></li></ul><h2 id=\"documentation\"><span id=\"General_Documentation\">General Documentation</span></h2><table class=\"post-table\"><thead><tr><th class=\"post-table-titles\">Title</th><th class=\"post-table-dates\">Updated</th><th class=\"post-table-descriptions\">Description</th></tr></thead><tbody><tr><td><a href=\"https://developer.x-plane.com/article/plugin-compatibility-guide-for-x-plane-11-50/\">Plugin compatibility guide for X-Plane 11.50</a></td><td>12 Oct 2021</td><td>X-Plane 11.50 and newer contains to option to run in Vulkan, Metal or OpenGL. This guide explains what's compatible and what needs to update for plugin authors.</td></tr><tr><td><a href=\"https://developer.x-plane.com/article/plugin-guidance-for-opengl-drawing/\">Plugin Guidance for OpenGL Drawing</a></td><td>12 Oct 2021</td><td>Guidelines for using OpenGL to draw from X-Plane plugins running inside X-Plane’s process. Plugin-drawing is supported only via OpenGL.</td></tr><tr><td><a href=\"https://developer.x-plane.com/article/testing-in-x-plane/\">Testing in X-Plane</a></td><td>16 Mar 2021</td><td>This document outlines how to test X-Plane via CLI commands and telnet. It explains key commands, debugging, and provides a sample test script text file.</td></tr><tr><td><a href=\"https://developer.x-plane.com/article/building-and-installing-plugins/\">Building and Installing Plugins</a></td><td>7 May 2019</td><td>Discusses platform-specific considerations for compiling &amp; distributing plugins on Windows, macOS, and Linux.</td></tr><tr><td><a href=\"https://developer.x-plane.com/article/developing-plugins/\">Developing Plugins</a></td><td>13 Feb 2019</td><td>An introduction to the plug-in system, including the basics of how to set up plugins.</td></tr></tbody></table><h2><span id=\"Tech_Notes\">Tech Notes</span></h2><h3><span id=\"Aircraft\">Aircraft</span></h3><table class=\"post-table\"><thead><tr><th class=\"post-table-titles\">Title</th><th class=\"post-table-dates\">Updated</th><th class=\"post-table-descriptions\">Description</th></tr></thead><tbody><tr><td><a href=\"https://developer.x-plane.com/article/helicopter-governor-and-correlator-configuration/\">Helicopter governor and correlator configuration</a></td><td>20 Nov 2023</td><td>X-Plane 12 revises the interaction of collective and throttle control in helicopters. Existing helicopters retain the default behavior of X-Plane 11 until modified in Plane Maker 12 to opt into one of the new governor systems. The joystick control assignments for collective and throttle don't change, but there's a new joystick curve available for Robinson-style throttle control.</td></tr><tr><td><a href=\"https://developer.x-plane.com/article/movingtheplane/\">Moving the Plane</a></td><td>12 Jul 2018</td><td>This tech note describes how to position the user's aircraft or multiplayer aircraft in X-Plane.</td></tr></tbody></table><h3><span id=\"Data_Access\">Data Access</span></h3><table class=\"post-table\"><thead><tr><th class=\"post-table-titles\">Title</th><th class=\"post-table-dates\">Updated</th><th class=\"post-table-descriptions\">Description</th></tr></thead><tbody><tr><td><a href=\"https://developer.x-plane.com/article/datarefs-for-the-cdu-screen/\">Datarefs for the CDU screen</a></td><td>29 Jun 2022</td><td>Datarefs to read the contents of the X-Plane default FMS Control and Display Unit (CDU) screen.</td></tr><tr><td><a href=\"https://developer.x-plane.com/article/plugin-traffic-wake-turbulence/\">Plugin Traffic Wake Turbulence</a></td><td>27 Feb 2022</td></tr><tr><td><a href=\"https://developer.x-plane.com/article/overriding-tcas-and-providing-traffic-information/\">Overriding TCAS and providing traffic information</a></td><td>4 Jan 2022</td><td>With X-Plane 11.50, plugins that display traffic in X-Plane, whether auto-generated or from an online multiplayer network, have to use the<a href=\"/sdk/XPLMInstance/\">XPLMInstance</a>API to draw these aircraft in X-Plane's world.</td></tr><tr><td><a href=\"https://developer.x-plane.com/article/sdkrawdata/\">SDKRawData</a></td><td>11 Jan 2018</td><td>This guide contains some of the raw data used to generate the SDK. It is probably not of general interest, but may be useful to programmers working with lots of datarefs, or adapting plugins to other APIs.</td></tr></tbody></table><h3><span id=\"General\">General</span></h3><table class=\"post-table\"><thead><tr><th class=\"post-table-titles\">Title</th><th class=\"post-table-dates\">Updated</th><th class=\"post-table-descriptions\">Description</th></tr></thead><tbody><tr><td><a href=\"https://developer.x-plane.com/article/luajit/\">LuaJIT</a></td><td>24 May 2021</td><td>This tech note describes the integration issues between X-Plane 10.20 64-bit and LuaJIT.</td></tr><tr><td><a href=\"https://developer.x-plane.com/article/deferredinitialization/\">Deferred Initialization</a></td><td>12 Jul 2018</td><td>This article explains limitations on plugins due to loading early in the X-Plane init sequence.</td></tr></tbody></table><h3><span id=\"Graphics\">Graphics</span></h3><table class=\"post-table\"><thead><tr><th class=\"post-table-titles\">Title</th><th class=\"post-table-dates\">Updated</th><th class=\"post-table-descriptions\">Description</th></tr></thead><tbody><tr><td><a href=\"https://developer.x-plane.com/article/drawingrules/\">Drawing Rules</a></td><td>12 Jul 2018</td><td>A tech note with guidelines on plugin drawing in X-Plane.</td></tr><tr><td><a href=\"https://developer.x-plane.com/article/screencoordinates/\">Screen Coordinates</a></td><td>12 Jul 2018</td><td>This tech-note describes the various coordinate systems in X-Plane.</td></tr><tr><td><a href=\"https://developer.x-plane.com/article/pluginsandobjects/\">Plugins and Objects</a></td><td>12 Jul 2018</td><td>This tech note describes how plugins can interact with objects.</td></tr><tr><td><a href=\"https://developer.x-plane.com/article/openglstate/\">OpenGL State</a></td><td>12 Jul 2018</td><td>This note covers the differences between the 3 OpenGL states and how to handle them in your plugin.</td></tr></tbody></table><h3><span id=\"Sound\">Sound</span></h3><table class=\"post-table\"><thead><tr><th class=\"post-table-titles\">Title</th><th class=\"post-table-dates\">Updated</th><th class=\"post-table-descriptions\">Description</th></tr></thead><tbody><tr><td><a href=\"https://developer.x-plane.com/article/openal/\">OpenAL</a></td><td>11 Jan 2018</td><td>This tech note explains how to use OpenAL in an X-Plane Plugin.</td></tr></tbody></table><h3><span id=\"User_Interface\">User Interface</span></h3></article>",
      "code_examples": [],
      "cross_references": [
        "XPLMGraphics",
        "XPLMPlugin",
        "XPLMUtilities",
        "XPLMNavigation",
        "XPLMCamera",
        "XPLMInstance",
        "XPLMProcessing",
        "XPLMPlanes",
        "XPLMMenus",
        "XPLMDataAccess",
        "XPLMMap",
        "XPLMScenery",
        "XPLMDisplay",
        "XPLMSound"
      ],
      "markdown": "## Available APIs\n\n- [[XPLMCamera](/sdk/XPLMCamera/)](/sdk/XPLMCamera/)\n- [[XPLMDataAccess](/sdk/XPLMDataAccess/)](/sdk/XPLMDataAccess/)\n- [[XPLMDefs](/sdk/XPLMDefs/)](/sdk/XPLMDefs/)\n- [[XPLMDisplay](/sdk/XPLMDisplay/)](/sdk/XPLMDisplay/)\n- [[XPLMGraphics](/sdk/XPLMGraphics/)](/sdk/XPLMGraphics/)\n- [[XPLMInstance](/sdk/XPLMInstance/)](/sdk/XPLMInstance/)\n- [[XPLMMap](/sdk/XPLMMap/)](/sdk/XPLMMap/)\n- [[XPLMMenus](/sdk/XPLMMenus/)](/sdk/XPLMMenus/)\n- [[XPLMNavigation](/sdk/XPLMNavigation/)](/sdk/XPLMNavigation/)\n- [[XPLMPlanes](/sdk/XPLMPlanes/)](/sdk/XPLMPlanes/)\n- [[XPLMPlugin](/sdk/XPLMPlugin/)](/sdk/XPLMPlugin/)\n- [[XPLMProcessing](/sdk/XPLMProcessing/)](/sdk/XPLMProcessing/)\n- [[XPLMScenery](/sdk/XPLMScenery/)](/sdk/XPLMScenery/)\n- [[XPLMSound](/sdk/XPLMSound/)](/sdk/XPLMSound/)\n- [[XPLMUtilities](/sdk/XPLMUtilities/)](/sdk/XPLMUtilities/)\n- [[XPLMWeather](/sdk/XPLMWeather/)](/sdk/XPLMWeather/)\n- [[XPStandardWidgets](/sdk/XPStandardWidgets/)](/sdk/XPStandardWidgets/)\n- [[XPUIGraphics](/sdk/XPUIGraphics/)](/sdk/XPUIGraphics/)\n- [[XPWidgetDefs](/sdk/XPWidgetDefs/)](/sdk/XPWidgetDefs/)\n- [[XPWidgets](/sdk/XPWidgets/)](/sdk/XPWidgets/)\n- [[XPWidgetUtils](/sdk/XPWidgetUtils/)](/sdk/XPWidgetUtils/)\n\n## General Documentation\n\n| Title | Updated | Description |\n| --- | --- | --- |\n| [Plugin compatibility guide for X-Plane 11.50](https://developer.x-plane.com/article/plugin-compatibility-guide-for-x-plane-11-50/) | 12 Oct 2021 | X-Plane 11.50 and newer contains to option to run in Vulkan, Metal or OpenGL. This guide explains what's compatible and what needs to update for plugin authors. |\n| [Plugin Guidance for OpenGL Drawing](https://developer.x-plane.com/article/plugin-guidance-for-opengl-drawing/) | 12 Oct 2021 | Guidelines for using OpenGL to draw from X-Plane plugins running inside X-Plane’s process. Plugin-drawing is supported only via OpenGL. |\n| [Testing in X-Plane](https://developer.x-plane.com/article/testing-in-x-plane/) | 16 Mar 2021 | This document outlines how to test X-Plane via CLI commands and telnet. It explains key commands, debugging, and provides a sample test script text file. |\n| [Building and Installing Plugins](https://developer.x-plane.com/article/building-and-installing-plugins/) | 7 May 2019 | Discusses platform-specific considerations for compiling & distributing plugins on Windows, macOS, and Linux. |\n| [Developing Plugins](https://developer.x-plane.com/article/developing-plugins/) | 13 Feb 2019 | An introduction to the plug-in system, including the basics of how to set up plugins. |\n\n## Tech Notes\n\n### Aircraft\n\n| Title | Updated | Description |\n| --- | --- | --- |\n| [Helicopter governor and correlator configuration](https://developer.x-plane.com/article/helicopter-governor-and-correlator-configuration/) | 20 Nov 2023 | X-Plane 12 revises the interaction of collective and throttle control in helicopters. Existing helicopters retain the default behavior of X-Plane 11 until modified in Plane Maker 12 to opt into one of the new governor systems. The joystick control assignments for collective and throttle don't change, but there's a new joystick curve available for Robinson-style throttle control. |\n| [Moving the Plane](https://developer.x-plane.com/article/movingtheplane/) | 12 Jul 2018 | This tech note describes how to position the user's aircraft or multiplayer aircraft in X-Plane. |\n\n### Data Access\n\n| Title | Updated | Description |\n| --- | --- | --- |\n| [Datarefs for the CDU screen](https://developer.x-plane.com/article/datarefs-for-the-cdu-screen/) | 29 Jun 2022 | Datarefs to read the contents of the X-Plane default FMS Control and Display Unit (CDU) screen. |\n| [Plugin Traffic Wake Turbulence](https://developer.x-plane.com/article/plugin-traffic-wake-turbulence/) | 27 Feb 2022 |\n| [Overriding TCAS and providing traffic information](https://developer.x-plane.com/article/overriding-tcas-and-providing-traffic-information/) | 4 Jan 2022 | With X-Plane 11.50, plugins that display traffic in X-Plane, whether auto-generated or from an online multiplayer network, have to use the[XPLMInstance](/sdk/XPLMInstance/)API to draw these aircraft in X-Plane's world. |\n| [SDKRawData](https://developer.x-plane.com/article/sdkrawdata/) | 11 Jan 2018 | This guide contains some of the raw data used to generate the SDK. It is probably not of general interest, but may be useful to programmers working with lots of datarefs, or adapting plugins to other APIs. |\n\n### General\n\n| Title | Updated | Description |\n| --- | --- | --- |\n| [LuaJIT](https://developer.x-plane.com/article/luajit/) | 24 May 2021 | This tech note describes the integration issues between X-Plane 10.20 64-bit and LuaJIT. |\n| [Deferred Initialization](https://developer.x-plane.com/article/deferredinitialization/) | 12 Jul 2018 | This article explains limitations on plugins due to loading early in the X-Plane init sequence. |\n\n### Graphics\n\n| Title | Updated | Description |\n| --- | --- | --- |\n| [Drawing Rules](https://developer.x-plane.com/article/drawingrules/) | 12 Jul 2018 | A tech note with guidelines on plugin drawing in X-Plane. |\n| [Screen Coordinates](https://developer.x-plane.com/article/screencoordinates/) | 12 Jul 2018 | This tech-note describes the various coordinate systems in X-Plane. |\n| [Plugins and Objects](https://developer.x-plane.com/article/pluginsandobjects/) | 12 Jul 2018 | This tech note describes how plugins can interact with objects. |\n| [OpenGL State](https://developer.x-plane.com/article/openglstate/) | 12 Jul 2018 | This note covers the differences between the 3 OpenGL states and how to handle them in your plugin. |\n\n### Sound\n\n| Title | Updated | Description |\n| --- | --- | --- |\n| [OpenAL](https://developer.x-plane.com/article/openal/) | 11 Jan 2018 | This tech note explains how to use OpenAL in an X-Plane Plugin. |\n\n### User Interface",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:24.306101+00:00",
      "title": "Plugin SDK Documents - X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/plugin-sdk-documents/"
    },
    "https://developer.x-plane.com/sdk/xpAircraftCarrier/": {
      "api_signatures": [],
      "category": {
        "category": "XPLM_Planes",
        "module": "Xplm Planes",
        "url": "https://developer.x-plane.com/sdk/xpAircraftCarrier/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem\"><table><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpAircraftCarrier\"><a href=\"/sdk/xpAircraftCarrier/\">xpAircraftCarrier</a></td><td>\"11\"</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |\n| --- | --- |\n| [xpAircraftCarrier](/sdk/xpAircraftCarrier/) | \"11\" |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:24.170486+00:00",
      "title": "xpAircraftCarrier | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xpAircraftCarrier/"
    },
    "https://developer.x-plane.com/sdk/xpBuilding/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/xpBuilding/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem\"><table><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpBuilding\"><a href=\"/sdk/xpBuilding/\">xpBuilding</a></td><td>\"17\"</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |\n| --- | --- |\n| [xpBuilding](/sdk/xpBuilding/) | \"17\" |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.665636+00:00",
      "title": "xpBuilding | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xpBuilding/"
    },
    "https://developer.x-plane.com/sdk/xpButtonBehaviorCheckBox/": {
      "api_signatures": [],
      "category": {
        "category": "XPLM_Menus",
        "module": "Xplm Menus",
        "url": "https://developer.x-plane.com/sdk/xpButtonBehaviorCheckBox/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem\"><table><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpButtonBehaviorCheckBox\"><a href=\"/sdk/xpButtonBehaviorCheckBox/\">xpButtonBehaviorCheckBox</a></td><td>\"1\"</td><td>Check box behavior. The button immediately toggles its value when the mouse is clicked and sends out a<a href=\"/sdk/xpMsg_ButtonStateChanged/\">xpMsg_ButtonStateChanged</a>message.</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |  |\n| --- | --- | --- |\n| [xpButtonBehaviorCheckBox](/sdk/xpButtonBehaviorCheckBox/) | \"1\" | Check box behavior. The button immediately toggles its value when the mouse is clicked and sends out a[xpMsg_ButtonStateChanged](/sdk/xpMsg_ButtonStateChanged/)message. |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:23.933822+00:00",
      "title": "xpButtonBehaviorCheckBox | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xpButtonBehaviorCheckBox/"
    },
    "https://developer.x-plane.com/sdk/xpButtonBehaviorPushButton/": {
      "api_signatures": [],
      "category": {
        "category": "Widget_System",
        "module": "Widget System",
        "url": "https://developer.x-plane.com/sdk/xpButtonBehaviorPushButton/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem\"><table><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpButtonBehaviorPushButton\"><a href=\"/sdk/xpButtonBehaviorPushButton/\">xpButtonBehaviorPushButton</a></td><td>\"0\"</td><td>Standard push button behavior. The button highlights while the mouse is clickedover it and unhighlights when the mouse is moved outside of it or released.If the mouse is released over the button, the<a href=\"/sdk/xpMsg_PushButtonPressed/\">xpMsg_PushButtonPressed</a>messageis sent.</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |  |\n| --- | --- | --- |\n| [xpButtonBehaviorPushButton](/sdk/xpButtonBehaviorPushButton/) | \"0\" | Standard push button behavior. The button highlights while the mouse is clickedover it and unhighlights when the mouse is moved outside of it or released.If the mouse is released over the button, the[xpMsg_PushButtonPressed](/sdk/xpMsg_PushButtonPressed/)messageis sent. |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:23.246268+00:00",
      "title": "xpButtonBehaviorPushButton | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xpButtonBehaviorPushButton/"
    },
    "https://developer.x-plane.com/sdk/xpButtonBehaviorRadioButton/": {
      "api_signatures": [],
      "category": {
        "category": "Widget_System",
        "module": "Widget System",
        "url": "https://developer.x-plane.com/sdk/xpButtonBehaviorRadioButton/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem\"><table><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpButtonBehaviorRadioButton\"><a href=\"/sdk/xpButtonBehaviorRadioButton/\">xpButtonBehaviorRadioButton</a></td><td>\"2\"</td><td>Radio button behavior. The button immediately sets its state to oneand sends out a<a href=\"/sdk/xpMsg_ButtonStateChanged/\">xpMsg_ButtonStateChanged</a>message if it was not already setto one. You must turn off other radio buttons in a group in your code.</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |  |\n| --- | --- | --- |\n| [xpButtonBehaviorRadioButton](/sdk/xpButtonBehaviorRadioButton/) | \"2\" | Radio button behavior. The button immediately sets its state to oneand sends out a[xpMsg_ButtonStateChanged](/sdk/xpMsg_ButtonStateChanged/)message if it was not already setto one. You must turn off other radio buttons in a group in your code. |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:23.248265+00:00",
      "title": "xpButtonBehaviorRadioButton | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xpButtonBehaviorRadioButton/"
    },
    "https://developer.x-plane.com/sdk/xpCoolingTower/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/xpCoolingTower/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem\"><table><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpCoolingTower\"><a href=\"/sdk/xpCoolingTower/\">xpCoolingTower</a></td><td>\"15\"</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |\n| --- | --- |\n| [xpCoolingTower](/sdk/xpCoolingTower/) | \"15\" |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.667689+00:00",
      "title": "xpCoolingTower | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xpCoolingTower/"
    },
    "https://developer.x-plane.com/sdk/xpCustomObject/": {
      "api_signatures": [],
      "category": {
        "category": "XPLM_Instance",
        "module": "Xplm Instance",
        "url": "https://developer.x-plane.com/sdk/xpCustomObject/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem\"><table><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpCustomObject\"><a href=\"/sdk/xpCustomObject/\">xpCustomObject</a></td><td>\"14\"</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |\n| --- | --- |\n| [xpCustomObject](/sdk/xpCustomObject/) | \"14\" |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:23.756752+00:00",
      "title": "xpCustomObject | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xpCustomObject/"
    },
    "https://developer.x-plane.com/sdk/xpElement_AircraftCarrier/": {
      "api_signatures": [],
      "category": {
        "category": "XPLM_Planes",
        "module": "Xplm Planes",
        "url": "https://developer.x-plane.com/sdk/xpElement_AircraftCarrier/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem\"><table><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpElement_AircraftCarrier\"><a href=\"/sdk/xpElement_AircraftCarrier/\">xpElement_AircraftCarrier</a></td><td>\"34\"</td><td>none any</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |  |\n| --- | --- | --- |\n| [xpElement_AircraftCarrier](/sdk/xpElement_AircraftCarrier/) | \"34\" | none any |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:24.177490+00:00",
      "title": "xpElement_AircraftCarrier | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xpElement_AircraftCarrier/"
    },
    "https://developer.x-plane.com/sdk/xpElement_Airport/": {
      "api_signatures": [],
      "category": {
        "category": "XPLM_Navigation",
        "module": "Xplm Navigation",
        "url": "https://developer.x-plane.com/sdk/xpElement_Airport/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem\"><table><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpElement_Airport\"><a href=\"/sdk/xpElement_Airport/\">xpElement_Airport</a></td><td>\"29\"</td><td>none any</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |  |\n| --- | --- | --- |\n| [xpElement_Airport](/sdk/xpElement_Airport/) | \"29\" | none any |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:24.102138+00:00",
      "title": "xpElement_Airport | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xpElement_Airport/"
    },
    "https://developer.x-plane.com/sdk/xpElement_Building/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/xpElement_Building/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem\"><table><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpElement_Building\"><a href=\"/sdk/xpElement_Building/\">xpElement_Building</a></td><td>\"40\"</td><td>none any</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |  |\n| --- | --- | --- |\n| [xpElement_Building](/sdk/xpElement_Building/) | \"40\" | none any |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.668688+00:00",
      "title": "xpElement_Building | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xpElement_Building/"
    },
    "https://developer.x-plane.com/sdk/xpElement_CheckBox/": {
      "api_signatures": [],
      "category": {
        "category": "XPLM_Menus",
        "module": "Xplm Menus",
        "url": "https://developer.x-plane.com/sdk/xpElement_CheckBox/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem\"><table><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpElement_CheckBox\"><a href=\"/sdk/xpElement_CheckBox/\">xpElement_CheckBox</a></td><td>\"9\"</td><td>none metal</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |  |\n| --- | --- | --- |\n| [xpElement_CheckBox](/sdk/xpElement_CheckBox/) | \"9\" | none metal |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:23.940826+00:00",
      "title": "xpElement_CheckBox | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xpElement_CheckBox/"
    },
    "https://developer.x-plane.com/sdk/xpElement_CheckBoxLit/": {
      "api_signatures": [],
      "category": {
        "category": "XPLM_Menus",
        "module": "Xplm Menus",
        "url": "https://developer.x-plane.com/sdk/xpElement_CheckBoxLit/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem\"><table><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpElement_CheckBoxLit\"><a href=\"/sdk/xpElement_CheckBoxLit/\">xpElement_CheckBoxLit</a></td><td>\"10\"</td><td>none metal</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |  |\n| --- | --- | --- |\n| [xpElement_CheckBoxLit](/sdk/xpElement_CheckBoxLit/) | \"10\" | none metal |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:23.939823+00:00",
      "title": "xpElement_CheckBoxLit | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xpElement_CheckBoxLit/"
    },
    "https://developer.x-plane.com/sdk/xpElement_CoolingTower/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/xpElement_CoolingTower/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem\"><table><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpElement_CoolingTower\"><a href=\"/sdk/xpElement_CoolingTower/\">xpElement_CoolingTower</a></td><td>\"38\"</td><td>none any</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |  |\n| --- | --- | --- |\n| [xpElement_CoolingTower](/sdk/xpElement_CoolingTower/) | \"38\" | none any |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.670689+00:00",
      "title": "xpElement_CoolingTower | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xpElement_CoolingTower/"
    },
    "https://developer.x-plane.com/sdk/xpElement_CopyButtons/": {
      "api_signatures": [],
      "category": {
        "category": "Widget_System",
        "module": "Widget System",
        "url": "https://developer.x-plane.com/sdk/xpElement_CopyButtons/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem\"><table><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpElement_CopyButtons\"><a href=\"/sdk/xpElement_CopyButtons/\">xpElement_CopyButtons</a></td><td>\"45\"</td><td>none metal</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |  |\n| --- | --- | --- |\n| [xpElement_CopyButtons](/sdk/xpElement_CopyButtons/) | \"45\" | none metal |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:23.250266+00:00",
      "title": "xpElement_CopyButtons | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xpElement_CopyButtons/"
    },
    "https://developer.x-plane.com/sdk/xpElement_CopyButtonsWithEditingGrid/": {
      "api_signatures": [],
      "category": {
        "category": "Widget_System",
        "module": "Widget System",
        "url": "https://developer.x-plane.com/sdk/xpElement_CopyButtonsWithEditingGrid/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem\"><table><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpElement_CopyButtonsWithEditingGrid\"><a href=\"/sdk/xpElement_CopyButtonsWithEditingGrid/\">xpElement_CopyButtonsWithEditingGrid</a></td><td>\"46\"</td><td>none metal</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |  |\n| --- | --- | --- |\n| [xpElement_CopyButtonsWithEditingGrid](/sdk/xpElement_CopyButtonsWithEditingGrid/) | \"46\" | none metal |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:23.251266+00:00",
      "title": "xpElement_CopyButtonsWithEditingGrid | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xpElement_CopyButtonsWithEditingGrid/"
    },
    "https://developer.x-plane.com/sdk/xpElement_CustomObject/": {
      "api_signatures": [],
      "category": {
        "category": "XPLM_Instance",
        "module": "Xplm Instance",
        "url": "https://developer.x-plane.com/sdk/xpElement_CustomObject/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem\"><table><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpElement_CustomObject\"><a href=\"/sdk/xpElement_CustomObject/\">xpElement_CustomObject</a></td><td>\"37\"</td><td>none any</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |  |\n| --- | --- | --- |\n| [xpElement_CustomObject](/sdk/xpElement_CustomObject/) | \"37\" | none any |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:23.758751+00:00",
      "title": "xpElement_CustomObject | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xpElement_CustomObject/"
    },
    "https://developer.x-plane.com/sdk/xpElement_EditingGrid/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/xpElement_EditingGrid/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem\"><table><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpElement_EditingGrid\"><a href=\"/sdk/xpElement_EditingGrid/\">xpElement_EditingGrid</a></td><td>\"47\"</td><td>x, y metal</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |  |\n| --- | --- | --- |\n| [xpElement_EditingGrid](/sdk/xpElement_EditingGrid/) | \"47\" | x, y metal |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.672688+00:00",
      "title": "xpElement_EditingGrid | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xpElement_EditingGrid/"
    },
    "https://developer.x-plane.com/sdk/xpElement_Fire/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/xpElement_Fire/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem\"><table><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpElement_Fire\"><a href=\"/sdk/xpElement_Fire/\">xpElement_Fire</a></td><td>\"35\"</td><td>none any</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |  |\n| --- | --- | --- |\n| [xpElement_Fire](/sdk/xpElement_Fire/) | \"35\" | none any |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.674689+00:00",
      "title": "xpElement_Fire | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xpElement_Fire/"
    },
    "https://developer.x-plane.com/sdk/xpElement_ILSGlideScope/": {
      "api_signatures": [],
      "category": {
        "category": "XPLM_Graphics",
        "module": "Xplm Graphics",
        "url": "https://developer.x-plane.com/sdk/xpElement_ILSGlideScope/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem\"><table><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpElement_ILSGlideScope\"><a href=\"/sdk/xpElement_ILSGlideScope/\">xpElement_ILSGlideScope</a></td><td>\"27\"</td><td>none any</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |  |\n| --- | --- | --- |\n| [xpElement_ILSGlideScope](/sdk/xpElement_ILSGlideScope/) | \"27\" | none any |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:23.713294+00:00",
      "title": "xpElement_ILSGlideScope | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xpElement_ILSGlideScope/"
    },
    "https://developer.x-plane.com/sdk/xpElement_LittleDownArrow/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/xpElement_LittleDownArrow/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem\"><table><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpElement_LittleDownArrow\"><a href=\"/sdk/xpElement_LittleDownArrow/\">xpElement_LittleDownArrow</a></td><td>\"53\"</td><td>none metal</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |  |\n| --- | --- | --- |\n| [xpElement_LittleDownArrow](/sdk/xpElement_LittleDownArrow/) | \"53\" | none metal |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.676692+00:00",
      "title": "xpElement_LittleDownArrow | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xpElement_LittleDownArrow/"
    },
    "https://developer.x-plane.com/sdk/xpElement_LittleUpArrow/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/xpElement_LittleUpArrow/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem\"><table><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpElement_LittleUpArrow\"><a href=\"/sdk/xpElement_LittleUpArrow/\">xpElement_LittleUpArrow</a></td><td>\"54\"</td><td>none metal</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |  |\n| --- | --- | --- |\n| [xpElement_LittleUpArrow](/sdk/xpElement_LittleUpArrow/) | \"54\" | none metal |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.678777+00:00",
      "title": "xpElement_LittleUpArrow | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xpElement_LittleUpArrow/"
    },
    "https://developer.x-plane.com/sdk/xpElement_MarkerLeft/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/xpElement_MarkerLeft/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem\"><table><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpElement_MarkerLeft\"><a href=\"/sdk/xpElement_MarkerLeft/\">xpElement_MarkerLeft</a></td><td>\"28\"</td><td>none any</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |  |\n| --- | --- | --- |\n| [xpElement_MarkerLeft](/sdk/xpElement_MarkerLeft/) | \"28\" | none any |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.677777+00:00",
      "title": "xpElement_MarkerLeft | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xpElement_MarkerLeft/"
    },
    "https://developer.x-plane.com/sdk/xpElement_MarkerRight/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/xpElement_MarkerRight/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem\"><table><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpElement_MarkerRight\"><a href=\"/sdk/xpElement_MarkerRight/\">xpElement_MarkerRight</a></td><td>\"36\"</td><td>none any</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |  |\n| --- | --- | --- |\n| [xpElement_MarkerRight](/sdk/xpElement_MarkerRight/) | \"36\" | none any |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.680778+00:00",
      "title": "xpElement_MarkerRight | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xpElement_MarkerRight/"
    },
    "https://developer.x-plane.com/sdk/xpElement_NDB/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/xpElement_NDB/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem\"><table><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpElement_NDB\"><a href=\"/sdk/xpElement_NDB/\">xpElement_NDB</a></td><td>\"31\"</td><td>none any</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |  |\n| --- | --- | --- |\n| [xpElement_NDB](/sdk/xpElement_NDB/) | \"31\" | none any |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.681777+00:00",
      "title": "xpElement_NDB | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xpElement_NDB/"
    },
    "https://developer.x-plane.com/sdk/xpElement_OilPlatform/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/xpElement_OilPlatform/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem\"><table><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpElement_OilPlatform\"><a href=\"/sdk/xpElement_OilPlatform/\">xpElement_OilPlatform</a></td><td>\"24\"</td><td>none any</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |  |\n| --- | --- | --- |\n| [xpElement_OilPlatform](/sdk/xpElement_OilPlatform/) | \"24\" | none any |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.686777+00:00",
      "title": "xpElement_OilPlatform | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xpElement_OilPlatform/"
    },
    "https://developer.x-plane.com/sdk/xpElement_OilPlatformSmall/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/xpElement_OilPlatformSmall/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem\"><table><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpElement_OilPlatformSmall\"><a href=\"/sdk/xpElement_OilPlatformSmall/\">xpElement_OilPlatformSmall</a></td><td>\"25\"</td><td>none any</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |  |\n| --- | --- | --- |\n| [xpElement_OilPlatformSmall](/sdk/xpElement_OilPlatformSmall/) | \"25\" | none any |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.683778+00:00",
      "title": "xpElement_OilPlatformSmall | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xpElement_OilPlatformSmall/"
    },
    "https://developer.x-plane.com/sdk/xpElement_PowerLine/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/xpElement_PowerLine/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem\"><table><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpElement_PowerLine\"><a href=\"/sdk/xpElement_PowerLine/\">xpElement_PowerLine</a></td><td>\"41\"</td><td>none any</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |  |\n| --- | --- | --- |\n| [xpElement_PowerLine](/sdk/xpElement_PowerLine/) | \"41\" | none any |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.685777+00:00",
      "title": "xpElement_PowerLine | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xpElement_PowerLine/"
    },
    "https://developer.x-plane.com/sdk/xpElement_PushButton/": {
      "api_signatures": [],
      "category": {
        "category": "Widget_System",
        "module": "Widget System",
        "url": "https://developer.x-plane.com/sdk/xpElement_PushButton/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem\"><table><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpElement_PushButton\"><a href=\"/sdk/xpElement_PushButton/\">xpElement_PushButton</a></td><td>\"16\"</td><td>x metal</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |  |\n| --- | --- | --- |\n| [xpElement_PushButton](/sdk/xpElement_PushButton/) | \"16\" | x metal |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:23.252771+00:00",
      "title": "xpElement_PushButton | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xpElement_PushButton/"
    },
    "https://developer.x-plane.com/sdk/xpElement_PushButtonLit/": {
      "api_signatures": [],
      "category": {
        "category": "Widget_System",
        "module": "Widget System",
        "url": "https://developer.x-plane.com/sdk/xpElement_PushButtonLit/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem\"><table><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpElement_PushButtonLit\"><a href=\"/sdk/xpElement_PushButtonLit/\">xpElement_PushButtonLit</a></td><td>\"17\"</td><td>x metal</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |  |\n| --- | --- | --- |\n| [xpElement_PushButtonLit](/sdk/xpElement_PushButtonLit/) | \"17\" | x metal |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:23.256775+00:00",
      "title": "xpElement_PushButtonLit | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xpElement_PushButtonLit/"
    },
    "https://developer.x-plane.com/sdk/xpElement_RadioTower/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/xpElement_RadioTower/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem\"><table><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpElement_RadioTower\"><a href=\"/sdk/xpElement_RadioTower/\">xpElement_RadioTower</a></td><td>\"33\"</td><td>none any</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |  |\n| --- | --- | --- |\n| [xpElement_RadioTower](/sdk/xpElement_RadioTower/) | \"33\" | none any |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.688778+00:00",
      "title": "xpElement_RadioTower | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xpElement_RadioTower/"
    },
    "https://developer.x-plane.com/sdk/xpElement_ScrollBar/": {
      "api_signatures": [],
      "category": {
        "category": "Widget_System",
        "module": "Widget System",
        "url": "https://developer.x-plane.com/sdk/xpElement_ScrollBar/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem\"><table><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpElement_ScrollBar\"><a href=\"/sdk/xpElement_ScrollBar/\">xpElement_ScrollBar</a></td><td>\"48\"</td><td>THIS CAN PROBABLY BE REMOVED</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |  |\n| --- | --- | --- |\n| [xpElement_ScrollBar](/sdk/xpElement_ScrollBar/) | \"48\" | THIS CAN PROBABLY BE REMOVED |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:23.255774+00:00",
      "title": "xpElement_ScrollBar | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xpElement_ScrollBar/"
    },
    "https://developer.x-plane.com/sdk/xpElement_Ship/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/xpElement_Ship/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem\"><table><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpElement_Ship\"><a href=\"/sdk/xpElement_Ship/\">xpElement_Ship</a></td><td>\"26\"</td><td>none any</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |  |\n| --- | --- | --- |\n| [xpElement_Ship](/sdk/xpElement_Ship/) | \"26\" | none any |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.690776+00:00",
      "title": "xpElement_Ship | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xpElement_Ship/"
    },
    "https://developer.x-plane.com/sdk/xpElement_SmokeStack/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/xpElement_SmokeStack/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem\"><table><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpElement_SmokeStack\"><a href=\"/sdk/xpElement_SmokeStack/\">xpElement_SmokeStack</a></td><td>\"39\"</td><td>none any</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |  |\n| --- | --- | --- |\n| [xpElement_SmokeStack](/sdk/xpElement_SmokeStack/) | \"39\" | none any |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.692778+00:00",
      "title": "xpElement_SmokeStack | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xpElement_SmokeStack/"
    },
    "https://developer.x-plane.com/sdk/xpElement_TextField/": {
      "api_signatures": [],
      "category": {
        "category": "Widget_System",
        "module": "Widget System",
        "url": "https://developer.x-plane.com/sdk/xpElement_TextField/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem\"><table><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpElement_TextField\"><a href=\"/sdk/xpElement_TextField/\">xpElement_TextField</a></td><td>\"6\"</td><td>x metal</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |  |\n| --- | --- | --- |\n| [xpElement_TextField](/sdk/xpElement_TextField/) | \"6\" | x metal |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:23.258818+00:00",
      "title": "xpElement_TextField | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xpElement_TextField/"
    },
    "https://developer.x-plane.com/sdk/xpElement_TextFieldMiddle/": {
      "api_signatures": [],
      "category": {
        "category": "Widget_System",
        "module": "Widget System",
        "url": "https://developer.x-plane.com/sdk/xpElement_TextFieldMiddle/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem\"><table><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpElement_TextFieldMiddle\"><a href=\"/sdk/xpElement_TextFieldMiddle/\">xpElement_TextFieldMiddle</a></td><td>\"52\"</td><td>x, y metal</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |  |\n| --- | --- | --- |\n| [xpElement_TextFieldMiddle](/sdk/xpElement_TextFieldMiddle/) | \"52\" | x, y metal |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:23.259821+00:00",
      "title": "xpElement_TextFieldMiddle | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xpElement_TextFieldMiddle/"
    },
    "https://developer.x-plane.com/sdk/xpElement_VOR/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/xpElement_VOR/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem\"><table><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpElement_VOR\"><a href=\"/sdk/xpElement_VOR/\">xpElement_VOR</a></td><td>\"32\"</td><td>none any</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |  |\n| --- | --- | --- |\n| [xpElement_VOR](/sdk/xpElement_VOR/) | \"32\" | none any |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.695778+00:00",
      "title": "xpElement_VOR | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xpElement_VOR/"
    },
    "https://developer.x-plane.com/sdk/xpElement_VORWithCompassRose/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/xpElement_VORWithCompassRose/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem\"><table><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpElement_VORWithCompassRose\"><a href=\"/sdk/xpElement_VORWithCompassRose/\">xpElement_VORWithCompassRose</a></td><td>\"49\"</td><td>none any</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |  |\n| --- | --- | --- |\n| [xpElement_VORWithCompassRose](/sdk/xpElement_VORWithCompassRose/) | \"49\" | none any |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.693777+00:00",
      "title": "xpElement_VORWithCompassRose | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xpElement_VORWithCompassRose/"
    },
    "https://developer.x-plane.com/sdk/xpElement_Waypoint/": {
      "api_signatures": [],
      "category": {
        "category": "XPLM_Navigation",
        "module": "Xplm Navigation",
        "url": "https://developer.x-plane.com/sdk/xpElement_Waypoint/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem\"><table><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpElement_Waypoint\"><a href=\"/sdk/xpElement_Waypoint/\">xpElement_Waypoint</a></td><td>\"30\"</td><td>none any</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |  |\n| --- | --- | --- |\n| [xpElement_Waypoint](/sdk/xpElement_Waypoint/) | \"30\" | none any |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:24.105138+00:00",
      "title": "xpElement_Waypoint | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xpElement_Waypoint/"
    },
    "https://developer.x-plane.com/sdk/xpElement_WindowCloseBox/": {
      "api_signatures": [],
      "category": {
        "category": "XPLM_Display",
        "module": "Xplm Display",
        "url": "https://developer.x-plane.com/sdk/xpElement_WindowCloseBox/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem\"><table><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpElement_WindowCloseBox\"><a href=\"/sdk/xpElement_WindowCloseBox/\">xpElement_WindowCloseBox</a></td><td>\"14\"</td><td>none window header</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |  |\n| --- | --- | --- |\n| [xpElement_WindowCloseBox](/sdk/xpElement_WindowCloseBox/) | \"14\" | none window header |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:23.591399+00:00",
      "title": "xpElement_WindowCloseBox | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xpElement_WindowCloseBox/"
    },
    "https://developer.x-plane.com/sdk/xpElement_WindowCloseBoxPressed/": {
      "api_signatures": [],
      "category": {
        "category": "XPLM_Display",
        "module": "Xplm Display",
        "url": "https://developer.x-plane.com/sdk/xpElement_WindowCloseBoxPressed/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem\"><table><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpElement_WindowCloseBoxPressed\"><a href=\"/sdk/xpElement_WindowCloseBoxPressed/\">xpElement_WindowCloseBoxPressed</a></td><td>\"15\"</td><td>none window header</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |  |\n| --- | --- | --- |\n| [xpElement_WindowCloseBoxPressed](/sdk/xpElement_WindowCloseBoxPressed/) | \"15\" | none window header |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:23.592405+00:00",
      "title": "xpElement_WindowCloseBoxPressed | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xpElement_WindowCloseBoxPressed/"
    },
    "https://developer.x-plane.com/sdk/xpElement_WindowDragBar/": {
      "api_signatures": [],
      "category": {
        "category": "XPLM_Display",
        "module": "Xplm Display",
        "url": "https://developer.x-plane.com/sdk/xpElement_WindowDragBar/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem\"><table><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpElement_WindowDragBar\"><a href=\"/sdk/xpElement_WindowDragBar/\">xpElement_WindowDragBar</a></td><td>\"61\"</td><td>none metal</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |  |\n| --- | --- | --- |\n| [xpElement_WindowDragBar](/sdk/xpElement_WindowDragBar/) | \"61\" | none metal |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:23.594403+00:00",
      "title": "xpElement_WindowDragBar | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xpElement_WindowDragBar/"
    },
    "https://developer.x-plane.com/sdk/xpElement_WindowDragBarSmooth/": {
      "api_signatures": [],
      "category": {
        "category": "XPLM_Display",
        "module": "Xplm Display",
        "url": "https://developer.x-plane.com/sdk/xpElement_WindowDragBarSmooth/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem\"><table><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpElement_WindowDragBarSmooth\"><a href=\"/sdk/xpElement_WindowDragBarSmooth/\">xpElement_WindowDragBarSmooth</a></td><td>\"62\"</td><td>none metal</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |  |\n| --- | --- | --- |\n| [xpElement_WindowDragBarSmooth](/sdk/xpElement_WindowDragBarSmooth/) | \"62\" | none metal |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:23.596486+00:00",
      "title": "xpElement_WindowDragBarSmooth | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xpElement_WindowDragBarSmooth/"
    },
    "https://developer.x-plane.com/sdk/xpElement_Zoomer/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/xpElement_Zoomer/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem\"><table><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpElement_Zoomer\"><a href=\"/sdk/xpElement_Zoomer/\">xpElement_Zoomer</a></td><td>\"51\"</td><td>none metal</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |  |\n| --- | --- | --- |\n| [xpElement_Zoomer](/sdk/xpElement_Zoomer/) | \"51\" | none metal |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.699777+00:00",
      "title": "xpElement_Zoomer | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xpElement_Zoomer/"
    },
    "https://developer.x-plane.com/sdk/xpFire/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/xpFire/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem\"><table><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpFire\"><a href=\"/sdk/xpFire/\">xpFire</a></td><td>\"12\"</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |\n| --- | --- |\n| [xpFire](/sdk/xpFire/) | \"12\" |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.697776+00:00",
      "title": "xpFire | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xpFire/"
    },
    "https://developer.x-plane.com/sdk/xpILSGlideScope/": {
      "api_signatures": [],
      "category": {
        "category": "XPLM_Graphics",
        "module": "Xplm Graphics",
        "url": "https://developer.x-plane.com/sdk/xpILSGlideScope/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem\"><table><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpILSGlideScope\"><a href=\"/sdk/xpILSGlideScope/\">xpILSGlideScope</a></td><td>\"5\"</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |\n| --- | --- |\n| [xpILSGlideScope](/sdk/xpILSGlideScope/) | \"5\" |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:23.716346+00:00",
      "title": "xpILSGlideScope | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xpILSGlideScope/"
    },
    "https://developer.x-plane.com/sdk/xpLittleDownArrow/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/xpLittleDownArrow/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem\"><table><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpLittleDownArrow\"><a href=\"/sdk/xpLittleDownArrow/\">xpLittleDownArrow</a></td><td>\"5\"</td><td>A small down arrow.</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |  |\n| --- | --- | --- |\n| [xpLittleDownArrow](/sdk/xpLittleDownArrow/) | \"5\" | A small down arrow. |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.701778+00:00",
      "title": "xpLittleDownArrow | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xpLittleDownArrow/"
    },
    "https://developer.x-plane.com/sdk/xpLittleUpArrow/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/xpLittleUpArrow/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem\"><table><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpLittleUpArrow\"><a href=\"/sdk/xpLittleUpArrow/\">xpLittleUpArrow</a></td><td>\"6\"</td><td>A small up arrow.</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |  |\n| --- | --- | --- |\n| [xpLittleUpArrow](/sdk/xpLittleUpArrow/) | \"6\" | A small up arrow. |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.704777+00:00",
      "title": "xpLittleUpArrow | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xpLittleUpArrow/"
    },
    "https://developer.x-plane.com/sdk/xpMainWindowStyle_MainWindow/": {
      "api_signatures": [],
      "category": {
        "category": "XPLM_Display",
        "module": "Xplm Display",
        "url": "https://developer.x-plane.com/sdk/xpMainWindowStyle_MainWindow/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem\"><table><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpMainWindowStyle_MainWindow\"><a href=\"/sdk/xpMainWindowStyle_MainWindow/\">xpMainWindowStyle_MainWindow</a></td><td>\"0\"</td><td>The standard main window; pin stripes on XP7, metal frame on XP 6.</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |  |\n| --- | --- | --- |\n| [xpMainWindowStyle_MainWindow](/sdk/xpMainWindowStyle_MainWindow/) | \"0\" | The standard main window; pin stripes on XP7, metal frame on XP 6. |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:23.597491+00:00",
      "title": "xpMainWindowStyle_MainWindow | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xpMainWindowStyle_MainWindow/"
    },
    "https://developer.x-plane.com/sdk/xpMainWindowStyle_Translucent/": {
      "api_signatures": [],
      "category": {
        "category": "XPLM_Display",
        "module": "Xplm Display",
        "url": "https://developer.x-plane.com/sdk/xpMainWindowStyle_Translucent/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem\"><table><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpMainWindowStyle_Translucent\"><a href=\"/sdk/xpMainWindowStyle_Translucent/\">xpMainWindowStyle_Translucent</a></td><td>\"1\"</td><td>A translucent dark gray window.</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |  |\n| --- | --- | --- |\n| [xpMainWindowStyle_Translucent](/sdk/xpMainWindowStyle_Translucent/) | \"1\" | A translucent dark gray window. |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:23.599490+00:00",
      "title": "xpMainWindowStyle_Translucent | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xpMainWindowStyle_Translucent/"
    },
    "https://developer.x-plane.com/sdk/xpMarkerLeft/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/xpMarkerLeft/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem\"><table><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpMarkerLeft\"><a href=\"/sdk/xpMarkerLeft/\">xpMarkerLeft</a></td><td>\"6\"</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |\n| --- | --- |\n| [xpMarkerLeft](/sdk/xpMarkerLeft/) | \"6\" |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.702777+00:00",
      "title": "xpMarkerLeft | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xpMarkerLeft/"
    },
    "https://developer.x-plane.com/sdk/xpMarkerRight/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/xpMarkerRight/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem\"><table><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpMarkerRight\"><a href=\"/sdk/xpMarkerRight/\">xpMarkerRight</a></td><td>\"13\"</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |\n| --- | --- |\n| [xpMarkerRight](/sdk/xpMarkerRight/) | \"13\" |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.707961+00:00",
      "title": "xpMarkerRight | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xpMarkerRight/"
    },
    "https://developer.x-plane.com/sdk/xpMessage_CloseButtonPushed/": {
      "api_signatures": [],
      "category": {
        "category": "XPLM_Plugin",
        "module": "Xplm Plugin",
        "url": "https://developer.x-plane.com/sdk/xpMessage_CloseButtonPushed/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem\"><table><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpMessage_CloseButtonPushed\"><a href=\"/sdk/xpMessage_CloseButtonPushed/\">xpMessage_CloseButtonPushed</a></td><td>\"1200\"</td><td>This message is sent when the close buttons for your window are pressed.</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |  |\n| --- | --- | --- |\n| [xpMessage_CloseButtonPushed](/sdk/xpMessage_CloseButtonPushed/) | \"1200\" | This message is sent when the close buttons for your window are pressed. |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:24.311101+00:00",
      "title": "xpMessage_CloseButtonPushed | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xpMessage_CloseButtonPushed/"
    },
    "https://developer.x-plane.com/sdk/xpMode_Direct/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/xpMode_Direct/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem\"><table><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpMode_Direct\"><a href=\"/sdk/xpMode_Direct/\">xpMode_Direct</a></td><td>\"0\"</td><td>The message will only be sent to the target widget.</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |  |\n| --- | --- | --- |\n| [xpMode_Direct](/sdk/xpMode_Direct/) | \"0\" | The message will only be sent to the target widget. |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.706777+00:00",
      "title": "xpMode_Direct | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xpMode_Direct/"
    },
    "https://developer.x-plane.com/sdk/xpMode_DirectAllCallbacks/": {
      "api_signatures": [],
      "category": {
        "category": "XPLM_Processing",
        "module": "Xplm Processing",
        "url": "https://developer.x-plane.com/sdk/xpMode_DirectAllCallbacks/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem\"><table><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpMode_DirectAllCallbacks\"><a href=\"/sdk/xpMode_DirectAllCallbacks/\">xpMode_DirectAllCallbacks</a></td><td>\"3\"</td><td>The message is sent just to the target, but goes to every callback, even if it is handled.</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |  |\n| --- | --- | --- |\n| [xpMode_DirectAllCallbacks](/sdk/xpMode_DirectAllCallbacks/) | \"3\" | The message is sent just to the target, but goes to every callback, even if it is handled. |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:24.376047+00:00",
      "title": "xpMode_DirectAllCallbacks | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xpMode_DirectAllCallbacks/"
    },
    "https://developer.x-plane.com/sdk/xpMode_Once/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/xpMode_Once/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem\"><table><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpMode_Once\"><a href=\"/sdk/xpMode_Once/\">xpMode_Once</a></td><td>\"4\"</td><td>The message is only sent to the very first handler even if it is not accepted. (This is really only useful for some internal widget library functions.)</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |  |\n| --- | --- | --- |\n| [xpMode_Once](/sdk/xpMode_Once/) | \"4\" | The message is only sent to the very first handler even if it is not accepted. (This is really only useful for some internal widget library functions.) |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.713964+00:00",
      "title": "xpMode_Once | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xpMode_Once/"
    },
    "https://developer.x-plane.com/sdk/xpMode_Recursive/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/xpMode_Recursive/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem\"><table><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpMode_Recursive\"><a href=\"/sdk/xpMode_Recursive/\">xpMode_Recursive</a></td><td>\"2\"</td><td>The message is sent to the target widget and then all of its children recursively depth-first.</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |  |\n| --- | --- | --- |\n| [xpMode_Recursive](/sdk/xpMode_Recursive/) | \"2\" | The message is sent to the target widget and then all of its children recursively depth-first. |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.711962+00:00",
      "title": "xpMode_Recursive | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xpMode_Recursive/"
    },
    "https://developer.x-plane.com/sdk/xpMode_UpChain/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/xpMode_UpChain/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem\"><table><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpMode_UpChain\"><a href=\"/sdk/xpMode_UpChain/\">xpMode_UpChain</a></td><td>\"1\"</td><td>The message is sent to the target widget, then up the chain of parents until the message ishandled or a parentless widget is reached.</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |  |\n| --- | --- | --- |\n| [xpMode_UpChain](/sdk/xpMode_UpChain/) | \"1\" | The message is sent to the target widget, then up the chain of parents until the message ishandled or a parentless widget is reached. |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.709963+00:00",
      "title": "xpMode_UpChain | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xpMode_UpChain/"
    },
    "https://developer.x-plane.com/sdk/xpMsg_AcceptChild/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/xpMsg_AcceptChild/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem\"><table><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpMsg_AcceptChild\"><a href=\"/sdk/xpMsg_AcceptChild/\">xpMsg_AcceptChild</a></td><td>\"13\"</td><td>A child has been added to you. The child's ID is passed in parameter one.Dispatching: DirectParam 1: The Widget ID of the child being added.</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |  |\n| --- | --- | --- |\n| [xpMsg_AcceptChild](/sdk/xpMsg_AcceptChild/) | \"13\" | A child has been added to you. The child's ID is passed in parameter one.Dispatching: DirectParam 1: The Widget ID of the child being added. |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.717018+00:00",
      "title": "xpMsg_AcceptChild | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xpMsg_AcceptChild/"
    },
    "https://developer.x-plane.com/sdk/xpMsg_AcceptParent/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/xpMsg_AcceptParent/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem\"><table><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpMsg_AcceptParent\"><a href=\"/sdk/xpMsg_AcceptParent/\">xpMsg_AcceptParent</a></td><td>\"15\"</td><td>You now have a new parent, or have no parent. The parent's ID is passed in, or 0 for no parent.Dispatching: DirectParam 1: The Widget ID of your parent</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |  |\n| --- | --- | --- |\n| [xpMsg_AcceptParent](/sdk/xpMsg_AcceptParent/) | \"15\" | You now have a new parent, or have no parent. The parent's ID is passed in, or 0 for no parent.Dispatching: DirectParam 1: The Widget ID of your parent |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.716015+00:00",
      "title": "xpMsg_AcceptParent | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xpMsg_AcceptParent/"
    },
    "https://developer.x-plane.com/sdk/xpMsg_ButtonStateChanged/": {
      "api_signatures": [],
      "category": {
        "category": "Widget_System",
        "module": "Widget System",
        "url": "https://developer.x-plane.com/sdk/xpMsg_ButtonStateChanged/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem\"><table><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpMsg_ButtonStateChanged\"><a href=\"/sdk/xpMsg_ButtonStateChanged/\">xpMsg_ButtonStateChanged</a></td><td>\"1301\"</td><td>This message is sent when a button is clicked that has radio button or check box behaviorand its value changes. (Note that if the value changes by setting a property you do not receivethis message!) Parameter one is the widget ID of the button, parameter 2 is the new state value,either zero or one. This message is dispatched up the widget hierarchy.</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |  |\n| --- | --- | --- |\n| [xpMsg_ButtonStateChanged](/sdk/xpMsg_ButtonStateChanged/) | \"1301\" | This message is sent when a button is clicked that has radio button or check box behaviorand its value changes. (Note that if the value changes by setting a property you do not receivethis message!) Parameter one is the widget ID of the button, parameter 2 is the new state value,either zero or one. This message is dispatched up the widget hierarchy. |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:23.261818+00:00",
      "title": "xpMsg_ButtonStateChanged | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xpMsg_ButtonStateChanged/"
    },
    "https://developer.x-plane.com/sdk/xpMsg_Create/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/xpMsg_Create/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem\"><table><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpMsg_Create\"><a href=\"/sdk/xpMsg_Create/\">xpMsg_Create</a></td><td>\"1\"</td><td>The create message is sent once per widget that is created with your widget function and oncefor any widget that has your widget function attached.Dispatching: DirectParam 1: 1 if you are being added as a subclass, 0 if the widget is first being created.</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |  |\n| --- | --- | --- |\n| [xpMsg_Create](/sdk/xpMsg_Create/) | \"1\" | The create message is sent once per widget that is created with your widget function and oncefor any widget that has your widget function attached.Dispatching: DirectParam 1: 1 if you are being added as a subclass, 0 if the widget is first being created. |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.724016+00:00",
      "title": "xpMsg_Create | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xpMsg_Create/"
    },
    "https://developer.x-plane.com/sdk/xpMsg_CursorAdjust/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/xpMsg_CursorAdjust/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem XPLM200\"><table><tr class=\"enumitem XPLM200\"><td class=\"sdk-api-enum-item\" id=\"xpMsg_CursorAdjust\"><a href=\"/sdk/xpMsg_CursorAdjust/\">xpMsg_CursorAdjust</a></td><td>\"21\"</td><td>The cursor is over your widget. If you consume this message, change the<a href=\"/sdk/XPLMCursorStatus/\">XPLMCursorStatus</a>value to indicate the desired result, with the same rules as in<a href=\"/sdk/XPLMDisplay/\">XPLMDisplay</a>.h.Return 1 to consume this message, 0 to pass it on.Dispatching: Up chainParam 1: A pointer to an<a href=\"/sdk/XPMouseState_t/\">XPMouseState_t</a>struct containing the mouse status.Param 2: A pointer to a<a href=\"/sdk/XPLMCursorStatus/\">XPLMCursorStatus</a>- set this to the cursor result you desire.</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [
        "XPLMCursorStatus",
        "XPLMDisplay"
      ],
      "markdown": "| |  |\n| --- | --- | --- |\n| [xpMsg_CursorAdjust](/sdk/xpMsg_CursorAdjust/) | \"21\" | The cursor is over your widget. If you consume this message, change the[XPLMCursorStatus](/sdk/XPLMCursorStatus/)value to indicate the desired result, with the same rules as in[XPLMDisplay](/sdk/XPLMDisplay/).h.Return 1 to consume this message, 0 to pass it on.Dispatching: Up chainParam 1: A pointer to an[XPMouseState_t](/sdk/XPMouseState_t/)struct containing the mouse status.Param 2: A pointer to a[XPLMCursorStatus](/sdk/XPLMCursorStatus/)- set this to the cursor result you desire. |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.720017+00:00",
      "title": "xpMsg_CursorAdjust | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xpMsg_CursorAdjust/"
    },
    "https://developer.x-plane.com/sdk/xpMsg_DescriptorChanged/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/xpMsg_DescriptorChanged/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem\"><table><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpMsg_DescriptorChanged\"><a href=\"/sdk/xpMsg_DescriptorChanged/\">xpMsg_DescriptorChanged</a></td><td>\"18\"</td><td>Your descriptor has changed.Dispatching: Direct</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |  |\n| --- | --- | --- |\n| [xpMsg_DescriptorChanged](/sdk/xpMsg_DescriptorChanged/) | \"18\" | Your descriptor has changed.Dispatching: Direct |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.722017+00:00",
      "title": "xpMsg_DescriptorChanged | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xpMsg_DescriptorChanged/"
    },
    "https://developer.x-plane.com/sdk/xpMsg_Destroy/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/xpMsg_Destroy/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem\"><table><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpMsg_Destroy\"><a href=\"/sdk/xpMsg_Destroy/\">xpMsg_Destroy</a></td><td>\"2\"</td><td>The destroy message is sent once for each message that is destroyed that has your widget function.Dispatching: Direct for allParam 1: 1 if being deleted by a recursive delete to the parent, 0 for explicit deletion.</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |  |\n| --- | --- | --- |\n| [xpMsg_Destroy](/sdk/xpMsg_Destroy/) | \"2\" | The destroy message is sent once for each message that is destroyed that has your widget function.Dispatching: Direct for allParam 1: 1 if being deleted by a recursive delete to the parent, 0 for explicit deletion. |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.726019+00:00",
      "title": "xpMsg_Destroy | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xpMsg_Destroy/"
    },
    "https://developer.x-plane.com/sdk/xpMsg_Draw/": {
      "api_signatures": [],
      "category": {
        "category": "XPLM_Display",
        "module": "Xplm Display",
        "url": "https://developer.x-plane.com/sdk/xpMsg_Draw/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem\"><table><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpMsg_Draw\"><a href=\"/sdk/xpMsg_Draw/\">xpMsg_Draw</a></td><td>\"4\"</td><td>The draw message is sent to your widget when it is time to draw yourself. OpenGL will be set upto draw in 2-d global screen coordinates, but you should use the XPLM to set up OpenGL state.Dispatching: Direct</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |  |\n| --- | --- | --- |\n| [xpMsg_Draw](/sdk/xpMsg_Draw/) | \"4\" | The draw message is sent to your widget when it is time to draw yourself. OpenGL will be set upto draw in 2-d global screen coordinates, but you should use the XPLM to set up OpenGL state.Dispatching: Direct |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:23.601492+00:00",
      "title": "xpMsg_Draw | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xpMsg_Draw/"
    },
    "https://developer.x-plane.com/sdk/xpMsg_ExposedChanged/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/xpMsg_ExposedChanged/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem\"><table><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpMsg_ExposedChanged\"><a href=\"/sdk/xpMsg_ExposedChanged/\">xpMsg_ExposedChanged</a></td><td>\"12\"</td><td>Your exposed area has changed.Dispatching: Direct</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |  |\n| --- | --- | --- |\n| [xpMsg_ExposedChanged](/sdk/xpMsg_ExposedChanged/) | \"12\" | Your exposed area has changed.Dispatching: Direct |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.728015+00:00",
      "title": "xpMsg_ExposedChanged | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xpMsg_ExposedChanged/"
    },
    "https://developer.x-plane.com/sdk/xpMsg_Hidden/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/xpMsg_Hidden/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem\"><table><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpMsg_Hidden\"><a href=\"/sdk/xpMsg_Hidden/\">xpMsg_Hidden</a></td><td>\"17\"</td><td>You have been hidden. See limitations above.Dispatching: Up chainParam 1: The widget ID of the hidden widget.</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |  |\n| --- | --- | --- |\n| [xpMsg_Hidden](/sdk/xpMsg_Hidden/) | \"17\" | You have been hidden. See limitations above.Dispatching: Up chainParam 1: The widget ID of the hidden widget. |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.730025+00:00",
      "title": "xpMsg_Hidden | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xpMsg_Hidden/"
    },
    "https://developer.x-plane.com/sdk/xpMsg_KeyLoseFocus/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/xpMsg_KeyLoseFocus/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem\"><table><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpMsg_KeyLoseFocus\"><a href=\"/sdk/xpMsg_KeyLoseFocus/\">xpMsg_KeyLoseFocus</a></td><td>\"7\"</td><td>Keyboard focus is being taken away from you. The first parameter will be 1 if you are losingfocus because another widget is taking it, or 0 if someone called the API to make you lose focusexplicitly.Dispatching: DirectParam 1: 1 if focus is being taken by another widget, 0 if code requested to remove focus.</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |  |\n| --- | --- | --- |\n| [xpMsg_KeyLoseFocus](/sdk/xpMsg_KeyLoseFocus/) | \"7\" | Keyboard focus is being taken away from you. The first parameter will be 1 if you are losingfocus because another widget is taking it, or 0 if someone called the API to make you lose focusexplicitly.Dispatching: DirectParam 1: 1 if focus is being taken by another widget, 0 if code requested to remove focus. |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.732016+00:00",
      "title": "xpMsg_KeyLoseFocus | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xpMsg_KeyLoseFocus/"
    },
    "https://developer.x-plane.com/sdk/xpMsg_KeyPress/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/xpMsg_KeyPress/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem\"><table><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpMsg_KeyPress\"><a href=\"/sdk/xpMsg_KeyPress/\">xpMsg_KeyPress</a></td><td>\"5\"</td><td>The key press message is sent once per key that is pressed. The first parameter is the type of keycode (integer or char) and the second is the code itself. By handling this event, you consume thekey stroke.Handling this message 'consumes' the keystroke; not handling it passes it to your parent widget.Dispatching: Up ChainParam 1: A pointer to an<a href=\"/sdk/XPKeyState_t/\">XPKeyState_t</a>structure with the keystroke.</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |  |\n| --- | --- | --- |\n| [xpMsg_KeyPress](/sdk/xpMsg_KeyPress/) | \"5\" | The key press message is sent once per key that is pressed. The first parameter is the type of keycode (integer or char) and the second is the code itself. By handling this event, you consume thekey stroke.Handling this message 'consumes' the keystroke; not handling it passes it to your parent widget.Dispatching: Up ChainParam 1: A pointer to an[XPKeyState_t](/sdk/XPKeyState_t/)structure with the keystroke. |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.735017+00:00",
      "title": "xpMsg_KeyPress | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xpMsg_KeyPress/"
    },
    "https://developer.x-plane.com/sdk/xpMsg_KeyTakeFocus/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/xpMsg_KeyTakeFocus/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem\"><table><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpMsg_KeyTakeFocus\"><a href=\"/sdk/xpMsg_KeyTakeFocus/\">xpMsg_KeyTakeFocus</a></td><td>\"6\"</td><td>Keyboard focus is being given to you. By handling this message you accept keyboard focus. Thefirst parameter will be one if a child of yours gave up focus to you, 0 if someone set focus onyou explicitly.Handling this message accepts focus; not handling refuses focus.Dispatching: directParam 1: 1 if you are gaining focus because your child is giving it up, 0 if someone is explicitlygiving you focus.</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |  |\n| --- | --- | --- |\n| [xpMsg_KeyTakeFocus](/sdk/xpMsg_KeyTakeFocus/) | \"6\" | Keyboard focus is being given to you. By handling this message you accept keyboard focus. Thefirst parameter will be one if a child of yours gave up focus to you, 0 if someone set focus onyou explicitly.Handling this message accepts focus; not handling refuses focus.Dispatching: directParam 1: 1 if you are gaining focus because your child is giving it up, 0 if someone is explicitlygiving you focus. |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.739121+00:00",
      "title": "xpMsg_KeyTakeFocus | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xpMsg_KeyTakeFocus/"
    },
    "https://developer.x-plane.com/sdk/xpMsg_LoseChild/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/xpMsg_LoseChild/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem\"><table><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpMsg_LoseChild\"><a href=\"/sdk/xpMsg_LoseChild/\">xpMsg_LoseChild</a></td><td>\"14\"</td><td>A child has been removed from you. The child's ID is passed in parameter one.Dispatching: DirectParam 1: The Widget ID of the child being removed.</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |  |\n| --- | --- | --- |\n| [xpMsg_LoseChild](/sdk/xpMsg_LoseChild/) | \"14\" | A child has been removed from you. The child's ID is passed in parameter one.Dispatching: DirectParam 1: The Widget ID of the child being removed. |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.736016+00:00",
      "title": "xpMsg_LoseChild | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xpMsg_LoseChild/"
    },
    "https://developer.x-plane.com/sdk/xpMsg_MouseDown/": {
      "api_signatures": [],
      "category": {
        "category": "XPLM_Utilities",
        "module": "Xplm Utilities",
        "url": "https://developer.x-plane.com/sdk/xpMsg_MouseDown/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem\"><table><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpMsg_MouseDown\"><a href=\"/sdk/xpMsg_MouseDown/\">xpMsg_MouseDown</a></td><td>\"8\"</td><td>You receive one mousedown event per click with a mouse-state structure pointed to by parameter 1.By accepting this you eat the click, otherwise your parent gets it. You will not receive drag andmouse up messages if you do not accept the down message.Handling this message consumes the mouse click, not handling it passes it to the next widget.You can act 'transparent' as a window by never handling moues clicks to certain areas.Dispatching: Up chain NOTE: Technically this is direct dispatched, but the widgets library will shipit to each widget until one consumes the click, making it effectively \"up chain\".Param 1: A pointer to an<a href=\"/sdk/XPMouseState_t/\">XPMouseState_t</a>containing the mouse status.</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |  |\n| --- | --- | --- |\n| [xpMsg_MouseDown](/sdk/xpMsg_MouseDown/) | \"8\" | You receive one mousedown event per click with a mouse-state structure pointed to by parameter 1.By accepting this you eat the click, otherwise your parent gets it. You will not receive drag andmouse up messages if you do not accept the down message.Handling this message consumes the mouse click, not handling it passes it to the next widget.You can act 'transparent' as a window by never handling moues clicks to certain areas.Dispatching: Up chain NOTE: Technically this is direct dispatched, but the widgets library will shipit to each widget until one consumes the click, making it effectively \"up chain\".Param 1: A pointer to an[XPMouseState_t](/sdk/XPMouseState_t/)containing the mouse status. |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:24.554834+00:00",
      "title": "xpMsg_MouseDown | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xpMsg_MouseDown/"
    },
    "https://developer.x-plane.com/sdk/xpMsg_MouseDrag/": {
      "api_signatures": [],
      "category": {
        "category": "XPLM_Utilities",
        "module": "Xplm Utilities",
        "url": "https://developer.x-plane.com/sdk/xpMsg_MouseDrag/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem\"><table><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpMsg_MouseDrag\"><a href=\"/sdk/xpMsg_MouseDrag/\">xpMsg_MouseDrag</a></td><td>\"9\"</td><td>You receive a series of mouse drag messages (typically one per frame in the sim) as the mouse ismoved once you have accepted a mouse down message. Parameter one points to a mouse-state structuredescribing the mouse location. You will continue to receive these until the mouse button isreleased.You may receive multiple mouse state messages with the same mouse position. You will receive mousedrag events even if the mouse is dragged out of your current or original bounds at the time of themouse down.Dispatching: DirectParam 1: A pointer to an<a href=\"/sdk/XPMouseState_t/\">XPMouseState_t</a>containing the mouse status.</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |  |\n| --- | --- | --- |\n| [xpMsg_MouseDrag](/sdk/xpMsg_MouseDrag/) | \"9\" | You receive a series of mouse drag messages (typically one per frame in the sim) as the mouse ismoved once you have accepted a mouse down message. Parameter one points to a mouse-state structuredescribing the mouse location. You will continue to receive these until the mouse button isreleased.You may receive multiple mouse state messages with the same mouse position. You will receive mousedrag events even if the mouse is dragged out of your current or original bounds at the time of themouse down.Dispatching: DirectParam 1: A pointer to an[XPMouseState_t](/sdk/XPMouseState_t/)containing the mouse status. |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:24.560155+00:00",
      "title": "xpMsg_MouseDrag | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xpMsg_MouseDrag/"
    },
    "https://developer.x-plane.com/sdk/xpMsg_MouseUp/": {
      "api_signatures": [],
      "category": {
        "category": "XPLM_Utilities",
        "module": "Xplm Utilities",
        "url": "https://developer.x-plane.com/sdk/xpMsg_MouseUp/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem\"><table><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpMsg_MouseUp\"><a href=\"/sdk/xpMsg_MouseUp/\">xpMsg_MouseUp</a></td><td>\"10\"</td><td>The mouseup event is sent once when the mouse button is released after a drag or click. You onlyreceive this message if you accept the mouseDown message. Parameter one points to a mouse statestructure.Dispatching: DirectParam 1: A pointer to an<a href=\"/sdk/XPMouseState_t/\">XPMouseState_t</a>containing the mouse status.</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |  |\n| --- | --- | --- |\n| [xpMsg_MouseUp](/sdk/xpMsg_MouseUp/) | \"10\" | The mouseup event is sent once when the mouse button is released after a drag or click. You onlyreceive this message if you accept the mouseDown message. Parameter one points to a mouse statestructure.Dispatching: DirectParam 1: A pointer to an[XPMouseState_t](/sdk/XPMouseState_t/)containing the mouse status. |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:24.562155+00:00",
      "title": "xpMsg_MouseUp | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xpMsg_MouseUp/"
    },
    "https://developer.x-plane.com/sdk/xpMsg_MouseWheel/": {
      "api_signatures": [],
      "category": {
        "category": "XPLM_Utilities",
        "module": "Xplm Utilities",
        "url": "https://developer.x-plane.com/sdk/xpMsg_MouseWheel/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem XPLM200\"><table><tr class=\"enumitem XPLM200\"><td class=\"sdk-api-enum-item\" id=\"xpMsg_MouseWheel\"><a href=\"/sdk/xpMsg_MouseWheel/\">xpMsg_MouseWheel</a></td><td>\"20\"</td><td>The mouse wheel has moved.Return 1 to consume the mouse wheel move, or 0 to pass the message to a parent.Dispatching: Up chainParam 1: A pointer to an<a href=\"/sdk/XPMouseState_t/\">XPMouseState_t</a>containing the mouse status.</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |  |\n| --- | --- | --- |\n| [xpMsg_MouseWheel](/sdk/xpMsg_MouseWheel/) | \"20\" | The mouse wheel has moved.Return 1 to consume the mouse wheel move, or 0 to pass the message to a parent.Dispatching: Up chainParam 1: A pointer to an[XPMouseState_t](/sdk/XPMouseState_t/)containing the mouse status. |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:24.557155+00:00",
      "title": "xpMsg_MouseWheel | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xpMsg_MouseWheel/"
    },
    "https://developer.x-plane.com/sdk/xpMsg_None/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/xpMsg_None/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem\"><table><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpMsg_None\"><a href=\"/sdk/xpMsg_None/\">xpMsg_None</a></td><td>\"0\"</td><td>No message, should not be sent.</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |  |\n| --- | --- | --- |\n| [xpMsg_None](/sdk/xpMsg_None/) | \"0\" | No message, should not be sent. |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.742123+00:00",
      "title": "xpMsg_None | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xpMsg_None/"
    },
    "https://developer.x-plane.com/sdk/xpMsg_Paint/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/xpMsg_Paint/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem\"><table><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpMsg_Paint\"><a href=\"/sdk/xpMsg_Paint/\">xpMsg_Paint</a></td><td>\"3\"</td><td>The paint message is sent to your widget to draw itself. The paint message is the bare-bonesmessage; in response you must draw yourself, draw your children, set up clipping and culling,check for visibility, etc. If you don't want to do all of this, ignore the paint message anda draw message (see below) will be sent to you.Dispatching: Direct</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |  |\n| --- | --- | --- |\n| [xpMsg_Paint](/sdk/xpMsg_Paint/) | \"3\" | The paint message is sent to your widget to draw itself. The paint message is the bare-bonesmessage; in response you must draw yourself, draw your children, set up clipping and culling,check for visibility, etc. If you don't want to do all of this, ignore the paint message anda draw message (see below) will be sent to you.Dispatching: Direct |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.741121+00:00",
      "title": "xpMsg_Paint | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xpMsg_Paint/"
    },
    "https://developer.x-plane.com/sdk/xpMsg_PropertyChanged/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/xpMsg_PropertyChanged/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem\"><table><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpMsg_PropertyChanged\"><a href=\"/sdk/xpMsg_PropertyChanged/\">xpMsg_PropertyChanged</a></td><td>\"19\"</td><td>A property has changed. Param 1 contains the property ID.Dispatching: DirectParam 1: The Property ID being changed.Param 2: The new property value</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |  |\n| --- | --- | --- |\n| [xpMsg_PropertyChanged](/sdk/xpMsg_PropertyChanged/) | \"19\" | A property has changed. Param 1 contains the property ID.Dispatching: DirectParam 1: The Property ID being changed.Param 2: The new property value |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.744123+00:00",
      "title": "xpMsg_PropertyChanged | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xpMsg_PropertyChanged/"
    },
    "https://developer.x-plane.com/sdk/xpMsg_PushButtonPressed/": {
      "api_signatures": [],
      "category": {
        "category": "Widget_System",
        "module": "Widget System",
        "url": "https://developer.x-plane.com/sdk/xpMsg_PushButtonPressed/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem\"><table><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpMsg_PushButtonPressed\"><a href=\"/sdk/xpMsg_PushButtonPressed/\">xpMsg_PushButtonPressed</a></td><td>\"1300\"</td><td>This message is sent when the user completes a click and release in a button withpush button behavior. Parameterone of the message is the widget ID of the button. This message is dispatched up thewidget hierarchy.</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |  |\n| --- | --- | --- |\n| [xpMsg_PushButtonPressed](/sdk/xpMsg_PushButtonPressed/) | \"1300\" | This message is sent when the user completes a click and release in a button withpush button behavior. Parameterone of the message is the widget ID of the button. This message is dispatched up thewidget hierarchy. |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:23.263818+00:00",
      "title": "xpMsg_PushButtonPressed | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xpMsg_PushButtonPressed/"
    },
    "https://developer.x-plane.com/sdk/xpMsg_Reshape/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/xpMsg_Reshape/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem\"><table><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpMsg_Reshape\"><a href=\"/sdk/xpMsg_Reshape/\">xpMsg_Reshape</a></td><td>\"11\"</td><td>Your geometry or a child's geometry is being changed.Dispatching: Up chainParam 1: The widget ID of the original reshaped target.Param 2: A pointer to a<a href=\"/sdk/XPWidgetGeometryChange_t/\">XPWidgetGeometryChange_t</a>struct describing the change.</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |  |\n| --- | --- | --- |\n| [xpMsg_Reshape](/sdk/xpMsg_Reshape/) | \"11\" | Your geometry or a child's geometry is being changed.Dispatching: Up chainParam 1: The widget ID of the original reshaped target.Param 2: A pointer to a[XPWidgetGeometryChange_t](/sdk/XPWidgetGeometryChange_t/)struct describing the change. |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.746122+00:00",
      "title": "xpMsg_Reshape | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xpMsg_Reshape/"
    },
    "https://developer.x-plane.com/sdk/xpMsg_ScrollBarSliderPositionChanged/": {
      "api_signatures": [],
      "category": {
        "category": "Widget_System",
        "module": "Widget System",
        "url": "https://developer.x-plane.com/sdk/xpMsg_ScrollBarSliderPositionChanged/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem\"><table><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpMsg_ScrollBarSliderPositionChanged\"><a href=\"/sdk/xpMsg_ScrollBarSliderPositionChanged/\">xpMsg_ScrollBarSliderPositionChanged</a></td><td>\"1500\"</td><td>The scroll bar sends this message when the slider position changes. It sends the message up the call chain; param1 is the scroll bar widget ID.</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |  |\n| --- | --- | --- |\n| [xpMsg_ScrollBarSliderPositionChanged](/sdk/xpMsg_ScrollBarSliderPositionChanged/) | \"1500\" | The scroll bar sends this message when the slider position changes. It sends the message up the call chain; param1 is the scroll bar widget ID. |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:23.265817+00:00",
      "title": "xpMsg_ScrollBarSliderPositionChanged | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xpMsg_ScrollBarSliderPositionChanged/"
    },
    "https://developer.x-plane.com/sdk/xpMsg_Shown/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/xpMsg_Shown/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem\"><table><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpMsg_Shown\"><a href=\"/sdk/xpMsg_Shown/\">xpMsg_Shown</a></td><td>\"16\"</td><td>You or a child has been shown. Note that this does not include you being shown because your parentwas shown, you were put in a new parent, your root was shown, etc.Dispatching: Up chainParam 1: The widget ID of the shown widget.</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |  |\n| --- | --- | --- |\n| [xpMsg_Shown](/sdk/xpMsg_Shown/) | \"16\" | You or a child has been shown. Note that this does not include you being shown because your parentwas shown, you were put in a new parent, your root was shown, etc.Dispatching: Up chainParam 1: The widget ID of the shown widget. |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.748121+00:00",
      "title": "xpMsg_Shown | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xpMsg_Shown/"
    },
    "https://developer.x-plane.com/sdk/xpMsg_TextFieldChanged/": {
      "api_signatures": [],
      "category": {
        "category": "Widget_System",
        "module": "Widget System",
        "url": "https://developer.x-plane.com/sdk/xpMsg_TextFieldChanged/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem\"><table><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpMsg_TextFieldChanged\"><a href=\"/sdk/xpMsg_TextFieldChanged/\">xpMsg_TextFieldChanged</a></td><td>\"1400\"</td><td>The text field sends this message to itself when its text changes. It sends the message up the call chain; param1 is the text field's widget ID.</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |  |\n| --- | --- | --- |\n| [xpMsg_TextFieldChanged](/sdk/xpMsg_TextFieldChanged/) | \"1400\" | The text field sends this message to itself when its text changes. It sends the message up the call chain; param1 is the text field's widget ID. |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:23.267873+00:00",
      "title": "xpMsg_TextFieldChanged | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xpMsg_TextFieldChanged/"
    },
    "https://developer.x-plane.com/sdk/xpMsg_UserStart/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/xpMsg_UserStart/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem\"><table><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpMsg_UserStart\"><a href=\"/sdk/xpMsg_UserStart/\">xpMsg_UserStart</a></td><td>\"10000\"</td><td>NOTE: Message IDs 1000 - 9999 are allocated to the standard widget classes provided with the librarywith 1000 - 1099 for widget class 0, 1100 - 1199 for widget class 1, etc. Message IDs 10,000 andbeyond are for plugin use.</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |  |\n| --- | --- | --- |\n| [xpMsg_UserStart](/sdk/xpMsg_UserStart/) | \"10000\" | NOTE: Message IDs 1000 - 9999 are allocated to the standard widget classes provided with the librarywith 1000 - 1099 for widget class 0, 1100 - 1199 for widget class 1, etc. Message IDs 10,000 andbeyond are for plugin use. |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.751123+00:00",
      "title": "xpMsg_UserStart | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xpMsg_UserStart/"
    },
    "https://developer.x-plane.com/sdk/xpNDB/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/xpNDB/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem\"><table><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpNDB\"><a href=\"/sdk/xpNDB/\">xpNDB</a></td><td>\"8\"</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |\n| --- | --- |\n| [xpNDB](/sdk/xpNDB/) | \"8\" |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.752626+00:00",
      "title": "xpNDB | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xpNDB/"
    },
    "https://developer.x-plane.com/sdk/xpOilPlatform/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/xpOilPlatform/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem\"><table><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpOilPlatform\"><a href=\"/sdk/xpOilPlatform/\">xpOilPlatform</a></td><td>\"21\"</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |\n| --- | --- |\n| [xpOilPlatform](/sdk/xpOilPlatform/) | \"21\" |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.750123+00:00",
      "title": "xpOilPlatform | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xpOilPlatform/"
    },
    "https://developer.x-plane.com/sdk/xpOilPlatformSmall/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/xpOilPlatformSmall/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem\"><table><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpOilPlatformSmall\"><a href=\"/sdk/xpOilPlatformSmall/\">xpOilPlatformSmall</a></td><td>\"22\"</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |\n| --- | --- |\n| [xpOilPlatformSmall](/sdk/xpOilPlatformSmall/) | \"22\" |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.756632+00:00",
      "title": "xpOilPlatformSmall | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xpOilPlatformSmall/"
    },
    "https://developer.x-plane.com/sdk/xpPowerLine/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/xpPowerLine/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem\"><table><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpPowerLine\"><a href=\"/sdk/xpPowerLine/\">xpPowerLine</a></td><td>\"18\"</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |\n| --- | --- |\n| [xpPowerLine](/sdk/xpPowerLine/) | \"18\" |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.754631+00:00",
      "title": "xpPowerLine | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xpPowerLine/"
    },
    "https://developer.x-plane.com/sdk/xpProperty_ActiveEditSide/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/xpProperty_ActiveEditSide/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem\"><table><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpProperty_ActiveEditSide\"><a href=\"/sdk/xpProperty_ActiveEditSide/\">xpProperty_ActiveEditSide</a></td><td>\"1408\"</td><td>This is the active side of the insert selection. (Internal)</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |  |\n| --- | --- | --- |\n| [xpProperty_ActiveEditSide](/sdk/xpProperty_ActiveEditSide/) | \"1408\" | This is the active side of the insert selection. (Internal) |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.758631+00:00",
      "title": "xpProperty_ActiveEditSide | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xpProperty_ActiveEditSide/"
    },
    "https://developer.x-plane.com/sdk/xpProperty_ButtonBehavior/": {
      "api_signatures": [],
      "category": {
        "category": "Widget_System",
        "module": "Widget System",
        "url": "https://developer.x-plane.com/sdk/xpProperty_ButtonBehavior/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem\"><table><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpProperty_ButtonBehavior\"><a href=\"/sdk/xpProperty_ButtonBehavior/\">xpProperty_ButtonBehavior</a></td><td>\"1301\"</td><td>This property sets the button's behavior. Use one of the button behaviors above.</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |  |\n| --- | --- | --- |\n| [xpProperty_ButtonBehavior](/sdk/xpProperty_ButtonBehavior/) | \"1301\" | This property sets the button's behavior. Use one of the button behaviors above. |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:23.270873+00:00",
      "title": "xpProperty_ButtonBehavior | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xpProperty_ButtonBehavior/"
    },
    "https://developer.x-plane.com/sdk/xpProperty_ButtonState/": {
      "api_signatures": [],
      "category": {
        "category": "Widget_System",
        "module": "Widget System",
        "url": "https://developer.x-plane.com/sdk/xpProperty_ButtonState/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem\"><table><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpProperty_ButtonState\"><a href=\"/sdk/xpProperty_ButtonState/\">xpProperty_ButtonState</a></td><td>\"1302\"</td><td>This property tells whether a check box or radio button is \"checked\" or not. Not used for push buttons.</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |  |\n| --- | --- | --- |\n| [xpProperty_ButtonState](/sdk/xpProperty_ButtonState/) | \"1302\" | This property tells whether a check box or radio button is \"checked\" or not. Not used for push buttons. |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:23.268874+00:00",
      "title": "xpProperty_ButtonState | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xpProperty_ButtonState/"
    },
    "https://developer.x-plane.com/sdk/xpProperty_ButtonType/": {
      "api_signatures": [],
      "category": {
        "category": "Widget_System",
        "module": "Widget System",
        "url": "https://developer.x-plane.com/sdk/xpProperty_ButtonType/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem\"><table><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpProperty_ButtonType\"><a href=\"/sdk/xpProperty_ButtonType/\">xpProperty_ButtonType</a></td><td>\"1300\"</td><td>This property sets the visual type of button. Use one of the button types above.</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |  |\n| --- | --- | --- |\n| [xpProperty_ButtonType](/sdk/xpProperty_ButtonType/) | \"1300\" | This property sets the visual type of button. Use one of the button types above. |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:23.272872+00:00",
      "title": "xpProperty_ButtonType | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xpProperty_ButtonType/"
    },
    "https://developer.x-plane.com/sdk/xpProperty_CaptionLit/": {
      "api_signatures": [],
      "category": {
        "category": "Widget_System",
        "module": "Widget System",
        "url": "https://developer.x-plane.com/sdk/xpProperty_CaptionLit/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem\"><table><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpProperty_CaptionLit\"><a href=\"/sdk/xpProperty_CaptionLit/\">xpProperty_CaptionLit</a></td><td>\"1600\"</td><td>This property specifies whether the caption is lit; use lit captions against screens.</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |  |\n| --- | --- | --- |\n| [xpProperty_CaptionLit](/sdk/xpProperty_CaptionLit/) | \"1600\" | This property specifies whether the caption is lit; use lit captions against screens. |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:23.274873+00:00",
      "title": "xpProperty_CaptionLit | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xpProperty_CaptionLit/"
    },
    "https://developer.x-plane.com/sdk/xpProperty_Clip/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/xpProperty_Clip/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem\"><table><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpProperty_Clip\"><a href=\"/sdk/xpProperty_Clip/\">xpProperty_Clip</a></td><td>\"6\"</td><td>If this property is 1, the widget package will use OpenGL to restrict drawing to the Widget's exposed rectangle.</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |  |\n| --- | --- | --- |\n| [xpProperty_Clip](/sdk/xpProperty_Clip/) | \"6\" | If this property is 1, the widget package will use OpenGL to restrict drawing to the Widget's exposed rectangle. |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.761632+00:00",
      "title": "xpProperty_Clip | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xpProperty_Clip/"
    },
    "https://developer.x-plane.com/sdk/xpProperty_DragXOff/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/xpProperty_DragXOff/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem\"><table><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpProperty_DragXOff\"><a href=\"/sdk/xpProperty_DragXOff/\">xpProperty_DragXOff</a></td><td>\"2\"</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |\n| --- | --- |\n| [xpProperty_DragXOff](/sdk/xpProperty_DragXOff/) | \"2\" |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.759630+00:00",
      "title": "xpProperty_DragXOff | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xpProperty_DragXOff/"
    },
    "https://developer.x-plane.com/sdk/xpProperty_DragYOff/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/xpProperty_DragYOff/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem\"><table><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpProperty_DragYOff\"><a href=\"/sdk/xpProperty_DragYOff/\">xpProperty_DragYOff</a></td><td>\"3\"</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |\n| --- | --- |\n| [xpProperty_DragYOff](/sdk/xpProperty_DragYOff/) | \"3\" |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.762632+00:00",
      "title": "xpProperty_DragYOff | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xpProperty_DragYOff/"
    },
    "https://developer.x-plane.com/sdk/xpProperty_Dragging/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/xpProperty_Dragging/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem\"><table><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpProperty_Dragging\"><a href=\"/sdk/xpProperty_Dragging/\">xpProperty_Dragging</a></td><td>\"1\"</td><td>These properties are used by the utilities to implement dragging.</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |  |\n| --- | --- | --- |\n| [xpProperty_Dragging](/sdk/xpProperty_Dragging/) | \"1\" | These properties are used by the utilities to implement dragging. |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.764630+00:00",
      "title": "xpProperty_Dragging | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xpProperty_Dragging/"
    },
    "https://developer.x-plane.com/sdk/xpProperty_EditFieldSelDragStart/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/xpProperty_EditFieldSelDragStart/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem\"><table><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpProperty_EditFieldSelDragStart\"><a href=\"/sdk/xpProperty_EditFieldSelDragStart/\">xpProperty_EditFieldSelDragStart</a></td><td>\"1402\"</td><td>This is the character position a drag was started at if the user is dragging to select text, or -1 if a drag is not in progress.</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |  |\n| --- | --- | --- |\n| [xpProperty_EditFieldSelDragStart](/sdk/xpProperty_EditFieldSelDragStart/) | \"1402\" | This is the character position a drag was started at if the user is dragging to select text, or -1 if a drag is not in progress. |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.767634+00:00",
      "title": "xpProperty_EditFieldSelDragStart | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xpProperty_EditFieldSelDragStart/"
    },
    "https://developer.x-plane.com/sdk/xpProperty_EditFieldSelEnd/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/xpProperty_EditFieldSelEnd/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem\"><table><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpProperty_EditFieldSelEnd\"><a href=\"/sdk/xpProperty_EditFieldSelEnd/\">xpProperty_EditFieldSelEnd</a></td><td>\"1401\"</td><td>This is the character position of the end of the selection.</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |  |\n| --- | --- | --- |\n| [xpProperty_EditFieldSelEnd](/sdk/xpProperty_EditFieldSelEnd/) | \"1401\" | This is the character position of the end of the selection. |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.765631+00:00",
      "title": "xpProperty_EditFieldSelEnd | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xpProperty_EditFieldSelEnd/"
    },
    "https://developer.x-plane.com/sdk/xpProperty_EditFieldSelStart/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/xpProperty_EditFieldSelStart/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem\"><table><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpProperty_EditFieldSelStart\"><a href=\"/sdk/xpProperty_EditFieldSelStart/\">xpProperty_EditFieldSelStart</a></td><td>\"1400\"</td><td>This is the character position the selection starts at, zero based.If it is the same as the end insertion point, the insertion pointis not a selection.</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |  |\n| --- | --- | --- |\n| [xpProperty_EditFieldSelStart](/sdk/xpProperty_EditFieldSelStart/) | \"1400\" | This is the character position the selection starts at, zero based.If it is the same as the end insertion point, the insertion pointis not a selection. |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.769632+00:00",
      "title": "xpProperty_EditFieldSelStart | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xpProperty_EditFieldSelStart/"
    },
    "https://developer.x-plane.com/sdk/xpProperty_Enabled/": {
      "api_signatures": [],
      "category": {
        "category": "XPLM_Plugin",
        "module": "Xplm Plugin",
        "url": "https://developer.x-plane.com/sdk/xpProperty_Enabled/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem\"><table><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpProperty_Enabled\"><a href=\"/sdk/xpProperty_Enabled/\">xpProperty_Enabled</a></td><td>\"7\"</td><td>Is this widget enabled (for those that have a disabled state too)?</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |  |\n| --- | --- | --- |\n| [xpProperty_Enabled](/sdk/xpProperty_Enabled/) | \"7\" | Is this widget enabled (for those that have a disabled state too)? |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:24.307103+00:00",
      "title": "xpProperty_Enabled | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xpProperty_Enabled/"
    },
    "https://developer.x-plane.com/sdk/xpProperty_Font/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/xpProperty_Font/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem\"><table><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpProperty_Font\"><a href=\"/sdk/xpProperty_Font/\">xpProperty_Font</a></td><td>\"1407\"</td><td>The font to draw the field's text with. (An<a href=\"/sdk/XPLMFontID/\">XPLMFontID</a>.)</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [
        "XPLMFontID"
      ],
      "markdown": "| |  |\n| --- | --- | --- |\n| [xpProperty_Font](/sdk/xpProperty_Font/) | \"1407\" | The font to draw the field's text with. (An[XPLMFontID](/sdk/XPLMFontID/).) |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.770630+00:00",
      "title": "xpProperty_Font | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xpProperty_Font/"
    },
    "https://developer.x-plane.com/sdk/xpProperty_GeneralGraphicsType/": {
      "api_signatures": [],
      "category": {
        "category": "XPLM_Graphics",
        "module": "Xplm Graphics",
        "url": "https://developer.x-plane.com/sdk/xpProperty_GeneralGraphicsType/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem\"><table><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpProperty_GeneralGraphicsType\"><a href=\"/sdk/xpProperty_GeneralGraphicsType/\">xpProperty_GeneralGraphicsType</a></td><td>\"1700\"</td><td>This property controls the type of icon that is drawn.</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |  |\n| --- | --- | --- |\n| [xpProperty_GeneralGraphicsType](/sdk/xpProperty_GeneralGraphicsType/) | \"1700\" | This property controls the type of icon that is drawn. |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:23.714294+00:00",
      "title": "xpProperty_GeneralGraphicsType | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xpProperty_GeneralGraphicsType/"
    },
    "https://developer.x-plane.com/sdk/xpProperty_Hilited/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/xpProperty_Hilited/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem\"><table><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpProperty_Hilited\"><a href=\"/sdk/xpProperty_Hilited/\">xpProperty_Hilited</a></td><td>\"4\"</td><td>Is the widget highlighted? (For widgets that support this kind of thing.)</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |  |\n| --- | --- | --- |\n| [xpProperty_Hilited](/sdk/xpProperty_Hilited/) | \"4\" | Is the widget highlighted? (For widgets that support this kind of thing.) |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.772630+00:00",
      "title": "xpProperty_Hilited | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xpProperty_Hilited/"
    },
    "https://developer.x-plane.com/sdk/xpProperty_MainWindowHasCloseBoxes/": {
      "api_signatures": [],
      "category": {
        "category": "XPLM_Display",
        "module": "Xplm Display",
        "url": "https://developer.x-plane.com/sdk/xpProperty_MainWindowHasCloseBoxes/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem\"><table><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpProperty_MainWindowHasCloseBoxes\"><a href=\"/sdk/xpProperty_MainWindowHasCloseBoxes/\">xpProperty_MainWindowHasCloseBoxes</a></td><td>\"1200\"</td><td>This property specifies whether the main window has close boxes in its corners.</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |  |\n| --- | --- | --- |\n| [xpProperty_MainWindowHasCloseBoxes](/sdk/xpProperty_MainWindowHasCloseBoxes/) | \"1200\" | This property specifies whether the main window has close boxes in its corners. |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:23.603493+00:00",
      "title": "xpProperty_MainWindowHasCloseBoxes | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xpProperty_MainWindowHasCloseBoxes/"
    },
    "https://developer.x-plane.com/sdk/xpProperty_MainWindowType/": {
      "api_signatures": [],
      "category": {
        "category": "XPLM_Display",
        "module": "Xplm Display",
        "url": "https://developer.x-plane.com/sdk/xpProperty_MainWindowType/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem\"><table><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpProperty_MainWindowType\"><a href=\"/sdk/xpProperty_MainWindowType/\">xpProperty_MainWindowType</a></td><td>\"1100\"</td><td>This property specifies the type of window. Set to one of the main window types above.</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |  |\n| --- | --- | --- |\n| [xpProperty_MainWindowType](/sdk/xpProperty_MainWindowType/) | \"1100\" | This property specifies the type of window. Set to one of the main window types above. |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:23.604490+00:00",
      "title": "xpProperty_MainWindowType | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xpProperty_MainWindowType/"
    },
    "https://developer.x-plane.com/sdk/xpProperty_MaxCharacters/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/xpProperty_MaxCharacters/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem\"><table><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpProperty_MaxCharacters\"><a href=\"/sdk/xpProperty_MaxCharacters/\">xpProperty_MaxCharacters</a></td><td>\"1405\"</td><td>The max number of characters you can enter, if limited. Zero means unlimited.</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |  |\n| --- | --- | --- |\n| [xpProperty_MaxCharacters](/sdk/xpProperty_MaxCharacters/) | \"1405\" | The max number of characters you can enter, if limited. Zero means unlimited. |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.773631+00:00",
      "title": "xpProperty_MaxCharacters | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xpProperty_MaxCharacters/"
    },
    "https://developer.x-plane.com/sdk/xpProperty_Object/": {
      "api_signatures": [],
      "category": {
        "category": "XPLM_Instance",
        "module": "Xplm Instance",
        "url": "https://developer.x-plane.com/sdk/xpProperty_Object/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem\"><table><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpProperty_Object\"><a href=\"/sdk/xpProperty_Object/\">xpProperty_Object</a></td><td>\"5\"</td><td>Is there a C++ object attached to this widget?</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |  |\n| --- | --- | --- |\n| [xpProperty_Object](/sdk/xpProperty_Object/) | \"5\" | Is there a C++ object attached to this widget? |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:23.760753+00:00",
      "title": "xpProperty_Object | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xpProperty_Object/"
    },
    "https://developer.x-plane.com/sdk/xpProperty_PasswordMode/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/xpProperty_PasswordMode/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem\"><table><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpProperty_PasswordMode\"><a href=\"/sdk/xpProperty_PasswordMode/\">xpProperty_PasswordMode</a></td><td>\"1404\"</td><td>Set this property to 1 to password protect the field. Characters will be drawn as *s even though the descriptor will contain plain-text.</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |  |\n| --- | --- | --- |\n| [xpProperty_PasswordMode](/sdk/xpProperty_PasswordMode/) | \"1404\" | Set this property to 1 to password protect the field. Characters will be drawn as *s even though the descriptor will contain plain-text. |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.775634+00:00",
      "title": "xpProperty_PasswordMode | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xpProperty_PasswordMode/"
    },
    "https://developer.x-plane.com/sdk/xpProperty_ProgressMax/": {
      "api_signatures": [],
      "category": {
        "category": "Widget_System",
        "module": "Widget System",
        "url": "https://developer.x-plane.com/sdk/xpProperty_ProgressMax/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem\"><table><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpProperty_ProgressMax\"><a href=\"/sdk/xpProperty_ProgressMax/\">xpProperty_ProgressMax</a></td><td>\"1802\"</td><td>This is the maximum value, equivalent to 100% filled.</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |  |\n| --- | --- | --- |\n| [xpProperty_ProgressMax](/sdk/xpProperty_ProgressMax/) | \"1802\" | This is the maximum value, equivalent to 100% filled. |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:23.275873+00:00",
      "title": "xpProperty_ProgressMax | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xpProperty_ProgressMax/"
    },
    "https://developer.x-plane.com/sdk/xpProperty_ProgressMin/": {
      "api_signatures": [],
      "category": {
        "category": "Widget_System",
        "module": "Widget System",
        "url": "https://developer.x-plane.com/sdk/xpProperty_ProgressMin/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem\"><table><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpProperty_ProgressMin\"><a href=\"/sdk/xpProperty_ProgressMin/\">xpProperty_ProgressMin</a></td><td>\"1801\"</td><td>This is the minimum value, equivalent to 0% filled.</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |  |\n| --- | --- | --- |\n| [xpProperty_ProgressMin](/sdk/xpProperty_ProgressMin/) | \"1801\" | This is the minimum value, equivalent to 0% filled. |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:23.279041+00:00",
      "title": "xpProperty_ProgressMin | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xpProperty_ProgressMin/"
    },
    "https://developer.x-plane.com/sdk/xpProperty_ProgressPosition/": {
      "api_signatures": [],
      "category": {
        "category": "Widget_System",
        "module": "Widget System",
        "url": "https://developer.x-plane.com/sdk/xpProperty_ProgressPosition/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem\"><table><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpProperty_ProgressPosition\"><a href=\"/sdk/xpProperty_ProgressPosition/\">xpProperty_ProgressPosition</a></td><td>\"1800\"</td><td>This is the current value of the progress indicator.</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |  |\n| --- | --- | --- |\n| [xpProperty_ProgressPosition](/sdk/xpProperty_ProgressPosition/) | \"1800\" | This is the current value of the progress indicator. |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:23.277039+00:00",
      "title": "xpProperty_ProgressPosition | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xpProperty_ProgressPosition/"
    },
    "https://developer.x-plane.com/sdk/xpProperty_Refcon/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/xpProperty_Refcon/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem\"><table><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpProperty_Refcon\"><a href=\"/sdk/xpProperty_Refcon/\">xpProperty_Refcon</a></td><td>\"0\"</td><td>A window's refcon is an opaque value used by client code to find other data based on it.</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |  |\n| --- | --- | --- |\n| [xpProperty_Refcon](/sdk/xpProperty_Refcon/) | \"0\" | A window's refcon is an opaque value used by client code to find other data based on it. |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.776636+00:00",
      "title": "xpProperty_Refcon | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xpProperty_Refcon/"
    },
    "https://developer.x-plane.com/sdk/xpProperty_ScrollBarMax/": {
      "api_signatures": [],
      "category": {
        "category": "Widget_System",
        "module": "Widget System",
        "url": "https://developer.x-plane.com/sdk/xpProperty_ScrollBarMax/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem\"><table><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpProperty_ScrollBarMax\"><a href=\"/sdk/xpProperty_ScrollBarMax/\">xpProperty_ScrollBarMax</a></td><td>\"1502\"</td><td>The value the scroll bar has when the thumb is in the highest position.</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |  |\n| --- | --- | --- |\n| [xpProperty_ScrollBarMax](/sdk/xpProperty_ScrollBarMax/) | \"1502\" | The value the scroll bar has when the thumb is in the highest position. |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:23.280039+00:00",
      "title": "xpProperty_ScrollBarMax | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xpProperty_ScrollBarMax/"
    },
    "https://developer.x-plane.com/sdk/xpProperty_ScrollBarMin/": {
      "api_signatures": [],
      "category": {
        "category": "Widget_System",
        "module": "Widget System",
        "url": "https://developer.x-plane.com/sdk/xpProperty_ScrollBarMin/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem\"><table><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpProperty_ScrollBarMin\"><a href=\"/sdk/xpProperty_ScrollBarMin/\">xpProperty_ScrollBarMin</a></td><td>\"1501\"</td><td>The value the scroll bar has when the thumb is in the lowest position.</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |  |\n| --- | --- | --- |\n| [xpProperty_ScrollBarMin](/sdk/xpProperty_ScrollBarMin/) | \"1501\" | The value the scroll bar has when the thumb is in the lowest position. |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:23.282040+00:00",
      "title": "xpProperty_ScrollBarMin | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xpProperty_ScrollBarMin/"
    },
    "https://developer.x-plane.com/sdk/xpProperty_ScrollBarPageAmount/": {
      "api_signatures": [],
      "category": {
        "category": "Widget_System",
        "module": "Widget System",
        "url": "https://developer.x-plane.com/sdk/xpProperty_ScrollBarPageAmount/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem\"><table><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpProperty_ScrollBarPageAmount\"><a href=\"/sdk/xpProperty_ScrollBarPageAmount/\">xpProperty_ScrollBarPageAmount</a></td><td>\"1503\"</td><td>How many units to move the scroll bar when clicking next to the thumb. The scroll bar always moves one unit when the arrows are clicked.</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |  |\n| --- | --- | --- |\n| [xpProperty_ScrollBarPageAmount](/sdk/xpProperty_ScrollBarPageAmount/) | \"1503\" | How many units to move the scroll bar when clicking next to the thumb. The scroll bar always moves one unit when the arrows are clicked. |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:23.284039+00:00",
      "title": "xpProperty_ScrollBarPageAmount | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xpProperty_ScrollBarPageAmount/"
    },
    "https://developer.x-plane.com/sdk/xpProperty_ScrollBarSliderPosition/": {
      "api_signatures": [],
      "category": {
        "category": "Widget_System",
        "module": "Widget System",
        "url": "https://developer.x-plane.com/sdk/xpProperty_ScrollBarSliderPosition/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem\"><table><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpProperty_ScrollBarSliderPosition\"><a href=\"/sdk/xpProperty_ScrollBarSliderPosition/\">xpProperty_ScrollBarSliderPosition</a></td><td>\"1500\"</td><td>The current position of the thumb (in between the min and max, inclusive)</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |  |\n| --- | --- | --- |\n| [xpProperty_ScrollBarSliderPosition](/sdk/xpProperty_ScrollBarSliderPosition/) | \"1500\" | The current position of the thumb (in between the min and max, inclusive) |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:23.286039+00:00",
      "title": "xpProperty_ScrollBarSliderPosition | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xpProperty_ScrollBarSliderPosition/"
    },
    "https://developer.x-plane.com/sdk/xpProperty_ScrollBarSlop/": {
      "api_signatures": [],
      "category": {
        "category": "Widget_System",
        "module": "Widget System",
        "url": "https://developer.x-plane.com/sdk/xpProperty_ScrollBarSlop/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem\"><table><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpProperty_ScrollBarSlop\"><a href=\"/sdk/xpProperty_ScrollBarSlop/\">xpProperty_ScrollBarSlop</a></td><td>\"1505\"</td><td>Used internally.</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |  |\n| --- | --- | --- |\n| [xpProperty_ScrollBarSlop](/sdk/xpProperty_ScrollBarSlop/) | \"1505\" | Used internally. |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:23.287039+00:00",
      "title": "xpProperty_ScrollBarSlop | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xpProperty_ScrollBarSlop/"
    },
    "https://developer.x-plane.com/sdk/xpProperty_ScrollBarType/": {
      "api_signatures": [],
      "category": {
        "category": "Widget_System",
        "module": "Widget System",
        "url": "https://developer.x-plane.com/sdk/xpProperty_ScrollBarType/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem\"><table><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpProperty_ScrollBarType\"><a href=\"/sdk/xpProperty_ScrollBarType/\">xpProperty_ScrollBarType</a></td><td>\"1504\"</td><td>The type of scrollbar from the enums above.</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |  |\n| --- | --- | --- |\n| [xpProperty_ScrollBarType](/sdk/xpProperty_ScrollBarType/) | \"1504\" | The type of scrollbar from the enums above. |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:23.289040+00:00",
      "title": "xpProperty_ScrollBarType | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xpProperty_ScrollBarType/"
    },
    "https://developer.x-plane.com/sdk/xpProperty_ScrollPosition/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/xpProperty_ScrollPosition/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem\"><table><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpProperty_ScrollPosition\"><a href=\"/sdk/xpProperty_ScrollPosition/\">xpProperty_ScrollPosition</a></td><td>\"1406\"</td><td>The first visible character on the left. This effectively scrolls the text field.</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |  |\n| --- | --- | --- |\n| [xpProperty_ScrollPosition](/sdk/xpProperty_ScrollPosition/) | \"1406\" | The first visible character on the left. This effectively scrolls the text field. |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.778633+00:00",
      "title": "xpProperty_ScrollPosition | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xpProperty_ScrollPosition/"
    },
    "https://developer.x-plane.com/sdk/xpProperty_SubWindowType/": {
      "api_signatures": [],
      "category": {
        "category": "XPLM_Display",
        "module": "Xplm Display",
        "url": "https://developer.x-plane.com/sdk/xpProperty_SubWindowType/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem\"><table><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpProperty_SubWindowType\"><a href=\"/sdk/xpProperty_SubWindowType/\">xpProperty_SubWindowType</a></td><td>\"1200\"</td><td>This property specifies the type of window. Set to one of the subwindow types above.</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |  |\n| --- | --- | --- |\n| [xpProperty_SubWindowType](/sdk/xpProperty_SubWindowType/) | \"1200\" | This property specifies the type of window. Set to one of the subwindow types above. |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:23.606491+00:00",
      "title": "xpProperty_SubWindowType | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xpProperty_SubWindowType/"
    },
    "https://developer.x-plane.com/sdk/xpProperty_TextFieldType/": {
      "api_signatures": [],
      "category": {
        "category": "Widget_System",
        "module": "Widget System",
        "url": "https://developer.x-plane.com/sdk/xpProperty_TextFieldType/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem\"><table><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpProperty_TextFieldType\"><a href=\"/sdk/xpProperty_TextFieldType/\">xpProperty_TextFieldType</a></td><td>\"1403\"</td><td>This is the type of text field to display, from the above list.</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |  |\n| --- | --- | --- |\n| [xpProperty_TextFieldType](/sdk/xpProperty_TextFieldType/) | \"1403\" | This is the type of text field to display, from the above list. |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:23.293038+00:00",
      "title": "xpProperty_TextFieldType | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xpProperty_TextFieldType/"
    },
    "https://developer.x-plane.com/sdk/xpProperty_UserStart/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/xpProperty_UserStart/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem\"><table><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpProperty_UserStart\"><a href=\"/sdk/xpProperty_UserStart/\">xpProperty_UserStart</a></td><td>\"10000\"</td><td>NOTE: Property IDs 1 - 999 are reserved for the widgets library.NOTE: Property IDs 1000 - 9999 are allocated to the standard widget classes provided with the library.Properties 1000 - 1099 are for widget class 0, 1100 - 1199 for widget class 1, etc.</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |  |\n| --- | --- | --- |\n| [xpProperty_UserStart](/sdk/xpProperty_UserStart/) | \"10000\" | NOTE: Property IDs 1 - 999 are reserved for the widgets library.NOTE: Property IDs 1000 - 9999 are allocated to the standard widget classes provided with the library.Properties 1000 - 1099 are for widget class 0, 1100 - 1199 for widget class 1, etc. |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.780635+00:00",
      "title": "xpProperty_UserStart | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xpProperty_UserStart/"
    },
    "https://developer.x-plane.com/sdk/xpPushButton/": {
      "api_signatures": [],
      "category": {
        "category": "Widget_System",
        "module": "Widget System",
        "url": "https://developer.x-plane.com/sdk/xpPushButton/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem\"><table><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpPushButton\"><a href=\"/sdk/xpPushButton/\">xpPushButton</a></td><td>\"0\"</td><td>This is a standard push button, like an 'OK' or 'Cancel' button in a dialog box.</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |  |\n| --- | --- | --- |\n| [xpPushButton](/sdk/xpPushButton/) | \"0\" | This is a standard push button, like an 'OK' or 'Cancel' button in a dialog box. |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:23.291040+00:00",
      "title": "xpPushButton | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xpPushButton/"
    },
    "https://developer.x-plane.com/sdk/xpRadioButton/": {
      "api_signatures": [],
      "category": {
        "category": "Widget_System",
        "module": "Widget System",
        "url": "https://developer.x-plane.com/sdk/xpRadioButton/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem\"><table><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpRadioButton\"><a href=\"/sdk/xpRadioButton/\">xpRadioButton</a></td><td>\"1\"</td><td>A check box or radio button. Use this and the button behaviors below to get the desired behavior.</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |  |\n| --- | --- | --- |\n| [xpRadioButton](/sdk/xpRadioButton/) | \"1\" | A check box or radio button. Use this and the button behaviors below to get the desired behavior. |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:23.294039+00:00",
      "title": "xpRadioButton | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xpRadioButton/"
    },
    "https://developer.x-plane.com/sdk/xpRadioTower/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/xpRadioTower/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem\"><table><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpRadioTower\"><a href=\"/sdk/xpRadioTower/\">xpRadioTower</a></td><td>\"10\"</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |\n| --- | --- |\n| [xpRadioTower](/sdk/xpRadioTower/) | \"10\" |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.782634+00:00",
      "title": "xpRadioTower | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xpRadioTower/"
    },
    "https://developer.x-plane.com/sdk/xpScrollBarTypeScrollBar/": {
      "api_signatures": [],
      "category": {
        "category": "Widget_System",
        "module": "Widget System",
        "url": "https://developer.x-plane.com/sdk/xpScrollBarTypeScrollBar/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem\"><table><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpScrollBarTypeScrollBar\"><a href=\"/sdk/xpScrollBarTypeScrollBar/\">xpScrollBarTypeScrollBar</a></td><td>\"0\"</td><td>A standard X-Plane scroll bar (with arrows on the ends).</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |  |\n| --- | --- | --- |\n| [xpScrollBarTypeScrollBar](/sdk/xpScrollBarTypeScrollBar/) | \"0\" | A standard X-Plane scroll bar (with arrows on the ends). |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:23.298093+00:00",
      "title": "xpScrollBarTypeScrollBar | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xpScrollBarTypeScrollBar/"
    },
    "https://developer.x-plane.com/sdk/xpScrollBarTypeSlider/": {
      "api_signatures": [],
      "category": {
        "category": "Widget_System",
        "module": "Widget System",
        "url": "https://developer.x-plane.com/sdk/xpScrollBarTypeSlider/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem\"><table><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpScrollBarTypeSlider\"><a href=\"/sdk/xpScrollBarTypeSlider/\">xpScrollBarTypeSlider</a></td><td>\"1\"</td><td>A slider, no arrows.</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |  |\n| --- | --- | --- |\n| [xpScrollBarTypeSlider](/sdk/xpScrollBarTypeSlider/) | \"1\" | A slider, no arrows. |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:23.296041+00:00",
      "title": "xpScrollBarTypeSlider | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xpScrollBarTypeSlider/"
    },
    "https://developer.x-plane.com/sdk/xpShip/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/xpShip/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem\"><table><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpShip\"><a href=\"/sdk/xpShip/\">xpShip</a></td><td>\"4\"</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |\n| --- | --- |\n| [xpShip](/sdk/xpShip/) | \"4\" |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.783634+00:00",
      "title": "xpShip | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xpShip/"
    },
    "https://developer.x-plane.com/sdk/xpSmokeStack/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/xpSmokeStack/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem\"><table><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpSmokeStack\"><a href=\"/sdk/xpSmokeStack/\">xpSmokeStack</a></td><td>\"16\"</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |\n| --- | --- |\n| [xpSmokeStack](/sdk/xpSmokeStack/) | \"16\" |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.785634+00:00",
      "title": "xpSmokeStack | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xpSmokeStack/"
    },
    "https://developer.x-plane.com/sdk/xpSubWindowStyle_ListView/": {
      "api_signatures": [],
      "category": {
        "category": "XPLM_Camera",
        "module": "Xplm Camera",
        "url": "https://developer.x-plane.com/sdk/xpSubWindowStyle_ListView/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem\"><table><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpSubWindowStyle_ListView\"><a href=\"/sdk/xpSubWindowStyle_ListView/\">xpSubWindowStyle_ListView</a></td><td>\"3\"</td><td>A list view for scrolling lists.</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |  |\n| --- | --- | --- |\n| [xpSubWindowStyle_ListView](/sdk/xpSubWindowStyle_ListView/) | \"3\" | A list view for scrolling lists. |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:23.326092+00:00",
      "title": "xpSubWindowStyle_ListView | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xpSubWindowStyle_ListView/"
    },
    "https://developer.x-plane.com/sdk/xpSubWindowStyle_Screen/": {
      "api_signatures": [],
      "category": {
        "category": "XPLM_Display",
        "module": "Xplm Display",
        "url": "https://developer.x-plane.com/sdk/xpSubWindowStyle_Screen/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem\"><table><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpSubWindowStyle_Screen\"><a href=\"/sdk/xpSubWindowStyle_Screen/\">xpSubWindowStyle_Screen</a></td><td>\"2\"</td><td>A screen that sits inside a panel for showing text information.</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |  |\n| --- | --- | --- |\n| [xpSubWindowStyle_Screen](/sdk/xpSubWindowStyle_Screen/) | \"2\" | A screen that sits inside a panel for showing text information. |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:23.608489+00:00",
      "title": "xpSubWindowStyle_Screen | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xpSubWindowStyle_Screen/"
    },
    "https://developer.x-plane.com/sdk/xpSubWindowStyle_SubWindow/": {
      "api_signatures": [],
      "category": {
        "category": "XPLM_Display",
        "module": "Xplm Display",
        "url": "https://developer.x-plane.com/sdk/xpSubWindowStyle_SubWindow/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem\"><table><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpSubWindowStyle_SubWindow\"><a href=\"/sdk/xpSubWindowStyle_SubWindow/\">xpSubWindowStyle_SubWindow</a></td><td>\"0\"</td><td>A panel that sits inside a main window.</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |  |\n| --- | --- | --- |\n| [xpSubWindowStyle_SubWindow](/sdk/xpSubWindowStyle_SubWindow/) | \"0\" | A panel that sits inside a main window. |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:23.609491+00:00",
      "title": "xpSubWindowStyle_SubWindow | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xpSubWindowStyle_SubWindow/"
    },
    "https://developer.x-plane.com/sdk/xpTextEntryField/": {
      "api_signatures": [],
      "category": {
        "category": "Widget_System",
        "module": "Widget System",
        "url": "https://developer.x-plane.com/sdk/xpTextEntryField/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem\"><table><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpTextEntryField\"><a href=\"/sdk/xpTextEntryField/\">xpTextEntryField</a></td><td>\"0\"</td><td>A field for text entry.</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |  |\n| --- | --- | --- |\n| [xpTextEntryField](/sdk/xpTextEntryField/) | \"0\" | A field for text entry. |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:23.301092+00:00",
      "title": "xpTextEntryField | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xpTextEntryField/"
    },
    "https://developer.x-plane.com/sdk/xpTextTranslucent/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/xpTextTranslucent/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem\"><table><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpTextTranslucent\"><a href=\"/sdk/xpTextTranslucent/\">xpTextTranslucent</a></td><td>\"4\"</td><td>A translucent edit field, dark gray.</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |  |\n| --- | --- | --- |\n| [xpTextTranslucent](/sdk/xpTextTranslucent/) | \"4\" | A translucent edit field, dark gray. |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.786636+00:00",
      "title": "xpTextTranslucent | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xpTextTranslucent/"
    },
    "https://developer.x-plane.com/sdk/xpTextTransparent/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/xpTextTransparent/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem\"><table><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpTextTransparent\"><a href=\"/sdk/xpTextTransparent/\">xpTextTransparent</a></td><td>\"3\"</td><td>A transparent text field. The user can type and the text is drawn, but no background is drawn.You can draw your own background by adding a widget handler and prehandling the draw message.</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |  |\n| --- | --- | --- |\n| [xpTextTransparent](/sdk/xpTextTransparent/) | \"3\" | A transparent text field. The user can type and the text is drawn, but no background is drawn.You can draw your own background by adding a widget handler and prehandling the draw message. |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.788634+00:00",
      "title": "xpTextTransparent | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xpTextTransparent/"
    },
    "https://developer.x-plane.com/sdk/xpTrack_Progress/": {
      "api_signatures": [],
      "category": {
        "category": "Widget_System",
        "module": "Widget System",
        "url": "https://developer.x-plane.com/sdk/xpTrack_Progress/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem\"><table><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpTrack_Progress\"><a href=\"/sdk/xpTrack_Progress/\">xpTrack_Progress</a></td><td>\"2\"</td><td>over metal cannot be lit cannot be rotated</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |  |\n| --- | --- | --- |\n| [xpTrack_Progress](/sdk/xpTrack_Progress/) | \"2\" | over metal cannot be lit cannot be rotated |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:23.299091+00:00",
      "title": "xpTrack_Progress | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xpTrack_Progress/"
    },
    "https://developer.x-plane.com/sdk/xpTrack_ScrollBar/": {
      "api_signatures": [],
      "category": {
        "category": "Widget_System",
        "module": "Widget System",
        "url": "https://developer.x-plane.com/sdk/xpTrack_ScrollBar/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem\"><table><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpTrack_ScrollBar\"><a href=\"/sdk/xpTrack_ScrollBar/\">xpTrack_ScrollBar</a></td><td>\"0\"</td><td>not over metal can be lit can be rotated</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |  |\n| --- | --- | --- |\n| [xpTrack_ScrollBar](/sdk/xpTrack_ScrollBar/) | \"0\" | not over metal can be lit can be rotated |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:23.302092+00:00",
      "title": "xpTrack_ScrollBar | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xpTrack_ScrollBar/"
    },
    "https://developer.x-plane.com/sdk/xpTrack_Slider/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/xpTrack_Slider/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem\"><table><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpTrack_Slider\"><a href=\"/sdk/xpTrack_Slider/\">xpTrack_Slider</a></td><td>\"1\"</td><td>over metal can be lit can be rotated</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |  |\n| --- | --- | --- |\n| [xpTrack_Slider](/sdk/xpTrack_Slider/) | \"1\" | over metal can be lit can be rotated |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.790137+00:00",
      "title": "xpTrack_Slider | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xpTrack_Slider/"
    },
    "https://developer.x-plane.com/sdk/xpVOR/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/xpVOR/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem\"><table><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpVOR\"><a href=\"/sdk/xpVOR/\">xpVOR</a></td><td>\"9\"</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |\n| --- | --- |\n| [xpVOR](/sdk/xpVOR/) | \"9\" |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.793141+00:00",
      "title": "xpVOR | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xpVOR/"
    },
    "https://developer.x-plane.com/sdk/xpVORWithCompassRose/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/xpVORWithCompassRose/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem\"><table><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpVORWithCompassRose\"><a href=\"/sdk/xpVORWithCompassRose/\">xpVORWithCompassRose</a></td><td>\"19\"</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |\n| --- | --- |\n| [xpVORWithCompassRose](/sdk/xpVORWithCompassRose/) | \"19\" |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.791142+00:00",
      "title": "xpVORWithCompassRose | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xpVORWithCompassRose/"
    },
    "https://developer.x-plane.com/sdk/xpWayPoint/": {
      "api_signatures": [],
      "category": {
        "category": "XPLM_Navigation",
        "module": "Xplm Navigation",
        "url": "https://developer.x-plane.com/sdk/xpWayPoint/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem\"><table><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpWayPoint\"><a href=\"/sdk/xpWayPoint/\">xpWayPoint</a></td><td>\"23\"</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |\n| --- | --- |\n| [xpWayPoint](/sdk/xpWayPoint/) | \"23\" |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:24.109137+00:00",
      "title": "xpWayPoint | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xpWayPoint/"
    },
    "https://developer.x-plane.com/sdk/xpWidgetClass_Button/": {
      "api_signatures": [],
      "category": {
        "category": "Widget_System",
        "module": "Widget System",
        "url": "https://developer.x-plane.com/sdk/xpWidgetClass_Button/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"xpWidgetClass_Button\"><a href=\"/sdk/xpWidgetClass_Button/\">xpWidgetClass_Button</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/xpWidgetClass_Button/\">xpWidgetClass_Button</a> 3</code></pre></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "### [xpWidgetClass_Button](/sdk/xpWidgetClass_Button/)\n\n```cpp\n#define xpWidgetClass_Button 3\n```",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:23.304091+00:00",
      "title": "xpWidgetClass_Button | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xpWidgetClass_Button/"
    },
    "https://developer.x-plane.com/sdk/xpWidgetClass_Caption/": {
      "api_signatures": [],
      "category": {
        "category": "Widget_System",
        "module": "Widget System",
        "url": "https://developer.x-plane.com/sdk/xpWidgetClass_Caption/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"xpWidgetClass_Caption\"><a href=\"/sdk/xpWidgetClass_Caption/\">xpWidgetClass_Caption</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/xpWidgetClass_Caption/\">xpWidgetClass_Caption</a> 6</code></pre></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "### [xpWidgetClass_Caption](/sdk/xpWidgetClass_Caption/)\n\n```cpp\n#define xpWidgetClass_Caption 6\n```",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:23.305091+00:00",
      "title": "xpWidgetClass_Caption | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xpWidgetClass_Caption/"
    },
    "https://developer.x-plane.com/sdk/xpWidgetClass_GeneralGraphics/": {
      "api_signatures": [],
      "category": {
        "category": "XPLM_Graphics",
        "module": "Xplm Graphics",
        "url": "https://developer.x-plane.com/sdk/xpWidgetClass_GeneralGraphics/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"xpWidgetClass_GeneralGraphics\"><a href=\"/sdk/xpWidgetClass_GeneralGraphics/\">xpWidgetClass_GeneralGraphics</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/xpWidgetClass_GeneralGraphics/\">xpWidgetClass_GeneralGraphics</a> 7</code></pre></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "### [xpWidgetClass_GeneralGraphics](/sdk/xpWidgetClass_GeneralGraphics/)\n\n```cpp\n#define xpWidgetClass_GeneralGraphics 7\n```",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:23.717349+00:00",
      "title": "xpWidgetClass_GeneralGraphics | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xpWidgetClass_GeneralGraphics/"
    },
    "https://developer.x-plane.com/sdk/xpWidgetClass_MainWindow/": {
      "api_signatures": [],
      "category": {
        "category": "XPLM_Display",
        "module": "Xplm Display",
        "url": "https://developer.x-plane.com/sdk/xpWidgetClass_MainWindow/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"xpWidgetClass_MainWindow\"><a href=\"/sdk/xpWidgetClass_MainWindow/\">xpWidgetClass_MainWindow</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/xpWidgetClass_MainWindow/\">xpWidgetClass_MainWindow</a> 1</code></pre></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "### [xpWidgetClass_MainWindow](/sdk/xpWidgetClass_MainWindow/)\n\n```cpp\n#define xpWidgetClass_MainWindow 1\n```",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:23.611489+00:00",
      "title": "xpWidgetClass_MainWindow | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xpWidgetClass_MainWindow/"
    },
    "https://developer.x-plane.com/sdk/xpWidgetClass_None/": {
      "api_signatures": [],
      "category": {
        "category": "Widget_System",
        "module": "Widget System",
        "url": "https://developer.x-plane.com/sdk/xpWidgetClass_None/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"xpWidgetClass_None\"><a href=\"/sdk/xpWidgetClass_None/\">xpWidgetClass_None</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/xpWidgetClass_None/\">xpWidgetClass_None</a>   0</code></pre><p>An unspecified widget class. Other widget classes are in<a href=\"/sdk/XPStandardWidgets/\">XPStandardWidgets</a>.h</p></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "### [xpWidgetClass_None](/sdk/xpWidgetClass_None/)\n\n```cpp\n#define xpWidgetClass_None   0\n```\n\nAn unspecified widget class. Other widget classes are\nin[XPStandardWidgets](/sdk/XPStandardWidgets/).h",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:23.307092+00:00",
      "title": "xpWidgetClass_None | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xpWidgetClass_None/"
    },
    "https://developer.x-plane.com/sdk/xpWidgetClass_Progress/": {
      "api_signatures": [],
      "category": {
        "category": "Widget_System",
        "module": "Widget System",
        "url": "https://developer.x-plane.com/sdk/xpWidgetClass_Progress/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"xpWidgetClass_Progress\"><a href=\"/sdk/xpWidgetClass_Progress/\">xpWidgetClass_Progress</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/xpWidgetClass_Progress/\">xpWidgetClass_Progress</a> 8</code></pre></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "### [xpWidgetClass_Progress](/sdk/xpWidgetClass_Progress/)\n\n```cpp\n#define xpWidgetClass_Progress 8\n```",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:23.308091+00:00",
      "title": "xpWidgetClass_Progress | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xpWidgetClass_Progress/"
    },
    "https://developer.x-plane.com/sdk/xpWidgetClass_ScrollBar/": {
      "api_signatures": [],
      "category": {
        "category": "Widget_System",
        "module": "Widget System",
        "url": "https://developer.x-plane.com/sdk/xpWidgetClass_ScrollBar/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"xpWidgetClass_ScrollBar\"><a href=\"/sdk/xpWidgetClass_ScrollBar/\">xpWidgetClass_ScrollBar</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/xpWidgetClass_ScrollBar/\">xpWidgetClass_ScrollBar</a> 5</code></pre></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "### [xpWidgetClass_ScrollBar](/sdk/xpWidgetClass_ScrollBar/)\n\n```cpp\n#define xpWidgetClass_ScrollBar 5\n```",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:23.311091+00:00",
      "title": "xpWidgetClass_ScrollBar | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xpWidgetClass_ScrollBar/"
    },
    "https://developer.x-plane.com/sdk/xpWidgetClass_SubWindow/": {
      "api_signatures": [],
      "category": {
        "category": "XPLM_Display",
        "module": "Xplm Display",
        "url": "https://developer.x-plane.com/sdk/xpWidgetClass_SubWindow/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"xpWidgetClass_SubWindow\"><a href=\"/sdk/xpWidgetClass_SubWindow/\">xpWidgetClass_SubWindow</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/xpWidgetClass_SubWindow/\">xpWidgetClass_SubWindow</a> 2</code></pre></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "### [xpWidgetClass_SubWindow](/sdk/xpWidgetClass_SubWindow/)\n\n```cpp\n#define xpWidgetClass_SubWindow 2\n```",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:23.612490+00:00",
      "title": "xpWidgetClass_SubWindow | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xpWidgetClass_SubWindow/"
    },
    "https://developer.x-plane.com/sdk/xpWidgetClass_TextField/": {
      "api_signatures": [],
      "category": {
        "category": "Widget_System",
        "module": "Widget System",
        "url": "https://developer.x-plane.com/sdk/xpWidgetClass_TextField/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"define\"><h3 class=\"sdk-api-define\" id=\"xpWidgetClass_TextField\"><a href=\"/sdk/xpWidgetClass_TextField/\">xpWidgetClass_TextField</a></h3><pre class=\"language-cpp\" data-manual=\"true\"><code>#define <a href=\"/sdk/xpWidgetClass_TextField/\">xpWidgetClass_TextField</a> 4</code></pre></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "### [xpWidgetClass_TextField](/sdk/xpWidgetClass_TextField/)\n\n```cpp\n#define xpWidgetClass_TextField 4\n```",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:23.309091+00:00",
      "title": "xpWidgetClass_TextField | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xpWidgetClass_TextField/"
    },
    "https://developer.x-plane.com/sdk/xpWindowCloseBox/": {
      "api_signatures": [],
      "category": {
        "category": "XPLM_Display",
        "module": "Xplm Display",
        "url": "https://developer.x-plane.com/sdk/xpWindowCloseBox/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem\"><table><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpWindowCloseBox\"><a href=\"/sdk/xpWindowCloseBox/\">xpWindowCloseBox</a></td><td>\"3\"</td><td>A window close box.</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |  |\n| --- | --- | --- |\n| [xpWindowCloseBox](/sdk/xpWindowCloseBox/) | \"3\" | A window close box. |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:23.614491+00:00",
      "title": "xpWindowCloseBox | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xpWindowCloseBox/"
    },
    "https://developer.x-plane.com/sdk/xpWindow_Help/": {
      "api_signatures": [],
      "category": {
        "category": "XPLM_Display",
        "module": "Xplm Display",
        "url": "https://developer.x-plane.com/sdk/xpWindow_Help/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem\"><table><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpWindow_Help\"><a href=\"/sdk/xpWindow_Help/\">xpWindow_Help</a></td><td>\"0\"</td><td>An LCD screen that shows help.</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |  |\n| --- | --- | --- |\n| [xpWindow_Help](/sdk/xpWindow_Help/) | \"0\" | An LCD screen that shows help. |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:23.615492+00:00",
      "title": "xpWindow_Help | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xpWindow_Help/"
    },
    "https://developer.x-plane.com/sdk/xpWindow_ListView/": {
      "api_signatures": [],
      "category": {
        "category": "XPLM_Camera",
        "module": "Xplm Camera",
        "url": "https://developer.x-plane.com/sdk/xpWindow_ListView/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem\"><table><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpWindow_ListView\"><a href=\"/sdk/xpWindow_ListView/\">xpWindow_ListView</a></td><td>\"5\"</td><td>A list view within a panel for scrolling file names, etc.</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |  |\n| --- | --- | --- |\n| [xpWindow_ListView](/sdk/xpWindow_ListView/) | \"5\" | A list view within a panel for scrolling file names, etc. |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:23.328093+00:00",
      "title": "xpWindow_ListView | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xpWindow_ListView/"
    },
    "https://developer.x-plane.com/sdk/xpWindow_MainWindow/": {
      "api_signatures": [],
      "category": {
        "category": "XPLM_Display",
        "module": "Xplm Display",
        "url": "https://developer.x-plane.com/sdk/xpWindow_MainWindow/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem\"><table><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpWindow_MainWindow\"><a href=\"/sdk/xpWindow_MainWindow/\">xpWindow_MainWindow</a></td><td>\"1\"</td><td>A dialog box window.</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |  |\n| --- | --- | --- |\n| [xpWindow_MainWindow](/sdk/xpWindow_MainWindow/) | \"1\" | A dialog box window. |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:23.617544+00:00",
      "title": "xpWindow_MainWindow | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xpWindow_MainWindow/"
    },
    "https://developer.x-plane.com/sdk/xpWindow_Screen/": {
      "api_signatures": [],
      "category": {
        "category": "XPLM_Display",
        "module": "Xplm Display",
        "url": "https://developer.x-plane.com/sdk/xpWindow_Screen/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem\"><table><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpWindow_Screen\"><a href=\"/sdk/xpWindow_Screen/\">xpWindow_Screen</a></td><td>\"4\"</td><td>An LCD screen within a panel to hold text displays.</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |  |\n| --- | --- | --- |\n| [xpWindow_Screen](/sdk/xpWindow_Screen/) | \"4\" | An LCD screen within a panel to hold text displays. |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:23.618545+00:00",
      "title": "xpWindow_Screen | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xpWindow_Screen/"
    },
    "https://developer.x-plane.com/sdk/xpWindow_SubWindow/": {
      "api_signatures": [],
      "category": {
        "category": "XPLM_Display",
        "module": "Xplm Display",
        "url": "https://developer.x-plane.com/sdk/xpWindow_SubWindow/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem\"><table><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xpWindow_SubWindow\"><a href=\"/sdk/xpWindow_SubWindow/\">xpWindow_SubWindow</a></td><td>\"2\"</td><td>A panel or frame within a dialog box window.</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |  |\n| --- | --- | --- |\n| [xpWindow_SubWindow](/sdk/xpWindow_SubWindow/) | \"2\" | A panel or frame within a dialog box window. |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:23.619546+00:00",
      "title": "xpWindow_SubWindow | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xpWindow_SubWindow/"
    },
    "https://developer.x-plane.com/sdk/xp_Airport/": {
      "api_signatures": [],
      "category": {
        "category": "XPLM_Navigation",
        "module": "Xplm Navigation",
        "url": "https://developer.x-plane.com/sdk/xp_Airport/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem\"><table><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xp_Airport\"><a href=\"/sdk/xp_Airport/\">xp_Airport</a></td><td>\"7\"</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |\n| --- | --- |\n| [xp_Airport](/sdk/xp_Airport/) | \"7\" |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:24.108137+00:00",
      "title": "xp_Airport | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xp_Airport/"
    },
    "https://developer.x-plane.com/sdk/xplmFont_Basic/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/xplmFont_Basic/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem\"><table><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplmFont_Basic\"><a href=\"/sdk/xplmFont_Basic/\">xplmFont_Basic</a></td><td>\"0\"</td><td>Mono-spaced font for user interface. Available in all versions of the SDK.</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |  |\n| --- | --- | --- |\n| [xplmFont_Basic](/sdk/xplmFont_Basic/) | \"0\" | Mono-spaced font for user interface. Available in all versions of the SDK. |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.794140+00:00",
      "title": "xplmFont_Basic | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xplmFont_Basic/"
    },
    "https://developer.x-plane.com/sdk/xplmFont_FullRound/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/xplmFont_FullRound/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem XPLM_DEPRECATED\"><table><tr class=\"enumitem XPLM_DEPRECATED\"><td class=\"sdk-api-enum-item\" id=\"xplmFont_FullRound\"><a href=\"/sdk/xplmFont_FullRound/\">xplmFont_FullRound</a></td><td>\"15\"</td><td>Deprecated, do not use.</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |  |\n| --- | --- | --- |\n| [xplmFont_FullRound](/sdk/xplmFont_FullRound/) | \"15\" | Deprecated, do not use. |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.796140+00:00",
      "title": "xplmFont_FullRound | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xplmFont_FullRound/"
    },
    "https://developer.x-plane.com/sdk/xplmFont_Led/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/xplmFont_Led/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem XPLM_DEPRECATED\"><table><tr class=\"enumitem XPLM_DEPRECATED\"><td class=\"sdk-api-enum-item\" id=\"xplmFont_Led\"><a href=\"/sdk/xplmFont_Led/\">xplmFont_Led</a></td><td>\"3\"</td><td>Deprecated, do not use.</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |  |\n| --- | --- | --- |\n| [xplmFont_Led](/sdk/xplmFont_Led/) | \"3\" | Deprecated, do not use. |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.799207+00:00",
      "title": "xplmFont_Led | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xplmFont_Led/"
    },
    "https://developer.x-plane.com/sdk/xplmFont_LedWide/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/xplmFont_LedWide/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem XPLM_DEPRECATED\"><table><tr class=\"enumitem XPLM_DEPRECATED\"><td class=\"sdk-api-enum-item\" id=\"xplmFont_LedWide\"><a href=\"/sdk/xplmFont_LedWide/\">xplmFont_LedWide</a></td><td>\"4\"</td><td>Deprecated, do not use.</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |  |\n| --- | --- | --- |\n| [xplmFont_LedWide](/sdk/xplmFont_LedWide/) | \"4\" | Deprecated, do not use. |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.801206+00:00",
      "title": "xplmFont_LedWide | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xplmFont_LedWide/"
    },
    "https://developer.x-plane.com/sdk/xplmFont_Menus/": {
      "api_signatures": [],
      "category": {
        "category": "XPLM_Menus",
        "module": "Xplm Menus",
        "url": "https://developer.x-plane.com/sdk/xplmFont_Menus/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem XPLM_DEPRECATED\"><table><tr class=\"enumitem XPLM_DEPRECATED\"><td class=\"sdk-api-enum-item\" id=\"xplmFont_Menus\"><a href=\"/sdk/xplmFont_Menus/\">xplmFont_Menus</a></td><td>\"1\"</td><td>Deprecated, do not use.</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |  |\n| --- | --- | --- |\n| [xplmFont_Menus](/sdk/xplmFont_Menus/) | \"1\" | Deprecated, do not use. |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:23.937820+00:00",
      "title": "xplmFont_Menus | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xplmFont_Menus/"
    },
    "https://developer.x-plane.com/sdk/xplmFont_Menus_Localized /": {
      "api_signatures": [],
      "category": {
        "category": "XPLM_Menus",
        "module": "Xplm Menus",
        "url": "https://developer.x-plane.com/sdk/xplmFont_Menus_Localized /"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem XPLM_DEPRECATED\"><table><tr class=\"enumitem XPLM_DEPRECATED\"><td class=\"sdk-api-enum-item\" id=\"xplmFont_Menus_Localized \"><a href=\"/sdk/xplmFont_Menus_Localized /\">xplmFont_Menus_Localized</a></td><td>\"17\"</td><td>Deprecated, do not use.</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |  |\n| --- | --- | --- |\n| [xplmFont_Menus_Localized](/sdk/xplmFont_Menus_Localized /) | \"17\" | Deprecated, do not use. |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:23.942825+00:00",
      "title": "xplmFont_Menus_Localized  | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xplmFont_Menus_Localized /"
    },
    "https://developer.x-plane.com/sdk/xplmFont_Metal /": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/xplmFont_Metal /"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem XPLM_DEPRECATED\"><table><tr class=\"enumitem XPLM_DEPRECATED\"><td class=\"sdk-api-enum-item\" id=\"xplmFont_Metal \"><a href=\"/sdk/xplmFont_Metal /\">xplmFont_Metal</a></td><td>\"2\"</td><td>Deprecated, do not use.</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |  |\n| --- | --- | --- |\n| [xplmFont_Metal](/sdk/xplmFont_Metal /) | \"2\" | Deprecated, do not use. |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.798208+00:00",
      "title": "xplmFont_Metal  | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xplmFont_Metal /"
    },
    "https://developer.x-plane.com/sdk/xplmFont_PanelEFIS/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/xplmFont_PanelEFIS/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem XPLM_DEPRECATED\"><table><tr class=\"enumitem XPLM_DEPRECATED\"><td class=\"sdk-api-enum-item\" id=\"xplmFont_PanelEFIS\"><a href=\"/sdk/xplmFont_PanelEFIS/\">xplmFont_PanelEFIS</a></td><td>\"6\"</td><td>Deprecated, do not use.</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |  |\n| --- | --- | --- |\n| [xplmFont_PanelEFIS](/sdk/xplmFont_PanelEFIS/) | \"6\" | Deprecated, do not use. |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.802735+00:00",
      "title": "xplmFont_PanelEFIS | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xplmFont_PanelEFIS/"
    },
    "https://developer.x-plane.com/sdk/xplmFont_PanelGPS/": {
      "api_signatures": [],
      "category": {
        "category": "XPLM_Navigation",
        "module": "Xplm Navigation",
        "url": "https://developer.x-plane.com/sdk/xplmFont_PanelGPS/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem XPLM_DEPRECATED\"><table><tr class=\"enumitem XPLM_DEPRECATED\"><td class=\"sdk-api-enum-item\" id=\"xplmFont_PanelGPS\"><a href=\"/sdk/xplmFont_PanelGPS/\">xplmFont_PanelGPS</a></td><td>\"7\"</td><td>Deprecated, do not use.</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |  |\n| --- | --- | --- |\n| [xplmFont_PanelGPS](/sdk/xplmFont_PanelGPS/) | \"7\" | Deprecated, do not use. |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:24.103137+00:00",
      "title": "xplmFont_PanelGPS | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xplmFont_PanelGPS/"
    },
    "https://developer.x-plane.com/sdk/xplmFont_PanelHUD/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/xplmFont_PanelHUD/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem XPLM_DEPRECATED\"><table><tr class=\"enumitem XPLM_DEPRECATED\"><td class=\"sdk-api-enum-item\" id=\"xplmFont_PanelHUD\"><a href=\"/sdk/xplmFont_PanelHUD/\">xplmFont_PanelHUD</a></td><td>\"5\"</td><td>Deprecated, do not use.</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |  |\n| --- | --- | --- |\n| [xplmFont_PanelHUD](/sdk/xplmFont_PanelHUD/) | \"5\" | Deprecated, do not use. |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.804740+00:00",
      "title": "xplmFont_PanelHUD | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xplmFont_PanelHUD/"
    },
    "https://developer.x-plane.com/sdk/xplmFont_Proportional/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/xplmFont_Proportional/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem XPLM200\"><table><tr class=\"enumitem XPLM200\"><td class=\"sdk-api-enum-item\" id=\"xplmFont_Proportional\"><a href=\"/sdk/xplmFont_Proportional/\">xplmFont_Proportional</a></td><td>\"18\"</td><td>Proportional UI font.</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |  |\n| --- | --- | --- |\n| [xplmFont_Proportional](/sdk/xplmFont_Proportional/) | \"18\" | Proportional UI font. |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.809741+00:00",
      "title": "xplmFont_Proportional | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xplmFont_Proportional/"
    },
    "https://developer.x-plane.com/sdk/xplmFont_RadiosBC/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/xplmFont_RadiosBC/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem XPLM_DEPRECATED\"><table><tr class=\"enumitem XPLM_DEPRECATED\"><td class=\"sdk-api-enum-item\" id=\"xplmFont_RadiosBC\"><a href=\"/sdk/xplmFont_RadiosBC/\">xplmFont_RadiosBC</a></td><td>\"9\"</td><td>Deprecated, do not use.</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |  |\n| --- | --- | --- |\n| [xplmFont_RadiosBC](/sdk/xplmFont_RadiosBC/) | \"9\" | Deprecated, do not use. |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.806739+00:00",
      "title": "xplmFont_RadiosBC | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xplmFont_RadiosBC/"
    },
    "https://developer.x-plane.com/sdk/xplmFont_RadiosBCNarrow/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/xplmFont_RadiosBCNarrow/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem XPLM_DEPRECATED\"><table><tr class=\"enumitem XPLM_DEPRECATED\"><td class=\"sdk-api-enum-item\" id=\"xplmFont_RadiosBCNarrow\"><a href=\"/sdk/xplmFont_RadiosBCNarrow/\">xplmFont_RadiosBCNarrow</a></td><td>\"12\"</td><td>Deprecated, do not use.</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |  |\n| --- | --- | --- |\n| [xplmFont_RadiosBCNarrow](/sdk/xplmFont_RadiosBCNarrow/) | \"12\" | Deprecated, do not use. |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.807739+00:00",
      "title": "xplmFont_RadiosBCNarrow | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xplmFont_RadiosBCNarrow/"
    },
    "https://developer.x-plane.com/sdk/xplmFont_RadiosGA/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/xplmFont_RadiosGA/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem XPLM_DEPRECATED\"><table><tr class=\"enumitem XPLM_DEPRECATED\"><td class=\"sdk-api-enum-item\" id=\"xplmFont_RadiosGA\"><a href=\"/sdk/xplmFont_RadiosGA/\">xplmFont_RadiosGA</a></td><td>\"8\"</td><td>Deprecated, do not use.</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |  |\n| --- | --- | --- |\n| [xplmFont_RadiosGA](/sdk/xplmFont_RadiosGA/) | \"8\" | Deprecated, do not use. |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.811739+00:00",
      "title": "xplmFont_RadiosGA | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xplmFont_RadiosGA/"
    },
    "https://developer.x-plane.com/sdk/xplmFont_RadiosGANarrow/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/xplmFont_RadiosGANarrow/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem XPLM_DEPRECATED\"><table><tr class=\"enumitem XPLM_DEPRECATED\"><td class=\"sdk-api-enum-item\" id=\"xplmFont_RadiosGANarrow\"><a href=\"/sdk/xplmFont_RadiosGANarrow/\">xplmFont_RadiosGANarrow</a></td><td>\"11\"</td><td>Deprecated, do not use.</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |  |\n| --- | --- | --- |\n| [xplmFont_RadiosGANarrow](/sdk/xplmFont_RadiosGANarrow/) | \"11\" | Deprecated, do not use. |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.812741+00:00",
      "title": "xplmFont_RadiosGANarrow | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xplmFont_RadiosGANarrow/"
    },
    "https://developer.x-plane.com/sdk/xplmFont_RadiosHM/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/xplmFont_RadiosHM/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem XPLM_DEPRECATED\"><table><tr class=\"enumitem XPLM_DEPRECATED\"><td class=\"sdk-api-enum-item\" id=\"xplmFont_RadiosHM\"><a href=\"/sdk/xplmFont_RadiosHM/\">xplmFont_RadiosHM</a></td><td>\"10\"</td><td>Deprecated, do not use.</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |  |\n| --- | --- | --- |\n| [xplmFont_RadiosHM](/sdk/xplmFont_RadiosHM/) | \"10\" | Deprecated, do not use. |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.814739+00:00",
      "title": "xplmFont_RadiosHM | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xplmFont_RadiosHM/"
    },
    "https://developer.x-plane.com/sdk/xplmFont_RadiosHMNarrow/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/xplmFont_RadiosHMNarrow/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem XPLM_DEPRECATED\"><table><tr class=\"enumitem XPLM_DEPRECATED\"><td class=\"sdk-api-enum-item\" id=\"xplmFont_RadiosHMNarrow\"><a href=\"/sdk/xplmFont_RadiosHMNarrow/\">xplmFont_RadiosHMNarrow</a></td><td>\"13\"</td><td>Deprecated, do not use.</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |  |\n| --- | --- | --- |\n| [xplmFont_RadiosHMNarrow](/sdk/xplmFont_RadiosHMNarrow/) | \"13\" | Deprecated, do not use. |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.816741+00:00",
      "title": "xplmFont_RadiosHMNarrow | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xplmFont_RadiosHMNarrow/"
    },
    "https://developer.x-plane.com/sdk/xplmFont_SmallRound/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/xplmFont_SmallRound/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem XPLM_DEPRECATED\"><table><tr class=\"enumitem XPLM_DEPRECATED\"><td class=\"sdk-api-enum-item\" id=\"xplmFont_SmallRound\"><a href=\"/sdk/xplmFont_SmallRound/\">xplmFont_SmallRound</a></td><td>\"16\"</td><td>Deprecated, do not use.</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |  |\n| --- | --- | --- |\n| [xplmFont_SmallRound](/sdk/xplmFont_SmallRound/) | \"16\" | Deprecated, do not use. |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.818739+00:00",
      "title": "xplmFont_SmallRound | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xplmFont_SmallRound/"
    },
    "https://developer.x-plane.com/sdk/xplmFont_Timer /": {
      "api_signatures": [],
      "category": {
        "category": "XPLM_Processing",
        "module": "Xplm Processing",
        "url": "https://developer.x-plane.com/sdk/xplmFont_Timer /"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem XPLM_DEPRECATED\"><table><tr class=\"enumitem XPLM_DEPRECATED\"><td class=\"sdk-api-enum-item\" id=\"xplmFont_Timer \"><a href=\"/sdk/xplmFont_Timer /\">xplmFont_Timer</a></td><td>\"14\"</td><td>Deprecated, do not use.</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |  |\n| --- | --- | --- |\n| [xplmFont_Timer](/sdk/xplmFont_Timer /) | \"14\" | Deprecated, do not use. |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:24.372048+00:00",
      "title": "xplmFont_Timer  | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xplmFont_Timer /"
    },
    "https://developer.x-plane.com/sdk/xplmType_Data/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/xplmType_Data/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem\"><table><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplmType_Data\"><a href=\"/sdk/xplmType_Data/\">xplmType_Data</a></td><td>\"32\"</td><td>A variable block of data.</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |  |\n| --- | --- | --- |\n| [xplmType_Data](/sdk/xplmType_Data/) | \"32\" | A variable block of data. |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.819740+00:00",
      "title": "xplmType_Data | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xplmType_Data/"
    },
    "https://developer.x-plane.com/sdk/xplmType_Double/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/xplmType_Double/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem\"><table><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplmType_Double\"><a href=\"/sdk/xplmType_Double/\">xplmType_Double</a></td><td>\"4\"</td><td>A single 8-byte double, native endian.</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |  |\n| --- | --- | --- |\n| [xplmType_Double](/sdk/xplmType_Double/) | \"4\" | A single 8-byte double, native endian. |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.821739+00:00",
      "title": "xplmType_Double | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xplmType_Double/"
    },
    "https://developer.x-plane.com/sdk/xplmType_Float/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/xplmType_Float/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem\"><table><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplmType_Float\"><a href=\"/sdk/xplmType_Float/\">xplmType_Float</a></td><td>\"2\"</td><td>A single 4-byte float, native endian.</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |  |\n| --- | --- | --- |\n| [xplmType_Float](/sdk/xplmType_Float/) | \"2\" | A single 4-byte float, native endian. |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.822741+00:00",
      "title": "xplmType_Float | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xplmType_Float/"
    },
    "https://developer.x-plane.com/sdk/xplmType_FloatArray/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/xplmType_FloatArray/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem\"><table><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplmType_FloatArray\"><a href=\"/sdk/xplmType_FloatArray/\">xplmType_FloatArray</a></td><td>\"8\"</td><td>An array of 4-byte floats, native endian.</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |  |\n| --- | --- | --- |\n| [xplmType_FloatArray](/sdk/xplmType_FloatArray/) | \"8\" | An array of 4-byte floats, native endian. |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.824738+00:00",
      "title": "xplmType_FloatArray | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xplmType_FloatArray/"
    },
    "https://developer.x-plane.com/sdk/xplmType_Int/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/xplmType_Int/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem\"><table><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplmType_Int\"><a href=\"/sdk/xplmType_Int/\">xplmType_Int</a></td><td>\"1\"</td><td>A single 4-byte integer, native endian.</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |  |\n| --- | --- | --- |\n| [xplmType_Int](/sdk/xplmType_Int/) | \"1\" | A single 4-byte integer, native endian. |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.825741+00:00",
      "title": "xplmType_Int | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xplmType_Int/"
    },
    "https://developer.x-plane.com/sdk/xplmType_IntArray/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/xplmType_IntArray/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem\"><table><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplmType_IntArray\"><a href=\"/sdk/xplmType_IntArray/\">xplmType_IntArray</a></td><td>\"16\"</td><td>An array of 4-byte integers, native endian.</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |  |\n| --- | --- | --- |\n| [xplmType_IntArray](/sdk/xplmType_IntArray/) | \"16\" | An array of 4-byte integers, native endian. |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.827916+00:00",
      "title": "xplmType_IntArray | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xplmType_IntArray/"
    },
    "https://developer.x-plane.com/sdk/xplmType_Unknown/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/xplmType_Unknown/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem\"><table><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplmType_Unknown\"><a href=\"/sdk/xplmType_Unknown/\">xplmType_Unknown</a></td><td>\"0\"</td><td>Data of a type the current XPLM doesn't do.</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |  |\n| --- | --- | --- |\n| [xplmType_Unknown](/sdk/xplmType_Unknown/) | \"0\" | Data of a type the current XPLM doesn't do. |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.828916+00:00",
      "title": "xplmType_Unknown | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xplmType_Unknown/"
    },
    "https://developer.x-plane.com/sdk/xplm_AudioExteriorAircraft/": {
      "api_signatures": [],
      "category": {
        "category": "XPLM_Sound",
        "module": "Xplm Sound",
        "url": "https://developer.x-plane.com/sdk/xplm_AudioExteriorAircraft/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem\"><table><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_AudioExteriorAircraft\"><a href=\"/sdk/xplm_AudioExteriorAircraft/\">xplm_AudioExteriorAircraft</a></td><td>\"4\"</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |\n| --- | --- |\n| [xplm_AudioExteriorAircraft](/sdk/xplm_AudioExteriorAircraft/) | \"4\" |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:24.477569+00:00",
      "title": "xplm_AudioExteriorAircraft | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xplm_AudioExteriorAircraft/"
    },
    "https://developer.x-plane.com/sdk/xplm_AudioExteriorEnvironment/": {
      "api_signatures": [],
      "category": {
        "category": "XPLM_Sound",
        "module": "Xplm Sound",
        "url": "https://developer.x-plane.com/sdk/xplm_AudioExteriorEnvironment/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem\"><table><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_AudioExteriorEnvironment\"><a href=\"/sdk/xplm_AudioExteriorEnvironment/\">xplm_AudioExteriorEnvironment</a></td><td>\"5\"</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |\n| --- | --- |\n| [xplm_AudioExteriorEnvironment](/sdk/xplm_AudioExteriorEnvironment/) | \"5\" |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:24.479569+00:00",
      "title": "xplm_AudioExteriorEnvironment | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xplm_AudioExteriorEnvironment/"
    },
    "https://developer.x-plane.com/sdk/xplm_AudioExteriorUnprocessed/": {
      "api_signatures": [],
      "category": {
        "category": "XPLM_Sound",
        "module": "Xplm Sound",
        "url": "https://developer.x-plane.com/sdk/xplm_AudioExteriorUnprocessed/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem\"><table><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_AudioExteriorUnprocessed\"><a href=\"/sdk/xplm_AudioExteriorUnprocessed/\">xplm_AudioExteriorUnprocessed</a></td><td>\"6\"</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |\n| --- | --- |\n| [xplm_AudioExteriorUnprocessed](/sdk/xplm_AudioExteriorUnprocessed/) | \"6\" |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:24.481569+00:00",
      "title": "xplm_AudioExteriorUnprocessed | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xplm_AudioExteriorUnprocessed/"
    },
    "https://developer.x-plane.com/sdk/xplm_AudioGround/": {
      "api_signatures": [],
      "category": {
        "category": "XPLM_Sound",
        "module": "Xplm Sound",
        "url": "https://developer.x-plane.com/sdk/xplm_AudioGround/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem\"><table><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_AudioGround\"><a href=\"/sdk/xplm_AudioGround/\">xplm_AudioGround</a></td><td>\"9\"</td><td>Dedicated ground vehicle cable</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |  |\n| --- | --- | --- |\n| [xplm_AudioGround](/sdk/xplm_AudioGround/) | \"9\" | Dedicated ground vehicle cable |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:24.482570+00:00",
      "title": "xplm_AudioGround | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xplm_AudioGround/"
    },
    "https://developer.x-plane.com/sdk/xplm_AudioInterior/": {
      "api_signatures": [],
      "category": {
        "category": "XPLM_Sound",
        "module": "Xplm Sound",
        "url": "https://developer.x-plane.com/sdk/xplm_AudioInterior/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem\"><table><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_AudioInterior\"><a href=\"/sdk/xplm_AudioInterior/\">xplm_AudioInterior</a></td><td>\"7\"</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |\n| --- | --- |\n| [xplm_AudioInterior](/sdk/xplm_AudioInterior/) | \"7\" |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:24.483569+00:00",
      "title": "xplm_AudioInterior | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xplm_AudioInterior/"
    },
    "https://developer.x-plane.com/sdk/xplm_AudioRadioCom1/": {
      "api_signatures": [],
      "category": {
        "category": "XPLM_Sound",
        "module": "Xplm Sound",
        "url": "https://developer.x-plane.com/sdk/xplm_AudioRadioCom1/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem\"><table><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_AudioRadioCom1\"><a href=\"/sdk/xplm_AudioRadioCom1/\">xplm_AudioRadioCom1</a></td><td>\"0\"</td><td>Incoming speech on COM1</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |  |\n| --- | --- | --- |\n| [xplm_AudioRadioCom1](/sdk/xplm_AudioRadioCom1/) | \"0\" | Incoming speech on COM1 |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:24.485569+00:00",
      "title": "xplm_AudioRadioCom1 | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xplm_AudioRadioCom1/"
    },
    "https://developer.x-plane.com/sdk/xplm_AudioRadioCom2/": {
      "api_signatures": [],
      "category": {
        "category": "XPLM_Sound",
        "module": "Xplm Sound",
        "url": "https://developer.x-plane.com/sdk/xplm_AudioRadioCom2/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem\"><table><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_AudioRadioCom2\"><a href=\"/sdk/xplm_AudioRadioCom2/\">xplm_AudioRadioCom2</a></td><td>\"1\"</td><td>Incoming speech on COM2</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |  |\n| --- | --- | --- |\n| [xplm_AudioRadioCom2](/sdk/xplm_AudioRadioCom2/) | \"1\" | Incoming speech on COM2 |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:24.486567+00:00",
      "title": "xplm_AudioRadioCom2 | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xplm_AudioRadioCom2/"
    },
    "https://developer.x-plane.com/sdk/xplm_AudioRadioCopilot/": {
      "api_signatures": [],
      "category": {
        "category": "XPLM_Sound",
        "module": "Xplm Sound",
        "url": "https://developer.x-plane.com/sdk/xplm_AudioRadioCopilot/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem\"><table><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_AudioRadioCopilot\"><a href=\"/sdk/xplm_AudioRadioCopilot/\">xplm_AudioRadioCopilot</a></td><td>\"3\"</td><td>Copilot's own speech</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |  |\n| --- | --- | --- |\n| [xplm_AudioRadioCopilot](/sdk/xplm_AudioRadioCopilot/) | \"3\" | Copilot's own speech |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:24.488620+00:00",
      "title": "xplm_AudioRadioCopilot | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xplm_AudioRadioCopilot/"
    },
    "https://developer.x-plane.com/sdk/xplm_AudioRadioPilot/": {
      "api_signatures": [],
      "category": {
        "category": "XPLM_Sound",
        "module": "Xplm Sound",
        "url": "https://developer.x-plane.com/sdk/xplm_AudioRadioPilot/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem\"><table><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_AudioRadioPilot\"><a href=\"/sdk/xplm_AudioRadioPilot/\">xplm_AudioRadioPilot</a></td><td>\"2\"</td><td>Pilot's own speech</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |  |\n| --- | --- | --- |\n| [xplm_AudioRadioPilot](/sdk/xplm_AudioRadioPilot/) | \"2\" | Pilot's own speech |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:24.490619+00:00",
      "title": "xplm_AudioRadioPilot | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xplm_AudioRadioPilot/"
    },
    "https://developer.x-plane.com/sdk/xplm_AudioUI/": {
      "api_signatures": [],
      "category": {
        "category": "XPLM_Sound",
        "module": "Xplm Sound",
        "url": "https://developer.x-plane.com/sdk/xplm_AudioUI/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem\"><table><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_AudioUI\"><a href=\"/sdk/xplm_AudioUI/\">xplm_AudioUI</a></td><td>\"8\"</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |\n| --- | --- |\n| [xplm_AudioUI](/sdk/xplm_AudioUI/) | \"8\" |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:24.491619+00:00",
      "title": "xplm_AudioUI | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xplm_AudioUI/"
    },
    "https://developer.x-plane.com/sdk/xplm_CommandBegin/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/xplm_CommandBegin/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem\"><table><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_CommandBegin\"><a href=\"/sdk/xplm_CommandBegin/\">xplm_CommandBegin</a></td><td>\"0\"</td><td>The command is being started.</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |  |\n| --- | --- | --- |\n| [xplm_CommandBegin](/sdk/xplm_CommandBegin/) | \"0\" | The command is being started. |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.830918+00:00",
      "title": "xplm_CommandBegin | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xplm_CommandBegin/"
    },
    "https://developer.x-plane.com/sdk/xplm_CommandContinue/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/xplm_CommandContinue/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem\"><table><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_CommandContinue\"><a href=\"/sdk/xplm_CommandContinue/\">xplm_CommandContinue</a></td><td>\"1\"</td><td>The command is continuing to execute.</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |  |\n| --- | --- | --- |\n| [xplm_CommandContinue](/sdk/xplm_CommandContinue/) | \"1\" | The command is continuing to execute. |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.832915+00:00",
      "title": "xplm_CommandContinue | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xplm_CommandContinue/"
    },
    "https://developer.x-plane.com/sdk/xplm_CommandEnd/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/xplm_CommandEnd/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem\"><table><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_CommandEnd\"><a href=\"/sdk/xplm_CommandEnd/\">xplm_CommandEnd</a></td><td>\"2\"</td><td>The command has ended.</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |  |\n| --- | --- | --- |\n| [xplm_CommandEnd](/sdk/xplm_CommandEnd/) | \"2\" | The command has ended. |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.834917+00:00",
      "title": "xplm_CommandEnd | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xplm_CommandEnd/"
    },
    "https://developer.x-plane.com/sdk/xplm_ControlCameraForever/": {
      "api_signatures": [],
      "category": {
        "category": "XPLM_Camera",
        "module": "Xplm Camera",
        "url": "https://developer.x-plane.com/sdk/xplm_ControlCameraForever/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem\"><table><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_ControlCameraForever\"><a href=\"/sdk/xplm_ControlCameraForever/\">xplm_ControlCameraForever</a></td><td>\"2\"</td><td>Control the camera until your plugin is disabled or another plugin forcibly takes control.</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |  |\n| --- | --- | --- |\n| [xplm_ControlCameraForever](/sdk/xplm_ControlCameraForever/) | \"2\" | Control the camera until your plugin is disabled or another plugin forcibly takes control. |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:23.329091+00:00",
      "title": "xplm_ControlCameraForever | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xplm_ControlCameraForever/"
    },
    "https://developer.x-plane.com/sdk/xplm_ControlCameraUntilViewChanges/": {
      "api_signatures": [],
      "category": {
        "category": "XPLM_Camera",
        "module": "Xplm Camera",
        "url": "https://developer.x-plane.com/sdk/xplm_ControlCameraUntilViewChanges/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem\"><table><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_ControlCameraUntilViewChanges\"><a href=\"/sdk/xplm_ControlCameraUntilViewChanges/\">xplm_ControlCameraUntilViewChanges</a></td><td>\"1\"</td><td>Control the camera until the user picks a new view.</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |  |\n| --- | --- | --- |\n| [xplm_ControlCameraUntilViewChanges](/sdk/xplm_ControlCameraUntilViewChanges/) | \"1\" | Control the camera until the user picks a new view. |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:23.330091+00:00",
      "title": "xplm_ControlCameraUntilViewChanges | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xplm_ControlCameraUntilViewChanges/"
    },
    "https://developer.x-plane.com/sdk/xplm_ControlFlag /": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/xplm_ControlFlag /"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem\"><table><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_ControlFlag \"><a href=\"/sdk/xplm_ControlFlag /\">xplm_ControlFlag</a></td><td>\"4\"</td><td>The control key is down</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |  |\n| --- | --- | --- |\n| [xplm_ControlFlag](/sdk/xplm_ControlFlag /) | \"4\" | The control key is down |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.836915+00:00",
      "title": "xplm_ControlFlag  | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xplm_ControlFlag /"
    },
    "https://developer.x-plane.com/sdk/xplm_CursorArrow/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/xplm_CursorArrow/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem\"><table><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_CursorArrow\"><a href=\"/sdk/xplm_CursorArrow/\">xplm_CursorArrow</a></td><td>\"2\"</td><td>X-Plane shows the cursor as the default arrow.</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |  |\n| --- | --- | --- |\n| [xplm_CursorArrow](/sdk/xplm_CursorArrow/) | \"2\" | X-Plane shows the cursor as the default arrow. |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.838919+00:00",
      "title": "xplm_CursorArrow | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xplm_CursorArrow/"
    },
    "https://developer.x-plane.com/sdk/xplm_CursorCustom/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/xplm_CursorCustom/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem\"><table><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_CursorCustom\"><a href=\"/sdk/xplm_CursorCustom/\">xplm_CursorCustom</a></td><td>\"3\"</td><td>X-Plane shows the cursor but lets you select an OS cursor.</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |  |\n| --- | --- | --- |\n| [xplm_CursorCustom](/sdk/xplm_CursorCustom/) | \"3\" | X-Plane shows the cursor but lets you select an OS cursor. |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.839920+00:00",
      "title": "xplm_CursorCustom | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xplm_CursorCustom/"
    },
    "https://developer.x-plane.com/sdk/xplm_CursorDefault/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/xplm_CursorDefault/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem\"><table><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_CursorDefault\"><a href=\"/sdk/xplm_CursorDefault/\">xplm_CursorDefault</a></td><td>\"0\"</td><td>X-Plane manages the cursor normally, plugin does not affect the cusrsor.</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |  |\n| --- | --- | --- |\n| [xplm_CursorDefault](/sdk/xplm_CursorDefault/) | \"0\" | X-Plane manages the cursor normally, plugin does not affect the cusrsor. |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.841918+00:00",
      "title": "xplm_CursorDefault | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xplm_CursorDefault/"
    },
    "https://developer.x-plane.com/sdk/xplm_CursorHidden/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/xplm_CursorHidden/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem\"><table><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_CursorHidden\"><a href=\"/sdk/xplm_CursorHidden/\">xplm_CursorHidden</a></td><td>\"1\"</td><td>X-Plane hides the cursor.</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |  |\n| --- | --- | --- |\n| [xplm_CursorHidden](/sdk/xplm_CursorHidden/) | \"1\" | X-Plane hides the cursor. |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.843918+00:00",
      "title": "xplm_CursorHidden | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xplm_CursorHidden/"
    },
    "https://developer.x-plane.com/sdk/xplm_DataFile_ReplayMovie/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/xplm_DataFile_ReplayMovie/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem\"><table><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_DataFile_ReplayMovie\"><a href=\"/sdk/xplm_DataFile_ReplayMovie/\">xplm_DataFile_ReplayMovie</a></td><td>\"2\"</td><td>A situation movie (.smo) file, which replays a past flight.</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |  |\n| --- | --- | --- |\n| [xplm_DataFile_ReplayMovie](/sdk/xplm_DataFile_ReplayMovie/) | \"2\" | A situation movie (.smo) file, which replays a past flight. |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.844918+00:00",
      "title": "xplm_DataFile_ReplayMovie | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xplm_DataFile_ReplayMovie/"
    },
    "https://developer.x-plane.com/sdk/xplm_DataFile_Situation/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/xplm_DataFile_Situation/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem\"><table><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_DataFile_Situation\"><a href=\"/sdk/xplm_DataFile_Situation/\">xplm_DataFile_Situation</a></td><td>\"1\"</td><td>A situation (.sit) file, which starts off a flight in a given configuration.</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |  |\n| --- | --- | --- |\n| [xplm_DataFile_Situation](/sdk/xplm_DataFile_Situation/) | \"1\" | A situation (.sit) file, which starts off a flight in a given configuration. |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.847085+00:00",
      "title": "xplm_DataFile_Situation | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xplm_DataFile_Situation/"
    },
    "https://developer.x-plane.com/sdk/xplm_DownFlag/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/xplm_DownFlag/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem\"><table><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_DownFlag\"><a href=\"/sdk/xplm_DownFlag/\">xplm_DownFlag</a></td><td>\"8\"</td><td>The key is being pressed down</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |  |\n| --- | --- | --- |\n| [xplm_DownFlag](/sdk/xplm_DownFlag/) | \"8\" | The key is being pressed down |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.849085+00:00",
      "title": "xplm_DownFlag | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xplm_DownFlag/"
    },
    "https://developer.x-plane.com/sdk/xplm_FlightLoop_Phase_AfterFlightModel/": {
      "api_signatures": [],
      "category": {
        "category": "XPLM_Instance",
        "module": "Xplm Instance",
        "url": "https://developer.x-plane.com/sdk/xplm_FlightLoop_Phase_AfterFlightModel/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem\"><table><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_FlightLoop_Phase_AfterFlightModel\"><a href=\"/sdk/xplm_FlightLoop_Phase_AfterFlightModel/\">xplm_FlightLoop_Phase_AfterFlightModel</a></td><td>\"1\"</td><td>Your callback runs after X-Plane integrates the flight model.</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |  |\n| --- | --- | --- |\n| [xplm_FlightLoop_Phase_AfterFlightModel](/sdk/xplm_FlightLoop_Phase_AfterFlightModel/) | \"1\" | Your callback runs after X-Plane integrates the flight model. |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:23.762752+00:00",
      "title": "xplm_FlightLoop_Phase_AfterFlightModel | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xplm_FlightLoop_Phase_AfterFlightModel/"
    },
    "https://developer.x-plane.com/sdk/xplm_FlightLoop_Phase_BeforeFlightModel/": {
      "api_signatures": [],
      "category": {
        "category": "XPLM_Instance",
        "module": "Xplm Instance",
        "url": "https://developer.x-plane.com/sdk/xplm_FlightLoop_Phase_BeforeFlightModel/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem\"><table><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_FlightLoop_Phase_BeforeFlightModel\"><a href=\"/sdk/xplm_FlightLoop_Phase_BeforeFlightModel/\">xplm_FlightLoop_Phase_BeforeFlightModel</a></td><td>\"0\"</td><td>Your callback runs before X-Plane integrates the flight model.</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |  |\n| --- | --- | --- |\n| [xplm_FlightLoop_Phase_BeforeFlightModel](/sdk/xplm_FlightLoop_Phase_BeforeFlightModel/) | \"0\" | Your callback runs before X-Plane integrates the flight model. |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:23.759752+00:00",
      "title": "xplm_FlightLoop_Phase_BeforeFlightModel | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xplm_FlightLoop_Phase_BeforeFlightModel/"
    },
    "https://developer.x-plane.com/sdk/xplm_Fpl_CoPilot_Approach/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/xplm_Fpl_CoPilot_Approach/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem\"><table><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_Fpl_CoPilot_Approach\"><a href=\"/sdk/xplm_Fpl_CoPilot_Approach/\">xplm_Fpl_CoPilot_Approach</a></td><td>\"3\"</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |\n| --- | --- |\n| [xplm_Fpl_CoPilot_Approach](/sdk/xplm_Fpl_CoPilot_Approach/) | \"3\" |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.850085+00:00",
      "title": "xplm_Fpl_CoPilot_Approach | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xplm_Fpl_CoPilot_Approach/"
    },
    "https://developer.x-plane.com/sdk/xplm_Fpl_CoPilot_Primary/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/xplm_Fpl_CoPilot_Primary/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem\"><table><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_Fpl_CoPilot_Primary\"><a href=\"/sdk/xplm_Fpl_CoPilot_Primary/\">xplm_Fpl_CoPilot_Primary</a></td><td>\"1\"</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |\n| --- | --- |\n| [xplm_Fpl_CoPilot_Primary](/sdk/xplm_Fpl_CoPilot_Primary/) | \"1\" |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.853595+00:00",
      "title": "xplm_Fpl_CoPilot_Primary | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xplm_Fpl_CoPilot_Primary/"
    },
    "https://developer.x-plane.com/sdk/xplm_Fpl_CoPilot_Temporary/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/xplm_Fpl_CoPilot_Temporary/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem\"><table><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_Fpl_CoPilot_Temporary\"><a href=\"/sdk/xplm_Fpl_CoPilot_Temporary/\">xplm_Fpl_CoPilot_Temporary</a></td><td>\"5\"</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |\n| --- | --- |\n| [xplm_Fpl_CoPilot_Temporary](/sdk/xplm_Fpl_CoPilot_Temporary/) | \"5\" |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.851084+00:00",
      "title": "xplm_Fpl_CoPilot_Temporary | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xplm_Fpl_CoPilot_Temporary/"
    },
    "https://developer.x-plane.com/sdk/xplm_Fpl_Pilot_Approach/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/xplm_Fpl_Pilot_Approach/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem\"><table><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_Fpl_Pilot_Approach\"><a href=\"/sdk/xplm_Fpl_Pilot_Approach/\">xplm_Fpl_Pilot_Approach</a></td><td>\"2\"</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |\n| --- | --- |\n| [xplm_Fpl_Pilot_Approach](/sdk/xplm_Fpl_Pilot_Approach/) | \"2\" |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.854593+00:00",
      "title": "xplm_Fpl_Pilot_Approach | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xplm_Fpl_Pilot_Approach/"
    },
    "https://developer.x-plane.com/sdk/xplm_Fpl_Pilot_Primary/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/xplm_Fpl_Pilot_Primary/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem\"><table><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_Fpl_Pilot_Primary\"><a href=\"/sdk/xplm_Fpl_Pilot_Primary/\">xplm_Fpl_Pilot_Primary</a></td><td>\"0\"</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |\n| --- | --- |\n| [xplm_Fpl_Pilot_Primary](/sdk/xplm_Fpl_Pilot_Primary/) | \"0\" |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.857657+00:00",
      "title": "xplm_Fpl_Pilot_Primary | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xplm_Fpl_Pilot_Primary/"
    },
    "https://developer.x-plane.com/sdk/xplm_Fpl_Pilot_Temporary/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/xplm_Fpl_Pilot_Temporary/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem\"><table><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_Fpl_Pilot_Temporary\"><a href=\"/sdk/xplm_Fpl_Pilot_Temporary/\">xplm_Fpl_Pilot_Temporary</a></td><td>\"4\"</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |\n| --- | --- |\n| [xplm_Fpl_Pilot_Temporary](/sdk/xplm_Fpl_Pilot_Temporary/) | \"4\" |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.856656+00:00",
      "title": "xplm_Fpl_Pilot_Temporary | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xplm_Fpl_Pilot_Temporary/"
    },
    "https://developer.x-plane.com/sdk/xplm_Host_Briefer/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/xplm_Host_Briefer/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem XPLM_DEPRECATED\"><table><tr class=\"enumitem XPLM_DEPRECATED\"><td class=\"sdk-api-enum-item\" id=\"xplm_Host_Briefer\"><a href=\"/sdk/xplm_Host_Briefer/\">xplm_Host_Briefer</a></td><td>\"4\"</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |\n| --- | --- |\n| [xplm_Host_Briefer](/sdk/xplm_Host_Briefer/) | \"4\" |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.860657+00:00",
      "title": "xplm_Host_Briefer | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xplm_Host_Briefer/"
    },
    "https://developer.x-plane.com/sdk/xplm_Host_Control_Pad/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/xplm_Host_Control_Pad/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem XPLM_DEPRECATED\"><table><tr class=\"enumitem XPLM_DEPRECATED\"><td class=\"sdk-api-enum-item\" id=\"xplm_Host_Control_Pad\"><a href=\"/sdk/xplm_Host_Control_Pad/\">xplm_Host_Control_Pad</a></td><td>\"9\"</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |\n| --- | --- |\n| [xplm_Host_Control_Pad](/sdk/xplm_Host_Control_Pad/) | \"9\" |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.859658+00:00",
      "title": "xplm_Host_Control_Pad | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xplm_Host_Control_Pad/"
    },
    "https://developer.x-plane.com/sdk/xplm_Host_PFD_Map/": {
      "api_signatures": [],
      "category": {
        "category": "XPLM_Map",
        "module": "Xplm Map",
        "url": "https://developer.x-plane.com/sdk/xplm_Host_PFD_Map/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem XPLM_DEPRECATED\"><table><tr class=\"enumitem XPLM_DEPRECATED\"><td class=\"sdk-api-enum-item\" id=\"xplm_Host_PFD_Map\"><a href=\"/sdk/xplm_Host_PFD_Map/\">xplm_Host_PFD_Map</a></td><td>\"10\"</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |\n| --- | --- |\n| [xplm_Host_PFD_Map](/sdk/xplm_Host_PFD_Map/) | \"10\" |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:23.863556+00:00",
      "title": "xplm_Host_PFD_Map | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xplm_Host_PFD_Map/"
    },
    "https://developer.x-plane.com/sdk/xplm_Host_PartMaker/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/xplm_Host_PartMaker/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem XPLM_DEPRECATED\"><table><tr class=\"enumitem XPLM_DEPRECATED\"><td class=\"sdk-api-enum-item\" id=\"xplm_Host_PartMaker\"><a href=\"/sdk/xplm_Host_PartMaker/\">xplm_Host_PartMaker</a></td><td>\"5\"</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |\n| --- | --- |\n| [xplm_Host_PartMaker](/sdk/xplm_Host_PartMaker/) | \"5\" |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.862656+00:00",
      "title": "xplm_Host_PartMaker | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xplm_Host_PartMaker/"
    },
    "https://developer.x-plane.com/sdk/xplm_Host_PlaneMaker/": {
      "api_signatures": [],
      "category": {
        "category": "XPLM_Planes",
        "module": "Xplm Planes",
        "url": "https://developer.x-plane.com/sdk/xplm_Host_PlaneMaker/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem XPLM_DEPRECATED\"><table><tr class=\"enumitem XPLM_DEPRECATED\"><td class=\"sdk-api-enum-item\" id=\"xplm_Host_PlaneMaker\"><a href=\"/sdk/xplm_Host_PlaneMaker/\">xplm_Host_PlaneMaker</a></td><td>\"2\"</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |\n| --- | --- |\n| [xplm_Host_PlaneMaker](/sdk/xplm_Host_PlaneMaker/) | \"2\" |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:24.180490+00:00",
      "title": "xplm_Host_PlaneMaker | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xplm_Host_PlaneMaker/"
    },
    "https://developer.x-plane.com/sdk/xplm_Host_RADAR/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/xplm_Host_RADAR/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem XPLM_DEPRECATED\"><table><tr class=\"enumitem XPLM_DEPRECATED\"><td class=\"sdk-api-enum-item\" id=\"xplm_Host_RADAR\"><a href=\"/sdk/xplm_Host_RADAR/\">xplm_Host_RADAR</a></td><td>\"11\"</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |\n| --- | --- |\n| [xplm_Host_RADAR](/sdk/xplm_Host_RADAR/) | \"11\" |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.868962+00:00",
      "title": "xplm_Host_RADAR | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xplm_Host_RADAR/"
    },
    "https://developer.x-plane.com/sdk/xplm_Host_Unknown/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/xplm_Host_Unknown/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem\"><table><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_Host_Unknown\"><a href=\"/sdk/xplm_Host_Unknown/\">xplm_Host_Unknown</a></td><td>\"0\"</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |\n| --- | --- |\n| [xplm_Host_Unknown](/sdk/xplm_Host_Unknown/) | \"0\" |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.865812+00:00",
      "title": "xplm_Host_Unknown | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xplm_Host_Unknown/"
    },
    "https://developer.x-plane.com/sdk/xplm_Host_WorldMaker/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/xplm_Host_WorldMaker/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem XPLM_DEPRECATED\"><table><tr class=\"enumitem XPLM_DEPRECATED\"><td class=\"sdk-api-enum-item\" id=\"xplm_Host_WorldMaker\"><a href=\"/sdk/xplm_Host_WorldMaker/\">xplm_Host_WorldMaker</a></td><td>\"3\"</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |\n| --- | --- |\n| [xplm_Host_WorldMaker](/sdk/xplm_Host_WorldMaker/) | \"3\" |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.867391+00:00",
      "title": "xplm_Host_WorldMaker | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xplm_Host_WorldMaker/"
    },
    "https://developer.x-plane.com/sdk/xplm_Host_XAuto/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/xplm_Host_XAuto/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem XPLM_DEPRECATED\"><table><tr class=\"enumitem XPLM_DEPRECATED\"><td class=\"sdk-api-enum-item\" id=\"xplm_Host_XAuto\"><a href=\"/sdk/xplm_Host_XAuto/\">xplm_Host_XAuto</a></td><td>\"7\"</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |\n| --- | --- |\n| [xplm_Host_XAuto](/sdk/xplm_Host_XAuto/) | \"7\" |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.864507+00:00",
      "title": "xplm_Host_XAuto | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xplm_Host_XAuto/"
    },
    "https://developer.x-plane.com/sdk/xplm_Host_XPlane/": {
      "api_signatures": [],
      "category": {
        "category": "XPLM_Planes",
        "module": "Xplm Planes",
        "url": "https://developer.x-plane.com/sdk/xplm_Host_XPlane/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem\"><table><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_Host_XPlane\"><a href=\"/sdk/xplm_Host_XPlane/\">xplm_Host_XPlane</a></td><td>\"1\"</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |\n| --- | --- |\n| [xplm_Host_XPlane](/sdk/xplm_Host_XPlane/) | \"1\" |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:24.179491+00:00",
      "title": "xplm_Host_XPlane | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xplm_Host_XPlane/"
    },
    "https://developer.x-plane.com/sdk/xplm_Host_Xavion/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/xplm_Host_Xavion/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem XPLM_DEPRECATED\"><table><tr class=\"enumitem XPLM_DEPRECATED\"><td class=\"sdk-api-enum-item\" id=\"xplm_Host_Xavion\"><a href=\"/sdk/xplm_Host_Xavion/\">xplm_Host_Xavion</a></td><td>\"8\"</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |\n| --- | --- |\n| [xplm_Host_Xavion](/sdk/xplm_Host_Xavion/) | \"8\" |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.870534+00:00",
      "title": "xplm_Host_Xavion | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xplm_Host_Xavion/"
    },
    "https://developer.x-plane.com/sdk/xplm_Host_YoungsMod/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/xplm_Host_YoungsMod/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem XPLM_DEPRECATED\"><table><tr class=\"enumitem XPLM_DEPRECATED\"><td class=\"sdk-api-enum-item\" id=\"xplm_Host_YoungsMod\"><a href=\"/sdk/xplm_Host_YoungsMod/\">xplm_Host_YoungsMod</a></td><td>\"6\"</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |\n| --- | --- |\n| [xplm_Host_YoungsMod](/sdk/xplm_Host_YoungsMod/) | \"6\" |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.875186+00:00",
      "title": "xplm_Host_YoungsMod | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xplm_Host_YoungsMod/"
    },
    "https://developer.x-plane.com/sdk/xplm_Language_Chinese/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/xplm_Language_Chinese/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem XPLM300\"><table><tr class=\"enumitem XPLM300\"><td class=\"sdk-api-enum-item\" id=\"xplm_Language_Chinese\"><a href=\"/sdk/xplm_Language_Chinese/\">xplm_Language_Chinese</a></td><td>\"10\"</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |\n| --- | --- |\n| [xplm_Language_Chinese](/sdk/xplm_Language_Chinese/) | \"10\" |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.873634+00:00",
      "title": "xplm_Language_Chinese | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xplm_Language_Chinese/"
    },
    "https://developer.x-plane.com/sdk/xplm_Language_English/": {
      "api_signatures": [],
      "category": {
        "category": "XPLM_Graphics",
        "module": "Xplm Graphics",
        "url": "https://developer.x-plane.com/sdk/xplm_Language_English/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem\"><table><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_Language_English\"><a href=\"/sdk/xplm_Language_English/\">xplm_Language_English</a></td><td>\"1\"</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |\n| --- | --- |\n| [xplm_Language_English](/sdk/xplm_Language_English/) | \"1\" |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:23.718351+00:00",
      "title": "xplm_Language_English | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xplm_Language_English/"
    },
    "https://developer.x-plane.com/sdk/xplm_Language_French/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/xplm_Language_French/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem\"><table><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_Language_French\"><a href=\"/sdk/xplm_Language_French/\">xplm_Language_French</a></td><td>\"2\"</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |\n| --- | --- |\n| [xplm_Language_French](/sdk/xplm_Language_French/) | \"2\" |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.876380+00:00",
      "title": "xplm_Language_French | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xplm_Language_French/"
    },
    "https://developer.x-plane.com/sdk/xplm_Language_German/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/xplm_Language_German/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem\"><table><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_Language_German\"><a href=\"/sdk/xplm_Language_German/\">xplm_Language_German</a></td><td>\"3\"</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |\n| --- | --- |\n| [xplm_Language_German](/sdk/xplm_Language_German/) | \"3\" |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.872090+00:00",
      "title": "xplm_Language_German | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xplm_Language_German/"
    },
    "https://developer.x-plane.com/sdk/xplm_Language_Greek/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/xplm_Language_Greek/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem XPLM200\"><table><tr class=\"enumitem XPLM200\"><td class=\"sdk-api-enum-item\" id=\"xplm_Language_Greek\"><a href=\"/sdk/xplm_Language_Greek/\">xplm_Language_Greek</a></td><td>\"8\"</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |\n| --- | --- |\n| [xplm_Language_Greek](/sdk/xplm_Language_Greek/) | \"8\" |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.878422+00:00",
      "title": "xplm_Language_Greek | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xplm_Language_Greek/"
    },
    "https://developer.x-plane.com/sdk/xplm_Language_Italian/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/xplm_Language_Italian/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem\"><table><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_Language_Italian\"><a href=\"/sdk/xplm_Language_Italian/\">xplm_Language_Italian</a></td><td>\"4\"</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |\n| --- | --- |\n| [xplm_Language_Italian](/sdk/xplm_Language_Italian/) | \"4\" |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.879422+00:00",
      "title": "xplm_Language_Italian | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xplm_Language_Italian/"
    },
    "https://developer.x-plane.com/sdk/xplm_Language_Japanese/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/xplm_Language_Japanese/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem XPLM200\"><table><tr class=\"enumitem XPLM200\"><td class=\"sdk-api-enum-item\" id=\"xplm_Language_Japanese\"><a href=\"/sdk/xplm_Language_Japanese/\">xplm_Language_Japanese</a></td><td>\"9\"</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |\n| --- | --- |\n| [xplm_Language_Japanese](/sdk/xplm_Language_Japanese/) | \"9\" |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.881421+00:00",
      "title": "xplm_Language_Japanese | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xplm_Language_Japanese/"
    },
    "https://developer.x-plane.com/sdk/xplm_Language_Korean/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/xplm_Language_Korean/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem\"><table><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_Language_Korean\"><a href=\"/sdk/xplm_Language_Korean/\">xplm_Language_Korean</a></td><td>\"6\"</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |\n| --- | --- |\n| [xplm_Language_Korean](/sdk/xplm_Language_Korean/) | \"6\" |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.884421+00:00",
      "title": "xplm_Language_Korean | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xplm_Language_Korean/"
    },
    "https://developer.x-plane.com/sdk/xplm_Language_Russian/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/xplm_Language_Russian/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem XPLM200\"><table><tr class=\"enumitem XPLM200\"><td class=\"sdk-api-enum-item\" id=\"xplm_Language_Russian\"><a href=\"/sdk/xplm_Language_Russian/\">xplm_Language_Russian</a></td><td>\"7\"</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |\n| --- | --- |\n| [xplm_Language_Russian](/sdk/xplm_Language_Russian/) | \"7\" |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.882421+00:00",
      "title": "xplm_Language_Russian | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xplm_Language_Russian/"
    },
    "https://developer.x-plane.com/sdk/xplm_Language_Spanish/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/xplm_Language_Spanish/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem\"><table><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_Language_Spanish\"><a href=\"/sdk/xplm_Language_Spanish/\">xplm_Language_Spanish</a></td><td>\"5\"</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |\n| --- | --- |\n| [xplm_Language_Spanish](/sdk/xplm_Language_Spanish/) | \"5\" |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.885421+00:00",
      "title": "xplm_Language_Spanish | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xplm_Language_Spanish/"
    },
    "https://developer.x-plane.com/sdk/xplm_Language_Ukrainian/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/xplm_Language_Ukrainian/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem XPLM400\"><table><tr class=\"enumitem XPLM400\"><td class=\"sdk-api-enum-item\" id=\"xplm_Language_Ukrainian\"><a href=\"/sdk/xplm_Language_Ukrainian/\">xplm_Language_Ukrainian</a></td><td>\"11\"</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |\n| --- | --- |\n| [xplm_Language_Ukrainian](/sdk/xplm_Language_Ukrainian/) | \"11\" |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.888421+00:00",
      "title": "xplm_Language_Ukrainian | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xplm_Language_Ukrainian/"
    },
    "https://developer.x-plane.com/sdk/xplm_Language_Unknown/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/xplm_Language_Unknown/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem\"><table><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_Language_Unknown\"><a href=\"/sdk/xplm_Language_Unknown/\">xplm_Language_Unknown</a></td><td>\"0\"</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |\n| --- | --- |\n| [xplm_Language_Unknown](/sdk/xplm_Language_Unknown/) | \"0\" |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.887421+00:00",
      "title": "xplm_Language_Unknown | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xplm_Language_Unknown/"
    },
    "https://developer.x-plane.com/sdk/xplm_MapLayer_Fill/": {
      "api_signatures": [],
      "category": {
        "category": "XPLM_Map",
        "module": "Xplm Map",
        "url": "https://developer.x-plane.com/sdk/xplm_MapLayer_Fill/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem\"><table><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_MapLayer_Fill\"><a href=\"/sdk/xplm_MapLayer_Fill/\">xplm_MapLayer_Fill</a></td><td>\"0\"</td><td>A layer that draws \"fill\" graphics, like weather patterns, terrain, etc. Fill layers frequently cover a large portion of the visible map area.</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |  |\n| --- | --- | --- |\n| [xplm_MapLayer_Fill](/sdk/xplm_MapLayer_Fill/) | \"0\" | A layer that draws \"fill\" graphics, like weather patterns, terrain, etc. Fill layers frequently cover a large portion of the visible map area. |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:23.868556+00:00",
      "title": "xplm_MapLayer_Fill | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xplm_MapLayer_Fill/"
    },
    "https://developer.x-plane.com/sdk/xplm_MapLayer_Markings/": {
      "api_signatures": [],
      "category": {
        "category": "XPLM_Map",
        "module": "Xplm Map",
        "url": "https://developer.x-plane.com/sdk/xplm_MapLayer_Markings/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem\"><table><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_MapLayer_Markings\"><a href=\"/sdk/xplm_MapLayer_Markings/\">xplm_MapLayer_Markings</a></td><td>\"1\"</td><td>A layer that provides markings for particular map features, like NAVAIDs, airports, etc. Even dense markings layers cover a small portion of the total map area.</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |  |\n| --- | --- | --- |\n| [xplm_MapLayer_Markings](/sdk/xplm_MapLayer_Markings/) | \"1\" | A layer that provides markings for particular map features, like NAVAIDs, airports, etc. Even dense markings layers cover a small portion of the total map area. |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:23.865557+00:00",
      "title": "xplm_MapLayer_Markings | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xplm_MapLayer_Markings/"
    },
    "https://developer.x-plane.com/sdk/xplm_MapOrientation_Map/": {
      "api_signatures": [],
      "category": {
        "category": "XPLM_Map",
        "module": "Xplm Map",
        "url": "https://developer.x-plane.com/sdk/xplm_MapOrientation_Map/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem\"><table><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_MapOrientation_Map\"><a href=\"/sdk/xplm_MapOrientation_Map/\">xplm_MapOrientation_Map</a></td><td>\"0\"</td><td>Orient such that a 0 degree rotation matches the map's north</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |  |\n| --- | --- | --- |\n| [xplm_MapOrientation_Map](/sdk/xplm_MapOrientation_Map/) | \"0\" | Orient such that a 0 degree rotation matches the map's north |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:23.866556+00:00",
      "title": "xplm_MapOrientation_Map | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xplm_MapOrientation_Map/"
    },
    "https://developer.x-plane.com/sdk/xplm_MapOrientation_UI/": {
      "api_signatures": [],
      "category": {
        "category": "XPLM_Map",
        "module": "Xplm Map",
        "url": "https://developer.x-plane.com/sdk/xplm_MapOrientation_UI/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem\"><table><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_MapOrientation_UI\"><a href=\"/sdk/xplm_MapOrientation_UI/\">xplm_MapOrientation_UI</a></td><td>\"1\"</td><td>Orient such that a 0 degree rotation is \"up\" relative to the user interface</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |  |\n| --- | --- | --- |\n| [xplm_MapOrientation_UI](/sdk/xplm_MapOrientation_UI/) | \"1\" | Orient such that a 0 degree rotation is \"up\" relative to the user interface |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:23.869558+00:00",
      "title": "xplm_MapOrientation_UI | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xplm_MapOrientation_UI/"
    },
    "https://developer.x-plane.com/sdk/xplm_MapStyle_IFR_HighEnroute/": {
      "api_signatures": [],
      "category": {
        "category": "XPLM_Map",
        "module": "Xplm Map",
        "url": "https://developer.x-plane.com/sdk/xplm_MapStyle_IFR_HighEnroute/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem\"><table><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_MapStyle_IFR_HighEnroute\"><a href=\"/sdk/xplm_MapStyle_IFR_HighEnroute/\">xplm_MapStyle_IFR_HighEnroute</a></td><td>\"2\"</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |\n| --- | --- |\n| [xplm_MapStyle_IFR_HighEnroute](/sdk/xplm_MapStyle_IFR_HighEnroute/) | \"2\" |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:23.871556+00:00",
      "title": "xplm_MapStyle_IFR_HighEnroute | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xplm_MapStyle_IFR_HighEnroute/"
    },
    "https://developer.x-plane.com/sdk/xplm_MapStyle_IFR_LowEnroute/": {
      "api_signatures": [],
      "category": {
        "category": "XPLM_Map",
        "module": "Xplm Map",
        "url": "https://developer.x-plane.com/sdk/xplm_MapStyle_IFR_LowEnroute/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem\"><table><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_MapStyle_IFR_LowEnroute\"><a href=\"/sdk/xplm_MapStyle_IFR_LowEnroute/\">xplm_MapStyle_IFR_LowEnroute</a></td><td>\"1\"</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |\n| --- | --- |\n| [xplm_MapStyle_IFR_LowEnroute](/sdk/xplm_MapStyle_IFR_LowEnroute/) | \"1\" |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:23.873559+00:00",
      "title": "xplm_MapStyle_IFR_LowEnroute | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xplm_MapStyle_IFR_LowEnroute/"
    },
    "https://developer.x-plane.com/sdk/xplm_MapStyle_VFR_Sectional/": {
      "api_signatures": [],
      "category": {
        "category": "XPLM_Map",
        "module": "Xplm Map",
        "url": "https://developer.x-plane.com/sdk/xplm_MapStyle_VFR_Sectional/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem\"><table><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_MapStyle_VFR_Sectional\"><a href=\"/sdk/xplm_MapStyle_VFR_Sectional/\">xplm_MapStyle_VFR_Sectional</a></td><td>\"0\"</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |\n| --- | --- |\n| [xplm_MapStyle_VFR_Sectional](/sdk/xplm_MapStyle_VFR_Sectional/) | \"0\" |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:23.877638+00:00",
      "title": "xplm_MapStyle_VFR_Sectional | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xplm_MapStyle_VFR_Sectional/"
    },
    "https://developer.x-plane.com/sdk/xplm_Master/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/xplm_Master/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem\"><table><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_Master\"><a href=\"/sdk/xplm_Master/\">xplm_Master</a></td><td>\"10\"</td><td>Master bus. Not normally to be used directly.</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |  |\n| --- | --- | --- |\n| [xplm_Master](/sdk/xplm_Master/) | \"10\" | Master bus. Not normally to be used directly. |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.890421+00:00",
      "title": "xplm_Master | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xplm_Master/"
    },
    "https://developer.x-plane.com/sdk/xplm_MasterBank/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/xplm_MasterBank/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem\"><table><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_MasterBank\"><a href=\"/sdk/xplm_MasterBank/\">xplm_MasterBank</a></td><td>\"0\"</td><td>Master bank. Handles all aircraft and environmental audio.</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |  |\n| --- | --- | --- |\n| [xplm_MasterBank](/sdk/xplm_MasterBank/) | \"0\" | Master bank. Handles all aircraft and environmental audio. |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.892421+00:00",
      "title": "xplm_MasterBank | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xplm_MasterBank/"
    },
    "https://developer.x-plane.com/sdk/xplm_Menu_Checked/": {
      "api_signatures": [],
      "category": {
        "category": "XPLM_Menus",
        "module": "Xplm Menus",
        "url": "https://developer.x-plane.com/sdk/xplm_Menu_Checked/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem\"><table><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_Menu_Checked\"><a href=\"/sdk/xplm_Menu_Checked/\">xplm_Menu_Checked</a></td><td>\"2\"</td><td>The menu has a mark next to it that is checked (lit).</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |  |\n| --- | --- | --- |\n| [xplm_Menu_Checked](/sdk/xplm_Menu_Checked/) | \"2\" | The menu has a mark next to it that is checked (lit). |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:23.949824+00:00",
      "title": "xplm_Menu_Checked | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xplm_Menu_Checked/"
    },
    "https://developer.x-plane.com/sdk/xplm_Menu_NoCheck/": {
      "api_signatures": [],
      "category": {
        "category": "XPLM_Menus",
        "module": "Xplm Menus",
        "url": "https://developer.x-plane.com/sdk/xplm_Menu_NoCheck/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem\"><table><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_Menu_NoCheck\"><a href=\"/sdk/xplm_Menu_NoCheck/\">xplm_Menu_NoCheck</a></td><td>\"0\"</td><td>There is no symbol to the left of the menu item.</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |  |\n| --- | --- | --- |\n| [xplm_Menu_NoCheck](/sdk/xplm_Menu_NoCheck/) | \"0\" | There is no symbol to the left of the menu item. |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:23.944824+00:00",
      "title": "xplm_Menu_NoCheck | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xplm_Menu_NoCheck/"
    },
    "https://developer.x-plane.com/sdk/xplm_Menu_Unchecked/": {
      "api_signatures": [],
      "category": {
        "category": "XPLM_Menus",
        "module": "Xplm Menus",
        "url": "https://developer.x-plane.com/sdk/xplm_Menu_Unchecked/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem\"><table><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_Menu_Unchecked\"><a href=\"/sdk/xplm_Menu_Unchecked/\">xplm_Menu_Unchecked</a></td><td>\"1\"</td><td>The menu has a mark next to it that is unmarked (not lit).</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |  |\n| --- | --- | --- |\n| [xplm_Menu_Unchecked](/sdk/xplm_Menu_Unchecked/) | \"1\" | The menu has a mark next to it that is unmarked (not lit). |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:23.945825+00:00",
      "title": "xplm_Menu_Unchecked | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xplm_Menu_Unchecked/"
    },
    "https://developer.x-plane.com/sdk/xplm_MouseDown/": {
      "api_signatures": [],
      "category": {
        "category": "XPLM_Utilities",
        "module": "Xplm Utilities",
        "url": "https://developer.x-plane.com/sdk/xplm_MouseDown/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem\"><table><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_MouseDown\"><a href=\"/sdk/xplm_MouseDown/\">xplm_MouseDown</a></td><td>\"1\"</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |\n| --- | --- |\n| [xplm_MouseDown](/sdk/xplm_MouseDown/) | \"1\" |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:24.564156+00:00",
      "title": "xplm_MouseDown | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xplm_MouseDown/"
    },
    "https://developer.x-plane.com/sdk/xplm_MouseDrag/": {
      "api_signatures": [],
      "category": {
        "category": "XPLM_Utilities",
        "module": "Xplm Utilities",
        "url": "https://developer.x-plane.com/sdk/xplm_MouseDrag/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem\"><table><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_MouseDrag\"><a href=\"/sdk/xplm_MouseDrag/\">xplm_MouseDrag</a></td><td>\"2\"</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |\n| --- | --- |\n| [xplm_MouseDrag](/sdk/xplm_MouseDrag/) | \"2\" |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:24.566155+00:00",
      "title": "xplm_MouseDrag | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xplm_MouseDrag/"
    },
    "https://developer.x-plane.com/sdk/xplm_MouseUp/": {
      "api_signatures": [],
      "category": {
        "category": "XPLM_Utilities",
        "module": "Xplm Utilities",
        "url": "https://developer.x-plane.com/sdk/xplm_MouseUp/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem\"><table><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_MouseUp\"><a href=\"/sdk/xplm_MouseUp/\">xplm_MouseUp</a></td><td>\"3\"</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |\n| --- | --- |\n| [xplm_MouseUp](/sdk/xplm_MouseUp/) | \"3\" |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:24.567157+00:00",
      "title": "xplm_MouseUp | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xplm_MouseUp/"
    },
    "https://developer.x-plane.com/sdk/xplm_Nav_Airport/": {
      "api_signatures": [],
      "category": {
        "category": "XPLM_Navigation",
        "module": "Xplm Navigation",
        "url": "https://developer.x-plane.com/sdk/xplm_Nav_Airport/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem\"><table><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_Nav_Airport\"><a href=\"/sdk/xplm_Nav_Airport/\">xplm_Nav_Airport</a></td><td>\"1\"</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |\n| --- | --- |\n| [xplm_Nav_Airport](/sdk/xplm_Nav_Airport/) | \"1\" |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:24.106137+00:00",
      "title": "xplm_Nav_Airport | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xplm_Nav_Airport/"
    },
    "https://developer.x-plane.com/sdk/xplm_Nav_DME/": {
      "api_signatures": [],
      "category": {
        "category": "XPLM_Navigation",
        "module": "Xplm Navigation",
        "url": "https://developer.x-plane.com/sdk/xplm_Nav_DME/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem\"><table><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_Nav_DME\"><a href=\"/sdk/xplm_Nav_DME/\">xplm_Nav_DME</a></td><td>\"1024\"</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |\n| --- | --- |\n| [xplm_Nav_DME](/sdk/xplm_Nav_DME/) | \"1024\" |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:24.114139+00:00",
      "title": "xplm_Nav_DME | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xplm_Nav_DME/"
    },
    "https://developer.x-plane.com/sdk/xplm_Nav_Fix/": {
      "api_signatures": [],
      "category": {
        "category": "XPLM_Navigation",
        "module": "Xplm Navigation",
        "url": "https://developer.x-plane.com/sdk/xplm_Nav_Fix/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem\"><table><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_Nav_Fix\"><a href=\"/sdk/xplm_Nav_Fix/\">xplm_Nav_Fix</a></td><td>\"512\"</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |\n| --- | --- |\n| [xplm_Nav_Fix](/sdk/xplm_Nav_Fix/) | \"512\" |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:24.111136+00:00",
      "title": "xplm_Nav_Fix | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xplm_Nav_Fix/"
    },
    "https://developer.x-plane.com/sdk/xplm_Nav_GlideSlope/": {
      "api_signatures": [],
      "category": {
        "category": "XPLM_Graphics",
        "module": "Xplm Graphics",
        "url": "https://developer.x-plane.com/sdk/xplm_Nav_GlideSlope/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem\"><table><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_Nav_GlideSlope\"><a href=\"/sdk/xplm_Nav_GlideSlope/\">xplm_Nav_GlideSlope</a></td><td>\"32\"</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |\n| --- | --- |\n| [xplm_Nav_GlideSlope](/sdk/xplm_Nav_GlideSlope/) | \"32\" |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:23.724349+00:00",
      "title": "xplm_Nav_GlideSlope | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xplm_Nav_GlideSlope/"
    },
    "https://developer.x-plane.com/sdk/xplm_Nav_ILS/": {
      "api_signatures": [],
      "category": {
        "category": "XPLM_Navigation",
        "module": "Xplm Navigation",
        "url": "https://developer.x-plane.com/sdk/xplm_Nav_ILS/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem\"><table><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_Nav_ILS\"><a href=\"/sdk/xplm_Nav_ILS/\">xplm_Nav_ILS</a></td><td>\"8\"</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |\n| --- | --- |\n| [xplm_Nav_ILS](/sdk/xplm_Nav_ILS/) | \"8\" |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:24.112136+00:00",
      "title": "xplm_Nav_ILS | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xplm_Nav_ILS/"
    },
    "https://developer.x-plane.com/sdk/xplm_Nav_InnerMarker/": {
      "api_signatures": [],
      "category": {
        "category": "XPLM_Navigation",
        "module": "Xplm Navigation",
        "url": "https://developer.x-plane.com/sdk/xplm_Nav_InnerMarker/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem\"><table><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_Nav_InnerMarker\"><a href=\"/sdk/xplm_Nav_InnerMarker/\">xplm_Nav_InnerMarker</a></td><td>\"256\"</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |\n| --- | --- |\n| [xplm_Nav_InnerMarker](/sdk/xplm_Nav_InnerMarker/) | \"256\" |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:24.116139+00:00",
      "title": "xplm_Nav_InnerMarker | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xplm_Nav_InnerMarker/"
    },
    "https://developer.x-plane.com/sdk/xplm_Nav_LatLon/": {
      "api_signatures": [],
      "category": {
        "category": "XPLM_Navigation",
        "module": "Xplm Navigation",
        "url": "https://developer.x-plane.com/sdk/xplm_Nav_LatLon/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem\"><table><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_Nav_LatLon\"><a href=\"/sdk/xplm_Nav_LatLon/\">xplm_Nav_LatLon</a></td><td>\"2048\"</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |\n| --- | --- |\n| [xplm_Nav_LatLon](/sdk/xplm_Nav_LatLon/) | \"2048\" |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:24.115139+00:00",
      "title": "xplm_Nav_LatLon | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xplm_Nav_LatLon/"
    },
    "https://developer.x-plane.com/sdk/xplm_Nav_Localizer/": {
      "api_signatures": [],
      "category": {
        "category": "XPLM_Navigation",
        "module": "Xplm Navigation",
        "url": "https://developer.x-plane.com/sdk/xplm_Nav_Localizer/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem\"><table><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_Nav_Localizer\"><a href=\"/sdk/xplm_Nav_Localizer/\">xplm_Nav_Localizer</a></td><td>\"16\"</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |\n| --- | --- |\n| [xplm_Nav_Localizer](/sdk/xplm_Nav_Localizer/) | \"16\" |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:24.119138+00:00",
      "title": "xplm_Nav_Localizer | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xplm_Nav_Localizer/"
    },
    "https://developer.x-plane.com/sdk/xplm_Nav_MiddleMarker/": {
      "api_signatures": [],
      "category": {
        "category": "XPLM_Navigation",
        "module": "Xplm Navigation",
        "url": "https://developer.x-plane.com/sdk/xplm_Nav_MiddleMarker/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem\"><table><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_Nav_MiddleMarker\"><a href=\"/sdk/xplm_Nav_MiddleMarker/\">xplm_Nav_MiddleMarker</a></td><td>\"128\"</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |\n| --- | --- |\n| [xplm_Nav_MiddleMarker](/sdk/xplm_Nav_MiddleMarker/) | \"128\" |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:24.121139+00:00",
      "title": "xplm_Nav_MiddleMarker | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xplm_Nav_MiddleMarker/"
    },
    "https://developer.x-plane.com/sdk/xplm_Nav_NDB/": {
      "api_signatures": [],
      "category": {
        "category": "XPLM_Navigation",
        "module": "Xplm Navigation",
        "url": "https://developer.x-plane.com/sdk/xplm_Nav_NDB/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem\"><table><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_Nav_NDB\"><a href=\"/sdk/xplm_Nav_NDB/\">xplm_Nav_NDB</a></td><td>\"2\"</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |\n| --- | --- |\n| [xplm_Nav_NDB](/sdk/xplm_Nav_NDB/) | \"2\" |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:24.118136+00:00",
      "title": "xplm_Nav_NDB | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xplm_Nav_NDB/"
    },
    "https://developer.x-plane.com/sdk/xplm_Nav_OuterMarker/": {
      "api_signatures": [],
      "category": {
        "category": "XPLM_Navigation",
        "module": "Xplm Navigation",
        "url": "https://developer.x-plane.com/sdk/xplm_Nav_OuterMarker/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem\"><table><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_Nav_OuterMarker\"><a href=\"/sdk/xplm_Nav_OuterMarker/\">xplm_Nav_OuterMarker</a></td><td>\"64\"</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |\n| --- | --- |\n| [xplm_Nav_OuterMarker](/sdk/xplm_Nav_OuterMarker/) | \"64\" |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:24.124136+00:00",
      "title": "xplm_Nav_OuterMarker | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xplm_Nav_OuterMarker/"
    },
    "https://developer.x-plane.com/sdk/xplm_Nav_TACAN/": {
      "api_signatures": [],
      "category": {
        "category": "XPLM_Navigation",
        "module": "Xplm Navigation",
        "url": "https://developer.x-plane.com/sdk/xplm_Nav_TACAN/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem\"><table><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_Nav_TACAN\"><a href=\"/sdk/xplm_Nav_TACAN/\">xplm_Nav_TACAN</a></td><td>\"4096\"</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |\n| --- | --- |\n| [xplm_Nav_TACAN](/sdk/xplm_Nav_TACAN/) | \"4096\" |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:24.122137+00:00",
      "title": "xplm_Nav_TACAN | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xplm_Nav_TACAN/"
    },
    "https://developer.x-plane.com/sdk/xplm_Nav_Unknown/": {
      "api_signatures": [],
      "category": {
        "category": "XPLM_Navigation",
        "module": "Xplm Navigation",
        "url": "https://developer.x-plane.com/sdk/xplm_Nav_Unknown/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem\"><table><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_Nav_Unknown\"><a href=\"/sdk/xplm_Nav_Unknown/\">xplm_Nav_Unknown</a></td><td>\"0\"</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |\n| --- | --- |\n| [xplm_Nav_Unknown](/sdk/xplm_Nav_Unknown/) | \"0\" |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:24.130185+00:00",
      "title": "xplm_Nav_Unknown | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xplm_Nav_Unknown/"
    },
    "https://developer.x-plane.com/sdk/xplm_Nav_VOR/": {
      "api_signatures": [],
      "category": {
        "category": "XPLM_Navigation",
        "module": "Xplm Navigation",
        "url": "https://developer.x-plane.com/sdk/xplm_Nav_VOR/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem\"><table><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_Nav_VOR\"><a href=\"/sdk/xplm_Nav_VOR/\">xplm_Nav_VOR</a></td><td>\"4\"</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |\n| --- | --- |\n| [xplm_Nav_VOR](/sdk/xplm_Nav_VOR/) | \"4\" |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:24.129187+00:00",
      "title": "xplm_Nav_VOR | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xplm_Nav_VOR/"
    },
    "https://developer.x-plane.com/sdk/xplm_OptionAltFlag/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/xplm_OptionAltFlag/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem\"><table><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_OptionAltFlag\"><a href=\"/sdk/xplm_OptionAltFlag/\">xplm_OptionAltFlag</a></td><td>\"2\"</td><td>The option or alt key is down</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |  |\n| --- | --- | --- |\n| [xplm_OptionAltFlag](/sdk/xplm_OptionAltFlag/) | \"2\" | The option or alt key is down |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.894422+00:00",
      "title": "xplm_OptionAltFlag | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xplm_OptionAltFlag/"
    },
    "https://developer.x-plane.com/sdk/xplm_Phase_Airplanes/": {
      "api_signatures": [],
      "category": {
        "category": "XPLM_Planes",
        "module": "Xplm Planes",
        "url": "https://developer.x-plane.com/sdk/xplm_Phase_Airplanes/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem XPLM_DEPRECATED\"><table><tr class=\"enumitem XPLM_DEPRECATED\"><td class=\"sdk-api-enum-item\" id=\"xplm_Phase_Airplanes\"><a href=\"/sdk/xplm_Phase_Airplanes/\">xplm_Phase_Airplanes</a></td><td>\"25\"</td><td>Deprecated as of XPLM302. External views of airplanes, both yours and the AI aircraft.</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |  |\n| --- | --- | --- |\n| [xplm_Phase_Airplanes](/sdk/xplm_Phase_Airplanes/) | \"25\" | Deprecated as of XPLM302. External views of airplanes, both yours and the AI aircraft. |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:24.176485+00:00",
      "title": "xplm_Phase_Airplanes | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xplm_Phase_Airplanes/"
    },
    "https://developer.x-plane.com/sdk/xplm_Phase_Airports/": {
      "api_signatures": [],
      "category": {
        "category": "XPLM_Navigation",
        "module": "Xplm Navigation",
        "url": "https://developer.x-plane.com/sdk/xplm_Phase_Airports/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem XPLM_DEPRECATED\"><table><tr class=\"enumitem XPLM_DEPRECATED\"><td class=\"sdk-api-enum-item\" id=\"xplm_Phase_Airports\"><a href=\"/sdk/xplm_Phase_Airports/\">xplm_Phase_Airports</a></td><td>\"10\"</td><td>Deprecated as of XPLM302. Drawing runways and other airport detail.</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |  |\n| --- | --- | --- |\n| [xplm_Phase_Airports](/sdk/xplm_Phase_Airports/) | \"10\" | Deprecated as of XPLM302. Drawing runways and other airport detail. |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:24.127186+00:00",
      "title": "xplm_Phase_Airports | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xplm_Phase_Airports/"
    },
    "https://developer.x-plane.com/sdk/xplm_Phase_FirstCockpit/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/xplm_Phase_FirstCockpit/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem\"><table><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_Phase_FirstCockpit\"><a href=\"/sdk/xplm_Phase_FirstCockpit/\">xplm_Phase_FirstCockpit</a></td><td>\"35\"</td><td>This is the first phase where you can draw in 2-d.</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |  |\n| --- | --- | --- |\n| [xplm_Phase_FirstCockpit](/sdk/xplm_Phase_FirstCockpit/) | \"35\" | This is the first phase where you can draw in 2-d. |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.897421+00:00",
      "title": "xplm_Phase_FirstCockpit | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xplm_Phase_FirstCockpit/"
    },
    "https://developer.x-plane.com/sdk/xplm_Phase_FirstScene/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/xplm_Phase_FirstScene/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem XPLM_DEPRECATED\"><table><tr class=\"enumitem XPLM_DEPRECATED\"><td class=\"sdk-api-enum-item\" id=\"xplm_Phase_FirstScene\"><a href=\"/sdk/xplm_Phase_FirstScene/\">xplm_Phase_FirstScene</a></td><td>\"0\"</td><td>Deprecated as of XPLM302. This is the earliest point at which you can draw in 3-d.</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |  |\n| --- | --- | --- |\n| [xplm_Phase_FirstScene](/sdk/xplm_Phase_FirstScene/) | \"0\" | Deprecated as of XPLM302. This is the earliest point at which you can draw in 3-d. |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.896421+00:00",
      "title": "xplm_Phase_FirstScene | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xplm_Phase_FirstScene/"
    },
    "https://developer.x-plane.com/sdk/xplm_Phase_Gauges/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/xplm_Phase_Gauges/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem\"><table><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_Phase_Gauges\"><a href=\"/sdk/xplm_Phase_Gauges/\">xplm_Phase_Gauges</a></td><td>\"45\"</td><td>The moving parts of the aircraft panel.</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |  |\n| --- | --- | --- |\n| [xplm_Phase_Gauges](/sdk/xplm_Phase_Gauges/) | \"45\" | The moving parts of the aircraft panel. |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.900421+00:00",
      "title": "xplm_Phase_Gauges | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xplm_Phase_Gauges/"
    },
    "https://developer.x-plane.com/sdk/xplm_Phase_LastCockpit/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/xplm_Phase_LastCockpit/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem\"><table><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_Phase_LastCockpit\"><a href=\"/sdk/xplm_Phase_LastCockpit/\">xplm_Phase_LastCockpit</a></td><td>\"55\"</td><td>The last chance to draw in 2d.</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |  |\n| --- | --- | --- |\n| [xplm_Phase_LastCockpit](/sdk/xplm_Phase_LastCockpit/) | \"55\" | The last chance to draw in 2d. |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.899420+00:00",
      "title": "xplm_Phase_LastCockpit | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xplm_Phase_LastCockpit/"
    },
    "https://developer.x-plane.com/sdk/xplm_Phase_LastScene/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/xplm_Phase_LastScene/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem XPLM_DEPRECATED\"><table><tr class=\"enumitem XPLM_DEPRECATED\"><td class=\"sdk-api-enum-item\" id=\"xplm_Phase_LastScene\"><a href=\"/sdk/xplm_Phase_LastScene/\">xplm_Phase_LastScene</a></td><td>\"30\"</td><td>Deprecated as of XPLM302. This is the last point at which you can draw in 3-d.</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |  |\n| --- | --- | --- |\n| [xplm_Phase_LastScene](/sdk/xplm_Phase_LastScene/) | \"30\" | Deprecated as of XPLM302. This is the last point at which you can draw in 3-d. |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.902424+00:00",
      "title": "xplm_Phase_LastScene | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xplm_Phase_LastScene/"
    },
    "https://developer.x-plane.com/sdk/xplm_Phase_LocalMap2D/": {
      "api_signatures": [],
      "category": {
        "category": "XPLM_Map",
        "module": "Xplm Map",
        "url": "https://developer.x-plane.com/sdk/xplm_Phase_LocalMap2D/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem XPLM200\"><table><tr class=\"enumitem XPLM200\"><td class=\"sdk-api-enum-item\" id=\"xplm_Phase_LocalMap2D\"><a href=\"/sdk/xplm_Phase_LocalMap2D/\">xplm_Phase_LocalMap2D</a></td><td>\"101\"</td><td>Removed as of XPLM300; Use the full-blown<a href=\"/sdk/XPLMMap/\">XPLMMap</a>API instead.</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [
        "XPLMMap"
      ],
      "markdown": "| |  |\n| --- | --- | --- |\n| [xplm_Phase_LocalMap2D](/sdk/xplm_Phase_LocalMap2D/) | \"101\" | Removed as of XPLM300; Use the full-blown[XPLMMap](/sdk/XPLMMap/)API instead. |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:23.876635+00:00",
      "title": "xplm_Phase_LocalMap2D | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xplm_Phase_LocalMap2D/"
    },
    "https://developer.x-plane.com/sdk/xplm_Phase_LocalMap3D/": {
      "api_signatures": [],
      "category": {
        "category": "XPLM_Map",
        "module": "Xplm Map",
        "url": "https://developer.x-plane.com/sdk/xplm_Phase_LocalMap3D/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem XPLM200\"><table><tr class=\"enumitem XPLM200\"><td class=\"sdk-api-enum-item\" id=\"xplm_Phase_LocalMap3D\"><a href=\"/sdk/xplm_Phase_LocalMap3D/\">xplm_Phase_LocalMap3D</a></td><td>\"100\"</td><td>Removed as of XPLM300; Use the full-blown<a href=\"/sdk/XPLMMap/\">XPLMMap</a>API instead.</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [
        "XPLMMap"
      ],
      "markdown": "| |  |\n| --- | --- | --- |\n| [xplm_Phase_LocalMap3D](/sdk/xplm_Phase_LocalMap3D/) | \"100\" | Removed as of XPLM300; Use the full-blown[XPLMMap](/sdk/XPLMMap/)API instead. |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:23.874557+00:00",
      "title": "xplm_Phase_LocalMap3D | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xplm_Phase_LocalMap3D/"
    },
    "https://developer.x-plane.com/sdk/xplm_Phase_LocalMapProfile/": {
      "api_signatures": [],
      "category": {
        "category": "XPLM_Map",
        "module": "Xplm Map",
        "url": "https://developer.x-plane.com/sdk/xplm_Phase_LocalMapProfile/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem XPLM200\"><table><tr class=\"enumitem XPLM200\"><td class=\"sdk-api-enum-item\" id=\"xplm_Phase_LocalMapProfile\"><a href=\"/sdk/xplm_Phase_LocalMapProfile/\">xplm_Phase_LocalMapProfile</a></td><td>\"102\"</td><td>Removed as of XPLM300; Use the full-blown<a href=\"/sdk/XPLMMap/\">XPLMMap</a>API instead.</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [
        "XPLMMap"
      ],
      "markdown": "| |  |\n| --- | --- | --- |\n| [xplm_Phase_LocalMapProfile](/sdk/xplm_Phase_LocalMapProfile/) | \"102\" | Removed as of XPLM300; Use the full-blown[XPLMMap](/sdk/XPLMMap/)API instead. |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:23.879636+00:00",
      "title": "xplm_Phase_LocalMapProfile | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xplm_Phase_LocalMapProfile/"
    },
    "https://developer.x-plane.com/sdk/xplm_Phase_Modern3D/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/xplm_Phase_Modern3D/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem XPLM302\"><table><tr class=\"enumitem XPLM302\"><td class=\"sdk-api-enum-item\" id=\"xplm_Phase_Modern3D\"><a href=\"/sdk/xplm_Phase_Modern3D/\">xplm_Phase_Modern3D</a></td><td>\"31\"</td><td>A chance to do modern 3D drawing.</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |  |\n| --- | --- | --- |\n| [xplm_Phase_Modern3D](/sdk/xplm_Phase_Modern3D/) | \"31\" | A chance to do modern 3D drawing. |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.904421+00:00",
      "title": "xplm_Phase_Modern3D | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xplm_Phase_Modern3D/"
    },
    "https://developer.x-plane.com/sdk/xplm_Phase_Objects/": {
      "api_signatures": [],
      "category": {
        "category": "XPLM_Instance",
        "module": "Xplm Instance",
        "url": "https://developer.x-plane.com/sdk/xplm_Phase_Objects/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem XPLM_DEPRECATED\"><table><tr class=\"enumitem XPLM_DEPRECATED\"><td class=\"sdk-api-enum-item\" id=\"xplm_Phase_Objects\"><a href=\"/sdk/xplm_Phase_Objects/\">xplm_Phase_Objects</a></td><td>\"20\"</td><td>Deprecated as of XPLM302. 3-d objects (houses, smokestacks, etc.</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |  |\n| --- | --- | --- |\n| [xplm_Phase_Objects](/sdk/xplm_Phase_Objects/) | \"20\" | Deprecated as of XPLM302. 3-d objects (houses, smokestacks, etc. |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:23.766752+00:00",
      "title": "xplm_Phase_Objects | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xplm_Phase_Objects/"
    },
    "https://developer.x-plane.com/sdk/xplm_Phase_Panel/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/xplm_Phase_Panel/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem\"><table><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_Phase_Panel\"><a href=\"/sdk/xplm_Phase_Panel/\">xplm_Phase_Panel</a></td><td>\"40\"</td><td>The non-moving parts of the aircraft panel.</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |  |\n| --- | --- | --- |\n| [xplm_Phase_Panel](/sdk/xplm_Phase_Panel/) | \"40\" | The non-moving parts of the aircraft panel. |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.905422+00:00",
      "title": "xplm_Phase_Panel | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xplm_Phase_Panel/"
    },
    "https://developer.x-plane.com/sdk/xplm_Phase_Terrain/": {
      "api_signatures": [],
      "category": {
        "category": "XPLM_Scenery",
        "module": "Xplm Scenery",
        "url": "https://developer.x-plane.com/sdk/xplm_Phase_Terrain/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem XPLM_DEPRECATED\"><table><tr class=\"enumitem XPLM_DEPRECATED\"><td class=\"sdk-api-enum-item\" id=\"xplm_Phase_Terrain\"><a href=\"/sdk/xplm_Phase_Terrain/\">xplm_Phase_Terrain</a></td><td>\"5\"</td><td>Deprecated as of XPLM302. Drawing of land and water.</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |  |\n| --- | --- | --- |\n| [xplm_Phase_Terrain](/sdk/xplm_Phase_Terrain/) | \"5\" | Deprecated as of XPLM302. Drawing of land and water. |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:24.424786+00:00",
      "title": "xplm_Phase_Terrain | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xplm_Phase_Terrain/"
    },
    "https://developer.x-plane.com/sdk/xplm_Phase_Vectors/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/xplm_Phase_Vectors/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem XPLM_DEPRECATED\"><table><tr class=\"enumitem XPLM_DEPRECATED\"><td class=\"sdk-api-enum-item\" id=\"xplm_Phase_Vectors\"><a href=\"/sdk/xplm_Phase_Vectors/\">xplm_Phase_Vectors</a></td><td>\"15\"</td><td>Deprecated as of XPLM302. Drawing roads, trails, trains, etc.</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |  |\n| --- | --- | --- |\n| [xplm_Phase_Vectors](/sdk/xplm_Phase_Vectors/) | \"15\" | Deprecated as of XPLM302. Drawing roads, trails, trains, etc. |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.908514+00:00",
      "title": "xplm_Phase_Vectors | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xplm_Phase_Vectors/"
    },
    "https://developer.x-plane.com/sdk/xplm_Phase_Window/": {
      "api_signatures": [],
      "category": {
        "category": "XPLM_Display",
        "module": "Xplm Display",
        "url": "https://developer.x-plane.com/sdk/xplm_Phase_Window/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem\"><table><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_Phase_Window\"><a href=\"/sdk/xplm_Phase_Window/\">xplm_Phase_Window</a></td><td>\"50\"</td><td>Floating windows from plugins.</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |  |\n| --- | --- | --- |\n| [xplm_Phase_Window](/sdk/xplm_Phase_Window/) | \"50\" | Floating windows from plugins. |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:23.621547+00:00",
      "title": "xplm_Phase_Window | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xplm_Phase_Window/"
    },
    "https://developer.x-plane.com/sdk/xplm_ProbeError/": {
      "api_signatures": [],
      "category": {
        "category": "XPLM_Scenery",
        "module": "Xplm Scenery",
        "url": "https://developer.x-plane.com/sdk/xplm_ProbeError/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem\"><table><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_ProbeError\"><a href=\"/sdk/xplm_ProbeError/\">xplm_ProbeError</a></td><td>\"1\"</td><td>An error in the API call. Either the probe struct size is bad, the probe is invalid, or the type is mismatched for the specific query call.</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |  |\n| --- | --- | --- |\n| [xplm_ProbeError](/sdk/xplm_ProbeError/) | \"1\" | An error in the API call. Either the probe struct size is bad, the probe is invalid, or the type is mismatched for the specific query call. |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:24.423786+00:00",
      "title": "xplm_ProbeError | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xplm_ProbeError/"
    },
    "https://developer.x-plane.com/sdk/xplm_ProbeHitTerrain/": {
      "api_signatures": [],
      "category": {
        "category": "XPLM_Scenery",
        "module": "Xplm Scenery",
        "url": "https://developer.x-plane.com/sdk/xplm_ProbeHitTerrain/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem\"><table><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_ProbeHitTerrain\"><a href=\"/sdk/xplm_ProbeHitTerrain/\">xplm_ProbeHitTerrain</a></td><td>\"0\"</td><td>The probe hit terrain and returned valid values.</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |  |\n| --- | --- | --- |\n| [xplm_ProbeHitTerrain](/sdk/xplm_ProbeHitTerrain/) | \"0\" | The probe hit terrain and returned valid values. |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:24.426834+00:00",
      "title": "xplm_ProbeHitTerrain | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xplm_ProbeHitTerrain/"
    },
    "https://developer.x-plane.com/sdk/xplm_ProbeMissed/": {
      "api_signatures": [],
      "category": {
        "category": "XPLM_Scenery",
        "module": "Xplm Scenery",
        "url": "https://developer.x-plane.com/sdk/xplm_ProbeMissed/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem\"><table><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_ProbeMissed\"><a href=\"/sdk/xplm_ProbeMissed/\">xplm_ProbeMissed</a></td><td>\"2\"</td><td>The probe call succeeded but there is no terrain under this point (perhaps it is off the side of the planet?)</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |  |\n| --- | --- | --- |\n| [xplm_ProbeMissed](/sdk/xplm_ProbeMissed/) | \"2\" | The probe call succeeded but there is no terrain under this point (perhaps it is off the side of the planet?) |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:24.428878+00:00",
      "title": "xplm_ProbeMissed | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xplm_ProbeMissed/"
    },
    "https://developer.x-plane.com/sdk/xplm_ProbeY/": {
      "api_signatures": [],
      "category": {
        "category": "XPLM_Scenery",
        "module": "Xplm Scenery",
        "url": "https://developer.x-plane.com/sdk/xplm_ProbeY/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem\"><table><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_ProbeY\"><a href=\"/sdk/xplm_ProbeY/\">xplm_ProbeY</a></td><td>\"0\"</td><td>The Y probe gives you the location of the tallest physicalscenery along the Y axis going through the queried point.</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |  |\n| --- | --- | --- |\n| [xplm_ProbeY](/sdk/xplm_ProbeY/) | \"0\" | The Y probe gives you the location of the tallest physicalscenery along the Y axis going through the queried point. |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:24.430877+00:00",
      "title": "xplm_ProbeY | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xplm_ProbeY/"
    },
    "https://developer.x-plane.com/sdk/xplm_RadioBank/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/xplm_RadioBank/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem\"><table><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_RadioBank\"><a href=\"/sdk/xplm_RadioBank/\">xplm_RadioBank</a></td><td>\"1\"</td><td>Radio bank. Handles COM1/COM2/GND/Pilot/Copilot.</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |  |\n| --- | --- | --- |\n| [xplm_RadioBank](/sdk/xplm_RadioBank/) | \"1\" | Radio bank. Handles COM1/COM2/GND/Pilot/Copilot. |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.909515+00:00",
      "title": "xplm_RadioBank | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xplm_RadioBank/"
    },
    "https://developer.x-plane.com/sdk/xplm_ShiftFlag/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/xplm_ShiftFlag/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem\"><table><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_ShiftFlag\"><a href=\"/sdk/xplm_ShiftFlag/\">xplm_ShiftFlag</a></td><td>\"1\"</td><td>The shift key is down</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |  |\n| --- | --- | --- |\n| [xplm_ShiftFlag](/sdk/xplm_ShiftFlag/) | \"1\" | The shift key is down |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.911514+00:00",
      "title": "xplm_ShiftFlag | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xplm_ShiftFlag/"
    },
    "https://developer.x-plane.com/sdk/xplm_Tex_AircraftLiteMap/": {
      "api_signatures": [],
      "category": {
        "category": "XPLM_Map",
        "module": "Xplm Map",
        "url": "https://developer.x-plane.com/sdk/xplm_Tex_AircraftLiteMap/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem XPLM_DEPRECATED\"><table><tr class=\"enumitem XPLM_DEPRECATED\"><td class=\"sdk-api-enum-item\" id=\"xplm_Tex_AircraftLiteMap\"><a href=\"/sdk/xplm_Tex_AircraftLiteMap/\">xplm_Tex_AircraftLiteMap</a></td><td>\"2\"</td><td>The exterior light map for the user's aircraft.</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |  |\n| --- | --- | --- |\n| [xplm_Tex_AircraftLiteMap](/sdk/xplm_Tex_AircraftLiteMap/) | \"2\" | The exterior light map for the user's aircraft. |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:23.883637+00:00",
      "title": "xplm_Tex_AircraftLiteMap | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xplm_Tex_AircraftLiteMap/"
    },
    "https://developer.x-plane.com/sdk/xplm_Tex_AircraftPaint/": {
      "api_signatures": [],
      "category": {
        "category": "XPLM_Planes",
        "module": "Xplm Planes",
        "url": "https://developer.x-plane.com/sdk/xplm_Tex_AircraftPaint/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem XPLM_DEPRECATED\"><table><tr class=\"enumitem XPLM_DEPRECATED\"><td class=\"sdk-api-enum-item\" id=\"xplm_Tex_AircraftPaint\"><a href=\"/sdk/xplm_Tex_AircraftPaint/\">xplm_Tex_AircraftPaint</a></td><td>\"1\"</td><td>The exterior paint for the user's aircraft (daytime).</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |  |\n| --- | --- | --- |\n| [xplm_Tex_AircraftPaint](/sdk/xplm_Tex_AircraftPaint/) | \"1\" | The exterior paint for the user's aircraft (daytime). |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:24.182488+00:00",
      "title": "xplm_Tex_AircraftPaint | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xplm_Tex_AircraftPaint/"
    },
    "https://developer.x-plane.com/sdk/xplm_Tex_GeneralInterface/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/xplm_Tex_GeneralInterface/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem\"><table><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_Tex_GeneralInterface\"><a href=\"/sdk/xplm_Tex_GeneralInterface/\">xplm_Tex_GeneralInterface</a></td><td>\"0\"</td><td>The bitmap that contains window outlines, button outlines, fonts, etc.</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |  |\n| --- | --- | --- |\n| [xplm_Tex_GeneralInterface](/sdk/xplm_Tex_GeneralInterface/) | \"0\" | The bitmap that contains window outlines, button outlines, fonts, etc. |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.915513+00:00",
      "title": "xplm_Tex_GeneralInterface | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xplm_Tex_GeneralInterface/"
    },
    "https://developer.x-plane.com/sdk/xplm_UpFlag/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/xplm_UpFlag/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem\"><table><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_UpFlag\"><a href=\"/sdk/xplm_UpFlag/\">xplm_UpFlag</a></td><td>\"16\"</td><td>The key is being released</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |  |\n| --- | --- | --- |\n| [xplm_UpFlag](/sdk/xplm_UpFlag/) | \"16\" | The key is being released |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.913516+00:00",
      "title": "xplm_UpFlag | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xplm_UpFlag/"
    },
    "https://developer.x-plane.com/sdk/xplm_WindowCenterOnMonitor/": {
      "api_signatures": [],
      "category": {
        "category": "XPLM_Display",
        "module": "Xplm Display",
        "url": "https://developer.x-plane.com/sdk/xplm_WindowCenterOnMonitor/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem\"><table><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_WindowCenterOnMonitor\"><a href=\"/sdk/xplm_WindowCenterOnMonitor/\">xplm_WindowCenterOnMonitor</a></td><td>\"1\"</td><td>Keep the window centered on the monitor you specify</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |  |\n| --- | --- | --- |\n| [xplm_WindowCenterOnMonitor](/sdk/xplm_WindowCenterOnMonitor/) | \"1\" | Keep the window centered on the monitor you specify |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:23.629545+00:00",
      "title": "xplm_WindowCenterOnMonitor | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xplm_WindowCenterOnMonitor/"
    },
    "https://developer.x-plane.com/sdk/xplm_WindowDecorationNone/": {
      "api_signatures": [],
      "category": {
        "category": "XPLM_Display",
        "module": "Xplm Display",
        "url": "https://developer.x-plane.com/sdk/xplm_WindowDecorationNone/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem\"><table><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_WindowDecorationNone\"><a href=\"/sdk/xplm_WindowDecorationNone/\">xplm_WindowDecorationNone</a></td><td>\"0\"</td><td>X-Plane will draw no decoration for your window, and apply no automatic click handlers. The window will not stop click from passing through its bounds. This is suitable for \"windows\" which request, say, the full screen bounds, then only draw in a small portion of the available area.</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |  |\n| --- | --- | --- |\n| [xplm_WindowDecorationNone](/sdk/xplm_WindowDecorationNone/) | \"0\" | X-Plane will draw no decoration for your window, and apply no automatic click handlers. The window will not stop click from passing through its bounds. This is suitable for \"windows\" which request, say, the full screen bounds, then only draw in a small portion of the available area. |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:23.622545+00:00",
      "title": "xplm_WindowDecorationNone | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xplm_WindowDecorationNone/"
    },
    "https://developer.x-plane.com/sdk/xplm_WindowDecorationRoundRectangle/": {
      "api_signatures": [],
      "category": {
        "category": "XPLM_Display",
        "module": "Xplm Display",
        "url": "https://developer.x-plane.com/sdk/xplm_WindowDecorationRoundRectangle/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem\"><table><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_WindowDecorationRoundRectangle\"><a href=\"/sdk/xplm_WindowDecorationRoundRectangle/\">xplm_WindowDecorationRoundRectangle</a></td><td>\"1\"</td><td>The default decoration for \"native\" windows, like the map. Provides a solid background, as well as click handlers for resizing and dragging the window.</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |  |\n| --- | --- | --- |\n| [xplm_WindowDecorationRoundRectangle](/sdk/xplm_WindowDecorationRoundRectangle/) | \"1\" | The default decoration for \"native\" windows, like the map. Provides a solid background, as well as click handlers for resizing and dragging the window. |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:23.627546+00:00",
      "title": "xplm_WindowDecorationRoundRectangle | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xplm_WindowDecorationRoundRectangle/"
    },
    "https://developer.x-plane.com/sdk/xplm_WindowDecorationSelfDecorated/": {
      "api_signatures": [],
      "category": {
        "category": "XPLM_Display",
        "module": "Xplm Display",
        "url": "https://developer.x-plane.com/sdk/xplm_WindowDecorationSelfDecorated/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem\"><table><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_WindowDecorationSelfDecorated\"><a href=\"/sdk/xplm_WindowDecorationSelfDecorated/\">xplm_WindowDecorationSelfDecorated</a></td><td>\"2\"</td><td>X-Plane will draw no decoration for your window, nor will it provide resize handlers for your window edges, but it will stop clicks from passing through your windows bounds.</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |  |\n| --- | --- | --- |\n| [xplm_WindowDecorationSelfDecorated](/sdk/xplm_WindowDecorationSelfDecorated/) | \"2\" | X-Plane will draw no decoration for your window, nor will it provide resize handlers for your window edges, but it will stop clicks from passing through your windows bounds. |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:23.626544+00:00",
      "title": "xplm_WindowDecorationSelfDecorated | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xplm_WindowDecorationSelfDecorated/"
    },
    "https://developer.x-plane.com/sdk/xplm_WindowDecorationSelfDecoratedResizable/": {
      "api_signatures": [],
      "category": {
        "category": "XPLM_Display",
        "module": "Xplm Display",
        "url": "https://developer.x-plane.com/sdk/xplm_WindowDecorationSelfDecoratedResizable/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem\"><table><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_WindowDecorationSelfDecoratedResizable\"><a href=\"/sdk/xplm_WindowDecorationSelfDecoratedResizable/\">xplm_WindowDecorationSelfDecoratedResizable</a></td><td>\"3\"</td><td>Like self-decorated, but with resizing; X-Plane will draw no decoration for your window, but it will stop clicks from passing through your windows bounds, and provide automatic mouse handlers for resizing.</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |  |\n| --- | --- | --- |\n| [xplm_WindowDecorationSelfDecoratedResizable](/sdk/xplm_WindowDecorationSelfDecoratedResizable/) | \"3\" | Like self-decorated, but with resizing; X-Plane will draw no decoration for your window, but it will stop clicks from passing through your windows bounds, and provide automatic mouse handlers for resizing. |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:23.624544+00:00",
      "title": "xplm_WindowDecorationSelfDecoratedResizable | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xplm_WindowDecorationSelfDecoratedResizable/"
    },
    "https://developer.x-plane.com/sdk/xplm_WindowFullScreenOnAllMonitors/": {
      "api_signatures": [],
      "category": {
        "category": "XPLM_Display",
        "module": "Xplm Display",
        "url": "https://developer.x-plane.com/sdk/xplm_WindowFullScreenOnAllMonitors/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem\"><table><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_WindowFullScreenOnAllMonitors\"><a href=\"/sdk/xplm_WindowFullScreenOnAllMonitors/\">xplm_WindowFullScreenOnAllMonitors</a></td><td>\"3\"</td><td>Like gui_window_full_screen_on_monitor, but stretches over *all* monitors and popout windows. This is an obscure one... unless you have a very good reason to need it, you probably don't!</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |  |\n| --- | --- | --- |\n| [xplm_WindowFullScreenOnAllMonitors](/sdk/xplm_WindowFullScreenOnAllMonitors/) | \"3\" | Like gui_window_full_screen_on_monitor, but stretches over *all* monitors and popout windows. This is an obscure one... unless you have a very good reason to need it, you probably don't! |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:23.634545+00:00",
      "title": "xplm_WindowFullScreenOnAllMonitors | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xplm_WindowFullScreenOnAllMonitors/"
    },
    "https://developer.x-plane.com/sdk/xplm_WindowFullScreenOnMonitor/": {
      "api_signatures": [],
      "category": {
        "category": "XPLM_Display",
        "module": "Xplm Display",
        "url": "https://developer.x-plane.com/sdk/xplm_WindowFullScreenOnMonitor/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem\"><table><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_WindowFullScreenOnMonitor\"><a href=\"/sdk/xplm_WindowFullScreenOnMonitor/\">xplm_WindowFullScreenOnMonitor</a></td><td>\"2\"</td><td>Keep the window full screen on the monitor you specify</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |  |\n| --- | --- | --- |\n| [xplm_WindowFullScreenOnMonitor](/sdk/xplm_WindowFullScreenOnMonitor/) | \"2\" | Keep the window full screen on the monitor you specify |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:23.633546+00:00",
      "title": "xplm_WindowFullScreenOnMonitor | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xplm_WindowFullScreenOnMonitor/"
    },
    "https://developer.x-plane.com/sdk/xplm_WindowLayerFlightOverlay/": {
      "api_signatures": [],
      "category": {
        "category": "XPLM_Display",
        "module": "Xplm Display",
        "url": "https://developer.x-plane.com/sdk/xplm_WindowLayerFlightOverlay/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem\"><table><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_WindowLayerFlightOverlay\"><a href=\"/sdk/xplm_WindowLayerFlightOverlay/\">xplm_WindowLayerFlightOverlay</a></td><td>\"0\"</td><td>The lowest layer, used for HUD-like displays while flying.</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |  |\n| --- | --- | --- |\n| [xplm_WindowLayerFlightOverlay](/sdk/xplm_WindowLayerFlightOverlay/) | \"0\" | The lowest layer, used for HUD-like displays while flying. |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:23.637546+00:00",
      "title": "xplm_WindowLayerFlightOverlay | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xplm_WindowLayerFlightOverlay/"
    },
    "https://developer.x-plane.com/sdk/xplm_WindowLayerFloatingWindows/": {
      "api_signatures": [],
      "category": {
        "category": "XPLM_Display",
        "module": "Xplm Display",
        "url": "https://developer.x-plane.com/sdk/xplm_WindowLayerFloatingWindows/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem\"><table><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_WindowLayerFloatingWindows\"><a href=\"/sdk/xplm_WindowLayerFloatingWindows/\">xplm_WindowLayerFloatingWindows</a></td><td>\"1\"</td><td>Windows that \"float\" over the sim, like the X-Plane 11 map does. If you are not sure which layer to create your window in, choose floating.</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |  |\n| --- | --- | --- |\n| [xplm_WindowLayerFloatingWindows](/sdk/xplm_WindowLayerFloatingWindows/) | \"1\" | Windows that \"float\" over the sim, like the X-Plane 11 map does. If you are not sure which layer to create your window in, choose floating. |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:23.631544+00:00",
      "title": "xplm_WindowLayerFloatingWindows | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xplm_WindowLayerFloatingWindows/"
    },
    "https://developer.x-plane.com/sdk/xplm_WindowLayerGrowlNotifications/": {
      "api_signatures": [],
      "category": {
        "category": "XPLM_Display",
        "module": "Xplm Display",
        "url": "https://developer.x-plane.com/sdk/xplm_WindowLayerGrowlNotifications/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem\"><table><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_WindowLayerGrowlNotifications\"><a href=\"/sdk/xplm_WindowLayerGrowlNotifications/\">xplm_WindowLayerGrowlNotifications</a></td><td>\"3\"</td><td>\"Growl\"-style notifications that are visible in a corner of the screen, even over modals</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |  |\n| --- | --- | --- |\n| [xplm_WindowLayerGrowlNotifications](/sdk/xplm_WindowLayerGrowlNotifications/) | \"3\" | \"Growl\"-style notifications that are visible in a corner of the screen, even over modals |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:23.636546+00:00",
      "title": "xplm_WindowLayerGrowlNotifications | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xplm_WindowLayerGrowlNotifications/"
    },
    "https://developer.x-plane.com/sdk/xplm_WindowLayerModal/": {
      "api_signatures": [],
      "category": {
        "category": "XPLM_Display",
        "module": "Xplm Display",
        "url": "https://developer.x-plane.com/sdk/xplm_WindowLayerModal/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem\"><table><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_WindowLayerModal\"><a href=\"/sdk/xplm_WindowLayerModal/\">xplm_WindowLayerModal</a></td><td>\"2\"</td><td>An interruptive modal that covers the sim with a transparent black overlay to draw the user's focus to the alert</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |  |\n| --- | --- | --- |\n| [xplm_WindowLayerModal](/sdk/xplm_WindowLayerModal/) | \"2\" | An interruptive modal that covers the sim with a transparent black overlay to draw the user's focus to the alert |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:23.639551+00:00",
      "title": "xplm_WindowLayerModal | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xplm_WindowLayerModal/"
    },
    "https://developer.x-plane.com/sdk/xplm_WindowPopOut/": {
      "api_signatures": [],
      "category": {
        "category": "XPLM_Display",
        "module": "Xplm Display",
        "url": "https://developer.x-plane.com/sdk/xplm_WindowPopOut/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem\"><table><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_WindowPopOut\"><a href=\"/sdk/xplm_WindowPopOut/\">xplm_WindowPopOut</a></td><td>\"4\"</td><td>A first-class window in the operating system, completely separate from the X-Plane window(s)</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |  |\n| --- | --- | --- |\n| [xplm_WindowPopOut](/sdk/xplm_WindowPopOut/) | \"4\" | A first-class window in the operating system, completely separate from the X-Plane window(s) |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:23.646552+00:00",
      "title": "xplm_WindowPopOut | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xplm_WindowPopOut/"
    },
    "https://developer.x-plane.com/sdk/xplm_WindowPositionFree/": {
      "api_signatures": [],
      "category": {
        "category": "XPLM_Display",
        "module": "Xplm Display",
        "url": "https://developer.x-plane.com/sdk/xplm_WindowPositionFree/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem\"><table><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_WindowPositionFree\"><a href=\"/sdk/xplm_WindowPositionFree/\">xplm_WindowPositionFree</a></td><td>\"0\"</td><td>The default positioning mode. Set the window geometry and its future position will be determined by its window gravity, resizing limits, and user interactions.</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |  |\n| --- | --- | --- |\n| [xplm_WindowPositionFree](/sdk/xplm_WindowPositionFree/) | \"0\" | The default positioning mode. Set the window geometry and its future position will be determined by its window gravity, resizing limits, and user interactions. |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:23.644550+00:00",
      "title": "xplm_WindowPositionFree | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xplm_WindowPositionFree/"
    },
    "https://developer.x-plane.com/sdk/xplm_WindowVR/": {
      "api_signatures": [],
      "category": {
        "category": "XPLM_Display",
        "module": "Xplm Display",
        "url": "https://developer.x-plane.com/sdk/xplm_WindowVR/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem XPLM301\"><table><tr class=\"enumitem XPLM301\"><td class=\"sdk-api-enum-item\" id=\"xplm_WindowVR\"><a href=\"/sdk/xplm_WindowVR/\">xplm_WindowVR</a></td><td>\"5\"</td><td>A floating window visible on the VR headset</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |  |\n| --- | --- | --- |\n| [xplm_WindowVR](/sdk/xplm_WindowVR/) | \"5\" | A floating window visible on the VR headset |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:23.643551+00:00",
      "title": "xplm_WindowVR | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xplm_WindowVR/"
    },
    "https://developer.x-plane.com/sdk/xplm_device_CDU739_1/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/xplm_device_CDU739_1/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem\"><table><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_device_CDU739_1\"><a href=\"/sdk/xplm_device_CDU739_1/\">xplm_device_CDU739_1</a></td><td>\"4\"</td><td>generic airliner CDU, pilot side.</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |  |\n| --- | --- | --- |\n| [xplm_device_CDU739_1](/sdk/xplm_device_CDU739_1/) | \"4\" | generic airliner CDU, pilot side. |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.916514+00:00",
      "title": "xplm_device_CDU739_1 | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xplm_device_CDU739_1/"
    },
    "https://developer.x-plane.com/sdk/xplm_device_CDU739_2/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/xplm_device_CDU739_2/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem\"><table><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_device_CDU739_2\"><a href=\"/sdk/xplm_device_CDU739_2/\">xplm_device_CDU739_2</a></td><td>\"5\"</td><td>generic airliner CDU, copilot side.</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |  |\n| --- | --- | --- |\n| [xplm_device_CDU739_2](/sdk/xplm_device_CDU739_2/) | \"5\" | generic airliner CDU, copilot side. |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.918515+00:00",
      "title": "xplm_device_CDU739_2 | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xplm_device_CDU739_2/"
    },
    "https://developer.x-plane.com/sdk/xplm_device_CDU815_1/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/xplm_device_CDU815_1/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem\"><table><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_device_CDU815_1\"><a href=\"/sdk/xplm_device_CDU815_1/\">xplm_device_CDU815_1</a></td><td>\"9\"</td><td>Primus CDU, pilot side.</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |  |\n| --- | --- | --- |\n| [xplm_device_CDU815_1](/sdk/xplm_device_CDU815_1/) | \"9\" | Primus CDU, pilot side. |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.920516+00:00",
      "title": "xplm_device_CDU815_1 | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xplm_device_CDU815_1/"
    },
    "https://developer.x-plane.com/sdk/xplm_device_CDU815_2/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/xplm_device_CDU815_2/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem\"><table><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_device_CDU815_2\"><a href=\"/sdk/xplm_device_CDU815_2/\">xplm_device_CDU815_2</a></td><td>\"10\"</td><td>Primus CDU, copilot side.</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |  |\n| --- | --- | --- |\n| [xplm_device_CDU815_2](/sdk/xplm_device_CDU815_2/) | \"10\" | Primus CDU, copilot side. |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.926515+00:00",
      "title": "xplm_device_CDU815_2 | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xplm_device_CDU815_2/"
    },
    "https://developer.x-plane.com/sdk/xplm_device_G1000_MFD/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/xplm_device_G1000_MFD/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem\"><table><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_device_G1000_MFD\"><a href=\"/sdk/xplm_device_G1000_MFD/\">xplm_device_G1000_MFD</a></td><td>\"7\"</td><td>G1000 Multifunction Display.</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |  |\n| --- | --- | --- |\n| [xplm_device_G1000_MFD](/sdk/xplm_device_G1000_MFD/) | \"7\" | G1000 Multifunction Display. |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.924514+00:00",
      "title": "xplm_device_G1000_MFD | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xplm_device_G1000_MFD/"
    },
    "https://developer.x-plane.com/sdk/xplm_device_G1000_PFD_1/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/xplm_device_G1000_PFD_1/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem\"><table><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_device_G1000_PFD_1\"><a href=\"/sdk/xplm_device_G1000_PFD_1/\">xplm_device_G1000_PFD_1</a></td><td>\"6\"</td><td>G1000 Primary Flight Display, pilot side.</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |  |\n| --- | --- | --- |\n| [xplm_device_G1000_PFD_1](/sdk/xplm_device_G1000_PFD_1/) | \"6\" | G1000 Primary Flight Display, pilot side. |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.921514+00:00",
      "title": "xplm_device_G1000_PFD_1 | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xplm_device_G1000_PFD_1/"
    },
    "https://developer.x-plane.com/sdk/xplm_device_G1000_PFD_2/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/xplm_device_G1000_PFD_2/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem\"><table><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_device_G1000_PFD_2\"><a href=\"/sdk/xplm_device_G1000_PFD_2/\">xplm_device_G1000_PFD_2</a></td><td>\"8\"</td><td>G1000 Primary Flight Display, copilot side.</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |  |\n| --- | --- | --- |\n| [xplm_device_G1000_PFD_2](/sdk/xplm_device_G1000_PFD_2/) | \"8\" | G1000 Primary Flight Display, copilot side. |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.923513+00:00",
      "title": "xplm_device_G1000_PFD_2 | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xplm_device_G1000_PFD_2/"
    },
    "https://developer.x-plane.com/sdk/xplm_device_GNS430_1/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/xplm_device_GNS430_1/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem\"><table><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_device_GNS430_1\"><a href=\"/sdk/xplm_device_GNS430_1/\">xplm_device_GNS430_1</a></td><td>\"0\"</td><td>GNS430, pilot side.</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |  |\n| --- | --- | --- |\n| [xplm_device_GNS430_1](/sdk/xplm_device_GNS430_1/) | \"0\" | GNS430, pilot side. |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.928514+00:00",
      "title": "xplm_device_GNS430_1 | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xplm_device_GNS430_1/"
    },
    "https://developer.x-plane.com/sdk/xplm_device_GNS430_2/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/xplm_device_GNS430_2/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem\"><table><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_device_GNS430_2\"><a href=\"/sdk/xplm_device_GNS430_2/\">xplm_device_GNS430_2</a></td><td>\"1\"</td><td>GNS430, copilot side.</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |  |\n| --- | --- | --- |\n| [xplm_device_GNS430_2](/sdk/xplm_device_GNS430_2/) | \"1\" | GNS430, copilot side. |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.935513+00:00",
      "title": "xplm_device_GNS430_2 | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xplm_device_GNS430_2/"
    },
    "https://developer.x-plane.com/sdk/xplm_device_GNS530_1/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/xplm_device_GNS530_1/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem\"><table><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_device_GNS530_1\"><a href=\"/sdk/xplm_device_GNS530_1/\">xplm_device_GNS530_1</a></td><td>\"2\"</td><td>GNS530, pilot side.</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |  |\n| --- | --- | --- |\n| [xplm_device_GNS530_1](/sdk/xplm_device_GNS530_1/) | \"2\" | GNS530, pilot side. |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.933515+00:00",
      "title": "xplm_device_GNS530_1 | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xplm_device_GNS530_1/"
    },
    "https://developer.x-plane.com/sdk/xplm_device_GNS530_2/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/xplm_device_GNS530_2/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem\"><table><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_device_GNS530_2\"><a href=\"/sdk/xplm_device_GNS530_2/\">xplm_device_GNS530_2</a></td><td>\"3\"</td><td>GNS530, copilot side.</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |  |\n| --- | --- | --- |\n| [xplm_device_GNS530_2](/sdk/xplm_device_GNS530_2/) | \"3\" | GNS530, copilot side. |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.931516+00:00",
      "title": "xplm_device_GNS530_2 | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xplm_device_GNS530_2/"
    },
    "https://developer.x-plane.com/sdk/xplm_device_MCDU_1/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/xplm_device_MCDU_1/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem\"><table><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_device_MCDU_1\"><a href=\"/sdk/xplm_device_MCDU_1/\">xplm_device_MCDU_1</a></td><td>\"18\"</td><td>Airbus MCDU, pilot side.</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |  |\n| --- | --- | --- |\n| [xplm_device_MCDU_1](/sdk/xplm_device_MCDU_1/) | \"18\" | Airbus MCDU, pilot side. |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.929516+00:00",
      "title": "xplm_device_MCDU_1 | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xplm_device_MCDU_1/"
    },
    "https://developer.x-plane.com/sdk/xplm_device_MCDU_2/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/xplm_device_MCDU_2/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem\"><table><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_device_MCDU_2\"><a href=\"/sdk/xplm_device_MCDU_2/\">xplm_device_MCDU_2</a></td><td>\"19\"</td><td>Airbus MCDU, copilot side.</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |  |\n| --- | --- | --- |\n| [xplm_device_MCDU_2](/sdk/xplm_device_MCDU_2/) | \"19\" | Airbus MCDU, copilot side. |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.936576+00:00",
      "title": "xplm_device_MCDU_2 | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xplm_device_MCDU_2/"
    },
    "https://developer.x-plane.com/sdk/xplm_device_Primus_MFD_1/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/xplm_device_Primus_MFD_1/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem\"><table><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_device_Primus_MFD_1\"><a href=\"/sdk/xplm_device_Primus_MFD_1/\">xplm_device_Primus_MFD_1</a></td><td>\"13\"</td><td>Primus Multifunction Display, pilot side.</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |  |\n| --- | --- | --- |\n| [xplm_device_Primus_MFD_1](/sdk/xplm_device_Primus_MFD_1/) | \"13\" | Primus Multifunction Display, pilot side. |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.938611+00:00",
      "title": "xplm_device_Primus_MFD_1 | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xplm_device_Primus_MFD_1/"
    },
    "https://developer.x-plane.com/sdk/xplm_device_Primus_MFD_2/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/xplm_device_Primus_MFD_2/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem\"><table><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_device_Primus_MFD_2\"><a href=\"/sdk/xplm_device_Primus_MFD_2/\">xplm_device_Primus_MFD_2</a></td><td>\"14\"</td><td>Primus Multifunction Display, copilot side.</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |  |\n| --- | --- | --- |\n| [xplm_device_Primus_MFD_2](/sdk/xplm_device_Primus_MFD_2/) | \"14\" | Primus Multifunction Display, copilot side. |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.941611+00:00",
      "title": "xplm_device_Primus_MFD_2 | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xplm_device_Primus_MFD_2/"
    },
    "https://developer.x-plane.com/sdk/xplm_device_Primus_MFD_3/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/xplm_device_Primus_MFD_3/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem\"><table><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_device_Primus_MFD_3\"><a href=\"/sdk/xplm_device_Primus_MFD_3/\">xplm_device_Primus_MFD_3</a></td><td>\"15\"</td><td>Primus Multifunction Display, central.</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |  |\n| --- | --- | --- |\n| [xplm_device_Primus_MFD_3](/sdk/xplm_device_Primus_MFD_3/) | \"15\" | Primus Multifunction Display, central. |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.940611+00:00",
      "title": "xplm_device_Primus_MFD_3 | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xplm_device_Primus_MFD_3/"
    },
    "https://developer.x-plane.com/sdk/xplm_device_Primus_PFD_1/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/xplm_device_Primus_PFD_1/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem\"><table><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_device_Primus_PFD_1\"><a href=\"/sdk/xplm_device_Primus_PFD_1/\">xplm_device_Primus_PFD_1</a></td><td>\"11\"</td><td>Primus Primary Flight Display, pilot side.</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |  |\n| --- | --- | --- |\n| [xplm_device_Primus_PFD_1](/sdk/xplm_device_Primus_PFD_1/) | \"11\" | Primus Primary Flight Display, pilot side. |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.943612+00:00",
      "title": "xplm_device_Primus_PFD_1 | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xplm_device_Primus_PFD_1/"
    },
    "https://developer.x-plane.com/sdk/xplm_device_Primus_PFD_2/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/xplm_device_Primus_PFD_2/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem\"><table><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_device_Primus_PFD_2\"><a href=\"/sdk/xplm_device_Primus_PFD_2/\">xplm_device_Primus_PFD_2</a></td><td>\"12\"</td><td>Primus Primary Flight Display, copilot side.</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |  |\n| --- | --- | --- |\n| [xplm_device_Primus_PFD_2](/sdk/xplm_device_Primus_PFD_2/) | \"12\" | Primus Primary Flight Display, copilot side. |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.945611+00:00",
      "title": "xplm_device_Primus_PFD_2 | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xplm_device_Primus_PFD_2/"
    },
    "https://developer.x-plane.com/sdk/xplm_device_Primus_RMU_1/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/xplm_device_Primus_RMU_1/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem\"><table><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_device_Primus_RMU_1\"><a href=\"/sdk/xplm_device_Primus_RMU_1/\">xplm_device_Primus_RMU_1</a></td><td>\"16\"</td><td>Primus Radio Management Unit, pilot side.</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |  |\n| --- | --- | --- |\n| [xplm_device_Primus_RMU_1](/sdk/xplm_device_Primus_RMU_1/) | \"16\" | Primus Radio Management Unit, pilot side. |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.946674+00:00",
      "title": "xplm_device_Primus_RMU_1 | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xplm_device_Primus_RMU_1/"
    },
    "https://developer.x-plane.com/sdk/xplm_device_Primus_RMU_2/": {
      "api_signatures": [],
      "category": {
        "category": "Other_APIs",
        "module": "Other Apis",
        "url": "https://developer.x-plane.com/sdk/xplm_device_Primus_RMU_2/"
      },
      "cleaned_html": "<article class=\"page\"><div class=\"std_docs\"><div class=\"enumitem\"><table><tr class=\"enumitem\"><td class=\"sdk-api-enum-item\" id=\"xplm_device_Primus_RMU_2\"><a href=\"/sdk/xplm_device_Primus_RMU_2/\">xplm_device_Primus_RMU_2</a></td><td>\"17\"</td><td>Primus Radio Management Unit, copilot side.</td></tr></table></div></div></article>",
      "code_examples": [],
      "cross_references": [],
      "markdown": "| |  |\n| --- | --- | --- |\n| [xplm_device_Primus_RMU_2](/sdk/xplm_device_Primus_RMU_2/) | \"17\" | Primus Radio Management Unit, copilot side. |",
      "own_functions": [],
      "processing_timestamp": "2025-06-25T20:39:22.948675+00:00",
      "title": "xplm_device_Primus_RMU_2 | X-Plane Developer",
      "url": "https://developer.x-plane.com/sdk/xplm_device_Primus_RMU_2/"
    }
  }
}